<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/vsts/work/1/s/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/vsts/work/1/s/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/vsts/work/1/s/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
	</class>
	<class path="Array" params="T" file="/home/vsts/work/1/s/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" get="inline" set="null" line="42">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" get="inline" set="null" line="46">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" get="inline" set="null" line="50">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" get="inline" set="null" line="72">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<map public="1" params="S" get="inline" set="null" line="76">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="84">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="92">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<resize public="1" get="inline" set="null" line="96">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/home/vsts/work/1/s/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/vsts/work/1/s/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="DateTools" params="" file="/home/vsts/work/1/s/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="35" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="40" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="44" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="105" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="144" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="160" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="164" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="171" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="185" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="192" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="199" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="206" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="213" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="229" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<makeUtc public="1" get="inline" set="null" line="243" static="1">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</haxe_doc>
		</makeUtc>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="js.lib.RegExp" params="" file="/home/vsts/work/1/s/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="EReg" params="" file="/home/vsts/work/1/s/std/js/_std/EReg.hx">
		<escape public="1" get="inline" set="null" line="114" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<escapeRe expr="new js.lib.RegExp(&quot;[.*+?^${}()|[\\]\\\\]&quot;, &quot;g&quot;)" line="118" static="1">
			<c path="js.lib.RegExp"/>
			<meta><m n=":value"><e>new js.lib.RegExp("[.*+?^${}()|[\\]\\\\]", "g")</e></m></meta>
		</escapeRe>
		<r><c path="_EReg.HaxeRegExp"/></r>
		<match public="1" set="method" line="29">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="47">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="54">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="60">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="80">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" get="inline" set="null" line="86">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="90">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" get="inline" set="null" line="25">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/home/vsts/work/1/s/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/vsts/work/1/s/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/vsts/work/1/s/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/vsts/work/1/s/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":impl"/></meta>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class></impl>
	</abstract>
	<class path="_EnumValue.EnumValue_Impl_" params="" file="/home/vsts/work/1/s/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":impl"/></meta>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class>
	<class path="js.Syntax" params="" file="/home/vsts/work/1/s/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/home/vsts/work/1/s/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Date"</e></m>
		</meta>
	</class>
	<class path="IntIterator" params="" file="/home/vsts/work/1/s/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/home/vsts/work/1/s/std/Lambda.hx">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="57" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="haxe.ds.List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" get="inline" set="null" line="69" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="item">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="Array"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `it`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" get="inline" set="null" line="78" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a="index:item">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="Array"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" get="inline" set="null" line="87" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="Array"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of iterables.
		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" get="inline" set="null" line="96" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="item">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="Array"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="108" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="item">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="144" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="item">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="156" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="item">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="167" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="item">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a Array containing those elements of `it` for which `f` returned
		true.
		If `it` is empty, the result is the empty Array even if `f` is null.
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="183" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a="item:result">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<foldi public="1" params="A:B" set="method" line="194" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="foldi.A"/></t>
				<f a="item:result:index">
					<c path="foldi.A"/>
					<c path="foldi.B"/>
					<x path="Int"/>
					<c path="foldi.B"/>
				</f>
				<c path="foldi.B"/>
				<c path="foldi.B"/>
			</f>
			<haxe_doc>Similar to fold, but also passes the index of each element to `f`.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</foldi>
		<count public="1" params="A" set="method" line="209" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="item">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="224" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="235" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="255" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="item">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<findIndex public="1" params="T" set="method" line="273" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="findIndex.T"/></t>
				<f a="item">
					<c path="findIndex.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is -1.

		If `f` is null, the result is unspecified.</haxe_doc>
		</findIndex>
		<concat public="1" params="T" set="method" line="289" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new Array containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<typedef path="List" params="T" file="/home/vsts/work/1/s/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="/home/vsts/work/1/s/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/vsts/work/1/s/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/vsts/work/1/s/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NEGATIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></NEGATIVE_INFINITY>
		<get_NEGATIVE_INFINITY get="inline" set="null" line="31" static="1"><f a=""><x path="Float"/></f></get_NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></POSITIVE_INFINITY>
		<get_POSITIVE_INFINITY get="inline" set="null" line="36" static="1"><f a=""><x path="Float"/></f></get_POSITIVE_INFINITY>
		<NaN public="1" get="accessor" set="null" static="1"><x path="Float"/></NaN>
		<get_NaN get="inline" set="null" line="41" static="1"><f a=""><x path="Float"/></f></get_NaN>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<exp public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></exp>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<log public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<ffloor public="1" get="inline" set="null" line="64" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="68" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="72" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" get="inline" set="null" line="76" static="1"><f a="f">
	<x path="Float"/>
	<x path="Bool"/>
</f></isFinite>
		<isNaN public="1" get="inline" set="null" line="80" static="1"><f a="f">
	<x path="Float"/>
	<x path="Bool"/>
</f></isNaN>
		<meta><m n=":keepInit"/></meta>
	</class>
	<class path="Reflect" params="" file="/home/vsts/work/1/s/std/js/_std/Reflect.hx">
		<hasField public="1" get="inline" set="null" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="36" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="40" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="56" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="60" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="74" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>js.Boot</e></m></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="78" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="82" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="91" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>js.Boot</e></m></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="99" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="103" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="110" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="120" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="String" params="" file="/home/vsts/work/1/s/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/home/vsts/work/1/s/std/js/_std/Std.hx">
		<is public="1" get="inline" set="null" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" get="inline" set="null" line="32" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" get="inline" set="null" line="36" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" get="inline" set="null" line="41" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" line="46" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="50" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="55" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" get="inline" set="null" line="69" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="73" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringBuf" params="" file="/home/vsts/work/1/s/std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="48"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="61">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="71">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="87">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="96">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.SysTools" params="" file="/home/vsts/work/1/s/std/haxe/SysTools.hx">
		<winMetaCharacters final="1" public="1" set="null" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="9" static="1">
			<x path="haxe.ds.ReadOnlyArray"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteUnixArg public="1" set="method" line="18" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<quoteWinArg public="1" set="method" line="46" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
	</class>
	<class path="StringTools" params="" file="/home/vsts/work/1/s/std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="42" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="110" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="158" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="193" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<contains public="1" get="inline" set="null" line="211" static="1">
			<f a="s:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` contains `value` and  `false` otherwise.

		When `value` is `null`, the result is unspecified.</haxe_doc>
		</contains>
		<startsWith public="1" set="method" line="222" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="252" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="279" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="297" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="322" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="344" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="366" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="391" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="413" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="435" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="477" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<iterator public="1" get="inline" set="null" line="512" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="523" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<isEof public="1" get="inline" set="null" line="530" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Tells if `c` represents the end-of-file (EOF) character.</haxe_doc>
		</isEof>
		<quoteUnixArg public="1" set="method" line="551" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="cast haxe.SysTools.winMetaCharacters" line="560" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta>
				<m n=":value"><e>cast haxe.SysTools.winMetaCharacters</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead."</e></m>
			</meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="577" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<MIN_SURROGATE_CODE_POINT get="inline" set="null" expr="65536" line="592" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65536</e></m></meta>
		</MIN_SURROGATE_CODE_POINT>
		<utf16CodePointAt get="inline" set="null" line="594" static="1"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></utf16CodePointAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/home/vsts/work/1/s/std/js/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/home/vsts/work/1/s/std/js/_std/Type.hx">
		<getClass public="1" params="T" get="inline" set="null" line="35" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="39" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" get="inline" set="null" line="50" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" get="inline" set="null" line="54" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" get="inline" set="null" line="58" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" get="inline" set="null" line="81" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="85" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="136" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" get="inline" set="null" line="141" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="146" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="160" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="202" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="210" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" get="inline" set="null" line="222" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="227" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":access"><e>js.Boot</e></m>
			</meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="264" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="296" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="309" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="318" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" get="inline" set="null" line="326" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="/home/vsts/work/1/s/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/vsts/work/1/s/std/UInt.hx" private="1" module="UInt" final="1">
	<add get="inline" set="null" line="134" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="138" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="142" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="146" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt set="method" line="151" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte set="method" line="158" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="216" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="220" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="224" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="228" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="232" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="236" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="240" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="244" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="248" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="252" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="256" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="264" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="268" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="272" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="276" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="280" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="284" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="288" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="292" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="296" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="301" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="305" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat set="method" line="309" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/vsts/work/1/s/std/UInt.hx" private="1" module="UInt" final="1">
		<add get="inline" set="null" line="134" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="142" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="146" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt set="method" line="151" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte set="method" line="158" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="216" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="220" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="224" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="228" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="232" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="236" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="240" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="244" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="248" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="252" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="256" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="264" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="268" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="272" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="276" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="280" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="284" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="288" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="292" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="296" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="301" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="305" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat set="method" line="309" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
	</class>
	<abstract path="UnicodeString" params="" file="/home/vsts/work/1/s/std/UnicodeString.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>This abstract provides consistent cross-target unicode support.

	@see https://haxe.org/manual/std-UnicodeString.html</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":access"><e>StringTools</e></m>
		</meta>
		<impl><class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/vsts/work/1/s/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
	<validate public="1" set="method" line="39" static="1">
		<f a="b:encoding">
			<c path="haxe.io.Bytes"/>
			<e path="haxe.io.Encoding"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
	</validate>
	<_new public="1" get="inline" set="null" line="114" static="1">
		<f a="string">
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="121" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringIteratorUnicode"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="128" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
	</keyValueIterator>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The number of characters in `this` String.</haxe_doc>
	</length>
	<charAt public="1" set="method" line="144" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" set="method" line="167" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" set="method" line="200" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" set="method" line="256" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<substr public="1" set="method" line="315" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" set="method" line="370" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
	</substring>
	<get_length set="method" line="415" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta><m n=":access"><e>StringTools</e></m></meta>
</class></impl>
	</abstract>
	<class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/vsts/work/1/s/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
		<validate public="1" set="method" line="39" static="1">
			<f a="b:encoding">
				<c path="haxe.io.Bytes"/>
				<e path="haxe.io.Encoding"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
		</validate>
		<_new public="1" get="inline" set="null" line="114" static="1">
			<f a="string">
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="121" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="128" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
		</keyValueIterator>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="144" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="167" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="200" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="256" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<substr public="1" set="method" line="315" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="370" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<get_length set="method" line="415" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta><m n=":access"><e>StringTools</e></m></meta>
	</class>
	<abstract path="XmlType" params="" file="/home/vsts/work/1/s/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/vsts/work/1/s/std/Xml.hx" private="1" module="Xml" final="1">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<toString public="1" set="method" line="64" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/vsts/work/1/s/std/Xml.hx" private="1" module="Xml" final="1">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<toString public="1" set="method" line="64" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="Xml" params="" file="/home/vsts/work/1/s/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get_nodeName get="inline" set="null" line="151"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="158"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="165"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="172"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="266">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="307">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="317">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="329">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="381">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="403"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/vsts/work/1/s/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<abstract path="haxe.CallStack" params="" file="/home/vsts/work/1/s/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of this stack.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="46" static="1">
		<f a="this">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<callStack public="1" set="method" line="51" static="1">
		<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
		<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
	</callStack>
	<exceptionStack public="1" set="method" line="62" static="1">
		<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
		<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
	</exceptionStack>
	<toString public="1" set="method" line="70" static="1">
		<f a="stack">
			<x path="haxe.CallStack"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
	</toString>
	<subtract public="1" set="method" line="83" static="1">
		<f a="this:stack">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
			<x path="haxe.CallStack"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
	</subtract>
	<copy public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Make a copy of the stack.</haxe_doc>
	</copy>
	<get public="1" get="inline" set="null" line="110" static="1">
		<f a="this:index">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="Int"/>
			<e path="haxe.StackItem"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<asArray get="inline" set="null" line="114" static="1">
		<f a="this">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<c path="Array"><e path="haxe.StackItem"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</asArray>
	<equalItems set="method" line="118" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
	<exceptionToString set="method" line="134" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
	<itemToString set="method" line="154" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
	<meta>
		<m n=":using"><e>haxe.CallStack</e></m>
		<m n=":allow"><e>haxe.Exception</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The length of this stack.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="46" static="1">
			<f a="this">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<callStack public="1" set="method" line="51" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="62" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="70" static="1">
			<f a="stack">
				<x path="haxe.CallStack"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<subtract public="1" set="method" line="83" static="1">
			<f a="this:stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
				<x path="haxe.CallStack"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
		</subtract>
		<copy public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Make a copy of the stack.</haxe_doc>
		</copy>
		<get public="1" get="inline" set="null" line="110" static="1">
			<f a="this:index">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="Int"/>
				<e path="haxe.StackItem"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<asArray get="inline" set="null" line="114" static="1">
			<f a="this">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</asArray>
		<equalItems set="method" line="118" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
		<exceptionToString set="method" line="134" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
		<itemToString set="method" line="154" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<meta>
			<m n=":using"><e>haxe.CallStack</e></m>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.FlatEnum" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.NotVoid" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.Constructible" params="T" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<class path="haxe.IMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/vsts/work/1/s/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="51" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="69" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="83" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="93" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<copy public="1" get="inline" set="null" line="105" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="113" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="51" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="69" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="83" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="93" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<copy public="1" get="inline" set="null" line="105" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="113" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/vsts/work/1/s/std/haxe/EntryPoint.hx">
		<pending expr="new Array&lt;Void&gt;()" line="40" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="46" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping `run()`</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="52" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="63" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="85" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="108" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If `haxe.MainLoop` is kept from DCE, then we will insert an `haxe.EntryPoint.run()` call just at then end of `main()`.
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/vsts/work/1/s/std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise
	`Type.enumIndex()` reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<has public="1" get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="63" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="75" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</unset>
	<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/vsts/work/1/s/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/vsts/work/1/s/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="28" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__skipStack>
		<__exceptionStack get="accessor" set="accessor">
			<x path="Null"><x path="haxe.CallStack"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="70"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="74">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method" line="78">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<__shiftStack get="inline" set="null" line="84">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__shiftStack>
		<get_message set="method" line="88"><f a=""><c path="String"/></f></get_message>
		<get_previous set="method" line="92"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<get_native final="1" set="method" line="96"><f a=""><x path="Any"/></f></get_native>
		<get_stack set="method" line="100"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<setProperty set="method" line="109">
			<f a="name:value">
				<c path="String"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</setProperty>
		<get___exceptionStack get="inline" set="null" line="118">
			<f a=""><x path="haxe.CallStack"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get___exceptionStack>
		<set___exceptionStack get="inline" set="null" line="123">
			<f a="value">
				<x path="haxe.CallStack"/>
				<x path="haxe.CallStack"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set___exceptionStack>
		<get___skipStack get="inline" set="null" line="129">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get___skipStack>
		<set___skipStack get="inline" set="null" line="134">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set___skipStack>
		<get___nativeException get="inline" set="null" line="140">
			<f a=""><x path="Any"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get___nativeException>
		<set___nativeException get="inline" set="null" line="145">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set___nativeException>
		<get___previousException get="inline" set="null" line="151">
			<f a=""><x path="Null"><c path="haxe.Exception"/></x></f>
			<meta><m n=":noCompletion"/></meta>
		</get___previousException>
		<set___previousException get="inline" set="null" line="156">
			<f a="value">
				<x path="Null"><c path="haxe.Exception"/></x>
				<x path="Null"><c path="haxe.Exception"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set___previousException>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.Http" params="" file="/home/vsts/work/1/s/std/haxe/Http.hx"><c path="haxe.http.HttpJs"/></typedef>
	<abstract path="haxe.Int32" params="" file="/home/vsts/work/1/s/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
	<negate get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</negate>
	<preIncrement get="inline" set="null" line="33" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="36" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="42" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="45" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="51" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="54" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="59" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="62" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="65" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul get="inline" set="null" line="77" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<_mul expr="untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) &amp; 0xFFFF) + clamp(((a : Int)) * (((b : Int)) &gt;&gt;&gt; 16) &lt;&lt; 16))" line="80" static="1">
		<f a=":">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e><![CDATA[untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) & 0xFFFF) + clamp(((a : Int)) * (((b : Int)) >>> 16) << 16))]]></e></m>
		</meta>
	</_mul>
	<mulInt get="inline" set="null" line="89" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<toFloat get="inline" set="null" line="247" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="253" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="264" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
		<negate get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</negate>
		<preIncrement get="inline" set="null" line="33" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="36" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="42" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="45" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="51" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="54" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="59" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="62" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="65" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul get="inline" set="null" line="77" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<_mul expr="untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) &amp; 0xFFFF) + clamp(((a : Int)) * (((b : Int)) &gt;&gt;&gt; 16) &lt;&lt; 16))" line="80" static="1">
			<f a=":">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e><![CDATA[untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) & 0xFFFF) + clamp(((a : Int)) * (((b : Int)) >>> 16) << 16))]]></e></m>
			</meta>
		</_mul>
		<mulInt get="inline" set="null" line="89" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<toFloat get="inline" set="null" line="247" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="253" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="264" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<abstract path="haxe.Int64" params="" file="/home/vsts/work/1/s/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
	<_new get="inline" set="null" line="35" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<copy public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="47" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="54" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="61" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="69" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
	</is>
	<isInt64 public="1" get="inline" set="null" line="76" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</isInt64>
	<getHigh public="1" get="inline" set="null" line="83" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="90" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="96" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="102" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="110" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="121" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="129" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="132" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" get="inline" set="null" line="158" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" get="inline" set="null" line="162" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="170" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="220" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="228" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="236" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="242" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="250" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="259" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="267" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="281" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="284" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="291" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="313" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="319" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="322" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="325" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="331" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="334" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="337" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="343" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="346" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="352" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="355" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="358" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="361" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="364" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="367" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="370" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="373" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="376" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="379" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="382" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="385" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="388" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="391" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="397" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="403" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="409" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="415" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="421" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="430" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="439" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high get="inline" set="null" line="446" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<set_high get="inline" set="null" line="449" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low get="inline" set="null" line="454" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<set_low get="inline" set="null" line="457" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_low>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
		<_new get="inline" set="null" line="35" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<copy public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="47" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="61" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="69" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
		</is>
		<isInt64 public="1" get="inline" set="null" line="76" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</isInt64>
		<getHigh public="1" get="inline" set="null" line="83" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="90" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="96" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="102" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="110" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="121" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="129" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="132" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" get="inline" set="null" line="158" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" get="inline" set="null" line="162" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="170" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="220" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="228" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="236" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="242" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="250" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="259" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="267" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="281" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="284" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="291" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="313" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="319" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="322" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="325" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="331" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="334" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="337" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="343" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="346" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="352" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="355" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="358" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="361" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="364" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="367" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="370" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="373" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="376" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="379" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="382" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="385" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="388" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="391" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="397" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="403" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="409" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="415" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="421" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="430" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="439" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high get="inline" set="null" line="446" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<set_high get="inline" set="null" line="449" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low get="inline" set="null" line="454" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<set_low get="inline" set="null" line="457" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_low>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/vsts/work/1/s/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/home/vsts/work/1/s/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="482">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling `Std.string`. This tends not to happen when
		`toString` is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="472"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/vsts/work/1/s/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="36" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="79" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Json" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="/home/vsts/work/1/s/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/vsts/work/1/s/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="28">
			<f a="t">
				<x path="Null"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing if the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="18"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/vsts/work/1/s/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="63" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" set="method" line="66" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="76" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="80" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="87" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="99" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="164" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>haxe.MainEvent</e></m>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<class path="haxe.NativeStackTrace" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/NativeStackTrace.hx">
		<lastError static="1"><c path="js.lib.Error"/></lastError>
		<wrapCallSite public="1" static="1">
			<f a="">
				<t path="haxe.V8CallSite"/>
				<t path="haxe.V8CallSite"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</wrapCallSite>
		<saveStack public="1" get="inline" set="null" line="34" static="1">
			<f a="e">
				<c path="js.lib.Error"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="38" static="1"><f a=""><x path="Any"/></f></callStack>
		<exceptionStack public="1" set="method" line="49" static="1"><f a=""><x path="Any"/></f></exceptionStack>
		<toHaxe public="1" set="method" line="53" static="1">
			<f a="s:?skip" v=":0">
				<x path="Null"><x path="Any"/></x>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<tryHaxeStack set="method" line="89" static="1"><f a="e">
	<x path="Null"><c path="js.lib.Error"/></x>
	<x path="Any"/>
</f></tryHaxeStack>
		<prepareHxStackTrace set="method" line="101" static="1"><f a="e:callsites">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareHxStackTrace>
		<normalize set="method" line="127" static="1">
			<f a="stack:?skipItems" v=":0">
				<x path="Any"/>
				<x path="Int"/>
				<x path="Any"/>
			</f>
			<meta><m n=":value"><e>{ skipItems : 0 }</e></m></meta>
		</normalize>
		<skipLines set="method" line="142" static="1">
			<f a="stack:skip:?pos" v="::0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</skipLines>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/vsts/work/1/s/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/home/vsts/work/1/s/std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a>
	<str><c path="String"/></str>
	<name><c path="String"/></name>
	<data><c path="String"/></data>
</a></c></content>
		<listNames public="1" set="method" line="41" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the `--resource file@name` command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="50" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a `String`.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="67" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	`--resource file@name` command line parameter.

	Depending on their type they can be obtained as `String` through
	`getString(name)`, or as binary data through `getBytes(name)`.

	A list of all available resource names can be obtained from `listNames()`.</haxe_doc>
	</class>
	<class path="haxe.Serializer" params="" file="/home/vsts/work/1/s/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of `Serializer` by
		setting their `useCache` field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="69" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of `Serializer` by
		setting their `useEnumIndex` field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="71" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="72" static="1">
			<x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="582" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

	This is a convenience function for creating a new instance of
	Serializer, serialize `v` into it and obtain the result through a call
	to `toString()`.</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See `USE_CACHE` for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See `USE_ENUM_INDEX` for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="118">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="174"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="211"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="229">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

	All haxe-defined values and objects with the exception of functions can
	be serialized. Serialization of external/native objects is not
	guaranteed to work.

	The values of `this.useCache` and `this.useEnumIndex` may affect
	serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="556"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></__getField>
		<serializeException public="1" set="method" line="559"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each `Serializer` instance maintains its own cache if `this.useCache` is
		`true`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/vsts/work/1/s/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="51">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.Template" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="60" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="61" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="62" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="68" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all `Template` instances. This
		has lower priority than the context argument of `execute()`.</haxe_doc>
		</globals>
		<hxKeepArrayIterator expr="[].iterator()" line="71" static="1">
			<c path="haxe.iterators.ArrayIterator"><unknown/></c>
			<meta>
				<m n=":value"><e>[].iterator()</e></m>
				<m n=":ifFeature"><e>"haxe.Template.run"</e></m>
			</meta>
		</hxKeepArrayIterator>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="haxe.ds.List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="112">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` `Template`, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field `name`, its value replaces all occurrences of
		`::name::` in the `Template`. Otherwise `Template.globals` is checked instead,
		If `name` is not a field of that either, `::name::` is replaced with `null`.

		If `macros` has a field `name`, all occurrences of `$$name(args)` are
		replaced with the result of calling that field. The first argument is
		always the `resolve()` method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is `null`, the result is unspecified. If `macros` is `null`,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="121"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="135"><f a="data">
	<c path="String"/>
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="182"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="197"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="263"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="302"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="327"><f a="e:l">
	<f a=""><d/></f>
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="343"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<skipSpaces set="method" line="347"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<x path="Void"/>
</f></skipSpaces>
		<makeExpr2 set="method" line="360"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="439"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="89">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Template` instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple `execute()` operations on a single `Template` instance
		are more efficient than one `execute()` operations on multiple `Template`
		instances.

		If `str` is `null`, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`Template` provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/home/vsts/work/1/s/std/haxe/Timer.hx">
		<delay public="1" set="method" line="139" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its `run()` method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="159" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		`Timer.stamp()` before and after the invocation of `f`.

		The difference is passed as argument to `Log.trace()`, with `"s"` appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="172" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<id><x path="Null"><x path="Int"/></x></id>
		<stop public="1" set="method" line="90">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="128">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:

		```haxe
		var timer = new haxe.Timer(1000); // 1000ms delay
		timer.run = function() { ... }
		```

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="60">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The `Timer` class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the `Timer` class with a given
	interval, set its `run()` method to a custom function to be invoked and
	eventually call `stop()` to stop the `Timer`.

	Note that a running `Timer` may or may not prevent the program to exit
	automatically when `main()` returns.

	It is also possible to extend this class and override its `run()` method in
	the child class.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/vsts/work/1/s/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/vsts/work/1/s/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="476"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="479"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="474"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/vsts/work/1/s/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="65" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="67" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="70" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="72" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="464" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is `null`, a special resolver is used which returns `null` for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="136">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="140"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="144"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="169"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="184"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="199"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="231">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/vsts/work/1/s/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="494" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="486"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="489"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new set="method" line="484"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Utf8" params="" file="/home/vsts/work/1/s/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="57" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="65" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="80" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="104" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="111" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="43">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="50">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="36">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
		<meta><m n=":deprecated"><e>"haxe.Utf8 is deprecated. Use UnicodeString instead."</e></m></meta>
	</class>
	<class path="haxe.ValueException" params="" file="/home/vsts/work/1/s/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Bytes.hx">
		<alloc public="1" get="inline" set="null" line="202" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="206" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="243" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<ofHex public="1" set="method" line="250" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Converts the given hexadecimal `String` to `Bytes`. `s` must be a string of
		even length consisting only of hexadecimal digits. For example:
		`"0FDA14058916052309"`.</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="268" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Reads the `pos`-th byte of the given `b` bytes, in the most efficient way
		possible. Behavior when reading outside of the available data is
		unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.lib.Uint8Array"/></b>
		<data><c path="js.lib.DataView"/></data>
		<get public="1" get="inline" set="null" line="42">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the byte at index `pos`.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="46">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given byte `v` at the given position `pos`.</haxe_doc>
		</set>
		<blit public="1" set="method" line="50">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<fill public="1" set="method" line="59">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `len` consecutive bytes starting from index `pos` of `this` instance
		to `value`.</haxe_doc>
		</fill>
		<sub public="1" set="method" line="64">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance that contains a copy of `len` bytes of
		`this` instance, starting at index `pos`.</haxe_doc>
		</sub>
		<compare public="1" set="method" line="70">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns `0` if the bytes of `this` instance and the bytes of `other` are
		identical.

		Returns a negative value if the `length` of `this` instance is less than
		the `length` of `other`, or a positive value if the `length` of `this`
		instance is greater than the `length` of `other`.

		In case of equal `length`s, returns a negative value if the first different
		value in `other` is greater than the corresponding value in `this`
		instance; otherwise returns a positive value.</haxe_doc>
		</compare>
		<initData get="inline" set="null" line="80"><f a=""><x path="Void"/></f></initData>
		<getDouble public="1" set="method" line="85">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="90">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="95">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE double-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="100">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" set="method" line="105">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16-bit unsigned integer at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" set="method" line="110">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 16-bit unsigned integer `v` at the given position `pos`
		(in little-endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" set="method" line="115">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt32>
		<setInt32 public="1" set="method" line="120">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 32-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt32>
		<getInt64 public="1" set="method" line="125">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt64>
		<setInt64 public="1" set="method" line="129">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 64-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="134">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<readString public="1" get="inline" set="null" line="176">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="180">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="184">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a hexadecimal `String` representation of the bytes of `this`
		instance.</haxe_doc>
		</toHex>
		<getData public="1" get="inline" set="null" line="198">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the bytes of `this` instance as `BytesData`.</haxe_doc>
		</getData>
		<new set="method" line="32">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/home/vsts/work/1/s/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="js.lib.ArrayBufferView" params="" file="/home/vsts/work/1/s/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/home/vsts/work/1/s/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<URL_CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;" line="32" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</e></m></meta>
		</URL_CHARS>
		<URL_BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(URL_CHARS)" line="33" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(URL_CHARS)</e></m></meta>
		</URL_BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<urlEncode public="1" set="method" line="55" static="1">
			<f a="bytes:?complement" v=":false">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="str:?complement" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlDecode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/vsts/work/1/s/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="128" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="133" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="112"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="59" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" get="inline" set="null" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" get="inline" set="null" line="42"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" get="inline" set="null" line="52"><f a=""><x path="Int"/></f></get>
		<new public="1" get="inline" set="null" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="90" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="120" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="57"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="63"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="69"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="75"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="81"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="154"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="158"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="162"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="166"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="170"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="174"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="178"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="55"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="115" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="135">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="142">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="155">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="165"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="126" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd get="inline" set="null" line="142" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="50"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR get="inline" set="null" line="149"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch get="inline" set="null" line="159"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="164"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 get="inline" set="null" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 get="inline" set="null" line="172"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 get="inline" set="null" line="176"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 get="inline" set="null" line="180"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="184"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="113" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="133" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S get="inline" set="null" line="150"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch get="inline" set="null" line="158"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="162"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 get="inline" set="null" line="166"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 get="inline" set="null" line="170"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 get="inline" set="null" line="174"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 get="inline" set="null" line="178"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd get="inline" set="null" line="182"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="188"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<class path="haxe.display.DisplayMethods" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<Completion public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionParams,CompletionResult&gt;(&quot;display/completion&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionParams"/>
				<t path="haxe.display.CompletionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionParams,CompletionResult>("display/completion")]]></e></m></meta>
			<haxe_doc>The completion request is sent from the client to Haxe to request code completion.
		Haxe automatically determines the type of completion to use based on the passed position, see `CompletionResultKind`.</haxe_doc>
		</Completion>
		<CompletionItemResolve public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionItemResolveParams,CompletionItemResolveResult&gt;(&quot;display/completionItem/resolve&quot;)" line="44" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionItemResolveParams"/>
				<t path="haxe.display.CompletionItemResolveResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionItemResolveParams,CompletionItemResolveResult>("display/completionItem/resolve")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to resolve additional information for a given completion item.</haxe_doc>
		</CompletionItemResolve>
		<FindReferences public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FindReferencesParams,GotoDefinitionResult&gt;(&quot;display/references&quot;)" line="49" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FindReferencesParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FindReferencesParams,GotoDefinitionResult>("display/references")]]></e></m></meta>
			<haxe_doc>The find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position.</haxe_doc>
		</FindReferences>
		<GotoDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/definition&quot;)" line="54" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/definition")]]></e></m></meta>
			<haxe_doc>The goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoDefinition>
		<GotoImplementation public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/implementation&quot;)" line="59" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/implementation")]]></e></m></meta>
			<haxe_doc>The goto implementation request is sent from the client to Haxe to resolve the implementation location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoImplementation>
		<GotoTypeDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoTypeDefinitionResult&gt;(&quot;display/typeDefinition&quot;)" line="64" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoTypeDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoTypeDefinitionResult>("display/typeDefinition")]]></e></m></meta>
			<haxe_doc>The goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoTypeDefinition>
		<Hover public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,HoverResult&gt;(&quot;display/hover&quot;)" line="69" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.HoverResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,HoverResult>("display/hover")]]></e></m></meta>
			<haxe_doc>The hover request is sent from the client to Haxe to request hover information at a given text document position.</haxe_doc>
		</Hover>
		<DeterminePackage public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,DeterminePackageResult&gt;(&quot;display/package&quot;)" line="74" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.DeterminePackageResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,DeterminePackageResult>("display/package")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration.</haxe_doc>
		</DeterminePackage>
		<SignatureHelp public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;SignatureHelpParams,SignatureHelpResult&gt;(&quot;display/signatureHelp&quot;)" line="79" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.SignatureHelpParams"/>
				<t path="haxe.display.SignatureHelpResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<SignatureHelpParams,SignatureHelpResult>("display/signatureHelp")]]></e></m></meta>
			<haxe_doc>The signature help request is sent from the client to Haxe to request signature information at a given cursor position.</haxe_doc>
		</SignatureHelp>
		<haxe_doc>Methods of the JSON-RPC-based `--display` protocol in Haxe 4.
	A lot of the methods are *inspired* by the Language Server Protocol, but there is **no** intention to be directly compatible with it.</haxe_doc>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.CompletionParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<meta>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>list of metas to include in responses</haxe_doc>
			</meta>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>Completion</haxe_doc>
	</typedef>
	<typedef path="haxe.display.FieldResolution" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<qualifier>
		<c path="String"/>
		<haxe_doc>The qualifier that has to be inserted to use the field if `!isQualified`.
		Can either be `this` or `super` for instance fields for the type name for `static` fields.</haxe_doc>
	</qualifier>
	<isQualified>
		<x path="Bool"/>
		<haxe_doc>Whether it's valid to use the unqualified name of the field or not.
		This is `false` if the identifier is shadowed.</haxe_doc>
	</isQualified>
</a></typedef>
	<typedef path="haxe.display.DisplayLocal" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type><t path="haxe.display.JsonType"><c path="haxe.display.DisplayLocal.T"/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<origin><x path="haxe.display.LocalOrigin"/></origin>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<isInline><x path="Bool"/></isInline>
	<isFinal><x path="Bool"/></isFinal>
	<id><x path="Int"/></id>
	<extra>
		<x path="Null"><a>
	<params><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></params>
	<expr><t path="haxe.display.JsonExpr"/></expr>
</a></x>
		<meta><m n=":optional"/></meta>
	</extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<abstract path="haxe.display.LocalOrigin" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LocalVariable>
	<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Argument>
	<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ForVariable>
	<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PatternVariable>
	<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CatchVariable>
	<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LocalFunction>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LocalVariable>
		<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Argument>
		<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ForVariable>
		<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PatternVariable>
		<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CatchVariable>
		<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LocalFunction>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.ClassFieldOriginKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
	</StaticImport>
	<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
	</Parent>
	<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
	</StaticExtension>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
	</AnonymousStructure>
	<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
	</BuiltIn>
	<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The origin of this class field is unknown.</haxe_doc>
	</Unknown>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
		</StaticImport>
		<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
		</Parent>
		<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
		</StaticExtension>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
		</AnonymousStructure>
		<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
		</BuiltIn>
		<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The origin of this class field is unknown.</haxe_doc>
		</Unknown>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.ClassFieldOrigin" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.ClassFieldOriginKind"><c path="haxe.display.ClassFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.ClassFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.ClassFieldOccurrence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.ClassFieldOrigin"><c path="haxe.display.ClassFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<abstract path="haxe.display.EnumFieldOriginKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
	</StaticImport>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
		</StaticImport>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.EnumFieldOrigin" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.EnumFieldOriginKind"><c path="haxe.display.EnumFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.EnumFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.EnumFieldOccurrence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.EnumFieldOrigin"><c path="haxe.display.EnumFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonEnumField"/></field>
</a></typedef>
	<abstract path="haxe.display.Literal" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Literal_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="217" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "null"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Null>
	<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="218" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "true"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</True>
	<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="219" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "false"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</False>
	<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="220" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "this"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</This>
	<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="221" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "trace"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Trace>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Literal_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="217" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "null"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Null>
		<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="218" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "true"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</True>
		<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="219" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "false"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</False>
		<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="220" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "this"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</This>
		<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="221" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "trace"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Trace>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.DisplayModuleTypeKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EnumAbstract>
	<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
	</TypeAlias>
	<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
	</Struct>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EnumAbstract>
		<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
		</TypeAlias>
		<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
		</Struct>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayModuleType" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><c path="Array"><t path="haxe.display.DisplayModuleTypeParameter"/></c></params>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.DisplayModuleTypeKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.DisplayModuleTypeParameter" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<constraints><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></constraints>
</a></typedef>
	<typedef path="haxe.display.DisplayLiteral" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><c path="String"/></name></a></typedef>
	<abstract path="haxe.display.MetadataTarget" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="264" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="265" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClassField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ClassField>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="266" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="267" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstractField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AbstractField>
	<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="268" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="269" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypedef"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Typedef>
	<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="270" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAnyField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AnyField>
	<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="271" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TExpr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Expr>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="272" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypeParameter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeParameter>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="264" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="265" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClassField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ClassField>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="266" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="267" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstractField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AbstractField>
		<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="268" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="269" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypedef"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Typedef>
		<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="270" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAnyField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AnyField>
		<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="271" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TExpr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Expr>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="272" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypeParameter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeParameter>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.Platform" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Platform_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="276" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cross"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cross>
	<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="277" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "js"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Js>
	<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="278" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "lua"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Lua>
	<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="279" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "neko"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Neko>
	<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="280" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "flash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Flash>
	<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="281" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "php"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Php>
	<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="282" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cpp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cpp>
	<Cs public="1" get="inline" set="null" expr="cast &quot;cs&quot;" line="283" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cs"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cs>
	<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="284" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "java"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Java>
	<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="285" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "python"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Python>
	<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="286" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "hl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hl>
	<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="287" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "eval"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Eval>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Platform_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="276" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cross"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cross>
		<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="277" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "js"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Js>
		<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="278" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "lua"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Lua>
		<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="279" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "neko"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Neko>
		<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="280" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "flash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Flash>
		<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="281" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "php"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Php>
		<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="282" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cpp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cpp>
		<Cs public="1" get="inline" set="null" expr="cast &quot;cs&quot;" line="283" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cs"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cs>
		<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="284" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "java"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Java>
		<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="285" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "python"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Python>
		<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="286" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "hl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hl>
		<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="287" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "eval"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Eval>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Metadata" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<name><c path="String"/></name>
	<links>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</links>
	<internal><x path="Bool"/></internal>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Define" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<value><x path="Null"><c path="String"/></x></value>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<name><c path="String"/></name>
	<links><c path="Array"><c path="String"/></c></links>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Keyword" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><x path="haxe.display.KeywordKind"/></name></a></typedef>
	<abstract path="haxe.display.KeywordKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="314" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "implements"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Implements>
	<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="315" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extends"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Extends>
	<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="316" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "function"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Function>
	<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="317" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "var"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Var>
	<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="318" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "if"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</If>
	<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="319" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "else"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Else>
	<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="320" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "while"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</While>
	<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="321" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "do"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Do>
	<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="322" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "for"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</For>
	<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="323" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "break"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Break>
	<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="324" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "return"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Return>
	<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="325" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "continue"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Continue>
	<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="326" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "switch"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Switch>
	<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="327" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "case"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Case>
	<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="328" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Default>
	<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="329" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "try"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Try>
	<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="330" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "catch"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Catch>
	<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="331" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</New>
	<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="332" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "throw"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Throw>
	<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="333" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "untyped"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Untyped>
	<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="334" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "cast"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cast>
	<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="335" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "macro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Macro>
	<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="336" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "package"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Package>
	<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="337" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "import"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="338" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "using"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Using>
	<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="339" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "public"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Public>
	<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="340" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "private"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Private>
	<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="341" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "static"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Static>
	<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="342" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extern"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Extern>
	<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="343" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "dynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Dynamic>
	<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="344" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "override"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Override>
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="345" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="346" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "interface"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="347" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="348" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="349" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Typedef>
	<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="350" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "final"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Final>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="351" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="314" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "implements"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Implements>
		<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="315" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extends"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Extends>
		<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="316" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "function"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Function>
		<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="317" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "var"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Var>
		<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="318" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "if"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</If>
		<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="319" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "else"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Else>
		<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="320" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "while"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</While>
		<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="321" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "do"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Do>
		<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="322" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "for"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</For>
		<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="323" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "break"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Break>
		<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="324" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "return"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Return>
		<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="325" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "continue"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Continue>
		<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="326" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "switch"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Switch>
		<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="327" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "case"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Case>
		<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="328" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Default>
		<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="329" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "try"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Try>
		<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="330" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "catch"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Catch>
		<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="331" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</New>
		<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="332" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "throw"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Throw>
		<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="333" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "untyped"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Untyped>
		<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="334" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "cast"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cast>
		<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="335" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "macro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Macro>
		<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="336" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "package"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Package>
		<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="337" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "import"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="338" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "using"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Using>
		<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="339" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "public"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Public>
		<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="340" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "private"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Private>
		<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="341" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "static"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Static>
		<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="342" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extern"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Extern>
		<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="343" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "dynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Dynamic>
		<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="344" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "override"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Override>
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="345" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="346" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "interface"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="347" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="348" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="349" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Typedef>
		<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="350" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "final"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Final>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="351" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Package" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonPackagePath"/></path></a></typedef>
	<typedef path="haxe.display.Module" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonModulePath"/></path></a></typedef>
	<abstract path="haxe.display.DisplayItemKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Local"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Local>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "ClassField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ClassField>
	<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EnumField>
	<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumAbstractField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
	</EnumAbstractField>
	<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
		<meta>
			<m n=":value"><e>cast "Type"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Type>
	<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
		<meta>
			<m n=":value"><e>cast "Package"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Package>
	<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
		<meta>
			<m n=":value"><e>cast "Module"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Module>
	<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Literal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Literal>
	<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
		<meta>
			<m n=":value"><e>cast "Metadata"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Metadata>
	<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
		<meta>
			<m n=":value"><e>cast "Keyword"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Keyword>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "AnonymousStructure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AnonymousStructure>
	<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
		<meta>
			<m n=":value"><e>cast "Expression"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Expression>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
		<meta>
			<m n=":value"><e>cast "TypeParameter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeParameter>
	<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
		<meta>
			<m n=":value"><e>cast "Define"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Define>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Local"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Local>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "ClassField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ClassField>
		<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EnumField>
		<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumAbstractField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
		</EnumAbstractField>
		<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
			<meta>
				<m n=":value"><e>cast "Type"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Type>
		<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
			<meta>
				<m n=":value"><e>cast "Package"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Package>
		<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
			<meta>
				<m n=":value"><e>cast "Module"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Module>
		<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Literal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Literal>
		<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
			<meta>
				<m n=":value"><e>cast "Metadata"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Metadata>
		<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
			<meta>
				<m n=":value"><e>cast "Keyword"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Keyword>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "AnonymousStructure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AnonymousStructure>
		<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
			<meta>
				<m n=":value"><e>cast "Expression"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Expression>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
			<meta>
				<m n=":value"><e>cast "TypeParameter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeParameter>
		<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
			<meta>
				<m n=":value"><e>cast "Define"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Define>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayItem" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<kind><x path="haxe.display.DisplayItemKind"><c path="haxe.display.DisplayItem.T"/></x></kind>
	<index>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</index>
	<args><c path="haxe.display.DisplayItem.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DisplayItemOccurrence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.DisplayItemOccurrence.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.FieldCompletionSubject" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<keyValueIterator>
		<x path="Null"><a>
	<value><t path="haxe.display.JsonType"><d/></t></value>
	<key><t path="haxe.display.JsonType"><d/></t></key>
</a></x>
		<meta><m n=":optional"/></meta>
	</keyValueIterator>
	<iterator>
		<x path="Null"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></x>
		<meta><m n=":optional"/></meta>
	</iterator>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.FieldCompletionSubject.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.ToplevelCompletion" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
</a></typedef>
	<typedef path="haxe.display.StructExtensionCompletion" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a><isIntersectionType><x path="Bool"/></isIntersectionType></a></typedef>
	<typedef path="haxe.display.PatternCompletion" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<isOutermostPattern><x path="Bool"/></isOutermostPattern>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
</a></typedef>
	<abstract path="haxe.display.CompletionModeKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Field>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</StructureField>
	<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Toplevel>
	<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Metadata>
	<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeHint>
	<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Extends>
	<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Implements>
	<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</StructExtension>
	<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Using>
	<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</New>
	<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Pattern>
	<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Override>
	<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeRelation>
	<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeDeclaration>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Field>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</StructureField>
		<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Toplevel>
		<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Metadata>
		<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeHint>
		<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Extends>
		<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Implements>
		<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</StructExtension>
		<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Using>
		<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</New>
		<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Pattern>
		<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Override>
		<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeRelation>
		<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeDeclaration>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.CompletionMode" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionMode.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.CompletionMode.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.CompletionResponse" params="T1:T2" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<replaceRange>
		<x path="Null"><t path="haxe.display.Range"/></x>
		<meta><m n=":optional"/></meta>
	</replaceRange>
	<mode><t path="haxe.display.CompletionMode"><c path="haxe.display.CompletionResponse.T2"/></t></mode>
	<items><c path="Array"><t path="haxe.display.DisplayItem"><c path="haxe.display.CompletionResponse.T1"/></t></c></items>
	<isIncomplete>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isIncomplete>
	<filterString>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</filterString>
</a></typedef>
	<typedef path="haxe.display.CompletionResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.CompletionResponse">
	<d/>
	<d/>
</t></x></t></typedef>
	<typedef path="haxe.display.CompletionItemResolveParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><index><x path="Int"/></index></a>
		<haxe_doc>CompletionItem Resolve</haxe_doc>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><a><item><t path="haxe.display.DisplayItem"><d/></t></item></a></t></typedef>
	<typedef path="haxe.display.FindReferencesParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<kind>
				<x path="Null"><x path="haxe.display.FindReferencesKind"/></x>
				<meta><m n=":optional"/></meta>
			</kind>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>FindReferences</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FindReferencesKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="477" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "direct"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
	</Direct>
	<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="481" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
	</WithBaseAndDescendants>
	<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="486" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withDescendants"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
	</WithDescendants>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="477" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "direct"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
		</Direct>
		<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="481" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
		</WithBaseAndDescendants>
		<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="486" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withDescendants"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
		</WithDescendants>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.GotoDefinitionResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.GotoTypeDefinitionResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoTypeDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.HoverDisplayItemOccurence"><d/></t></x></t>
		<haxe_doc>Hover</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverDisplayItemOccurence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.HoverDisplayItemOccurence.T"/></t></item>
	<expected>
		<x path="Null"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<name>
		<x path="Null"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.HoverExpectedNameKind"/></kind>
</a></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
		<meta><m n=":optional"/></meta>
	</expected>
</a></typedef>
	<abstract path="haxe.display.HoverExpectedNameKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FunctionArgument>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</StructureField>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FunctionArgument>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</StructureField>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DeterminePackageResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
		<haxe_doc>DeterminePackage</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureHelpParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>SignatureHelp</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureInformation" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<documentation>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</documentation>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.SignatureItemKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Call>
	<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ArrayAccess>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Call>
		<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ArrayAccess>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.SignatureItem" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<signatures><c path="Array"><t path="haxe.display.SignatureInformation"/></c></signatures>
	<kind><x path="haxe.display.SignatureItemKind"/></kind>
	<activeSignature><x path="Int"/></activeSignature>
	<activeParameter><x path="Int"/></activeParameter>
</a></typedef>
	<typedef path="haxe.display.SignatureHelpResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.SignatureItem"/></x></t></typedef>
	<typedef path="haxe.display.PositionParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>General types</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FsPath" params="" file="/home/vsts/work/1/s/std/haxe/display/FsPath.hx">
		<this><c path="String"/></this>
		<impl><class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="path">
			<c path="String"/>
			<x path="haxe.display.FsPath"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<toString public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="path">
				<c path="String"/>
				<x path="haxe.display.FsPath"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<toString public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
	</class>
	<typedef path="haxe.display.JsonTodo" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><d/></typedef>
	<typedef path="haxe.display.JsonPos" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><x path="Null"><c path="String"/></x></typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
	</Imported>
	<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
	</Unimported>
	<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
	</Shadowed>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
		</Imported>
		<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
		</Unimported>
		<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
		</Shadowed>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonPackagePath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><pack><c path="Array"><c path="String"/></c></pack></a></typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
	<fieldName><c path="String"/></fieldName>
</a></typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><t path="haxe.display.JsonTypes"/></params>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<value>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</value>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AClosed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AClosed>
	<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AOpened"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AOpened>
	<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AConst"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AConst>
	<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "AExtend"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AExtend>
	<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AClassStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AClassStatics>
	<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AEnumStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AEnumStatics>
	<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AAbstractStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AAbstractStatics>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AClosed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AClosed>
		<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AOpened"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AOpened>
		<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AConst"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AConst>
		<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "AExtend"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AExtend>
		<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AClassStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AClassStatics>
		<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AEnumStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AEnumStatics>
		<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AAbstractStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AAbstractStatics>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
	<args><c path="haxe.display.JsonAnonStatus.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
</a></typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TMono"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TMono>
	<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TInst"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TInst>
	<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEnum>
	<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TType"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TType>
	<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAbstract>
	<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
		<meta>
			<m n=":value"><e>cast "TFun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TFun>
	<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "TAnonymous"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAnonymous>
	<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
		<meta>
			<m n=":value"><e>cast "TDynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TDynamic>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TMono"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TMono>
		<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TInst"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TInst>
		<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEnum>
		<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TType"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TType>
		<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAbstract>
		<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
			<meta>
				<m n=":value"><e>cast "TFun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TFun>
		<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "TAnonymous"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAnonymous>
		<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
			<meta>
				<m n=":value"><e>cast "TDynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TDynamic>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonType" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
	<args><c path="haxe.display.JsonType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<name><c path="String"/></name>
	<constraints><t path="haxe.display.JsonTypes"/></constraints>
</a></typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAdd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAdd>
	<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMult"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpMult>
	<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpDiv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpDiv>
	<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpSub"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpSub>
	<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAssign"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAssign>
	<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpEq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpEq>
	<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNotEq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNotEq>
	<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpGt>
	<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGte"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpGte>
	<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpLt>
	<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLte"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpLte>
	<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAnd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAnd>
	<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpOr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpOr>
	<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpXor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpXor>
	<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolAnd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpBoolAnd>
	<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolOr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpBoolOr>
	<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpShl>
	<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpShr>
	<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpUShr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpUShr>
	<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpMod>
	<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "OpAssignOp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAssignOp>
	<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpInterval"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpInterval>
	<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpArrow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpArrow>
	<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpIn"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpIn>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAdd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAdd>
		<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMult"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpMult>
		<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpDiv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpDiv>
		<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpSub"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpSub>
		<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAssign"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAssign>
		<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpEq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpEq>
		<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNotEq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNotEq>
		<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpGt>
		<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGte"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpGte>
		<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpLt>
		<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLte"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpLte>
		<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAnd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAnd>
		<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpOr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpOr>
		<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpXor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpXor>
		<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolAnd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpBoolAnd>
		<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolOr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpBoolOr>
		<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpShl>
		<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpShr>
		<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpUShr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpUShr>
		<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpMod>
		<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "OpAssignOp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAssignOp>
		<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpInterval"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpInterval>
		<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpArrow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpArrow>
		<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpIn"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpIn>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonBinop" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
	<args><c path="haxe.display.JsonBinop.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpIncrement"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpIncrement>
	<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpDecrement"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpDecrement>
	<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNot"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNot>
	<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNeg>
	<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNegBits"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNegBits>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpIncrement"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpIncrement>
		<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpDecrement"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpDecrement>
		<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNot"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNot>
		<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNeg>
		<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNegBits"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNegBits>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonExpr" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<name><c path="String"/></name>
	<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
</a></typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c></typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TInt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TInt>
	<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TFloat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TFloat>
	<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TString"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TString>
	<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
		<meta>
			<m n=":value"><e>cast "TBool"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TBool>
	<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TNull"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TNull>
	<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TThis"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TThis>
	<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TSuper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TSuper>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TInt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TInt>
		<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TFloat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TFloat>
		<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TString"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TString>
		<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
			<meta>
				<m n=":value"><e>cast "TBool"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TBool>
		<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TNull"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TNull>
		<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TThis"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TThis>
		<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TSuper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TSuper>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonTConstant" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
	<args><c path="haxe.display.JsonTConstant.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNormal>
	<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNo>
	<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNever"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNever>
	<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccResolve"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccResolve>
	<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCall"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccCall>
	<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccInline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccInline>
	<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
		<meta>
			<m n=":value"><e>cast "AccRequire"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccRequire>
	<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCtor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccCtor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNormal>
		<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNo>
		<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNever"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNever>
		<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccResolve"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccResolve>
		<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCall"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccCall>
		<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccInline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccInline>
		<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
			<meta>
				<m n=":value"><e>cast "AccRequire"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccRequire>
		<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCtor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccCtor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
	<args><c path="haxe.display.JsonVarAccess.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethNormal>
	<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethInline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethInline>
	<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethDynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethDynamic>
	<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethMacro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethMacro>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethNormal>
		<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethInline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethInline>
		<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethDynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethDynamic>
		<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethMacro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethMacro>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
		<meta>
			<m n=":value"><e>cast "FVar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FVar>
	<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
		<meta>
			<m n=":value"><e>cast "FMethod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FMethod>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
			<meta>
				<m n=":value"><e>cast "FVar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FVar>
		<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
			<meta>
				<m n=":value"><e>cast "FMethod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FMethod>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
	<args><c path="haxe.display.JsonFieldKind.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Static>
	<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Member>
	<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Constructor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Static>
		<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Member>
		<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Constructor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassField" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<overloads><t path="haxe.display.JsonClassFields"/></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
	<isPublic><x path="Bool"/></isPublic>
	<isFinal><x path="Bool"/></isFinal>
	<expr>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</expr>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonClassField"/></c></typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="String"/></typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonEnumField"/></c></typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KNormal>
	<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "KTypeParameter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KTypeParameter>
	<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KExtension"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KExtension>
	<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
		<meta>
			<m n=":value"><e>cast "KExpr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KExpr>
	<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGeneric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGeneric>
	<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericInstance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGenericInstance>
	<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KMacroType"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KMacroType>
	<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "KAbstractImpl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KAbstractImpl>
	<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericBuild"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGenericBuild>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KNormal>
		<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "KTypeParameter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KTypeParameter>
		<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KExtension"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KExtension>
		<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
			<meta>
				<m n=":value"><e>cast "KExpr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KExpr>
		<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGeneric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGeneric>
		<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericInstance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGenericInstance>
		<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KMacroType"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KMacroType>
		<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "KAbstractImpl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KAbstractImpl>
		<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericBuild"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGenericBuild>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
	<args><c path="haxe.display.JsonClassKind.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonClass" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
	<statics><t path="haxe.display.JsonClassFields"/></statics>
	<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
	<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
	<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
	<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
</a></typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<isExtern><x path="Bool"/></isExtern>
	<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
</a></typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<op><t path="haxe.display.JsonBinop"><d/></t></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<postFix><x path="Bool"/></postFix>
	<op><x path="haxe.display.JsonUnop"/></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
	<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
	<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
	<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
	<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
	<array><t path="haxe.display.JsonClassFields"/></array>
</a></typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="353" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="354" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="355" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Typedef>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="356" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="353" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="354" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="355" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Typedef>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="356" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonModuleType" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<moduleName><c path="String"/></moduleName>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<args><c path="haxe.display.JsonModuleType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx"><c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c></typedef>
	<typedef path="haxe.display.Position" params="" file="/home/vsts/work/1/s/std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (1-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as 1-based line and character offset.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="/home/vsts/work/1/s/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (1-based) start and end positions.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="/home/vsts/work/1/s/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><x path="haxe.display.FsPath"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
	</typedef>
	<class path="haxe.display.Methods" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<Initialize public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;InitializeParams,InitializeResult&gt;(&quot;initialize&quot;)" line="32" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.InitializeParams"/>
				<t path="haxe.display.InitializeResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<InitializeParams,InitializeResult>("initialize")]]></e></m></meta>
			<haxe_doc>The initialize request is sent from the client to Haxe to determine the capabilities.</haxe_doc>
		</Initialize>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.InitializeParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<supportsResolve final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</supportsResolve>
	<maxCompletionItems final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of completion items to return</haxe_doc>
	</maxCompletionItems>
	<exclude final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>dot paths to exclude from readClassPaths / toplevel completion</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.display.Version" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<pre final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</pre>
			<patch final="1" set="null"><x path="Int"/></patch>
			<minor final="1" set="null"><x path="Int"/></minor>
			<major final="1" set="null"><x path="Int"/></major>
			<build final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</build>
		</a>
		<haxe_doc>Represents a semantic version, see https://semver.org/.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><t path="haxe.display.Response"><a>
	<protocolVersion final="1" set="null"><t path="haxe.display.Version"/></protocolVersion>
	<methods final="1" set="null"><c path="Array"><c path="String"/></c></methods>
	<haxeVersion final="1" set="null"><t path="haxe.display.Version"/></haxeVersion>
</a></t></typedef>
	<typedef path="haxe.display.Timer" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<percentTotal final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentTotal>
	<percentParent final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentParent>
	<path final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<name final="1" set="null"><c path="String"/></name>
	<info final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</info>
	<children final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.Timer"/></c></x>
		<meta><m n=":optional"/></meta>
	</children>
	<calls final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</calls>
</a></typedef>
	<typedef path="haxe.display.Response" params="T" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<timestamp final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>UNIX timestamp at the moment the data was sent.</haxe_doc>
	</timestamp>
	<timers final="1" set="null">
		<x path="Null"><t path="haxe.display.Timer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Only sent if `--times` is enabled.</haxe_doc>
	</timers>
	<result final="1" set="null">
		<x path="Null"><c path="haxe.display.Response.T"/></x>
		<meta><m n=":optional"/></meta>
	</result>
</a></typedef>
	<typedef path="haxe.display.FileParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><file><x path="haxe.display.FsPath"/></file></a></typedef>
	<abstract path="haxe.display.HaxeRequestMethod" params="TParams:TResponse" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="90" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="90" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<abstract path="haxe.display.HaxeNotificationMethod" params="TParams" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="95" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="95" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":noCompletion"/>
	</meta>
</_new></class>
	<typedef path="haxe.display.HaxeResponseErrorData" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><c path="Array"><a>
	<severity><x path="haxe.display.HaxeResponseErrorSeverity"/></severity>
	<message><c path="String"/></message>
	<location>
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</location>
</a></c></typedef>
	<abstract path="haxe.display.HaxeResponseErrorSeverity" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="106" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Warning>
	<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hint>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="106" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Warning>
		<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hint>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="haxe.display.NoData" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><meta><m n=":flatEnum"/></meta></enum>
	<class path="haxe.display.ServerMethods" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<ReadClassPaths public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;{ var ?files : Int}&gt;&gt;(&quot;server/readClassPaths&quot;)" line="34" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><a><files>
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
</files></a></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<{ var ?files : Int}>>("server/readClassPaths")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to explore the class paths. This effectively creates a cache for toplevel completion.</haxe_doc>
		</ReadClassPaths>
		<Configure public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ConfigureParams,Response&lt;NoData&gt;&gt;(&quot;server/configure&quot;)" line="36" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ConfigureParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ConfigureParams,Response<NoData>>("server/configure")]]></e></m></meta>
		</Configure>
		<Invalidate public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/invalidate&quot;)" line="37" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/invalidate")]]></e></m></meta>
		</Invalidate>
		<Contexts public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;Array&lt;HaxeServerContext&gt;&gt;&gt;(&quot;server/contexts&quot;)" line="38" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.HaxeServerContext"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<Array<HaxeServerContext>>>("server/contexts")]]></e></m></meta>
		</Contexts>
		<Memory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;HaxeMemoryResult&gt;&gt;(&quot;server/memory&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<HaxeMemoryResult>>("server/memory")]]></e></m></meta>
		</Memory>
		<ContextMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;HaxeContextMemoryResult&gt;&gt;(&quot;server/memory/context&quot;)" line="40" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeContextMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<HaxeContextMemoryResult>>("server/memory/context")]]></e></m></meta>
		</ContextMemory>
		<ModuleMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;HaxeModuleMemoryResult&gt;&gt;(&quot;server/memory/module&quot;)" line="41" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeModuleMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<HaxeModuleMemoryResult>>("server/memory/module")]]></e></m></meta>
		</ModuleMemory>
		<Modules public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;String&gt;&gt;&gt;(&quot;server/modules&quot;)" line="42" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<String>>>("server/modules")]]></e></m></meta>
		</Modules>
		<Module public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;JsonModule&gt;&gt;(&quot;server/module&quot;)" line="43" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModule"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<JsonModule>>("server/module")]]></e></m></meta>
		</Module>
		<Files public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;JsonServerFile&gt;&gt;&gt;(&quot;server/files&quot;)" line="44" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.JsonServerFile"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<JsonServerFile>>>("server/files")]]></e></m></meta>
		</Files>
		<ModuleCreated public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/moduleCreated&quot;)" line="45" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/moduleCreated")]]></e></m></meta>
		</ModuleCreated>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.ConfigurePrintParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<unchangedContent>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unchangedContent>
	<uncaughtError>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</uncaughtError>
	<stats>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stats>
	<socketMessage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</socketMessage>
	<skippingDep>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</skippingDep>
	<signature>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</signature>
	<reusing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</reusing>
	<removedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</removedDirectory>
	<parsed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</parsed>
	<notCached>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</notCached>
	<newContext>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</newContext>
	<modulePathChanged>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modulePathChanged>
	<message>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<foundDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</foundDirectories>
	<displayPosition>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</displayPosition>
	<defines>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</defines>
	<completion>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</completion>
	<changedDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</changedDirectories>
	<cachedModules>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cachedModules>
	<arguments>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</arguments>
	<addedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</addedDirectory>
</a></typedef>
	<typedef path="haxe.display.ConfigureParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<print final="1" set="null">
		<x path="Null"><t path="haxe.display.ConfigurePrintParams"/></x>
		<meta><m n=":optional"/></meta>
	</print>
	<noModuleChecks final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</noModuleChecks>
	<legacyCompletion final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</legacyCompletion>
</a></typedef>
	<typedef path="haxe.display.HaxeServerContext" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<platform final="1" set="null"><c path="String"/></platform>
	<index final="1" set="null"><x path="Int"/></index>
	<desc final="1" set="null"><c path="String"/></desc>
	<defines final="1" set="null"><c path="Array"><a>
	<value><c path="String"/></value>
	<key><c path="String"/></key>
</a></c></defines>
	<classPaths final="1" set="null"><c path="Array"><c path="String"/></c></classPaths>
</a></typedef>
	<typedef path="haxe.display.ModuleId" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<typedef path="haxe.display.JsonModule" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><t path="haxe.display.JsonTypePath"/></c></types>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><t path="haxe.display.JsonModulePath"/></path>
	<id final="1" set="null"><x path="Int"/></id>
	<file final="1" set="null"><c path="String"/></file>
	<dependencies final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependencies>
</a></typedef>
	<typedef path="haxe.display.JsonServerFile" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<pack final="1" set="null"><c path="String"/></pack>
	<moduleName final="1" set="null"><x path="Null"><c path="String"/></x></moduleName>
	<file final="1" set="null"><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.HaxeMemoryResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<memory final="1" set="null"><a>
	<totalCache final="1" set="null"><x path="Int"/></totalCache>
	<nativeLibCache final="1" set="null"><x path="Int"/></nativeLibCache>
	<haxelibCache final="1" set="null"><x path="Int"/></haxelibCache>
	<directoryCache final="1" set="null"><x path="Int"/></directoryCache>
	<contextCache final="1" set="null"><x path="Int"/></contextCache>
	<additionalSizes final="1" set="null">
		<x path="Null"><c path="Array"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</additionalSizes>
</a></memory>
	<contexts final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<context final="1" set="null"><t path="haxe.display.HaxeServerContext"/></context>
</a></c></contexts>
</a></typedef>
	<typedef path="haxe.display.HaxeContextMemoryResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<syntaxCache final="1" set="null"><a><size final="1" set="null"><x path="Int"/></size></a></syntaxCache>
	<moduleCache final="1" set="null"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<list final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<path final="1" set="null"><c path="String"/></path>
	<hasTypes final="1" set="null"><x path="Bool"/></hasTypes>
</a></c></list>
</a></moduleCache>
	<leaks final="1" set="null">
		<x path="Null"><c path="Array"><a>
	<path final="1" set="null"><c path="String"/></path>
	<leaks final="1" set="null"><c path="Array"><a><path final="1" set="null"><c path="String"/></path></a></c></leaks>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</leaks>
</a></typedef>
	<typedef path="haxe.display.HaxeModuleMemoryResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
	<fields final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
</a></c></fields>
</a></c></types>
	<moduleExtra final="1" set="null"><x path="Int"/></moduleExtra>
</a></typedef>
	<typedef path="haxe.display.ContextParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a><signature final="1" set="null"><c path="String"/></signature></a></typedef>
	<typedef path="haxe.display.ModuleParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<class path="haxe.ds.ArraySort" params="" file="/home/vsts/work/1/s/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="159" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<iteratorLoop params="K:V" set="method" line="172" static="1"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="iteratorLoop.K"/>
		<c path="iteratorLoop.V"/>
	</c>
	<c path="Array"><c path="iteratorLoop.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="85">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="101">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="129">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="144"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="163"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="188"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="197"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="201"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="229"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="236">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all keys from `this` BalancedTree.</haxe_doc>
		</clear>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="263"><f a=""><x path="Int"/></f></get_height>
		<toString public="1" set="method" line="266"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/vsts/work/1/s/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="43"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="55"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<copy public="1" set="method" line="65" override="1"><f a=""><c path="haxe.ds.EnumValueMap">
	<c path="haxe.ds.EnumValueMap.K"/>
	<c path="haxe.ds.EnumValueMap.V"/>
</c></f></copy>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/vsts/work/1/s/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="37"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.

	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/vsts/work/1/s/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="112">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="121">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="130">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="143">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="156">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="185">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
	<_new public="1" get="inline" set="null" line="38" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="45" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="53" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="60" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="67" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<copy public="1" set="method" line="82" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="haxe.ds.HashMap">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.copy`</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="92" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.iterators.HashMapKeyValueIterator">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
	</keyValueIterator>
	<clear public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.clear`</haxe_doc>
	</clear>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
		<_new public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="45" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="53" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="60" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="67" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<copy public="1" set="method" line="82" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="haxe.ds.HashMap">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="92" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.iterators.HashMapKeyValueIterator">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<clear public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="116"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/vsts/work/1/s/std/js/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<set public="1" get="inline" set="null" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="51">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="71">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="75">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="82">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="97">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" get="inline" set="null" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.List" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="haxe.ds._List.ListIterator"><c path="haxe.ds.List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="167">
			<f a=""><c path="haxe.ds._List.ListKeyValueIterator"><c path="haxe.ds.List.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the List indices and values.</haxe_doc>
		</keyValueIterator>
		<toString public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="198">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="217">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<x path="Bool"/>
				</f>
				<c path="haxe.ds.List"><c path="haxe.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="233">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<c path="map.X"/>
				</f>
				<c path="haxe.ds.List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListIterator" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="284"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="288"><f a=""><c path="haxe.ds._List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="280"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListKeyValueIterator" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<idx><x path="Int"/></idx>
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="304"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="308"><f a=""><a>
	<value><c path="haxe.ds._List.ListKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="299"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/vsts/work/1/s/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="42" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="74" static="1">
		<f a="this:key:value">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="92" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Null"><c path="haxe.ds.Map.V"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="100" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="109" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="117" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="126" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="135" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="KeyValueIterator">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<copy public="1" get="inline" set="null" line="144" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
	</copy>
	<toString public="1" get="inline" set="null" line="153" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<clear public="1" get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
	</clear>
	<arrayWrite public="1" get="inline" set="null" line="164" static="1">
		<f a="this:k:v">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<c path="haxe.ds.Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="169" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="173" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="177" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="181" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="185" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="189" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="193" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="74" static="1">
			<f a="this:key:value">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="92" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Null"><c path="haxe.ds.Map.V"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="100" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="109" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="117" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="126" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="135" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="KeyValueIterator">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="144" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
		</copy>
		<toString public="1" get="inline" set="null" line="153" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
		</clear>
		<arrayWrite public="1" get="inline" set="null" line="164" static="1">
			<f a="this:k:v">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<c path="haxe.ds.Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="169" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="173" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="177" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="181" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="185" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="haxe.ds.Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="189" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="haxe.ds.Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="193" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/vsts/work/1/s/std/js/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<count static="1"><x path="Int"/></count>
		<assignId get="inline" set="null" line="38" static="1"><f a="obj">
	<a/>
	<x path="Int"/>
</f></assignId>
		<getId get="inline" set="null" line="42" static="1">
			<f a="obj">
				<a/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getId>
		<h><a><__keys__><a/></__keys__></a></h>
		<set public="1" set="method" line="52">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="61">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="65">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="69">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="78">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="89">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="103">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="107">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="129">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="48">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/home/vsts/work/1/s/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/vsts/work/1/s/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get get="inline" set="null" line="43" static="1">
		<f a="this:i">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
			<c path="haxe.ds.ReadOnlyArray.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
</class></impl>
	</abstract>
	<class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get get="inline" set="null" line="43" static="1">
			<f a="this:i">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
				<c path="haxe.ds.ReadOnlyArray.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/home/vsts/work/1/s/std/js/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<keysIterator set="method" line="83" static="1"><f a="h">
	<d/>
	<t path="Iterator"><c path="String"/></t>
</f></keysIterator>
		<valueIterator params="T" set="method" line="91" static="1"><f a="h">
	<d/>
	<t path="Iterator"><c path="valueIterator.T"/></t>
</f></valueIterator>
		<kvIterator params="T" set="method" line="99" static="1"><f a="h">
	<d/>
	<t path="KeyValueIterator">
		<c path="String"/>
		<c path="kvIterator.T"/>
	</t>
</f></kvIterator>
		<createCopy params="T" set="method" line="107" static="1"><f a="h">
	<d/>
	<c path="haxe.ds.StringMap"><c path="createCopy.T"/></c>
</f></createCopy>
		<stringify set="method" line="114" static="1">
			<f a="h">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":analyzer"><e>no_optimize</e></m></meta>
		</stringify>
		<h><d/></h>
		<exists public="1" get="inline" set="null" line="37">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<get public="1" get="inline" set="null" line="41">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="45">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<remove public="1" get="inline" set="null" line="49">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="57">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="61">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="65">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="69">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<clear public="1" get="inline" set="null" line="73">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<toString public="1" get="inline" set="null" line="77">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="95" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="113" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="130" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get_length>
	<blit public="1" params="T" set="method" line="151" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="192" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="220" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="230" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="244" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="275" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="298" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="321" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" params="T" get="inline" set="null" line="348" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
			<f a=":">
				<c path="sort.T"/>
				<c path="sort.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="95" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="113" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="130" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get_length>
		<blit public="1" params="T" set="method" line="151" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="192" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="220" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="230" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="244" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="275" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="298" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="321" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" params="T" get="inline" set="null" line="348" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<set public="1" set="method" line="45">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="50">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Null"><c path="haxe.ds.WeakMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="57">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="64">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="71">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="78">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="85">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="92">
			<f a=""><c path="haxe.ds.WeakMap">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="106">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/vsts/work/1/s/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/vsts/work/1/s/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/>
	<abstract path="haxe.extern.Rest" params="T" file="/home/vsts/work/1/s/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1" final="1"/>
	<class path="haxe.format.JsonParser" params="" file="/home/vsts/work/1/s/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="256"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="308"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="312"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="317"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/vsts/work/1/s/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="76"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="81"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addChar>
		<add get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<classString set="method" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="196"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
	</class>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></typedef>
	<class path="haxe.http.HttpBase" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></responseData>
		<responseBytes public="1" set="null"><x path="Null"><c path="haxe.io.Bytes"/></x></responseBytes>
		<responseAsString><x path="Null"><c path="String"/></x></responseAsString>
		<postData><x path="Null"><c path="String"/></x></postData>
		<postBytes><x path="Null"><c path="haxe.io.Bytes"/></x></postBytes>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<emptyOnData final="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></emptyOnData>
		<setHeader public="1" set="method" line="85">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="98"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<setParameter public="1" set="method" line="112">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the parameter identified as `param` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="125"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addParameter>
		<setPostData public="1" set="method" line="142">
			<f a="data">
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` string.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostBytes()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<setPostBytes public="1" set="method" line="160">
			<f a="data">
				<x path="Null"><c path="haxe.io.Bytes"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` bytes.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostData()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostBytes>
		<request public="1" set="method" line="185">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="196">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onBytes public="1" set="dynamic" line="205">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onBytes = function(data) { // handle result }`</haxe_doc>
		</onBytes>
		<onError public="1" set="dynamic" line="214">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="223">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<hasOnData set="method" line="228">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Override this if extending `haxe.Http` with overriding `onData`</haxe_doc>
		</hasOnData>
		<success set="method" line="232"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></success>
		<get_responseData set="method" line="241"><f a=""><x path="Null"><c path="String"/></x></f></get_responseData>
		<new public="1" set="method" line="71">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(not available on flash)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
	</class>
	<class path="haxe.http.HttpJs" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpJs.hx">
		<extends path="haxe.http.HttpBase"/>
		<requestUrl public="1" set="method" line="146" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

		This creates a new Http instance and makes a GET request by calling its
		`request(false)` method.

		If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<async public="1"><x path="Bool"/></async>
		<withCredentials public="1"><x path="Bool"/></withCredentials>
		<req><c path="js.html.XMLHttpRequest"/></req>
		<cancel public="1" set="method" line="46">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels `this` Http request if `request` has been called and a response
		has not yet been received.</haxe_doc>
		</cancel>
		<request public="1" set="method" line="53" override="1"><f a="?post">
	<x path="Bool"/>
	<x path="Void"/>
</f></request>
		<new public="1" set="method" line="36"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.http.HttpMethod" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpMethod.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTTP defines methods (sometimes referred to as _verbs_) to indicate the desired action to be
	performed on the identified resource. What this resource represents, whether pre-existing data
	or data that is generated dynamically, depends on the implementation of the server.

	Often, the resource corresponds to a file or the output of an executable residing on the server.
	The HTTP/1.0 specification defined the `GET`, `POST` and `HEAD` methods and the HTTP/1.1
	specification added 5 new methods: `OPTIONS`, `PUT`, `DELETE`, `TRACE` and `CONNECT`.

	By being specified in these documents their semantics are well known and can be depended upon.
	Any client can use any method and the server can be configured to support any combination of methods.
	If a method is unknown to an intermediate it will be treated as an unsafe and non-idempotent method.
	There is no limit to the number of methods that can be defined and this allows for future methods to
	be specified without breaking existing infrastructure.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
	</Post>
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
	</Get>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
	</Head>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
	</Put>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
	</Delete>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
	</Trace>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
	</Options>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
	</Connect>
	<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PATCH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
	</Patch>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
		</Post>
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
		</Get>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
		</Head>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
		</Put>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
		</Delete>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
		</Trace>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
		</Options>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
		</Connect>
		<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PATCH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
		</Patch>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.http.HttpStatus" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpStatus.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>HTTP Request Status</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
	<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Continue>
	<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SwitchingProtocols>
	<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Processing>
	<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 200</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OK>
	<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 201</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Created>
	<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 202</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Accepted>
	<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 203</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NonAuthoritativeInformation>
	<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 204</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NoContent>
	<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 205</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ResetContent>
	<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 206</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PartialContent>
	<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 207</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultiStatus>
	<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 208</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AlreadyReported>
	<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 226</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IMUsed>
	<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 300</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultipleChoices>
	<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 301</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MovedPermanently>
	<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 302</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Found>
	<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 303</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SeeOther>
	<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 304</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotModified>
	<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 305</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UseProxy>
	<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 306</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SwitchProxy>
	<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 307</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TemporaryRedirect>
	<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 308</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PermanentRedirect>
	<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 400</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BadRequest>
	<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 401</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unauthorized>
	<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 402</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PaymentRequired>
	<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 403</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Forbidden>
	<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 404</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotFound>
	<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 405</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethodNotAllowed>
	<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 406</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotAcceptable>
	<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 407</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ProxyAuthenticationRequired>
	<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 408</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RequestTimeout>
	<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 409</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Conflict>
	<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 410</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Gone>
	<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 411</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LengthRequired>
	<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 412</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PreconditionFailed>
	<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 413</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PayloadTooLarge>
	<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 414</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</URITooLong>
	<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 415</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnsupportedMediaType>
	<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 416</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RangeNotSatisfiable>
	<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 417</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ExpectationFailed>
	<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 418</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImATeapot>
	<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 421</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MisdirectedRequest>
	<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 422</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnprocessableEntity>
	<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 423</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Locked>
	<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 424</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FailedDependency>
	<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 426</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UpgradeRequired>
	<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 428</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PreconditionRequired>
	<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 429</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TooManyRequests>
	<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 431</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RequestHeaderFieldsTooLarge>
	<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 451</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnavailableForLegalReasons>
	<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 500</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InternalServerError>
	<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 501</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotImplemented>
	<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 502</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BadGateway>
	<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 503</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ServiceUnavailable>
	<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 504</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GatewayTimeout>
	<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 505</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HTTPVersionNotSupported>
	<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 506</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VariantAlsoNegotiates>
	<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 507</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InsufficientStorage>
	<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 508</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LoopDetected>
	<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 510</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotExtended>
	<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 511</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NetworkAuthenticationRequired>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
		<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Continue>
		<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SwitchingProtocols>
		<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Processing>
		<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 200</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OK>
		<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 201</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Created>
		<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 202</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Accepted>
		<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 203</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NonAuthoritativeInformation>
		<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 204</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NoContent>
		<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 205</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ResetContent>
		<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 206</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PartialContent>
		<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 207</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultiStatus>
		<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 208</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AlreadyReported>
		<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 226</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IMUsed>
		<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 300</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultipleChoices>
		<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 301</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MovedPermanently>
		<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 302</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Found>
		<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 303</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SeeOther>
		<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 304</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotModified>
		<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 305</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UseProxy>
		<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 306</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SwitchProxy>
		<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 307</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TemporaryRedirect>
		<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 308</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PermanentRedirect>
		<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 400</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BadRequest>
		<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 401</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unauthorized>
		<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 402</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PaymentRequired>
		<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 403</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Forbidden>
		<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 404</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotFound>
		<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 405</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethodNotAllowed>
		<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 406</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotAcceptable>
		<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 407</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ProxyAuthenticationRequired>
		<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 408</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RequestTimeout>
		<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 409</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Conflict>
		<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 410</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Gone>
		<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 411</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LengthRequired>
		<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 412</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PreconditionFailed>
		<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 413</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PayloadTooLarge>
		<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 414</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</URITooLong>
		<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 415</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnsupportedMediaType>
		<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 416</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RangeNotSatisfiable>
		<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 417</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ExpectationFailed>
		<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 418</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImATeapot>
		<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 421</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MisdirectedRequest>
		<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 422</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnprocessableEntity>
		<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 423</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Locked>
		<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 424</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FailedDependency>
		<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 426</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UpgradeRequired>
		<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 428</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PreconditionRequired>
		<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 429</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TooManyRequests>
		<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 431</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RequestHeaderFieldsTooLarge>
		<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 451</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnavailableForLegalReasons>
		<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 500</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InternalServerError>
		<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 501</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotImplemented>
		<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 502</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BadGateway>
		<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 503</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ServiceUnavailable>
		<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 504</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GatewayTimeout>
		<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 505</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HTTPVersionNotSupported>
		<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 506</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VariantAlsoNegotiates>
		<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 507</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InsufficientStorage>
		<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 508</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LoopDetected>
		<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 510</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotExtended>
		<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 511</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NetworkAuthenticationRequired>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteOffset>
	<get_byteLength get="inline" set="null" line="39" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<get_buffer get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_buffer>
	<sub public="1" get="inline" set="null" line="46" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<getData public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<t path="haxe.io.ArrayBufferViewData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="54" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
		<buffer public="1" get="accessor" set="null" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":impl"/></meta>
		</buffer>
		<byteOffset public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteOffset>
		<get_byteLength get="inline" set="null" line="39" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<get_buffer get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_buffer>
		<sub public="1" get="inline" set="null" line="46" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<getData public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<t path="haxe.io.ArrayBufferViewData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="54" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	</class>
	<class path="haxe.io.Input" params="" file="/home/vsts/work/1/s/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="106">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="163">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<getDoubleSig set="method" line="325"><f a="bytes">
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
</f></getDoubleSig>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/vsts/work/1/s/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="55" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/BytesBuffer.hx">
		<buffer><c path="js.lib.ArrayBuffer"/></buffer>
		<view><c path="js.lib.DataView"/></view>
		<u8><c path="js.lib.Uint8Array"/></u8>
		<pos><x path="Int"/></pos>
		<size><x path="Int"/></size>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="40"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" set="method" line="44"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" set="method" line="50"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" set="method" line="60"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="64"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="71"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" set="method" line="79"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" set="method" line="86"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" set="method" line="93"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<grow set="method" line="105"><f a="delta">
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
		<getBytes public="1" set="method" line="120">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/vsts/work/1/s/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/vsts/work/1/s/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><c path="js.lib.Uint8Array"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="67"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="75"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/vsts/work/1/s/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="246">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="254">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/vsts/work/1/s/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/home/vsts/work/1/s/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/vsts/work/1/s/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="js.lib.ArrayBuffer" params="" file="/home/vsts/work/1/s/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.lib.DataView" params="" file="/home/vsts/work/1/s/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DataView"</e></m></meta>
	</class>
	<class path="haxe.io.FPHelper" params="" file="/home/vsts/work/1/s/std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="35" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<LN2 get="inline" set="null" expr="0.6931471805599453" line="37" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN2>
		<_i32ToFloat get="inline" set="null" line="39" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></_i32ToFloat>
		<_i64ToDouble get="inline" set="null" line="48" static="1"><f a="lo:hi">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></_i64ToDouble>
		<_floatToI32 get="inline" set="null" line="58" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></_floatToI32>
		<_doubleToI64 get="inline" set="null" line="76" static="1"><f a="v">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></_doubleToI64>
		<helper expr="new js.lib.DataView(new js.lib.ArrayBuffer(8))" line="127" static="1">
			<c path="js.lib.DataView"/>
			<meta><m n=":value"><e>new js.lib.DataView(new js.lib.ArrayBuffer(8))</e></m></meta>
		</helper>
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="177" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="214" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="268" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.lib.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="34" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="46" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="50" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="54" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<t path="haxe.io.Float32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="70" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="83" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="34" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="46" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="50" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="54" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<t path="haxe.io.Float32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="70" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="83" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><c path="js.lib.Float64Array"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="34" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="46" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="50" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="54" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<t path="haxe.io.Float64ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="70" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="83" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="34" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="46" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="50" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="54" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<t path="haxe.io.Float64ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="70" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="83" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><c path="js.lib.Int32Array"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="34" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="46" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="50" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="54" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<t path="haxe.io.Int32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="70" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="83" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="34" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="46" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="50" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="54" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<t path="haxe.io.Int32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="70" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="83" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="haxe.io.Mime" params="" file="/home/vsts/work/1/s/std/haxe/io/Mime.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTML MimeType Enum
	@see http://www.sitepoint.com/web-foundations/mime-types-complete-list/</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
	<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XWorldX3dmf>
	<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/octet-stream"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationOctetStream>
	<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareBin>
	<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-map"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareMap>
	<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareSeg>
	<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.abc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndAbc>
	<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextHtml>
	<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/animaflex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAnimaflex>
	<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/postscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPostscript>
	<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/aiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioAiff>
	<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-aiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXAiff>
	<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-aim"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAim>
	<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXAudiosoftIntra>
	<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navi-animation"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNaviAnimation>
	<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNokia9000CommunicatorAddOnSoftware>
	<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMime>
	<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/arj"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationArj>
	<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXJg>
	<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-ms-asf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMsAsf>
	<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-asm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXAsm>
	<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/asp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextAsp>
	<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mplayer2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMplayer2>
	<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/basic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioBasic>
	<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMsvideo>
	<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAvi>
	<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoMsvideo>
	<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMsvideo>
	<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avs-video"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAvsVideo>
	<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bcpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBcpio>
	<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-binary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacBinary>
	<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/macbinary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacbinary>
	<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-binary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBinary>
	<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-macbinary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMacbinary>
	<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/bmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageBmp>
	<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXWindowsBmp>
	<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/book"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBook>
	<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBzip2>
	<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBsh>
	<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBzip>
	<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/plain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextPlain>
	<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-c"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXC>
	<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiSeccat>
	<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/clariscad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationClariscad>
	<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cocoa"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCocoa>
	<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/cdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationCdf>
	<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCdf>
	<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-netcdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNetcdf>
	<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkix-cert"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkixCert>
	<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXX509CaCert>
	<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-chat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXChat>
	<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJava>
	<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java-byte-code"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJavaByteCode>
	<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXJavaClass>
	<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCpio>
	<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-compactpro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacCompactpro>
	<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-crl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcsCrl>
	<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-csh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCsh>
	<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/css"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextCss>
	<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-director"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDirector>
	<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-deepv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDeepv>
	<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-dv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXDv>
	<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/dl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoDl>
	<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/msword"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMsword>
	<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/commonground"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationCommonground>
	<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/drafting"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDrafting>
	<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-dvi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDvi>
	<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DrawingXDwf>
	<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/acad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationAcad>
	<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dxf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDxf>
	<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.elisp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptElisp>
	<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBytecodeElisp>
	<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-envoy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXEnvoy>
	<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-esrehber"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXEsrehber>
	<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-setext"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXSetext>
	<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/envoy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationEnvoy>
	<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-fortran"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXFortran>
	<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.fdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndFdf>
	<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/fif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageFif>
	<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/fli"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoFli>
	<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/florian"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageFlorian>
	<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndFmiFlexstor>
	<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAtomic3dFeature>
	<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.fpx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndFpx>
	<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/freeloader"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationFreeloader>
	<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/make"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMake>
	<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/g3fax"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageG3fax>
	<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/gif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageGif>
	<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/gl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoGl>
	<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-gsm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXGsm>
	<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gsp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGsp>
	<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gss"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGss>
	<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gtar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGtar>
	<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compressed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCompressed>
	<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gzip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGzip>
	<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-hdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHdf>
	<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-helpfile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHelpfile>
	<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScript>
	<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hlp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationHlp>
	<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndHpHpgl>
	<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/binhex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBinhex>
	<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hta"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationHta>
	<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-component"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXComponent>
	<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/webviewhtml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextWebviewhtml>
	<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XConferenceXCooltalk>
	<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-icon"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXIcon>
	<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/ief"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageIef>
	<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/iges"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationIges>
	<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ima"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXIma>
	<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHttpdImap>
	<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/inf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationInf>
	<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-internett-signup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXInternettSignup>
	<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ip2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXIp2>
	<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-isvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXIsvideo>
	<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/it"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioIt>
	<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-inventor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXInventor>
	<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "i-world/i-vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IWorldIVrml>
	<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-livescreen"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLivescreen>
	<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-jam"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXJam>
	<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-commerce"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXJavaCommerce>
	<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageJpeg>
	<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jps"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXJps>
	<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/javascript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextJavascript>
	<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/json"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJson>
	<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/javascript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJavascript>
	<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jutvision"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageJutvision>
	<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/midi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMidi>
	<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ksh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXKsh>
	<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/nspaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioNspaudio>
	<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXLiveaudio>
	<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-latex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLatex>
	<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lisp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLisp>
	<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-la-asf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXLaAsf>
	<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/lzx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationLzx>
	<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/mpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoMpeg>
	<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMpeg>
	<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXMpequrl>
	<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-man"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMan>
	<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navimap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNavimap>
	<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mbedlet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMbedlet>
	<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMagicCapPackage10>
	<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mcad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMcad>
	<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vasa"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVasa>
	<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/netmc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationNetmc>
	<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-me"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMe>
	<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "message/rfc822"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MessageRfc822>
	<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMif>
	<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "www/mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WwwMime>
	<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXVndAudioexplosionMjuicemediafile>
	<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMotionJpeg>
	<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/base64"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBase64>
	<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMod>
	<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/quicktime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoQuicktime>
	<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXSgiMovie>
	<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg3"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMpeg3>
	<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-project"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXProject>
	<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsProject>
	<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/marc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMarc>
	<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-ms"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMs>
	<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVndAudioexplosionMzz>
	<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/naplps"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageNaplps>
	<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndNokiaConfigurationMessage>
	<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-niff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXNiff>
	<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMixTransfer>
	<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-conference"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXConference>
	<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navidoc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNavidoc>
	<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/oda"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationOda>
	<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmc>
	<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmcdatamaker>
	<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcregerator"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmcregerator>
	<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-pascal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXPascal>
	<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs10"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs10>
	<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-12"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs12>
	<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Signature>
	<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs7Mime>
	<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Certreqresp>
	<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs7Signature>
	<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pro_eng"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPro_eng>
	<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/pascal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextPascal>
	<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortableBitmap>
	<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndHpPcl>
	<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPict>
	<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pcx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPcx>
	<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "chemical/x-pdb"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ChemicalXPdb>
	<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPdf>
	<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortableGraymap>
	<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/pict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImagePict>
	<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNewtonCompatiblePkg>
	<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiPko>
	<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pixclscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPixclscript>
	<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xpixmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXpixmap>
	<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pagemaker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPagemaker>
	<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/png"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImagePng>
	<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPortableAnymap>
	<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mspowerpoint"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMspowerpoint>
	<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/x-pov"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ModelXPov>
	<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPowerpoint>
	<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortablePixmap>
	<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-freelance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXFreelance>
	<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "paleovu/x-pv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PaleovuXPv>
	<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.phyton"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptPhyton>
	<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBytecodePython>
	<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVndQcelp>
	<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-quicktime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXQuicktime>
	<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-qtc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXQtc>
	<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPnRealaudio>
	<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCmuRaster>
	<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/cmu-raster"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageCmuRaster>
	<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.rexx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptRexx>
	<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndRnRealflash>
	<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-rgb"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXRgb>
	<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndRnRealmedia>
	<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mid"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMid>
	<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/ringing-tones"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationRingingTones>
	<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndRnRealplayer>
	<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroff>
	<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndRnRealpix>
	<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPnRealaudioPlugin>
	<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/richtext"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextRichtext>
	<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/rtf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationRtf>
	<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVndRnRealvideo>
	<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/s3m"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioS3m>
	<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tbook"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTbook>
	<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLotusscreencam>
	<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sdp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSdp>
	<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sounder"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSounder>
	<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sea"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSea>
	<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/set"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSet>
	<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-psid"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPsid>
	<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSit>
	<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-koan"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXKoan>
	<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-seelogo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSeelogo>
	<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/smil"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSmil>
	<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/solids"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSolids>
	<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Certificates>
	<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/futuresplash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationFuturesplash>
	<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sprite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSprite>
	<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wais-source"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWaisSource>
	<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXServerParsedHtml>
	<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/streamingmedia"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationStreamingmedia>
	<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiCertstore>
	<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/step"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationStep>
	<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sla"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSla>
	<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSv4cpio>
	<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4crc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSv4crc>
	<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.dwg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndDwg>
	<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-world"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWorld>
	<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXShockwaveFlash>
	<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-speech"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXSpeech>
	<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTar>
	<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/toolbook"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationToolbook>
	<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tcl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTcl>
	<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptTcsh>
	<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTex>
	<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-texinfo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTexinfo>
	<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/gnutar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationGnutar>
	<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/tiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageTiff>
	<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/tsp-audio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioTspAudio>
	<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dsptype"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDsptype>
	<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/tab-separated-values"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextTabSeparatedValues>
	<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uil"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXUil>
	<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/uri-list"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextUriList>
	<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/i-deas"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationIDeas>
	<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ustar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXUstar>
	<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uuencode"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXUuencode>
	<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdlink"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCdlink>
	<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-vcalendar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXVcalendar>
	<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vda"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVda>
	<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vdo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVdo>
	<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/groupwise"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationGroupwise>
	<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vivo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVivo>
	<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVocaltecMediaDesc>
	<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVocaltecMediaFile>
	<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVoc>
	<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vosaic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVosaic>
	<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voxware"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVoxware>
	<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXTwinvqPlugin>
	<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXTwinvq>
	<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVrml>
	<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-vrt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XWorldXVrt>
	<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-visio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVisio>
	<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect60>
	<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect61>
	<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/wav"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioWav>
	<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-qpro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXQpro>
	<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndWapWbmp>
	<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.xara"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndXara>
	<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/webp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageWebp>
	<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-123"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationX123>
	<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "windows/metafile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WindowsMetafile>
	<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndWapWml>
	<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndWapWmlc>
	<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndWapWmlscript>
	<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndWapWmlscriptc>
	<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect>
	<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotus"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLotus>
	<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mswrite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMswrite>
	<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ModelVrml>
	<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/scriplet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextScriplet>
	<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wintalk"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWintalk>
	<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xbitmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXbitmap>
	<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAmtDemorun>
	<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/drawing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XglDrawing>
	<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.xiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndXiff>
	<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/excel"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationExcel>
	<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/xm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXm>
	<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXml>
	<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/movie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XglMovie>
	<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVndLsXpix>
	<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAmtShowrun>
	<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xwd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXwd>
	<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compress"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCompress>
	<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "multipart/x-zip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultipartXZip>
	<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.zsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptZsh>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
		<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XWorldX3dmf>
		<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/octet-stream"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationOctetStream>
		<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareBin>
		<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-map"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareMap>
		<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareSeg>
		<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.abc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndAbc>
		<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextHtml>
		<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/animaflex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAnimaflex>
		<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/postscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPostscript>
		<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/aiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioAiff>
		<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-aiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXAiff>
		<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-aim"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAim>
		<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXAudiosoftIntra>
		<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navi-animation"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNaviAnimation>
		<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNokia9000CommunicatorAddOnSoftware>
		<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMime>
		<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/arj"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationArj>
		<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXJg>
		<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-ms-asf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMsAsf>
		<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-asm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXAsm>
		<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/asp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextAsp>
		<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mplayer2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMplayer2>
		<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/basic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioBasic>
		<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMsvideo>
		<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAvi>
		<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoMsvideo>
		<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMsvideo>
		<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avs-video"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAvsVideo>
		<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bcpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBcpio>
		<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-binary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacBinary>
		<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/macbinary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacbinary>
		<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-binary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBinary>
		<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-macbinary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMacbinary>
		<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/bmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageBmp>
		<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXWindowsBmp>
		<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/book"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBook>
		<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBzip2>
		<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBsh>
		<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBzip>
		<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/plain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextPlain>
		<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-c"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXC>
		<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiSeccat>
		<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/clariscad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationClariscad>
		<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cocoa"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCocoa>
		<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/cdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationCdf>
		<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCdf>
		<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-netcdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNetcdf>
		<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkix-cert"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkixCert>
		<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXX509CaCert>
		<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-chat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXChat>
		<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJava>
		<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java-byte-code"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJavaByteCode>
		<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXJavaClass>
		<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCpio>
		<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-compactpro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacCompactpro>
		<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-crl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcsCrl>
		<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-csh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCsh>
		<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/css"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextCss>
		<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-director"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDirector>
		<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-deepv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDeepv>
		<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-dv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXDv>
		<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/dl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoDl>
		<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/msword"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMsword>
		<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/commonground"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationCommonground>
		<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/drafting"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDrafting>
		<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-dvi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDvi>
		<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DrawingXDwf>
		<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/acad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationAcad>
		<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dxf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDxf>
		<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.elisp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptElisp>
		<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBytecodeElisp>
		<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-envoy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXEnvoy>
		<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-esrehber"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXEsrehber>
		<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-setext"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXSetext>
		<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/envoy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationEnvoy>
		<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-fortran"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXFortran>
		<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.fdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndFdf>
		<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/fif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageFif>
		<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/fli"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoFli>
		<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/florian"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageFlorian>
		<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndFmiFlexstor>
		<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAtomic3dFeature>
		<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.fpx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndFpx>
		<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/freeloader"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationFreeloader>
		<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/make"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMake>
		<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/g3fax"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageG3fax>
		<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/gif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageGif>
		<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/gl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoGl>
		<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-gsm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXGsm>
		<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gsp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGsp>
		<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gss"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGss>
		<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gtar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGtar>
		<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compressed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCompressed>
		<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gzip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGzip>
		<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-hdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHdf>
		<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-helpfile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHelpfile>
		<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScript>
		<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hlp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationHlp>
		<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndHpHpgl>
		<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/binhex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBinhex>
		<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hta"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationHta>
		<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-component"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXComponent>
		<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/webviewhtml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextWebviewhtml>
		<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XConferenceXCooltalk>
		<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-icon"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXIcon>
		<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/ief"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageIef>
		<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/iges"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationIges>
		<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ima"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXIma>
		<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHttpdImap>
		<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/inf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationInf>
		<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-internett-signup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXInternettSignup>
		<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ip2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXIp2>
		<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-isvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXIsvideo>
		<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/it"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioIt>
		<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-inventor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXInventor>
		<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "i-world/i-vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IWorldIVrml>
		<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-livescreen"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLivescreen>
		<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-jam"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXJam>
		<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-commerce"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXJavaCommerce>
		<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageJpeg>
		<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jps"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXJps>
		<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/javascript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextJavascript>
		<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/json"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJson>
		<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/javascript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJavascript>
		<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jutvision"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageJutvision>
		<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/midi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMidi>
		<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ksh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXKsh>
		<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/nspaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioNspaudio>
		<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXLiveaudio>
		<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-latex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLatex>
		<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lisp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLisp>
		<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-la-asf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXLaAsf>
		<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/lzx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationLzx>
		<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/mpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoMpeg>
		<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMpeg>
		<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXMpequrl>
		<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-man"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMan>
		<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navimap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNavimap>
		<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mbedlet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMbedlet>
		<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMagicCapPackage10>
		<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mcad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMcad>
		<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vasa"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVasa>
		<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/netmc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationNetmc>
		<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-me"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMe>
		<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "message/rfc822"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MessageRfc822>
		<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMif>
		<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "www/mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WwwMime>
		<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXVndAudioexplosionMjuicemediafile>
		<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMotionJpeg>
		<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/base64"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBase64>
		<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMod>
		<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/quicktime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoQuicktime>
		<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXSgiMovie>
		<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg3"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMpeg3>
		<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-project"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXProject>
		<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsProject>
		<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/marc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMarc>
		<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-ms"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMs>
		<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVndAudioexplosionMzz>
		<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/naplps"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageNaplps>
		<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndNokiaConfigurationMessage>
		<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-niff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXNiff>
		<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMixTransfer>
		<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-conference"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXConference>
		<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navidoc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNavidoc>
		<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/oda"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationOda>
		<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmc>
		<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmcdatamaker>
		<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcregerator"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmcregerator>
		<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-pascal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXPascal>
		<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs10"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs10>
		<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-12"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs12>
		<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Signature>
		<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs7Mime>
		<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Certreqresp>
		<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs7Signature>
		<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pro_eng"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPro_eng>
		<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/pascal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextPascal>
		<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortableBitmap>
		<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndHpPcl>
		<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPict>
		<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pcx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPcx>
		<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "chemical/x-pdb"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ChemicalXPdb>
		<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPdf>
		<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortableGraymap>
		<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/pict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImagePict>
		<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNewtonCompatiblePkg>
		<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiPko>
		<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pixclscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPixclscript>
		<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xpixmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXpixmap>
		<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pagemaker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPagemaker>
		<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/png"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImagePng>
		<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPortableAnymap>
		<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mspowerpoint"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMspowerpoint>
		<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/x-pov"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ModelXPov>
		<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPowerpoint>
		<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortablePixmap>
		<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-freelance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXFreelance>
		<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "paleovu/x-pv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PaleovuXPv>
		<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.phyton"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptPhyton>
		<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBytecodePython>
		<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVndQcelp>
		<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-quicktime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXQuicktime>
		<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-qtc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXQtc>
		<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPnRealaudio>
		<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCmuRaster>
		<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/cmu-raster"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageCmuRaster>
		<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.rexx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptRexx>
		<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndRnRealflash>
		<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-rgb"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXRgb>
		<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndRnRealmedia>
		<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mid"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMid>
		<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/ringing-tones"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationRingingTones>
		<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndRnRealplayer>
		<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroff>
		<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndRnRealpix>
		<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPnRealaudioPlugin>
		<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/richtext"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextRichtext>
		<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/rtf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationRtf>
		<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVndRnRealvideo>
		<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/s3m"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioS3m>
		<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tbook"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTbook>
		<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLotusscreencam>
		<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sdp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSdp>
		<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sounder"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSounder>
		<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sea"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSea>
		<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/set"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSet>
		<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-psid"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPsid>
		<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSit>
		<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-koan"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXKoan>
		<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-seelogo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSeelogo>
		<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/smil"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSmil>
		<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/solids"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSolids>
		<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Certificates>
		<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/futuresplash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationFuturesplash>
		<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sprite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSprite>
		<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wais-source"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWaisSource>
		<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXServerParsedHtml>
		<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/streamingmedia"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationStreamingmedia>
		<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiCertstore>
		<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/step"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationStep>
		<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sla"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSla>
		<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSv4cpio>
		<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4crc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSv4crc>
		<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.dwg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndDwg>
		<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-world"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWorld>
		<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXShockwaveFlash>
		<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-speech"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXSpeech>
		<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTar>
		<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/toolbook"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationToolbook>
		<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tcl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTcl>
		<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptTcsh>
		<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTex>
		<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-texinfo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTexinfo>
		<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/gnutar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationGnutar>
		<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/tiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageTiff>
		<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/tsp-audio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioTspAudio>
		<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dsptype"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDsptype>
		<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/tab-separated-values"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextTabSeparatedValues>
		<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uil"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXUil>
		<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/uri-list"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextUriList>
		<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/i-deas"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationIDeas>
		<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ustar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXUstar>
		<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uuencode"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXUuencode>
		<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdlink"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCdlink>
		<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-vcalendar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXVcalendar>
		<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vda"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVda>
		<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vdo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVdo>
		<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/groupwise"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationGroupwise>
		<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vivo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVivo>
		<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVocaltecMediaDesc>
		<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVocaltecMediaFile>
		<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVoc>
		<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vosaic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVosaic>
		<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voxware"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVoxware>
		<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXTwinvqPlugin>
		<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXTwinvq>
		<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVrml>
		<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-vrt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XWorldXVrt>
		<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-visio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVisio>
		<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect60>
		<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect61>
		<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/wav"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioWav>
		<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-qpro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXQpro>
		<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndWapWbmp>
		<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.xara"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndXara>
		<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/webp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageWebp>
		<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-123"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationX123>
		<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "windows/metafile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WindowsMetafile>
		<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndWapWml>
		<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndWapWmlc>
		<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndWapWmlscript>
		<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndWapWmlscriptc>
		<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect>
		<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotus"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLotus>
		<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mswrite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMswrite>
		<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ModelVrml>
		<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/scriplet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextScriplet>
		<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wintalk"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWintalk>
		<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xbitmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXbitmap>
		<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAmtDemorun>
		<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/drawing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XglDrawing>
		<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.xiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndXiff>
		<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/excel"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationExcel>
		<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/xm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXm>
		<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXml>
		<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/movie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XglMovie>
		<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVndLsXpix>
		<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAmtShowrun>
		<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xwd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXwd>
		<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compress"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCompress>
		<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "multipart/x-zip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultipartXZip>
		<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.zsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptZsh>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/vsts/work/1/s/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="314" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="324" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="329" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
	</class>
	<abstract path="haxe.io.Scheme" params="" file="/home/vsts/work/1/s/std/haxe/io/Scheme.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>A scheme consists of a sequence of characters beginning with a letter and followed
	by any combination of letters, digits, plus (`+`, period (`.`), or hyphen (`-`).

	Although schemes are case-insensitive, the canonical form is lowercase
	and documents that specify schemes must do so with lowercase letters.
	It is followed by a colon (`:`).</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
	<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "http"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Http>
	<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "https"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Https>
	<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "ftp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Ftp>
	<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "mailto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MailTo>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</File>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Data>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
		<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "http"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Http>
		<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "https"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Https>
		<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "ftp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Ftp>
		<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "mailto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MailTo>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</File>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Data>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/vsts/work/1/s/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><c path="js.lib.Uint16Array"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="34" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="46" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="50" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="54" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<t path="haxe.io.UInt16ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="70" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="83" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="34" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="46" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="50" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="54" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<t path="haxe.io.UInt16ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="70" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="83" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><c path="js.lib.Uint32Array"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="34" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="46" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="50" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="54" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<t path="haxe.io.UInt32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="70" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="83" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="34" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="46" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="50" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="54" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<t path="haxe.io.UInt32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="70" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="83" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><c path="js.lib.Uint8Array"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="34" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="38" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="46" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="50" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="54" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="58" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<t path="haxe.io.UInt8ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="70" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="83" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/vsts/work/1/s/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="34" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="38" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="46" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="50" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="54" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="58" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<t path="haxe.io.UInt8ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="66" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="70" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="83" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.iterators.ArrayKeyValueIterator" params="T" file="/home/vsts/work/1/s/std/haxe/iterators/ArrayKeyValueIterator.hx">
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<array><c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c></array>
		<hasNext public="1" get="inline" set="null" line="35"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="40"><f a=""><a>
	<value><c path="haxe.iterators.ArrayKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="30"><f a="array">
	<c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.DynamicAccessIterator" params="T" file="/home/vsts/work/1/s/std/haxe/iterators/DynamicAccessIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><c path="haxe.iterators.DynamicAccessIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This iterator can be used to iterate over the values of `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.DynamicAccessKeyValueIterator" params="T" file="/home/vsts/work/1/s/std/haxe/iterators/DynamicAccessKeyValueIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><a>
	<value><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></value>
	<key><c path="String"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate over `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.HashMapKeyValueIterator" params="K:V" file="/home/vsts/work/1/s/std/haxe/iterators/HashMapKeyValueIterator.hx">
		<map final="1"><x path="haxe.ds.HashMap">
	<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
	<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
</x></map>
		<keys final="1"><t path="Iterator"><c path="haxe.iterators.HashMapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="17">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="24">
			<f a=""><a>
	<value><c path="haxe.iterators.HashMapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.HashMapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="9"><f a="map">
	<x path="haxe.ds.HashMap">
		<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
		<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/home/vsts/work/1/s/std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.StringIterator" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringIterator.hx">
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char codes in a string.

  Note that char codes may differ across platforms because of different
  internal encoding of strings in different of runtimes.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringIteratorUnicode" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringIteratorUnicode.hx">
		<unicodeIterator public="1" get="inline" set="null" line="70" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeIterator>
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="47">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="55">
			<f a=""><x path="Int"/></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="40">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character code.

	Note that this has different semantics than a standard for-loop over the
	String's length due to the fact that it deals with surrogate pairs.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIterator" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringKeyValueIterator.hx">
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `KeyValueIterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<haxe_doc>See `KeyValueIterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char indexes and char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different runtimes.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIteratorUnicode" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringKeyValueIteratorUnicode.hx">
		<unicodeKeyValueIterator public="1" get="inline" set="null" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeKeyValueIterator>
		<byteOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</byteOffset>
		<charOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</charOffset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="50">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="58">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="43">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character offset as key and the next
	character code as value.

	Note that in the general case, because of surrogate pairs, the key values
	should not be used as offsets for various String API operations. For the
	same reason, the last key value returned might be less than `s.length - 1`.</haxe_doc>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
	<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoCheckFileTimeModification>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="47" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
	</NoCheckDependencies>
	<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="54" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
	</NoCheckShadowing>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
		<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoCheckFileTimeModification>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="47" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
		</NoCheckDependencies>
		<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="54" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
		</NoCheckShadowing>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.macro.ContextOptions" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
	<NormalContext public="1" get="inline" set="null" expr="cast 0" line="61" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the normal context.</haxe_doc>
	</NormalContext>
	<MacroContext public="1" get="inline" set="null" expr="cast 1" line="66" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the macro context.</haxe_doc>
	</MacroContext>
	<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="71" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
	</NormalAndMacroContext>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
		<NormalContext public="1" get="inline" set="null" expr="cast 0" line="61" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the normal context.</haxe_doc>
		</NormalContext>
		<MacroContext public="1" get="inline" set="null" expr="cast 1" line="66" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the macro context.</haxe_doc>
		</MacroContext>
		<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="71" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
		</NormalAndMacroContext>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx"><haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc></class>
	<class path="haxe.macro.Compiler" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compilation flag can be set on the command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		Note: This is a macro and cannot be called from within other macros. Refer
		to `haxe.macro.Context.definedValue` to obtain defined values in macro context.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<includeFile public="1" set="method" static="1">
			<f a="file:position">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Embed a JavaScript or Lua file at compile time (can be called by `--macro` or within an `__init__` method).</haxe_doc>
		</includeFile>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="508" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="515" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="520" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="508" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="515" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="520" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Off"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disable null safety.</haxe_doc>
	</Off>
	<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Loose"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
	</Loose>
	<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Strict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
	</Strict>
	<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "StrictThreaded"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
	</StrictThreaded>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Off"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disable null safety.</haxe_doc>
		</Off>
		<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Loose"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
		</Loose>
		<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Strict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
		</Strict>
		<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "StrictThreaded"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
		</StrictThreaded>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="39" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
	</class>
	<enum path="haxe.macro.Message" params="" file="/home/vsts/work/1/s/std/haxe/macro/Context.hx" module="haxe.macro.Context">
		<Info a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Info>
		<Warning a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Warning>
	</enum>
	<class path="haxe.macro.Context" params="" file="/home/vsts/work/1/s/std/haxe/macro/Context.hx"><haxe_doc>Context provides an API for macro programming.

	It contains common functions that interact with the macro interpreter to
	query or set information. Other API functions are available in the tools
	classes:

	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.ExprTools`
	- `haxe.macro.TypeTools`</haxe_doc></class>
	<typedef path="haxe.macro.Position" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.StringLiteralKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DoubleQuotes/>
		<SingleQuotes/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.Constant" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f">
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s:?kind">
			<c path="String"/>
			<e path="haxe.macro.StringLiteralKind"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`

		- The first argument `haxe` is a string with regular expression pattern.
		- The second argument `i` is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=` `-=` `/=` `*=` `<<=` `>>=` `>>>=` `|=` `&=` `^=` `%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<OpIn><haxe_doc>`in`</haxe_doc></OpIn>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.QuoteStatus" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Unquoted><haxe_doc>No quotes</haxe_doc></Unquoted>
		<Quoted><haxe_doc>Double quotes `"`</haxe_doc></Quoted>
		<haxe_doc>Represents the way something is quoted.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FunctionKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FAnonymous><haxe_doc>Anonymous function</haxe_doc></FAnonymous>
		<FNamed a="name:?inlined">
			<c path="String"/>
			<x path="Bool"/>
			<haxe_doc>Named function</haxe_doc>
		</FNamed>
		<FArrow><haxe_doc>Arrow function</haxe_doc></FArrow>
		<haxe_doc>Represents function kind in the AST</haxe_doc>
	</enum>
	<enum path="haxe.macro.ExprDef" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><t path="haxe.macro.ObjectField"/></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		- `e++` (`op = OpIncrement, postFix = true`)
		- `e--` (`op = OpDecrement, postFix = true`)
		- `++e` (`op = OpIncrement, postFix = false`)
		- `--e` (`op = OpDecrement, postFix = false`)
		- `-e` (`op = OpNeg, postFix = false`)
		- `!e` (`op = OpNot, postFix = false`)
		- `~e` (`op = OpNegBits, postFix = false`)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="kind:f">
			<x path="Null"><e path="haxe.macro.FunctionKind"/></x>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>An `if (econd) eif` or `if (econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.

		When `normalWhile` is `true` it is `while (...)`.

		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if `edef != null`.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:displayKind">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.DisplayKind"/>
			<haxe_doc>Used internally to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Used internally to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.DisplayKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DKCall/>
		<DKDot/>
		<DKStructure/>
		<DKMarked/>
		<DKPattern a="outermost"><x path="Bool"/></DKPattern>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<TNamed a="n:t">
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a type with a name.</haxe_doc>
		</TNamed>
		<TIntersection a="tl">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc><![CDATA[Represents an intersection type `T1 & T2 & ... & TN`.]]></haxe_doc>
		</TIntersection>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macro access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<AFinal><haxe_doc>Final access modifier. For functions, they can not be overridden. For
		variables, it means they can be assigned to only once.</haxe_doc></AFinal>
		<AExtern><haxe_doc>Extern access modifier.</haxe_doc></AExtern>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface:?isFinal">
			<x path="Null"><t path="haxe.macro.TypePath"/></x>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<extends path="haxe.Exception"/>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<new public="1" set="method" line="970">
			<f a="message:pos:?previous">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="140" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```</haxe_doc>
		</map>
		<getValue public="1" set="method" line="229" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="289" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="292" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="302" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="309" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/vsts/work/1/s/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/vsts/work/1/s/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="84" static="1">
			<f a="sl:?pos">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="107" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="111" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/vsts/work/1/s/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<class path="haxe.macro.PositionTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="44" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="55" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/vsts/work/1/s/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="43"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="52"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="81"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="90"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="94"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="98"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="106"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="112"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="119"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="144"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="147"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="160"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="184"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="189"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="192"><f a="func:?kind">
	<t path="haxe.macro.Function"/>
	<e path="haxe.macro.FunctionKind"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="206"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printObjectFieldKey public="1" set="method" line="209"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectFieldKey>
		<printObjectField public="1" set="method" line="216"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectField>
		<printExpr public="1" set="method" line="220"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="280"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="284"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="291"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="295">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="387"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="397">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<printExprWithPositions public="1" set="method" line="400"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExprWithPositions>
		<new public="1" set="method" line="38">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`

	  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><x path="Null"><e path="haxe.macro.Type"/></x></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<x path="Null"><e path="haxe.macro.Type"/></x>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A structurally extended class.

		@deprecated</haxe_doc>
		</KExtension>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<AccCtor><haxe_doc>Access is only allowed from the constructor.</haxe_doc></AccCtor>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<x path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></x>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><e path="haxe.macro.ModuleType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<TEnumIndex a="e1">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Access to an enum index (generated by the pattern matcher).</haxe_doc>
		</TEnumIndex>
		<TIdent a="s">
			<c path="String"/>
			<haxe_doc>An unknown identifier.</haxe_doc>
		</TIdent>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="40" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="43" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="101" static="1">
			<f a="type">
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypeParam set="method" line="146" static="1"><f a="type">
	<e path="haxe.macro.Type"/>
	<e path="haxe.macro.TypeParam"/>
</f></toTypeParam>
		<toTypePath set="method" line="154" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="380" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><x path="Null"><e path="haxe.macro.Type"/></x></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><x path="Null"><e path="haxe.macro.TypedExprDef"/></x></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="85" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="138" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="Array"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="Array"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="Array"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The array of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/class-field-property.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters
		the field has.</haxe_doc>
			</params>
			<overloads>
				<x path="Null"><c path="Array"><t path="haxe.rtti.ClassField"/></c></x>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>The line number where the field is defined. This information is only
		available if the field has an expression.
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `public`.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `final`.</haxe_doc>
			</isFinal>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/class-field-property.html#define-read-access)
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the field. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<x path="Null"><e path="haxe.rtti.CType"/></x>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<x path="Null"><t path="haxe.rtti.PathParams"/></x>
				<haxe_doc>The class' parent class defined by its type path and list of type
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is `final`.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<x path="Null"><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></x>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="Array"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<t path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</t>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></from>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>Array of `TypeTree`.</haxe_doc>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="377" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="398" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="405" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="leq.T"/></c>
	<c path="Array"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="425" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="446" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="506" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="532" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="555" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="578" static="1"><f a="name:params">
	<c path="String"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="585" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="592" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The `CTypeTools` class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/vsts/work/1/s/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta"><a>
	<statics>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</statics>
	<obj>
		<x path="Null"><d><x path="Null"><c path="Array"><d/></c></x></d></x>
		<meta><m n=":optional"/></meta>
	</obj>
	<fields>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</fields>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/vsts/work/1/s/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="56" static="1">
			<f a="t">
				<d/>
				<t path="haxe.rtti._Meta.MetaObject"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMeta>
		<getStatics public="1" set="method" line="81" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="89" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/vsts/work/1/s/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti` was
		added, an exception of type `String` is thrown.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/vsts/work/1/s/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="43"><f a="?l">
	<x path="Null"><t path="haxe.rtti.TypeRoot"/></x>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="72"><f a="a">
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
	<x path="Void"/>
</f></sortFields>
		<process public="1" set="method" line="90"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="96"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="105"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="113"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="118"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="120"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="158"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="178"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="186"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="203"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="295"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="299"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="306"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="316"><f a="c">
	<x path="haxe.xml.Access"/>
	<d/>
</f></xerror>
		<xroot set="method" line="320"><f a="x">
	<x path="haxe.xml.Access"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="325"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="336"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="347"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="355"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="366"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="417">
			<f a="x:?defPublic" v=":false">
				<x path="haxe.xml.Access"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="446"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="471"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="502"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="540"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="568"><f a="x">
	<x path="haxe.xml.Access"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="624"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="631"><f a=""><c path="Array"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<resolve public="1" set="method" line="39" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<_hx_set set="method" line="49" static="1">
		<f a="this:name:value">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</_hx_set>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<resolve public="1" set="method" line="39" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<_hx_set set="method" line="49" static="1">
			<f a="this:name:value">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</_hx_set>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml.Access" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<x public="1" get="accessor" set="null" static="1">
		<c path="Xml"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x public="1" get="inline" set="null" line="90" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="Xml"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
	</name>
	<get_name get="inline" set="null" line="98" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_name>
	<innerData public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
	</innerData>
	<innerHTML public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
	</innerHTML>
	<node public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
	</node>
	<get_node get="inline" set="null" line="133" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.NodeAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_node>
	<nodes public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeListAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
	</nodes>
	<get_nodes get="inline" set="null" line="155" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.NodeListAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_nodes>
	<att public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.AttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
	</att>
	<get_att get="inline" set="null" line="174" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.AttribAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_att>
	<has public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasAttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
	</has>
	<get_has get="inline" set="null" line="182" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.HasAttribAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_has>
	<hasNode public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasNodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
	</hasNode>
	<get_hasNode get="inline" set="null" line="198" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.HasNodeAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_hasNode>
	<elements public="1" get="accessor" set="null" static="1">
		<t path="Iterator"><x path="haxe.xml.Access"/></t>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
	</elements>
	<get_elements get="inline" set="null" line="206" static="1">
		<f a="this">
			<c path="Xml"/>
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get_elements>
	<_new public="1" get="inline" set="null" line="209" static="1">
		<f a="x">
			<c path="Xml"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_innerData set="method" line="215" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_innerData>
	<get_innerHTML set="method" line="237" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_innerHTML>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.Access_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<x public="1" get="accessor" set="null" static="1">
			<c path="Xml"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x public="1" get="inline" set="null" line="90" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<name public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<get_name get="inline" set="null" line="98" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_name>
		<innerData public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<get_node get="inline" set="null" line="133" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.NodeAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_node>
		<nodes public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeListAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<get_nodes get="inline" set="null" line="155" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.NodeListAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_nodes>
		<att public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.AttribAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<get_att get="inline" set="null" line="174" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.AttribAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_att>
		<has public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasAttribAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<get_has get="inline" set="null" line="182" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.HasAttribAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_has>
		<hasNode public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasNodeAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<get_hasNode get="inline" set="null" line="198" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.HasNodeAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_hasNode>
		<elements public="1" get="accessor" set="null" static="1">
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_elements get="inline" set="null" line="206" static="1">
			<f a="this">
				<c path="Xml"/>
				<t path="Iterator"><x path="haxe.xml.Access"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get_elements>
		<_new public="1" get="inline" set="null" line="209" static="1">
			<f a="x">
				<c path="Xml"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_innerData set="method" line="215" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_innerData>
		<get_innerHTML set="method" line="237" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_innerHTML>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="81" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="104" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="169" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="242" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="257" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="266" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="283" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="314" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="321" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<typedef path="haxe.xml.Fast" params="" file="/home/vsts/work/1/s/std/haxe/xml/Fast.hx">
		<x path="haxe.xml.Access"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<abstract path="haxe.xml._Parser.S" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
	<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IGNORE_SPACES>
	<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEGIN>
	<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEGIN_NODE>
	<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAG_NAME>
	<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BODY>
	<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ATTRIB_NAME>
	<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EQUALS>
	<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ATTVAL_BEGIN>
	<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ATTRIB_VAL>
	<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHILDS>
	<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSE>
	<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WAIT_END>
	<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WAIT_END_RET>
	<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PCDATA>
	<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HEADER>
	<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMMENT>
	<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOCTYPE>
	<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CDATA>
	<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ESCAPE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Parser.S_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ESCAPE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="js.lib.Object" params="" file="/home/vsts/work/1/s/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="416" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/vsts/work/1/s/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/home/vsts/work/1/s/std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="49"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="45"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	```haxe
	class MyXml extends haxe.xml.Proxy<"my.xml", MyStructure> {
	}

	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// Access to "myNode" is only possible if you have an id="myNode" attribute
	// in your XML, and completion works as well.
	```]]></haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/vsts/work/1/s/std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="38" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="36"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/vsts/work/1/s/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/vsts/work/1/s/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
	<crc32><x path="Null"><x path="Int"/></x></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/vsts/work/1/s/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/vsts/work/1/s/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/vsts/work/1/s/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/vsts/work/1/s/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/vsts/work/1/s/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/vsts/work/1/s/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="388" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/vsts/work/1/s/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="194" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="199" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="36"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="48"><f a="length">
	<x path="Int"/>
	<c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="78"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="121"><f a=""><c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="32"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/vsts/work/1/s/std/haxe/zip/Tools.hx">
		<compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress>
		<uncompress public="1" set="method" line="38" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></uncompress>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="/home/vsts/work/1/s/std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="38" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="36"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/vsts/work/1/s/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
			<haxe_doc>The next constant is required for computing the Central
		Directory Record(CDR) size. CDR consists of some fields
		of constant size and a filename. Constant represents
		total length of all fields with constant size for each
		file in archive</haxe_doc>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
			<haxe_doc>The following constant is the total size of all fields
		of Local File Header. It's required for calculating
		offset of start of central directory record</haxe_doc>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="haxe.ds.List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="60"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="71"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="141"><f a="files">
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="149"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="55"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="js.Boot" params="" file="/home/vsts/work/1/s/std/js/Boot.hx">
		<isClass get="inline" set="null" line="29" static="1">
			<f a="o">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isClass>
		<isInterface get="inline" set="null" line="33" static="1">
			<f a="o">
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isInterface>
		<isEnum get="inline" set="null" line="37" static="1">
			<f a="e">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isEnum>
		<getClass set="method" line="41" static="1">
			<f a="o">
				<x path="Null"><d/></x>
				<x path="Null"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClass>
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<_hx_index set="null"><x path="Int"/></_hx_index>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__interfLoop set="method" line="143" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="162" static="1">
			<f a="o:cl">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__downcastCheck set="method" line="206" static="1"><f a="o:cl">
	<d/>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></__downcastCheck>
		<__implements set="method" line="210" static="1"><f a="o:iface">
	<d/>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></__implements>
		<__cast set="method" line="214" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
		</__cast>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<__nativeClassName set="method" line="228" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></__nativeClassName>
		<__isNativeObj set="method" line="238" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></__isNativeObj>
		<__resolveNativeClass set="method" line="243" static="1"><f a="name">
	<c path="String"/>
	<x path="Null"><d/></x>
</f></__resolveNativeClass>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Browser" params="" file="/home/vsts/work/1/s/std/js/Browser.hx">
		<self public="1" get="accessor" set="null" static="1">
			<c path="js.html.WorkerGlobalScope"/>
			<haxe_doc>The global scope typed with fields available only in a worker context.</haxe_doc>
		</self>
		<get_self get="inline" set="null" line="32" static="1"><f a=""><c path="js.html.WorkerGlobalScope"/></f></get_self>
		<window public="1" get="accessor" set="null" static="1">
			<c path="js.html.Window"/>
			<haxe_doc>The global window object.</haxe_doc>
		</window>
		<get_window get="inline" set="null" line="39" static="1"><f a=""><c path="js.html.Window"/></f></get_window>
		<document public="1" get="accessor" set="null" static="1">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Shortcut to Window.document.</haxe_doc>
		</document>
		<get_document get="inline" set="null" line="45" static="1"><f a=""><c path="js.html.HTMLDocument"/></f></get_document>
		<location public="1" get="accessor" set="null" static="1">
			<c path="js.html.Location"/>
			<haxe_doc>Shortcut to Window.location.</haxe_doc>
		</location>
		<get_location get="inline" set="null" line="51" static="1"><f a=""><c path="js.html.Location"/></f></get_location>
		<navigator public="1" get="accessor" set="null" static="1">
			<c path="js.html.Navigator"/>
			<haxe_doc>Shortcut to Window.navigator.</haxe_doc>
		</navigator>
		<get_navigator get="inline" set="null" line="57" static="1"><f a=""><c path="js.html.Navigator"/></f></get_navigator>
		<console public="1" get="accessor" set="null" static="1">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Shortcut to Window.console.</haxe_doc>
		</console>
		<get_console get="inline" set="null" line="63" static="1"><f a=""><c path="js.html.ConsoleInstance"/></f></get_console>
		<supported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<haxe_doc>* True if a window object exists, false otherwise.
	 *
	 * This can be used to check if the code is being executed in a non-browser
	 * environment such as node.js.</haxe_doc>
		</supported>
		<get_supported get="inline" set="null" line="74" static="1"><f a=""><x path="Bool"/></f></get_supported>
		<getLocalStorage public="1" set="method" line="81" static="1">
			<f a=""><c path="js.html.Storage"/></f>
			<haxe_doc>* Safely gets the browser's local storage, or returns null if localStorage is unsupported or
	 * disabled.</haxe_doc>
		</getLocalStorage>
		<getSessionStorage public="1" set="method" line="100" static="1">
			<f a=""><c path="js.html.Storage"/></f>
			<haxe_doc>* Safely gets the browser's session storage, or returns null if sessionStorage is unsupported
	 * or disabled.</haxe_doc>
		</getSessionStorage>
		<createXMLHttpRequest public="1" set="method" line="119" static="1">
			<f a=""><c path="js.html.XMLHttpRequest"/></f>
			<haxe_doc>* Creates an XMLHttpRequest, with a fallback to ActiveXObject for ancient versions of Internet
	 * Explorer.</haxe_doc>
		</createXMLHttpRequest>
		<alert public="1" get="inline" set="null" line="132" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Display an alert message box containing the given message. See also `Window.alert()`.</haxe_doc>
		</alert>
	</class>
	<class path="js.Cookie" params="" file="/home/vsts/work/1/s/std/js/Cookie.hx">
		<set public="1" set="method" line="32" static="1">
			<f a="name:value:?expireDelay:?path:?domain">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create or update a cookie.
		@param  expireDelay  In seconds. If null, the cookie expires at end of session.</haxe_doc>
		</set>
		<all public="1" set="method" line="50" static="1">
			<f a=""><c path="haxe.ds.StringMap"><c path="String"/></c></f>
			<haxe_doc>Returns all cookies.</haxe_doc>
		</all>
		<get public="1" set="method" line="66" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Returns value of a cookie.</haxe_doc>
		</get>
		<exists public="1" set="method" line="73" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if a cookie `name` exists.</haxe_doc>
		</exists>
		<remove public="1" set="method" line="80" static="1">
			<f a="name:?path:?domain">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove a cookie.</haxe_doc>
		</remove>
	</class>
	<typedef path="js.Error" params="" file="/home/vsts/work/1/s/std/js/Error.hx">
		<c path="js.lib.Error"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.EvalError" params="" file="/home/vsts/work/1/s/std/js/Error.hx" module="js.Error">
		<c path="js.lib.EvalError"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.RangeError" params="" file="/home/vsts/work/1/s/std/js/Error.hx" module="js.Error">
		<c path="js.lib.RangeError"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.ReferenceError" params="" file="/home/vsts/work/1/s/std/js/Error.hx" module="js.Error">
		<c path="js.lib.ReferenceError"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.SyntaxError" params="" file="/home/vsts/work/1/s/std/js/Error.hx" module="js.Error">
		<c path="js.lib.SyntaxError"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.TypeError" params="" file="/home/vsts/work/1/s/std/js/Error.hx" module="js.Error">
		<c path="js.lib.TypeError"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.URIError" params="" file="/home/vsts/work/1/s/std/js/Error.hx" module="js.Error">
		<c path="js.lib.URIError"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.Function" params="" file="/home/vsts/work/1/s/std/js/Function.hx">
		<c path="js.lib.Function"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.JsIterator" params="T" file="/home/vsts/work/1/s/std/js/JsIterator.hx">
		<t path="js.lib.Iterator"><c path="js.JsIterator.T"/></t>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.JsIteratorStep" params="T" file="/home/vsts/work/1/s/std/js/JsIterator.hx" module="js.JsIterator">
		<t path="js.lib.IteratorStep"><c path="js.JsIteratorStep.T"/></t>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.Lib" params="" file="/home/vsts/work/1/s/std/js/Lib.hx">
		<debug public="1" get="inline" set="null" line="33" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Inserts a 'debugger' statement that will make a breakpoint if a debugger is available.</haxe_doc>
		</debug>
		<alert public="1" set="method" line="42" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Lib.alert() is deprecated, use Browser.alert() instead"</e></m></meta>
			<haxe_doc>Display an alert message box containing the given message.
		@deprecated Use Browser.alert() instead.</haxe_doc>
		</alert>
		<eval public="1" get="inline" set="null" line="46" static="1"><f a="code">
	<c path="String"/>
	<d/>
</f></eval>
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="69" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<undefined public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>Returns JavaScript `undefined` value.

		Note that this is only needed in very rare cases when working with external JavaScript code.

		In Haxe, `null` is used to represent the absence of a value.</haxe_doc>
		</undefined>
		<get_undefined get="inline" set="null" line="82" static="1"><f a=""><d/></f></get_undefined>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="100" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="110" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="122" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<rethrow public="1" set="method" line="131" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Re-throw last cathed exception, preserving original stack information.

		Calling this is only possible inside a catch statement.</haxe_doc>
		</rethrow>
		<getOriginalException public="1" set="method" line="142" static="1">
			<f a=""><d/></f>
			<haxe_doc>Get original caught exception object, before unwrapping the `js.Boot.HaxeError`.

		Can be useful if we want to redirect the original error into some external API (e.g. Promise or node.js callbacks).

		Calling this is only possible inside a catch statement.</haxe_doc>
		</getOriginalException>
		<getNextHaxeUID get="inline" set="null" line="150" static="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":allow"><e>haxe.ds.ObjectMap.assignId</e></m>
			</meta>
			<haxe_doc>Generate next unique id</haxe_doc>
		</getNextHaxeUID>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
	</class>
	<typedef path="js.Object" params="" file="/home/vsts/work/1/s/std/js/Object.hx">
		<c path="js.lib.Object"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.ObjectPrototype" params="" file="/home/vsts/work/1/s/std/js/Object.hx" module="js.Object">
		<t path="js.lib.ObjectPrototype"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.ObjectPropertyDescriptor" params="" file="/home/vsts/work/1/s/std/js/Object.hx" module="js.Object">
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.Promise" params="T" file="/home/vsts/work/1/s/std/js/Promise.hx">
		<c path="js.lib.Promise"><c path="js.Promise.T"/></c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.PromiseHandler" params="T:TOut" file="/home/vsts/work/1/s/std/js/Promise.hx" module="js.Promise">
		<x path="js.lib.PromiseHandler">
			<c path="js.PromiseHandler.T"/>
			<c path="js.PromiseHandler.TOut"/>
		</x>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.Thenable" params="T" file="/home/vsts/work/1/s/std/js/Promise.hx" module="js.Promise">
		<x path="js.lib.Thenable"><c path="js.Thenable.T"/></x>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.ThenableStruct" params="T" file="/home/vsts/work/1/s/std/js/Promise.hx" module="js.Promise">
		<t path="js.lib.ThenableStruct"><c path="js.ThenableStruct.T"/></t>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.RegExp" params="" file="/home/vsts/work/1/s/std/js/RegExp.hx">
		<c path="js.lib.RegExp"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.RegExpMatch" params="" file="/home/vsts/work/1/s/std/js/RegExp.hx" module="js.RegExp">
		<c path="js.lib.RegExpMatch"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.Selection" params="" file="/home/vsts/work/1/s/std/js/Selection.hx">
		<doc><d/></doc>
		<get public="1" set="method" line="34">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<select public="1" set="method" line="45"><f a="start:end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></select>
		<insert public="1" set="method" line="81">
			<f a="left:text:right">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</insert>
		<new public="1" set="method" line="30"><f a="doc">
	<c path="js.html.TextAreaElement"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="js.Set" params="T" file="/home/vsts/work/1/s/std/js/Set.hx">
		<c path="js.lib.Set"><c path="js.Set.T"/></c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.Symbol" params="" file="/home/vsts/work/1/s/std/js/Symbol.hx">
		<c path="js.lib.Symbol"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.html.AbortController" params="" file="/home/vsts/work/1/s/std/js/html/AbortController.hx" extern="1">
		<signal public="1" set="null">
			<c path="js.html.AbortSignal"/>
			<haxe_doc>Returns a `AbortSignal` object instance, which can be used to communicate with/abort a DOM request.</haxe_doc>
		</signal>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Aborts a DOM request before it has completed. This is able to abort fetch requests, consumption of any response `Body`, and streams.</haxe_doc>
		</abort>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AbortController` interface represents a controller object that allows you to abort one or more DOM requests as and when desired.

	Documentation [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AbortController$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AbortController>]]></haxe_doc>
		<meta><m n=":native"><e>"AbortController"</e></m></meta>
	</class>
	<class path="js.html.EventTarget" params="" file="/home/vsts/work/1/s/std/js/html/EventTarget.hx" extern="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?options:?wantsUntrusted">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.AddEventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><addEventListener public="1" set="method">
	<f a="type:listener:?options:?wantsUntrusted">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.AddEventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
</addEventListener></overloads>
		</addEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?options">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.EventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><removeEventListener public="1" set="method">
	<f a="type:listener:?options">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.EventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
</removeEventListener></overloads>
		</removeEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="js.html.Event"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Dispatch an event to this `EventTarget`.
		@throws DOMError</haxe_doc>
		</dispatchEvent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`EventTarget` is an interface implemented by objects that can receive events and may have listeners for them.

	Documentation [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventTarget>]]></haxe_doc>
		<meta><m n=":native"><e>"EventTarget"</e></m></meta>
	</class>
	<class path="js.html.AbortSignal" params="" file="/home/vsts/work/1/s/std/js/html/AbortSignal.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<aborted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the request(s) the signal is communicating with is/are aborted (`true`) or not (`false`).</haxe_doc>
		</aborted>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Invoked when an `abort_(dom_abort_api)` event fires, i.e. when the DOM request(s) the signal is communicating with is/are aborted.</haxe_doc>
		</onabort>
		<haxe_doc><![CDATA[The `AbortSignal` interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an `AbortController` object.

	Documentation [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal>]]></haxe_doc>
		<meta><m n=":native"><e>"AbortSignal"</e></m></meta>
	</class>
	<typedef path="js.html.AddEventListenerOptions" params="" file="/home/vsts/work/1/s/std/js/html/AddEventListenerOptions.hx"><a>
	<passive>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</passive>
	<once>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</once>
	<capture>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</capture>
</a></typedef>
	<abstract path="js.html.AlignSetting" params="" file="/home/vsts/work/1/s/std/js/html/AlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" extern="1" final="1">
	<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="28" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "start"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</START>
	<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "center"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CENTER>
	<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</END>
	<LEFT public="1" get="inline" set="null" expr="cast &quot;left&quot;" line="31" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "left"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LEFT>
	<RIGHT public="1" get="inline" set="null" expr="cast &quot;right&quot;" line="32" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "right"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RIGHT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" extern="1" final="1">
		<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="28" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "start"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</START>
		<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "center"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CENTER>
		<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</END>
		<LEFT public="1" get="inline" set="null" expr="cast &quot;left&quot;" line="31" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "left"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LEFT>
		<RIGHT public="1" get="inline" set="null" expr="cast &quot;right&quot;" line="32" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "right"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RIGHT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Node" params="" file="/home/vsts/work/1/s/std/js/html/Node.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ELEMENT_NODE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ELEMENT_NODE>
		<ATTRIBUTE_NODE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ATTRIBUTE_NODE>
		<TEXT_NODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TEXT_NODE>
		<CDATA_SECTION_NODE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</CDATA_SECTION_NODE>
		<ENTITY_REFERENCE_NODE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ENTITY_REFERENCE_NODE>
		<ENTITY_NODE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</ENTITY_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PROCESSING_INSTRUCTION_NODE>
		<COMMENT_NODE public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</COMMENT_NODE>
		<DOCUMENT_NODE public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOCUMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</DOCUMENT_TYPE_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</DOCUMENT_FRAGMENT_NODE>
		<NOTATION_NODE public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</NOTATION_NODE>
		<DOCUMENT_POSITION_DISCONNECTED public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_PRECEDING public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_POSITION_FOLLOWING public="1" get="inline" set="null" expr="4" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_CONTAINS public="1" get="inline" set="null" expr="8" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" get="inline" set="null" expr="16" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" get="inline" set="null" expr="32" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
		<nodeType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the type of the node. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    Name
		    Value
		   </tr>
		   <tr>
		    <td><code>ELEMENT_NODE</code></td>
		    <td><code>1</code></td>
		   </tr>
		   <tr>
		    <td><code>ATTRIBUTE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>2</code></td>
		   </tr>
		   <tr>
		    <td><code>TEXT_NODE</code></td>
		    <td><code>3</code></td>
		   </tr>
		   <tr>
		    <td><code>CDATA_SECTION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>4</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_REFERENCE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>5</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_NODE</code> <em>(deprecated)</em></td>
		    <td><code>6</code></td>
		   </tr>
		   <tr>
		    <td><code>PROCESSING_INSTRUCTION_NODE</code></td>
		    <td><code>7</code></td>
		   </tr>
		   <tr>
		    <td><code>COMMENT_NODE</code></td>
		    <td><code>8</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_NODE</code></td>
		    <td><code>9</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_TYPE_NODE</code></td>
		    <td><code>10</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_FRAGMENT_NODE</code></td>
		    <td><code>11</code></td>
		   </tr>
		   <tr>
		    <td><code>NOTATION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>12</code></td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</nodeType>
		<nodeName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the name of the `Node`. The structure of the name will differ with the node type. E.g. An `HTMLElement` will contain the name of the corresponding tag, like `'audio'` for an `HTMLAudioElement`, a `Text` node will have the `'#text'` string, or a `Document` node will have the `'#document'` string.</haxe_doc>
		</nodeName>
		<baseURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the base URL. The concept of base URL changes from one language to another; in HTML, it corresponds to the protocol, the domain name and the directory structure, that is all until the last `'/'`.</haxe_doc>
		</baseURI>
		<isConnected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. the `Document` object in the case of the normal DOM, or the `ShadowRoot` in the case of a shadow DOM.</haxe_doc>
		</isConnected>
		<ownerDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns the `Document` that this node belongs to. If the node is itself a document, returns `null`.</haxe_doc>
		</ownerDocument>
		<parentNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns `null`.</haxe_doc>
		</parentNode>
		<parentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns an `Element` that is the parent of this node. If the node has no parent, or if that parent is not an `Element`, this property returns `null`.</haxe_doc>
		</parentElement>
		<childNodes public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns a live `NodeList` containing all the children of this node. `NodeList` being live means that if the children of the `Node` change, the `NodeList` object is automatically updated.</haxe_doc>
		</childNodes>
		<firstChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the first direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</firstChild>
		<lastChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the last direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the previous node in the tree, or `null` if there isn't such node.</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the next node in the tree, or `null` if there isn't such node.</haxe_doc>
		</nextSibling>
		<nodeValue public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the value of the current node</haxe_doc>
		</nodeValue>
		<textContent public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the textual content of an element and all its descendants.</haxe_doc>
		</textContent>
		<getRootNode public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.GetRootNodeOptions"/></x>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns the context object's root which optionally includes the shadow root if it is available. </haxe_doc>
		</getRootNode>
		<hasChildNodes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has any child nodes, or not.</haxe_doc>
		</hasChildNodes>
		<insertBefore public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Inserts a `Node` before the reference node as a child of a specified parent node.
		@throws DOMError</haxe_doc>
		</insertBefore>
		<appendChild public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adds the specified childNode argument as the last child to the current node.
		
		 If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position.
		@throws DOMError</haxe_doc>
		</appendChild>
		<replaceChild public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Replaces one child `Node` of the current one with the second one given in parameter.
		@throws DOMError</haxe_doc>
		</replaceChild>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Removes a child node from the current element, which must be a child of the current node.
		@throws DOMError</haxe_doc>
		</removeChild>
		<normalize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</normalize>
		<cloneNode public="1" set="method">
			<f a="?deep" v="false">
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Clone a `Node`, and optionally, all of its contents. By default, it clones the content of the node.
		@throws DOMError</haxe_doc>
		</cloneNode>
		<isSameNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether or not the two nodes are the same (that is, they reference the same object).</haxe_doc>
		</isSameNode>
		<isEqualNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` which indicates whether or not two nodes are of the same type and all their defining data points match.</haxe_doc>
		</isEqualNode>
		<compareDocumentPosition public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the position of the current node against another node in any other document.</haxe_doc>
		</compareDocumentPosition>
		<contains public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether a node is a descendant of a given node or not.</haxe_doc>
		</contains>
		<lookupPrefix public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the prefix for a given namespace URI, if present, and `null` if not. When multiple prefixes are possible, the result is implementation-dependent.</haxe_doc>
		</lookupPrefix>
		<lookupNamespaceURI public="1" set="method">
			<f a="prefix">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Accepts a prefix and returns the namespace URI associated with it on the given node if found (and `null` if not). Supplying `null` for the prefix will return the default namespace.</haxe_doc>
		</lookupNamespaceURI>
		<isDefaultNamespace public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Accepts a namespace URI as an argument and returns a `Boolean` with a value of `true` if the namespace is the default namespace on the given node or `false` if not.</haxe_doc>
		</isDefaultNamespace>
		<haxe_doc><![CDATA[`Node` is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.

	Documentation [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Node$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Node>]]></haxe_doc>
		<meta><m n=":native"><e>"Node"</e></m></meta>
	</class>
	<class path="js.html.DOMElement" params="" file="/home/vsts/work/1/s/std/js/html/DOMElement.hx" extern="1">
		<extends path="js.html.Node"/>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>The namespace URI of the element, or `null` if it is no namespace.
		 
		 Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the `http://www.w3.org/1999/xhtml` namespace in both HTML and XML trees. `1.9.2`</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the element, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the element.</haxe_doc>
		</localName>
		<tagName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `String` with the name of the tag for the given element.</haxe_doc>
		</tagName>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the id of the element.</haxe_doc>
		</id>
		<className public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the class of the element.</haxe_doc>
		</className>
		<classList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` containing the list of class attributes.</haxe_doc>
		</classList>
		<attributes public="1" set="null">
			<c path="js.html.NamedNodeMap"/>
			<haxe_doc>Returns a `NamedNodeMap` object containing the assigned attributes of the corresponding HTML element.</haxe_doc>
		</attributes>
		<title public="1"><c path="String"/></title>
		<lang public="1"><c path="String"/></lang>
		<dir public="1"><c path="String"/></dir>
		<dataset public="1" set="null"><c path="js.html.DOMStringMap"/></dataset>
		<innerText public="1"><c path="String"/></innerText>
		<itemScope public="1"><x path="Bool"/></itemScope>
		<itemType public="1" set="null"><c path="js.html.DOMTokenList"/></itemType>
		<itemId public="1"><c path="String"/></itemId>
		<itemRef public="1" set="null"><c path="js.html.DOMTokenList"/></itemRef>
		<itemProp public="1" set="null"><c path="js.html.DOMTokenList"/></itemProp>
		<properties public="1" set="null"><c path="js.html.HTMLPropertiesCollection"/></properties>
		<itemValue public="1"><d/></itemValue>
		<hidden public="1"><x path="Bool"/></hidden>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<accessKey public="1"><c path="String"/></accessKey>
		<accessKeyLabel public="1" set="null"><c path="String"/></accessKeyLabel>
		<draggable public="1"><x path="Bool"/></draggable>
		<contentEditable public="1"><c path="String"/></contentEditable>
		<isContentEditable public="1" set="null"><x path="Bool"/></isContentEditable>
		<contextMenu public="1" set="null"><c path="js.html.MenuElement"/></contextMenu>
		<spellcheck public="1"><x path="Bool"/></spellcheck>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<oncopy public="1"><x path="haxe.Function"/></oncopy>
		<oncut public="1"><x path="haxe.Function"/></oncut>
		<onpaste public="1"><x path="haxe.Function"/></onpaste>
		<offsetParent public="1" set="null"><c path="js.html.Element"/></offsetParent>
		<offsetTop public="1" set="null"><x path="Int"/></offsetTop>
		<offsetLeft public="1" set="null"><x path="Int"/></offsetLeft>
		<offsetWidth public="1" set="null"><x path="Int"/></offsetWidth>
		<offsetHeight public="1" set="null"><x path="Int"/></offsetHeight>
		<scrollTop public="1">
			<x path="Int"/>
			<haxe_doc>A `Number` representing number of pixels the top of the document is scrolled vertically.</haxe_doc>
		</scrollTop>
		<scrollLeft public="1">
			<x path="Int"/>
			<haxe_doc>Is a `Number` representing the left scroll offset of the element.</haxe_doc>
		</scrollLeft>
		<scrollWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view width of the element.</haxe_doc>
		</scrollWidth>
		<scrollHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view height of an element.</haxe_doc>
		</scrollHeight>
		<clientTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the top border of the element.</haxe_doc>
		</clientTop>
		<clientLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the left border of the element.</haxe_doc>
		</clientLeft>
		<clientWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner width of the element.</haxe_doc>
		</clientWidth>
		<clientHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner height of the element.</haxe_doc>
		</clientHeight>
		<scrollTopMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum top scroll offset possible for the element.</haxe_doc>
		</scrollTopMax>
		<scrollLeftMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum left scroll offset possible for the element.</haxe_doc>
		</scrollLeftMax>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element's content.</haxe_doc>
		</innerHTML>
		<outerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.</haxe_doc>
		</outerHTML>
		<shadowRoot public="1" set="null">
			<c path="js.html.ShadowRoot"/>
			<haxe_doc>Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.</haxe_doc>
		</shadowRoot>
		<assignedSlot public="1" set="null"><c path="js.html.SlotElement"/></assignedSlot>
		<slot public="1">
			<c path="String"/>
			<haxe_doc>Returns the name of the shadow DOM slot the element is inserted in.</haxe_doc>
		</slot>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handling code for the `wheel` event. This is now implemented on `GlobalEventHandlers.onwheel`.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `gotpointercapture` event type.</haxe_doc>
		</ongotpointercapture>
		<onlostpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `lostpointercapture` event type.</haxe_doc>
		</onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getAttributeNames public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array of attribute names from the current element.</haxe_doc>
		</getAttributeNames>
		<getAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the named attribute from the current node and returns it as an `Object`.</haxe_doc>
		</getAttribute>
		<getAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an `Object`.</haxe_doc>
		</getAttributeNS>
		<toggleAttribute public="1" set="method">
			<f a="name:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.
		@throws DOMError</haxe_doc>
		</toggleAttribute>
		<setAttribute public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of a named attribute of the current node.
		@throws DOMError</haxe_doc>
		</setAttribute>
		<setAttributeNS public="1" set="method">
			<f a="namespace:name:value">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNS>
		<removeAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttribute>
		<removeAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNS>
		<hasAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute or not.</haxe_doc>
		</hasAttribute>
		<hasAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute, in the specified namespace, or not.</haxe_doc>
		</hasAttributeNS>
		<hasAttributes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has one or more HTML attributes present.</haxe_doc>
		</hasAttributes>
		<closest public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the `Element` which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.
		@throws DOMError</haxe_doc>
		</closest>
		<matches public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating whether or not the element would be selected by the specified selector string.
		@throws DOMError</haxe_doc>
		</matches>
		<webkitMatchesSelector public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</webkitMatchesSelector>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name, from the current element.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name and namespace, from the current element.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` that contains all descendants of the current element that possess the list of classes given in the parameter.</haxe_doc>
		</getElementsByClassName>
		<insertAdjacentElement public="1" set="method">
			<f a="where:element">
				<c path="String"/>
				<c path="js.html.Element"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Inserts a given element node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentElement>
		<insertAdjacentText public="1" set="method">
			<f a="where:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a given text node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentText>
		<setPointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Designates a specific element as the capture target of future pointer events.
		@throws DOMError</haxe_doc>
		</setPointerCapture>
		<releasePointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Releases (stops) pointer capture that was previously set for a specific `PointerEvent`.
		@throws DOMError</haxe_doc>
		</releasePointerCapture>
		<hasPointerCapture public="1" set="method"><f a="pointerId">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasPointerCapture>
		<setCapture public="1" set="method">
			<f a="?retargetToElement" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ retargetToElement : false }</e></m></meta>
			<haxe_doc>Sets up mouse event capture, redirecting all mouse events to this element.</haxe_doc>
		</setCapture>
		<releaseCapture public="1" set="method"><f a=""><x path="Void"/></f></releaseCapture>
		<getAttributeNode public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the named attribute from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNode>
		<setAttributeNode public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNode>
		<removeAttributeNode public="1" set="method">
			<f a="oldAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNode>
		<getAttributeNodeNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNodeNS>
		<setAttributeNodeNS public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNodeNS>
		<click public="1" set="method"><f a=""><x path="Void"/></f></click>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns the size of an element and its position relative to the viewport.</haxe_doc>
		</getBoundingClientRect>
		<scrollIntoView public="1" set="method">
			<f a="?arg">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
			<overloads><scrollIntoView public="1" set="method">
	<f a="?arg">
		<x path="Null"><t path="js.html.ScrollIntoViewOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
</scrollIntoView></overloads>
		</scrollIntoView>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scroll public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollBy></overloads>
		</scrollBy>
		<insertAdjacentHTML public="1" set="method">
			<f a="position:text">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.
		@throws DOMError</haxe_doc>
		</insertAdjacentHTML>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Node` which matches the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of nodes which match the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<attachShadow public="1" set="method">
			<f a="shadowRootInitDict">
				<t path="js.html.ShadowRootInit"/>
				<c path="js.html.ShadowRoot"/>
			</f>
			<haxe_doc>Attatches a shadow DOM tree to the specified element and returns a reference to its `ShadowRoot`.
		@throws DOMError</haxe_doc>
		</attachShadow>
		<requestFullscreen public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Asynchronously asks the browser to make the element full-screen.
		@throws DOMError</haxe_doc>
		</requestFullscreen>
		<requestPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Allows to asynchronously ask for the pointer to be locked on the given element.</haxe_doc>
		</requestPointerLock>
		<animate public="1" set="method">
			<f a="keyframes:?options">
				<d/>
				<x path="Float"/>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
			<overloads><animate public="1" set="method">
	<f a="keyframes:?options">
		<d/>
		<x path="Null"><t path="js.html.KeyframeAnimationOptions"/></x>
		<c path="js.html.Animation"/>
	</f>
	<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
</animate></overloads>
		</animate>
		<getAnimations public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.AnimationFilter"/></x>
				<c path="Array"><c path="js.html.Animation"/></c>
			</f>
			<haxe_doc>Returns an array of Animation objects currently active on the element.</haxe_doc>
		</getAnimations>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<haxe_doc><![CDATA[`Element` is the most general base class from which all objects in a `Document` inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from `Element`.

	Documentation [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Element$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Element>]]></haxe_doc>
		<meta><m n=":native"><e>"Element"</e></m></meta>
	</class>
	<class path="js.html.Element" params="" file="/home/vsts/work/1/s/std/js/html/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<click public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a mouse click event to the element.</haxe_doc>
		</click>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Makes the element the current keyboard focus.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes keyboard focus from the currently focused element.
		@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[The `HTMLElement` interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.

	Documentation [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLElement"</e></m></meta>
	</class>
	<class path="js.html.AnchorElement" params="" file="/home/vsts/work/1/s/std/js/html/AnchorElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating where to display the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, specifying the relationship of the target object to the linked object.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `hreflang` HTML attribute, indicating the language of the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, indicating the MIME type of the linked resource.</haxe_doc>
		</type>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being a synonym for the `Node.textContent` property.</haxe_doc>
		</text>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a comma-separated list of coordinates.</haxe_doc>
		</coords>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding of the linked resource.</haxe_doc>
		</charset>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the anchor name.</haxe_doc>
		</name>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing that the `rev` HTML attribute, specifying the relationship of the link object to the target object.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the shape of the active area.</haxe_doc>
		</shape>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAnchorElement` interface represents hyperlink elements and provides special properties and methods (beyond those of the regular `HTMLElement` object interface that they inherit from) for manipulating the layout and presentation of such elements.

	Documentation [HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAnchorElement"</e></m></meta>
	</class>
	<class path="js.html.Animation" params="" file="/home/vsts/work/1/s/std/js/html/Animation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the `String` used to identify the animation.</haxe_doc>
		</id>
		<effect public="1">
			<c path="js.html.AnimationEffect"/>
			<haxe_doc>Gets and sets the `AnimationEffectReadOnly` associated with this animation. This will usually be a `KeyframeEffect` object.</haxe_doc>
		</effect>
		<timeline public="1">
			<c path="js.html.AnimationTimeline"/>
			<haxe_doc>Gets or sets the `AnimationTimeline` associated with this animation.</haxe_doc>
		</timeline>
		<startTime public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the scheduled time when an animation's playback should begin.</haxe_doc>
		</startTime>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a `AnimationTimeline`, is inactive or hasn't been played yet, its value is `null`.</haxe_doc>
		</currentTime>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the playback rate of the animation.</haxe_doc>
		</playbackRate>
		<playState public="1" set="null">
			<x path="js.html.AnimationPlayState"/>
			<haxe_doc>Returns an enumerated value describing the playback state of an animation.</haxe_doc>
		</playState>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.</haxe_doc>
		</pending>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current ready Promise for this animation.</haxe_doc>
		</ready>
		<finished public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current finished Promise for this animation.</haxe_doc>
		</finished>
		<onfinish public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `finish` event.</haxe_doc>
		</onfinish>
		<oncancel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `cancel` event.</haxe_doc>
		</oncancel>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears all `KeyframeEffect` caused by this animation and aborts its playback.</haxe_doc>
		</cancel>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Seeks either end of an animation, depending on whether the animation is playing or reversing.
		@throws DOMError</haxe_doc>
		</finish>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Starts or resumes playing of an animation, or begins the animation again if it previously finished.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends playing of an animation.
		@throws DOMError</haxe_doc>
		</pause>
		<updatePlaybackRate public="1" set="method">
			<f a="playbackRate">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the speed of an animation after first synchronizing its playback position.</haxe_doc>
		</updatePlaybackRate>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning.
		@throws DOMError</haxe_doc>
		</reverse>
		<new public="1" set="method">
			<f a="?effect:?timeline">
				<c path="js.html.AnimationEffect"/>
				<c path="js.html.AnimationTimeline"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Animation` interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.

	Documentation [Animation](https://developer.mozilla.org/en-US/docs/Web/API/Animation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Animation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Animation>]]></haxe_doc>
		<meta><m n=":native"><e>"Animation"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffect" params="" file="/home/vsts/work/1/s/std/js/html/AnimationEffect.hx" extern="1">
		<getTiming public="1" set="method"><f a=""><t path="js.html.EffectTiming"/></f></getTiming>
		<getComputedTiming public="1" set="method"><f a=""><t path="js.html.ComputedEffectTiming"/></f></getComputedTiming>
		<updateTiming public="1" set="method">
			<f a="?timing">
				<x path="Null"><t path="js.html.OptionalEffectTiming"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</updateTiming>
		<haxe_doc><![CDATA[The `AnimationEffect` interface of the Web Animations API defines current and future animation effects like `KeyframeEffect`, which can be passed to `Animation` objects for playing, and `KeyframeEffectReadOnly` (which is used by CSS Animations and Transitions).

	Documentation [AnimationEffect](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffect"</e></m></meta>
	</class>
	<class path="js.html.Event" params="" file="/home/vsts/work/1/s/std/js/html/Event.hx" extern="1">
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<CAPTURING_PHASE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CAPTURING_PHASE>
		<AT_TARGET public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BUBBLING_PHASE>
		<ALT_MASK public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ALT_MASK>
		<CONTROL_MASK public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CONTROL_MASK>
		<SHIFT_MASK public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHIFT_MASK>
		<META_MASK public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</META_MASK>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the event (case-insensitive).</haxe_doc>
		</type>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the target to which the event was originally dispatched.</haxe_doc>
		</target>
		<currentTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent; it's possible this has been changed along the way through retargeting.</haxe_doc>
		</currentTarget>
		<eventPhase public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Indicates which phase of the event flow is being processed.</haxe_doc>
		</eventPhase>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event bubbles up through the DOM or not.</haxe_doc>
		</bubbles>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event is cancelable.</haxe_doc>
		</cancelable>
		<returnValue public="1">
			<x path="Bool"/>
			<haxe_doc>A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use `Event.preventDefault()` and `Event.defaultPrevented` instead, but you can use `returnValue` if you choose to do so.</haxe_doc>
		</returnValue>
		<defaultPrevented public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not `event.preventDefault()` has been called on the event.</haxe_doc>
		</defaultPrevented>
		<composed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.</haxe_doc>
		</composed>
		<isTrusted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent).</haxe_doc>
		</isTrusted>
		<timeStamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time at which the event was created (in milliseconds). By specification, this value is time since epoch, but in reality browsers' definitions vary; in addition, work is underway to change this to be a `DOMHighResTimeStamp` instead.</haxe_doc>
		</timeStamp>
		<cancelBubble public="1">
			<x path="Bool"/>
			<haxe_doc>A historical alias to `Event.stopPropagation()`. Setting its value to `true` before returning from an event handler prevents propagation of the event.</haxe_doc>
		</cancelBubble>
		<originalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The original target of the event, before any retargetings (Mozilla-specific).</haxe_doc>
		</originalTarget>
		<explicitOriginalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The explicit original target of the event (Mozilla-specific).</haxe_doc>
		</explicitOriginalTarget>
		<composedPath public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.EventTarget"/></c></f>
			<haxe_doc>Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its `ShadowRoot.mode` closed.</haxe_doc>
		</composedPath>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the propagation of events further along in the DOM.</haxe_doc>
		</stopPropagation>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>For this particular event, no other listener will be called. Neither those attached on the same element, nor those attached on elements which will be traversed later (in capture phase, for instance)</haxe_doc>
		</stopImmediatePropagation>
		<preventDefault public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels the event (if it is cancelable).</haxe_doc>
		</preventDefault>
		<initEvent public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
			<haxe_doc>Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.EventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Event` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of events, some of which use other interfaces based on the main `Event` interface. `Event` itself contains the properties and methods which are common to all events.

	Documentation [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Event$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Event>]]></haxe_doc>
		<meta><m n=":native"><e>"Event"</e></m></meta>
	</class>
	<class path="js.html.AnimationEvent" params="" file="/home/vsts/work/1/s/std/js/html/AnimationEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<animationName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the value of the `animation-name` CSS property associated with the transition.</haxe_doc>
		</animationName>
		<elapsedTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `float` giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an `"animationstart"` event, `elapsedTime` is `0.0` unless there was a negative value for `animation-delay`, in which case the event will be fired with `elapsedTime` containing  `(-1 * `delay`)`.</haxe_doc>
		</elapsedTime>
		<pseudoElement public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString`, starting with `'::'`, containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: `''``.`</haxe_doc>
		</pseudoElement>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.AnimationEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AnimationEvent` interface represents events providing information related to animations.

	Documentation [AnimationEvent](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEvent"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationEventInit" params="" file="/home/vsts/work/1/s/std/js/html/AnimationEventInit.hx"><a>
	<pseudoElement>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</pseudoElement>
	<elapsedTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<animationName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</animationName>
</a></typedef>
	<typedef path="js.html.AnimationFilter" params="" file="/home/vsts/work/1/s/std/js/html/AnimationFilter.hx"><a><subtree>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</subtree></a></typedef>
	<abstract path="js.html.AnimationPlayState" params="" file="/home/vsts/work/1/s/std/js/html/AnimationPlayState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" extern="1" final="1">
	<IDLE public="1" get="inline" set="null" expr="cast &quot;idle&quot;" line="28" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "idle"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IDLE>
	<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="29" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "running"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RUNNING>
	<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="30" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "paused"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAUSED>
	<FINISHED public="1" get="inline" set="null" expr="cast &quot;finished&quot;" line="31" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "finished"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FINISHED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" extern="1" final="1">
		<IDLE public="1" get="inline" set="null" expr="cast &quot;idle&quot;" line="28" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "idle"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IDLE>
		<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="29" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "running"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RUNNING>
		<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="30" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "paused"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAUSED>
		<FINISHED public="1" get="inline" set="null" expr="cast &quot;finished&quot;" line="31" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "finished"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FINISHED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.AnimationPlaybackEvent" params="" file="/home/vsts/work/1/s/std/js/html/AnimationPlaybackEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<timelineTime public="1" set="null"><x path="Float"/></timelineTime>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.AnimationPlaybackEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The AnimationPlaybackEvent interface of the Web Animations API represents animation events.

	Documentation [AnimationPlaybackEvent](https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationPlaybackEvent"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationPlaybackEventInit" params="" file="/home/vsts/work/1/s/std/js/html/AnimationPlaybackEventInit.hx"><a>
	<timelineTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</timelineTime>
	<currentTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</currentTime>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.AnimationTimeline" params="" file="/home/vsts/work/1/s/std/js/html/AnimationTimeline.hx" extern="1">
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the time value in milliseconds for this timeline or `null` if this timeline is inactive.</haxe_doc>
		</currentTime>
		<haxe_doc><![CDATA[The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by `DocumentTimeline` and future timeline types) and is not itself directly used by developers. Anywhere you see `AnimationTimeline`, you should use `DocumentTimeline` or any other timeline type instead.

	Documentation [AnimationTimeline](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationTimeline"</e></m></meta>
	</class>
	<class path="js.html.AreaElement" params="" file="/home/vsts/work/1/s/std/js/html/AreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute, containing alternative text for the element.</haxe_doc>
		</alt>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `coords` HTML attribute, containing coordinates to define the hot-spot region.</haxe_doc>
		</coords>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `shape` HTML attribute, indicating the shape of the hot-spot, limited to known values.</haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating the browsing context in which to open the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.</haxe_doc>
		</relList>
		<noHref public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the area is inactive (`true`) or active (`false`).</haxe_doc>
		</noHref>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAreaElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.

	Documentation [HTMLAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAreaElement"</e></m></meta>
	</class>
	<typedef path="js.html.ArrayBuffer" params="" file="/home/vsts/work/1/s/std/js/html/ArrayBuffer.hx">
		<c path="js.lib.ArrayBuffer"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.ArrayBufferView" params="" file="/home/vsts/work/1/s/std/js/html/ArrayBufferView.hx">
		<c path="js.lib.ArrayBufferView"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.AssignedNodesOptions" params="" file="/home/vsts/work/1/s/std/js/html/AssignedNodesOptions.hx"><a><flatten>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</flatten></a></typedef>
	<class path="js.html.Attr" params="" file="/home/vsts/work/1/s/std/js/html/Attr.hx" extern="1">
		<extends path="js.html.Node"/>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the attribute.</haxe_doc>
		</localName>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The attribute's value.</haxe_doc>
		</value>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The attribute's name.</haxe_doc>
		</name>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace URI of the attribute, or `null` if there is no namespace.</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the attribute, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<specified public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property always returns `true`. Originally, it returned `true `if the attribute was explicitly specified in the source code or by a script, and `false` if its value came from the default one defined in the document's DTD.</haxe_doc>
		</specified>
		<ownerElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element holding the attribute.
		
			
			Note: DOM Level 4 removed this property. The assumption was that since you get an `Attr` object from an `Element`, you should already know the associated element.
		
			As that doesn't hold true in cases like `Attr` objects being returned by `Document.evaluate`, the DOM Living Standard reintroduced the property.
		
			Gecko outputs a deprecation note starting from Gecko 7.0 `7.0`. This note was removed again in Gecko 49.0 `49.0`.</haxe_doc>
		</ownerElement>
		<haxe_doc><![CDATA[This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., `Element.getAttribute()`, but certain functions (e.g., `Element.getAttributeNode()`) or means of iterating give `Attr` types.

	Documentation [Attr](https://developer.mozilla.org/en-US/docs/Web/API/Attr) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Attr$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Attr>]]></haxe_doc>
		<meta><m n=":native"><e>"Attr"</e></m></meta>
	</class>
	<class path="js.html.MediaElement" params="" file="/home/vsts/work/1/s/std/js/html/MediaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NETWORK_EMPTY public="1" get="inline" set="null" expr="0" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NETWORK_EMPTY>
		<NETWORK_IDLE public="1" get="inline" set="null" expr="1" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NETWORK_IDLE>
		<NETWORK_LOADING public="1" get="inline" set="null" expr="2" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" get="inline" set="null" expr="3" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</NETWORK_NO_SOURCE>
		<HAVE_NOTHING public="1" get="inline" set="null" expr="0" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</HAVE_NOTHING>
		<HAVE_METADATA public="1" get="inline" set="null" expr="1" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HAVE_METADATA>
		<HAVE_CURRENT_DATA public="1" get="inline" set="null" expr="2" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HAVE_CURRENT_DATA>
		<HAVE_FUTURE_DATA public="1" get="inline" set="null" expr="3" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HAVE_FUTURE_DATA>
		<HAVE_ENOUGH_DATA public="1" get="inline" set="null" expr="4" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</HAVE_ENOUGH_DATA>
		<error public="1" set="null">
			<c path="js.html.MediaError"/>
			<haxe_doc>Returns a `MediaError` object for the most recent error, or `null` if there has not been an error.</haxe_doc>
		</error>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, which contains the URL of a media resource to use.</haxe_doc>
		</src>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the absolute URL of the chosen media resource.</haxe_doc>
		</currentSrc>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the CORS setting for this media element.</haxe_doc>
		</crossOrigin>
		<networkState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.</haxe_doc>
		</networkState>
		<preload public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.</haxe_doc>
		</preload>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.</haxe_doc>
		</buffered>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the readiness state of the media.</haxe_doc>
		</readyState>
		<seeking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media is in the process of seeking to a new position.</haxe_doc>
		</seeking>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the current playback time in seconds. Setting this value seeks the media to the new time.</haxe_doc>
		</currentTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` indicating the length of the media in seconds, or 0 if no media data is available.</haxe_doc>
		</duration>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element is paused.</haxe_doc>
		</paused>
		<defaultPlaybackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the default playback rate for the media.</haxe_doc>
		</defaultPlaybackRate>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` that indicates the rate at which the media is being played back. </haxe_doc>
		</playbackRate>
		<played public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.</haxe_doc>
		</played>
		<seekable public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.</haxe_doc>
		</seekable>
		<ended public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element has finished playing.</haxe_doc>
		</ended>
		<autoplay public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
		 Sites which automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.</haxe_doc>
		</autoplay>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.</haxe_doc>
		</loop>
		<controls public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.</haxe_doc>
		</controls>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).</haxe_doc>
		</volume>
		<muted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.</haxe_doc>
		</muted>
		<defaultMuted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.</haxe_doc>
		</defaultMuted>
		<audioTracks public="1" set="null">
			<c path="js.html.AudioTrackList"/>
			<haxe_doc>A `AudioTrackList` that lists the `AudioTrack` objects contained in the element.</haxe_doc>
		</audioTracks>
		<videoTracks public="1" set="null">
			<c path="js.html.VideoTrackList"/>
			<haxe_doc>Returns the list of `VideoTrack` objects contained in the element.

		 Gecko supports only single track playback, and the parsing of tracks' metadata is only available for media with the Ogg container format.</haxe_doc>
		</videoTracks>
		<textTracks public="1" set="null">
			<c path="js.html.TextTrackList"/>
			<haxe_doc>Returns the list of `TextTrack` objects contained in the element.</haxe_doc>
		</textTracks>
		<srcObject public="1">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`, or `null` if not assigned.</haxe_doc>
		</srcObject>
		<mediaKeys public="1" set="null">
			<c path="js.html.eme.MediaKeys"/>
			<haxe_doc>Returns a `MediaKeys` object or `null`. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.</haxe_doc>
		</mediaKeys>
		<onencrypted public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the media is encrypted.</haxe_doc>
		</onencrypted>
		<onwaitingforkey public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when playback is blocked while waiting for an encryption key.</haxe_doc>
		</onwaitingforkey>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the media element and restarts the media resource. Any pending events are discarded. How much media data is fetched is still affected by the `preload` attribute. This method can be useful for releasing resources after any `src` attribute and `source` element descendants have been removed. Otherwise, it is usually unnecessary to use this method, unless required to rescan `source` element children after dynamic changes.</haxe_doc>
		</load>
		<canPlayType public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Determines whether the specified media type can be played back.</haxe_doc>
		</canPlayType>
		<fastSeek public="1" set="method">
			<f a="time">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Directly seeks to the given time.
		@throws DOMError</haxe_doc>
		</fastSeek>
		<play public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Begins playback of the media.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses the media playback.
		@throws DOMError</haxe_doc>
		</pause>
		<addTextTrack public="1" set="method">
			<f a="kind:?label:?language" v=":&quot;&quot;:&quot;&quot;">
				<x path="js.html.TextTrackKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.TextTrack"/>
			</f>
			<meta><m n=":value"><e>{ language : "", label : "" }</e></m></meta>
			<haxe_doc>Adds a text track (such as a track for subtitles) to a media element.</haxe_doc>
		</addTextTrack>
		<setMediaKeys public="1" set="method">
			<f a="mediaKeys">
				<c path="js.html.eme.MediaKeys"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns `Promise`. Sets the `MediaKeys` keys to use when decrypting media during playback.</haxe_doc>
		</setMediaKeys>
		<haxe_doc><![CDATA[The `HTMLMediaElement` interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video.

	Documentation [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMediaElement"</e></m></meta>
	</class>
	<class path="js.html.AudioElement" params="" file="/home/vsts/work/1/s/std/js/html/AudioElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<haxe_doc><![CDATA[The `HTMLAudioElement` interface provides access to the properties of `audio` elements, as well as methods to manipulate them. It derives from the `HTMLMediaElement` interface.

	Documentation [HTMLAudioElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAudioElement"</e></m></meta>
	</class>
	<class path="js.html.Audio" params="" file="/home/vsts/work/1/s/std/js/html/Audio.hx" extern="1">
		<extends path="js.html.AudioElement"/>
		<new public="1" set="method">
			<f a="?src">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Audio"</e></m></meta>
	</class>
	<class path="js.html.MediaStreamTrack" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` set to `"audio"` if the track is an audio track and to `"video"`, if it is a video track. It doesn't change if the track is deassociated from its source.</haxe_doc>
		</kind>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a unique identifier (GUID) for the track; it is generated by the browser.</haxe_doc>
		</id>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a user agent-assigned label that identifies the track source, as in `"internal microphone"`. The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.</haxe_doc>
		</label>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean whose value of `true` if the track is enabled, that is allowed to render the media source stream; or `false` if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`. The `muted` property refers to a condition in which there's no media because of a technical issue.</haxe_doc>
		</enabled>
		<muted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`, and unmute the media by setting it back to `true` again.</haxe_doc>
		</muted>
		<onmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `mute` event is fired on the object, that is when the streaming is terminating.</haxe_doc>
		</onmute>
		<onunmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `unmute` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onunmute>
		<readyState public="1" set="null">
			<x path="js.html.MediaStreamTrackState"/>
			<haxe_doc>Returns an enumerated value giving the status of the track. This will be one of the following values:

		  `"live"` which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the `MediaStreamTrack.enabled` attribute.
		  `"ended"` which indicates that the input is not giving any more data and will never provide new data.</haxe_doc>
		</readyState>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `ended_(MediaStream)` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onended>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStreamTrack"/></f>
			<haxe_doc>Returns a duplicate of the `MediaStreamTrack`.</haxe_doc>
		</clone>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to `ended`.</haxe_doc>
		</stop>
		<getConstraints public="1" set="method">
			<f a=""><t path="js.html.MediaTrackConstraints"/></f>
			<haxe_doc>Returns a `MediaTrackConstraints` object containing the currently set constraints for the track; the returned value matches the constraints last set using `MediaStreamTrack.applyConstraints`.</haxe_doc>
		</getConstraints>
		<getSettings public="1" set="method">
			<f a=""><t path="js.html.MediaTrackSettings"/></f>
			<haxe_doc>Returns a `MediaTrackSettings` object containing the current values of each of the `MediaStreamTrack`'s constrainable properties.</haxe_doc>
		</getSettings>
		<applyConstraints public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaTrackConstraints"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the `MediaStreamTrack`.
		@throws DOMError</haxe_doc>
		</applyConstraints>
		<haxe_doc><![CDATA[The `MediaStreamTrack` interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.

	Documentation [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioStreamTrack" params="" file="/home/vsts/work/1/s/std/js/html/AudioStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"AudioStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrack" params="" file="/home/vsts/work/1/s/std/js/html/AudioTrack.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling `AudioTrackList.getTrackById()`. The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification.</haxe_doc>
		</id>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the category into which the track falls. For example, the main audio track would have a `kind` of `"main"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` providing a human-readable label for the track. For example, an audio commentary track for a movie might have a `label` of `"Commentary with director John Q. Public and actors John Doe and Jane Eod."` This string is empty if no label is provided.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 ({{RFC(5646)}}) language code, such as `"en-US"` or `"pt-BR"`.</haxe_doc>
		</language>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to `false` mutes the track's audio.</haxe_doc>
		</enabled>
		<haxe_doc><![CDATA[The `AudioTrack` interface represents a single audio track from one of the HTML media elements, `audio` or `video`. 

	Documentation [AudioTrack](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrackList" params="" file="/home/vsts/work/1/s/std/js/html/AudioTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of tracks in the list.</haxe_doc>
		</length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.AudioTrack"/>
</f></getTrackById>
		<haxe_doc><![CDATA[The `AudioTrackList` interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate `AudioTrack` object in the list.

	Documentation [AudioTrackList](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.AutoKeyword" params="" file="/home/vsts/work/1/s/std/js/html/AutoKeyword.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AutoKeyword.AutoKeyword_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/AutoKeyword.hx" private="1" module="js.html.AutoKeyword" extern="1" final="1">
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
		<x path="js.html.AutoKeyword"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._AutoKeyword.AutoKeyword_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/AutoKeyword.hx" private="1" module="js.html.AutoKeyword" extern="1" final="1">
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
			<x path="js.html.AutoKeyword"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.BRElement" params="" file="/home/vsts/work/1/s/std/js/html/BRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the flow of text around floating objects.</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `HTMLBRElement` interface represents a HTML line break element (`br`). It inherits from `HTMLElement`.

	Documentation [HTMLBRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBRElement"</e></m></meta>
	</class>
	<class path="js.html.BarProp" params="" file="/home/vsts/work/1/s/std/js/html/BarProp.hx" extern="1">
		<visible public="1"><x path="Bool"/></visible>
		<meta><m n=":native"><e>"BarProp"</e></m></meta>
	</class>
	<class path="js.html.BaseElement" params="" file="/home/vsts/work/1/s/std/js/html/BaseElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `href` HTML attribute, containing a base URL for relative URLs in the document.</haxe_doc>
		</href>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.</haxe_doc>
		</target>
		<haxe_doc><![CDATA[The `HTMLBaseElement` interface contains the base URI for a document. This object inherits all of the properties and methods as described in the `HTMLElement` interface.

	Documentation [HTMLBaseElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseElement"</e></m></meta>
	</class>
	<class path="js.html.BatteryManager" params="" file="/home/vsts/work/1/s/std/js/html/BatteryManager.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<charging public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the battery is currently being charged.</haxe_doc>
		</charging>
		<chargingTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the remaining time in seconds until the battery is fully charged, or 0 if the battery is already fully charged.</haxe_doc>
		</chargingTime>
		<dischargingTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the remaining time in seconds until the battery is completely discharged and the system will suspend.</haxe_doc>
		</dischargingTime>
		<level public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the system's battery charge level scaled to a value between 0.0 and 1.0.</haxe_doc>
		</level>
		<onchargingchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `chargingchange` event; This event is sent when the battery charging state is updated.</haxe_doc>
		</onchargingchange>
		<onchargingtimechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `chargingtimechange` event; This event is sent when the battery charging time is updated</haxe_doc>
		</onchargingtimechange>
		<ondischargingtimechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `dischargingtimechange` event; This event is sent when the battery discharging time is updated.</haxe_doc>
		</ondischargingtimechange>
		<onlevelchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `levelchange` event; This event is sent when the battery level is updated.</haxe_doc>
		</onlevelchange>
		<haxe_doc><![CDATA[The `BatteryManager` interface provides ways to get information about the system's battery charge level.

	Documentation [BatteryManager](https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager>]]></haxe_doc>
		<meta><m n=":native"><e>"BatteryManager"</e></m></meta>
	</class>
	<class path="js.html.BeforeUnloadEvent" params="" file="/home/vsts/work/1/s/std/js/html/BeforeUnloadEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<haxe_doc><![CDATA[The `beforeunload` event is fired when the window, the document and its resources are about to be unloaded.

	Documentation [BeforeUnloadEvent](https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"BeforeUnloadEvent"</e></m></meta>
	</class>
	<abstract path="js.html.BinaryType" params="" file="/home/vsts/work/1/s/std/js/html/BinaryType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._BinaryType.BinaryType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/BinaryType.hx" private="1" module="js.html.BinaryType" extern="1" final="1">
	<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="28" static="1">
		<x path="js.html.BinaryType"/>
		<meta>
			<m n=":value"><e>cast "blob"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLOB>
	<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="29" static="1">
		<x path="js.html.BinaryType"/>
		<meta>
			<m n=":value"><e>cast "arraybuffer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARRAYBUFFER>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._BinaryType.BinaryType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/BinaryType.hx" private="1" module="js.html.BinaryType" extern="1" final="1">
		<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="28" static="1">
			<x path="js.html.BinaryType"/>
			<meta>
				<m n=":value"><e>cast "blob"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLOB>
		<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="29" static="1">
			<x path="js.html.BinaryType"/>
			<meta>
				<m n=":value"><e>cast "arraybuffer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARRAYBUFFER>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Blob" params="" file="/home/vsts/work/1/s/std/js/html/Blob.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of the data contained in the `Blob` object.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string indicating the MIME type of the data contained in the `Blob`. If the type is unknown, this string is empty.</haxe_doc>
		</type>
		<slice public="1" set="method">
			<f a="?start:?end:?contentType">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.Blob"/>
			</f>
			<haxe_doc>Returns a new `Blob` object containing the data in the specified range of bytes of the source `Blob`.
		@throws DOMError</haxe_doc>
		</slice>
		<new public="1" set="method">
			<f a="?blobParts:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<c path="String"/>
		</x>
	</x>
</x></c>
				<x path="Null"><t path="js.html.BlobPropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `Blob` object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The `File` interface is based on `Blob`, inheriting blob functionality and expanding it to support files on the user's system.

	Documentation [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Blob$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Blob>]]></haxe_doc>
		<meta><m n=":native"><e>"Blob"</e></m></meta>
	</class>
	<class path="js.html.BlobEvent" params="" file="/home/vsts/work/1/s/std/js/html/BlobEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<data public="1" set="null">
			<c path="js.html.Blob"/>
			<haxe_doc>A `Blob` representing the data associated with the event. The event was fired on the `EventTarget` because of something happening on that specific `Blob`.</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.BlobEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `BlobEvent` interface represents events associated with a `Blob`. These blobs are typically, but not necessarily,  associated with media content.

	Documentation [BlobEvent](https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"BlobEvent"</e></m></meta>
	</class>
	<typedef path="js.html.BlobEventInit" params="" file="/home/vsts/work/1/s/std/js/html/BlobEventInit.hx"><a>
	<data>
		<x path="Null"><c path="js.html.Blob"/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.BlobPropertyBag" params="" file="/home/vsts/work/1/s/std/js/html/BlobPropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<endings>
		<x path="Null"><x path="js.html.EndingTypes"/></x>
		<meta><m n=":optional"/></meta>
	</endings>
</a></typedef>
	<class path="js.html.BodyElement" params="" file="/home/vsts/work/1/s/std/js/html/BodyElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the foreground color of text.</haxe_doc>
		</text>
		<link public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of unvisited links.</haxe_doc>
		</link>
		<vLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of visited links.</haxe_doc>
		</vLink>
		<aLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of active hyperlinks.</haxe_doc>
		</aLink>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the background color for the document.</haxe_doc>
		</bgColor>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.</haxe_doc>
		</background>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLBodyElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating body elements.

	Documentation [HTMLBodyElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBodyElement"</e></m></meta>
	</class>
	<class path="js.html.BroadcastChannel" params="" file="/home/vsts/work/1/s/std/js/html/BroadcastChannel.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString`, the name of the channel.</haxe_doc>
		</name>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` property that specifies the function to execute when a `message` event is fired on this object.</haxe_doc>
		</onmessage>
		<onmessageerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` called when a `MessageEvent` of type `MessageError` is fired—that is, when it receives a message that cannot be deserialized.</haxe_doc>
		</onmessageerror>
		<postMessage public="1" set="method">
			<f a="message">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends the message, of any type of object, to each `BroadcastChannel` object listening to the same channel.
		@throws DOMError</haxe_doc>
		</postMessage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the channel object, indicating it won't get any new messages, and allowing it to be, eventually, garbage collected.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="channel">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `BroadcastChannel` interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a `message` event fired at all `BroadcastChannel` objects listening to the channel.

	Documentation [BroadcastChannel](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel>]]></haxe_doc>
		<meta><m n=":native"><e>"BroadcastChannel"</e></m></meta>
	</class>
	<class path="js.html.ButtonElement" params="" file="/home/vsts/work/1/s/std/js/html/ButtonElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control is disabled, meaning that it does not accept any clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.
		
			If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the `action` attribute of the `form` element that owns this element.</haxe_doc>
		</formAction>
		<formEnctype public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the `enctype` attribute of the `form` element that owns this element.</haxe_doc>
		</formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the `method` attribute of the `form` element that owns this element.</haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the `novalidate` attribute of the `form` element that owns this element.</haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the `target` attribute of the `form` element that owns this element.</haxe_doc>
		</formTarget>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the object when submitted with a form. {{HTMLVersionInline(5)}} If specified, it must not be the empty string.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Is a `DOMString` indicating the behavior of the button. This is an enumerated attribute with the following possible values:
			
				`"submit"`: The button submits the form. This is the default value if the attribute is not specified, {{HTMLVersionInline(5)}} or if it is dynamically changed to an empty or invalid value.
				`"reset"`: The button resets the form.
				`"button"`: The button does nothing.
				`"menu"`: The button displays a menu. <em>(experimental)</em>]]></haxe_doc>
		</type>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the current form control value of the button.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Is a `ValidityState` representing the validity states that this button is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Is a `NodeList` that represents a list of `label` elements that are labels for this button.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLButtonElement` interface provides properties and methods (beyond the `button` object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.

	Documentation [HTMLButtonElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLButtonElement"</e></m></meta>
	</class>
	<class path="js.html.CharacterData" params="" file="/home/vsts/work/1/s/std/js/html/CharacterData.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the textual data contained in this object.</haxe_doc>
		</data>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the size of the string contained in `CharacterData.data`.</haxe_doc>
		</length>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<substringData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the part of `CharacterData.data` of the specified length and starting at the specified offset.
		@throws DOMError</haxe_doc>
		</substringData>
		<appendData public="1" set="method">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the given `DOMString` to the `CharacterData.data` string; when this method returns, `data` contains the concatenated `DOMString`.
		@throws DOMError</haxe_doc>
		</appendData>
		<insertData public="1" set="method">
			<f a="offset:data">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the specified characters, at the specified offset, in the `CharacterData.data` string; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</insertData>
		<deleteData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified amount of characters, starting at the specified offset, from the `CharacterData.data` string; when this method returns, `data` contains the shortened `DOMString`.
		@throws DOMError</haxe_doc>
		</deleteData>
		<replaceData public="1" set="method">
			<f a="offset:count:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the specified amount of characters, starting at the specified offset, with the specified `DOMString`; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</replaceData>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `CharacterData` abstract interface represents a `Node` object that contains characters. This is an abstract interface, meaning there aren't any object of type `CharacterData`: it is implemented by other interfaces, like `Text`, '. In XML, the character sequence '--' cannot be used within a comment.">`Comment`, or `ProcessingInstruction` which aren't abstract.

	Documentation [CharacterData](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CharacterData>]]></haxe_doc>
		<meta><m n=":native"><e>"CharacterData"</e></m></meta>
	</class>
	<class path="js.html.Text" params="" file="/home/vsts/work/1/s/std/js/html/Text.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<wholeText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the text of all `Text` nodes logically adjacent to this `Node`, concatenated in document order.</haxe_doc>
		</wholeText>
		<splitText public="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</splitText>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Text` interface represents the textual content of `Element` or `Attr`.  If an element has no markup within its content, it has a single child implementing `Text` that contains the element's text.  However, if the element contains markup, it is parsed into information items and `Text` nodes that form its children.

	Documentation [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Text$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Text>]]></haxe_doc>
		<meta><m n=":native"><e>"Text"</e></m></meta>
	</class>
	<class path="js.html.CDATASection" params="" file="/home/vsts/work/1/s/std/js/html/CDATASection.hx" extern="1">
		<extends path="js.html.Text"/>
		<haxe_doc><![CDATA[The `CDATASection` interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols `` and `&amp;` don’t need escaping as they normally do when inside a CDATA section.

	Documentation [CDATASection](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CDATASection>]]></haxe_doc>
		<meta><m n=":native"><e>"CDATASection"</e></m></meta>
	</class>
	<class path="js.html.CSS" params="" file="/home/vsts/work/1/s/std/js/html/CSS.hx" extern="1">
		<supports public="1" set="method" static="1">
			<f a="conditionText">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the pair property-value, or the condition, given in parameter is supported.
		@throws DOMError</haxe_doc>
			<overloads><supports public="1" set="method">
	<f a="property:value">
		<c path="String"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Returns a `Boolean` indicating if the pair property-value, or the condition, given in parameter is supported.
		@throws DOMError</haxe_doc>
</supports></overloads>
		</supports>
		<escape public="1" set="method" static="1">
			<f a="ident">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Can be used to escape a string mostly for use as part of a CSS selector.</haxe_doc>
		</escape>
		<haxe_doc><![CDATA[The `CSS` interface holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface.

	Documentation [CSS](https://developer.mozilla.org/en-US/docs/Web/API/CSS) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSS$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSS>]]></haxe_doc>
		<meta><m n=":native"><e>"CSS"</e></m></meta>
	</class>
	<class path="js.html.CSSAnimation" params="" file="/home/vsts/work/1/s/std/js/html/CSSAnimation.hx" extern="1">
		<extends path="js.html.Animation"/>
		<animationName public="1" set="null"><c path="String"/></animationName>
		<meta><m n=":native"><e>"CSSAnimation"</e></m></meta>
	</class>
	<abstract path="js.html.CSSBoxType" params="" file="/home/vsts/work/1/s/std/js/html/CSSBoxType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CSSBoxType.CSSBoxType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CSSBoxType.hx" private="1" module="js.html.CSSBoxType" extern="1" final="1">
	<MARGIN public="1" get="inline" set="null" expr="cast &quot;margin&quot;" line="28" static="1">
		<x path="js.html.CSSBoxType"/>
		<meta>
			<m n=":value"><e>cast "margin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MARGIN>
	<BORDER public="1" get="inline" set="null" expr="cast &quot;border&quot;" line="29" static="1">
		<x path="js.html.CSSBoxType"/>
		<meta>
			<m n=":value"><e>cast "border"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BORDER>
	<PADDING public="1" get="inline" set="null" expr="cast &quot;padding&quot;" line="30" static="1">
		<x path="js.html.CSSBoxType"/>
		<meta>
			<m n=":value"><e>cast "padding"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PADDING>
	<CONTENT public="1" get="inline" set="null" expr="cast &quot;content&quot;" line="31" static="1">
		<x path="js.html.CSSBoxType"/>
		<meta>
			<m n=":value"><e>cast "content"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONTENT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._CSSBoxType.CSSBoxType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CSSBoxType.hx" private="1" module="js.html.CSSBoxType" extern="1" final="1">
		<MARGIN public="1" get="inline" set="null" expr="cast &quot;margin&quot;" line="28" static="1">
			<x path="js.html.CSSBoxType"/>
			<meta>
				<m n=":value"><e>cast "margin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MARGIN>
		<BORDER public="1" get="inline" set="null" expr="cast &quot;border&quot;" line="29" static="1">
			<x path="js.html.CSSBoxType"/>
			<meta>
				<m n=":value"><e>cast "border"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BORDER>
		<PADDING public="1" get="inline" set="null" expr="cast &quot;padding&quot;" line="30" static="1">
			<x path="js.html.CSSBoxType"/>
			<meta>
				<m n=":value"><e>cast "padding"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PADDING>
		<CONTENT public="1" get="inline" set="null" expr="cast &quot;content&quot;" line="31" static="1">
			<x path="js.html.CSSBoxType"/>
			<meta>
				<m n=":value"><e>cast "content"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONTENT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.CSSRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSRule.hx" extern="1">
		<STYLE_RULE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STYLE_RULE>
		<CHARSET_RULE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CHARSET_RULE>
		<IMPORT_RULE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</IMPORT_RULE>
		<MEDIA_RULE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_RULE>
		<FONT_FACE_RULE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</FONT_FACE_RULE>
		<PAGE_RULE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PAGE_RULE>
		<NAMESPACE_RULE public="1" get="inline" set="null" expr="10" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</NAMESPACE_RULE>
		<KEYFRAMES_RULE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</KEYFRAMES_RULE>
		<KEYFRAME_RULE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</KEYFRAME_RULE>
		<COUNTER_STYLE_RULE public="1" get="inline" set="null" expr="11" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</COUNTER_STYLE_RULE>
		<SUPPORTS_RULE public="1" get="inline" set="null" expr="12" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SUPPORTS_RULE>
		<FONT_FEATURE_VALUES_RULE public="1" get="inline" set="null" expr="14" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</FONT_FEATURE_VALUES_RULE>
		<type public="1" set="null"><x path="Int"/></type>
		<cssText public="1"><c path="String"/></cssText>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<parentStyleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></parentStyleSheet>
		<haxe_doc><![CDATA[The `CSSRule` interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.

	Documentation [CSSRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRule"</e></m></meta>
	</class>
	<class path="js.html.CSSGroupingRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSGroupingRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<cssRules public="1" set="null"><c path="js.html.CSSRuleList"/></cssRules>
		<insertRule public="1" set="method">
			<f a="rule:?index" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertRule>
		<deleteRule public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteRule>
		<haxe_doc><![CDATA[An object implementing the `CSSGroupingRule` interface represents any CSS at-rule that contains other rules nested within it.

	Documentation [CSSGroupingRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSGroupingRule"</e></m></meta>
	</class>
	<class path="js.html.CSSConditionRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSConditionRule.hx" extern="1">
		<extends path="js.html.CSSGroupingRule"/>
		<conditionText public="1">
			<c path="String"/>
			<haxe_doc>Represents the text of the condition of the rule.</haxe_doc>
		</conditionText>
		<haxe_doc><![CDATA[An object implementing the `CSSConditionRule` interface represents a single condition CSS at-rule, which consists of a condition and a statement block. It is a child of `CSSGroupingRule`.

	Documentation [CSSConditionRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSConditionRule"</e></m></meta>
	</class>
	<class path="js.html.CSSCounterStyleRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSCounterStyleRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `counter-style-name` defined for the associated rule.</haxe_doc>
		</name>
		<system public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/system` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</system>
		<symbols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/symbols` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</symbols>
		<additiveSymbols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/additive-symbols` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</additiveSymbols>
		<negative public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/negative` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</negative>
		<prefix public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/prefix` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</prefix>
		<suffix public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/suffix` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</suffix>
		<range public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/range` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</range>
		<pad public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/pad` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</pad>
		<speakAs public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/speak-as` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</speakAs>
		<fallback public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` object that contains the serialization of the `@counter-style/fallback` descriptor defined for the associated rule. If the descriptor was not specified in the associated rule, the attribute returns an empty string.</haxe_doc>
		</fallback>
		<haxe_doc><![CDATA[The `CSSCounterStyleRule` interface represents an `@counter-style` at-rule.

	Documentation [CSSCounterStyleRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSCounterStyleRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSCounterStyleRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSCounterStyleRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSCounterStyleRule"</e></m></meta>
	</class>
	<class path="js.html.CSSFontFaceRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSFontFaceRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<meta><m n=":native"><e>"CSSFontFaceRule"</e></m></meta>
	</class>
	<class path="js.html.CSSFontFeatureValuesRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSFontFeatureValuesRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<fontFamily public="1"><c path="String"/></fontFamily>
		<valueText public="1"><c path="String"/></valueText>
		<meta><m n=":native"><e>"CSSFontFeatureValuesRule"</e></m></meta>
	</class>
	<class path="js.html.CSSImportRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSImportRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<href public="1" set="null"><c path="String"/></href>
		<media public="1" set="null"><c path="js.html.MediaList"/></media>
		<styleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></styleSheet>
		<meta><m n=":native"><e>"CSSImportRule"</e></m></meta>
	</class>
	<class path="js.html.CSSKeyframeRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSKeyframeRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<keyText public="1"><c path="String"/></keyText>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<haxe_doc><![CDATA[The `CSSKeyframeRule` interface describes an object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a `@keyframes` at-rule. It implements the `CSSRule` interface with a type value of `8` (`CSSRule.KEYFRAME_RULE`).

	Documentation [CSSKeyframeRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSKeyframeRule"</e></m></meta>
	</class>
	<class path="js.html.CSSKeyframesRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSKeyframesRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Represents the name of the animation, used by the `animation-name` property.</haxe_doc>
		</name>
		<cssRules public="1" set="null">
			<c path="js.html.CSSRuleList"/>
			<haxe_doc>Returns a `CSSRuleList` of the CSS rules in the media rule.</haxe_doc>
		</cssRules>
		<appendRule public="1" set="method">
			<f a="rule">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a new keyframe rule into the current CSSKeyframesRule. The parameter is a `DOMString` containing a keyframe in the same format as an entry of a `@keyframes` at-rule. If it contains more than one keyframe rule, a `DOMException` with a `SYNTAX_ERR` is thrown.</haxe_doc>
		</appendRule>
		<deleteRule public="1" set="method">
			<f a="select">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a keyframe rule from the current CSSKeyframesRule. The parameter is the index of the keyframe to be deleted, expressed as a `DOMString` resolving as a number between `0%` and `100%`.</haxe_doc>
		</deleteRule>
		<findRule public="1" set="method">
			<f a="select">
				<c path="String"/>
				<c path="js.html.CSSKeyframeRule"/>
			</f>
			<haxe_doc>Returns a keyframe rule corresponding to the given key. The key is a `DOMString` containing an index of the keyframe to be returned, resolving to a percentage between `0%` and `100%`. If no such keyframe exists, `findRule` returns `null`.</haxe_doc>
		</findRule>
		<haxe_doc><![CDATA[The `CSSKeyframesRule` interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole `@keyframes` at-rule. It implements the `CSSRule` interface with a type value of `7` (`CSSRule.KEYFRAMES_RULE`).

	Documentation [CSSKeyframesRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSKeyframesRule"</e></m></meta>
	</class>
	<class path="js.html.CSSMediaRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSMediaRule.hx" extern="1">
		<extends path="js.html.CSSConditionRule"/>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Specifies a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<haxe_doc><![CDATA[The `CSSMediaRule` is an interface representing a single CSS `@media` rule. It implements the `CSSConditionRule` interface, and therefore the `CSSGroupingRule` and the `CSSRule` interface with a type value of `4` (`CSSRule.MEDIA_RULE`).

	Documentation [CSSMediaRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSMediaRule"</e></m></meta>
	</class>
	<class path="js.html.CSSMozDocumentRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSMozDocumentRule.hx" extern="1">
		<extends path="js.html.CSSConditionRule"/>
		<meta><m n=":native"><e>"CSSMozDocumentRule"</e></m></meta>
	</class>
	<class path="js.html.CSSNamespaceRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSNamespaceRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the text of the URI of the given namespace.</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the name of the prefix associated to this namespace. If there is no such prefix, returns  `null`.</haxe_doc>
		</prefix>
		<haxe_doc><![CDATA[The `CSSNamespaceRule` interface describes an object representing a single CSS `@namespace` at-rule. It implements the `CSSRule` interface, with a type value of `10` (`CSSRule.NAMESPACE_RULE`).

	Documentation [CSSNamespaceRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSNamespaceRule"</e></m></meta>
	</class>
	<class path="js.html.CSSPageRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSPageRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<style public="1" set="null">
			<c path="js.html.CSSStyleDeclaration"/>
			<haxe_doc>Returns the declaration block associated with the at-rule.</haxe_doc>
		</style>
		<haxe_doc><![CDATA[`CSSPageRule` is an interface representing a single CSS `@page` rule. It implements the `CSSRule` interface with a type value of `6` (`CSSRule.PAGE_RULE`).

	Documentation [CSSPageRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSPageRule"</e></m></meta>
	</class>
	<class path="js.html.CSSPseudoElement" params="" file="/home/vsts/work/1/s/std/js/html/CSSPseudoElement.hx" extern="1">
		<type public="1" set="null"><c path="String"/></type>
		<parentElement public="1" set="null"><c path="js.html.Element"/></parentElement>
		<animate public="1" set="method">
			<f a="keyframes:?options">
				<d/>
				<x path="Float"/>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><animate public="1" set="method">
	<f a="keyframes:?options">
		<d/>
		<x path="Null"><t path="js.html.KeyframeAnimationOptions"/></x>
		<c path="js.html.Animation"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</animate></overloads>
		</animate>
		<getAnimations public="1" set="method"><f a="?filter">
	<x path="Null"><t path="js.html.AnimationFilter"/></x>
	<c path="Array"><c path="js.html.Animation"/></c>
</f></getAnimations>
		<meta><m n=":native"><e>"CSSPseudoElement"</e></m></meta>
	</class>
	<class path="js.html.CSSRuleList" params="" file="/home/vsts/work/1/s/std/js/html/CSSRuleList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.CSSRule"/>
</f></item>
		<haxe_doc><![CDATA[A `CSSRuleList` is an (indirect-modify only) array-like object containing an ordered collection of `CSSRule` objects.

	Documentation [CSSRuleList](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRuleList"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleDeclaration" params="" file="/home/vsts/work/1/s/std/js/html/CSSStyleDeclaration.hx" extern="1">
		<cssText public="1"><c path="String"/></cssText>
		<length public="1" set="null"><x path="Int"/></length>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<alignContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-content" CSS property.</haxe_doc>
		</alignContent>
		<alignItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-items" CSS property.</haxe_doc>
		</alignItems>
		<alignSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-self" CSS property.</haxe_doc>
		</alignSelf>
		<alignmentAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-adjust" CSS property.</haxe_doc>
		</alignmentAdjust>
		<alignmentBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-baseline" CSS property.</haxe_doc>
		</alignmentBaseline>
		<all public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "all" CSS property.</haxe_doc>
		</all>
		<anchorPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "anchor-point" CSS property.</haxe_doc>
		</anchorPoint>
		<animation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation" CSS property.</haxe_doc>
		</animation>
		<animationDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-delay" CSS property.</haxe_doc>
		</animationDelay>
		<animationDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-direction" CSS property.</haxe_doc>
		</animationDirection>
		<animationDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-duration" CSS property.</haxe_doc>
		</animationDuration>
		<animationFillMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-fill-mode" CSS property.</haxe_doc>
		</animationFillMode>
		<animationIterationCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-iteration-count" CSS property.</haxe_doc>
		</animationIterationCount>
		<animationName public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-name" CSS property.</haxe_doc>
		</animationName>
		<animationPlayState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-play-state" CSS property.</haxe_doc>
		</animationPlayState>
		<animationTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-timing-function" CSS property.</haxe_doc>
		</animationTimingFunction>
		<azimuth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "azimuth" CSS property.</haxe_doc>
		</azimuth>
		<backfaceVisibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "backface-visibility" CSS property.</haxe_doc>
		</backfaceVisibility>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background" CSS property.</haxe_doc>
		</background>
		<backgroundAttachment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-attachment" CSS property.</haxe_doc>
		</backgroundAttachment>
		<backgroundBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-blend-mode" CSS property.</haxe_doc>
		</backgroundBlendMode>
		<backgroundClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-clip" CSS property.</haxe_doc>
		</backgroundClip>
		<backgroundColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-color" CSS property.</haxe_doc>
		</backgroundColor>
		<backgroundImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-image" CSS property.</haxe_doc>
		</backgroundImage>
		<backgroundOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-origin" CSS property.</haxe_doc>
		</backgroundOrigin>
		<backgroundPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position" CSS property.</haxe_doc>
		</backgroundPosition>
		<backgroundPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-x" CSS property.</haxe_doc>
		</backgroundPositionX>
		<backgroundPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-y" CSS property.</haxe_doc>
		</backgroundPositionY>
		<backgroundRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat" CSS property.</haxe_doc>
		</backgroundRepeat>
		<backgroundRepeatX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-x" CSS property.</haxe_doc>
		</backgroundRepeatX>
		<backgroundRepeatY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-y" CSS property.</haxe_doc>
		</backgroundRepeatY>
		<backgroundSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-size" CSS property.</haxe_doc>
		</backgroundSize>
		<baselineShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "baseline-shift" CSS property.</haxe_doc>
		</baselineShift>
		<binding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "binding" CSS property.</haxe_doc>
		</binding>
		<bleed public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bleed" CSS property.</haxe_doc>
		</bleed>
		<blockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "block-size" CSS property.</haxe_doc>
		</blockSize>
		<bookmarkLabel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-label" CSS property.</haxe_doc>
		</bookmarkLabel>
		<bookmarkLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-level" CSS property.</haxe_doc>
		</bookmarkLevel>
		<bookmarkState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-state" CSS property.</haxe_doc>
		</bookmarkState>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border" CSS property.</haxe_doc>
		</border>
		<borderBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end" CSS property.</haxe_doc>
		</borderBlockEnd>
		<borderBlockEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-color" CSS property.</haxe_doc>
		</borderBlockEndColor>
		<borderBlockEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-style" CSS property.</haxe_doc>
		</borderBlockEndStyle>
		<borderBlockEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-width" CSS property.</haxe_doc>
		</borderBlockEndWidth>
		<borderBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start" CSS property.</haxe_doc>
		</borderBlockStart>
		<borderBlockStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-color" CSS property.</haxe_doc>
		</borderBlockStartColor>
		<borderBlockStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-style" CSS property.</haxe_doc>
		</borderBlockStartStyle>
		<borderBlockStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-width" CSS property.</haxe_doc>
		</borderBlockStartWidth>
		<borderBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom" CSS property.</haxe_doc>
		</borderBottom>
		<borderBottomColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-color" CSS property.</haxe_doc>
		</borderBottomColor>
		<borderBottomLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-left-radius" CSS property.</haxe_doc>
		</borderBottomLeftRadius>
		<borderBottomRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-right-radius" CSS property.</haxe_doc>
		</borderBottomRightRadius>
		<borderBottomStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-style" CSS property.</haxe_doc>
		</borderBottomStyle>
		<borderBottomWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-width" CSS property.</haxe_doc>
		</borderBottomWidth>
		<borderCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-collapse" CSS property.</haxe_doc>
		</borderCollapse>
		<borderColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-color" CSS property.</haxe_doc>
		</borderColor>
		<borderImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image" CSS property.</haxe_doc>
		</borderImage>
		<borderImageOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-outset" CSS property.</haxe_doc>
		</borderImageOutset>
		<borderImageRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-repeat" CSS property.</haxe_doc>
		</borderImageRepeat>
		<borderImageSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-slice" CSS property.</haxe_doc>
		</borderImageSlice>
		<borderImageSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-source" CSS property.</haxe_doc>
		</borderImageSource>
		<borderImageWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-width" CSS property.</haxe_doc>
		</borderImageWidth>
		<borderInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end" CSS property.</haxe_doc>
		</borderInlineEnd>
		<borderInlineEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-color" CSS property.</haxe_doc>
		</borderInlineEndColor>
		<borderInlineEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-style" CSS property.</haxe_doc>
		</borderInlineEndStyle>
		<borderInlineEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-width" CSS property.</haxe_doc>
		</borderInlineEndWidth>
		<borderInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start" CSS property.</haxe_doc>
		</borderInlineStart>
		<borderInlineStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-color" CSS property.</haxe_doc>
		</borderInlineStartColor>
		<borderInlineStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-style" CSS property.</haxe_doc>
		</borderInlineStartStyle>
		<borderInlineStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-width" CSS property.</haxe_doc>
		</borderInlineStartWidth>
		<borderLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left" CSS property.</haxe_doc>
		</borderLeft>
		<borderLeftColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-color" CSS property.</haxe_doc>
		</borderLeftColor>
		<borderLeftStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-style" CSS property.</haxe_doc>
		</borderLeftStyle>
		<borderLeftWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-width" CSS property.</haxe_doc>
		</borderLeftWidth>
		<borderRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-radius" CSS property.</haxe_doc>
		</borderRadius>
		<borderRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right" CSS property.</haxe_doc>
		</borderRight>
		<borderRightColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-color" CSS property.</haxe_doc>
		</borderRightColor>
		<borderRightStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-style" CSS property.</haxe_doc>
		</borderRightStyle>
		<borderRightWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-width" CSS property.</haxe_doc>
		</borderRightWidth>
		<borderSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-spacing" CSS property.</haxe_doc>
		</borderSpacing>
		<borderStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-style" CSS property.</haxe_doc>
		</borderStyle>
		<borderTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top" CSS property.</haxe_doc>
		</borderTop>
		<borderTopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-color" CSS property.</haxe_doc>
		</borderTopColor>
		<borderTopLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-left-radius" CSS property.</haxe_doc>
		</borderTopLeftRadius>
		<borderTopRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-right-radius" CSS property.</haxe_doc>
		</borderTopRightRadius>
		<borderTopStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-style" CSS property.</haxe_doc>
		</borderTopStyle>
		<borderTopWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-width" CSS property.</haxe_doc>
		</borderTopWidth>
		<borderWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-width" CSS property.</haxe_doc>
		</borderWidth>
		<bottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bottom" CSS property.</haxe_doc>
		</bottom>
		<boxDecorationBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-decoration-break" CSS property.</haxe_doc>
		</boxDecorationBreak>
		<boxShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-shadow" CSS property.</haxe_doc>
		</boxShadow>
		<boxSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-sizing" CSS property.</haxe_doc>
		</boxSizing>
		<boxSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-snap" CSS property.</haxe_doc>
		</boxSnap>
		<boxSuppress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-suppress" CSS property.</haxe_doc>
		</boxSuppress>
		<breakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-after" CSS property.</haxe_doc>
		</breakAfter>
		<breakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-before" CSS property.</haxe_doc>
		</breakBefore>
		<breakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-inside" CSS property.</haxe_doc>
		</breakInside>
		<bufferedRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "buffered-rendering" CSS property.</haxe_doc>
		</bufferedRendering>
		<captionSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caption-side" CSS property.</haxe_doc>
		</captionSide>
		<caretColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caret-color" CSS property.</haxe_doc>
		</caretColor>
		<chains public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "chains" CSS property.</haxe_doc>
		</chains>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clear" CSS property.</haxe_doc>
		</clear>
		<clip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip" CSS property.</haxe_doc>
		</clip>
		<clipPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-path" CSS property.</haxe_doc>
		</clipPath>
		<clipRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-rule" CSS property.</haxe_doc>
		</clipRule>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color" CSS property.</haxe_doc>
		</color>
		<colorAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-adjust" CSS property.</haxe_doc>
		</colorAdjust>
		<colorInterpolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation" CSS property.</haxe_doc>
		</colorInterpolation>
		<colorInterpolationFilters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation-filters" CSS property.</haxe_doc>
		</colorInterpolationFilters>
		<colorRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-rendering" CSS property.</haxe_doc>
		</colorRendering>
		<columnCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-count" CSS property.</haxe_doc>
		</columnCount>
		<columnFill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-fill" CSS property.</haxe_doc>
		</columnFill>
		<columnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-gap" CSS property.</haxe_doc>
		</columnGap>
		<columnRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule" CSS property.</haxe_doc>
		</columnRule>
		<columnRuleColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-color" CSS property.</haxe_doc>
		</columnRuleColor>
		<columnRuleStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-style" CSS property.</haxe_doc>
		</columnRuleStyle>
		<columnRuleWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-width" CSS property.</haxe_doc>
		</columnRuleWidth>
		<columnSpan public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-span" CSS property.</haxe_doc>
		</columnSpan>
		<columnWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-width" CSS property.</haxe_doc>
		</columnWidth>
		<columns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "columns" CSS property.</haxe_doc>
		</columns>
		<contain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "contain" CSS property.</haxe_doc>
		</contain>
		<content public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "content" CSS property.</haxe_doc>
		</content>
		<counterIncrement public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-increment" CSS property.</haxe_doc>
		</counterIncrement>
		<counterReset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-reset" CSS property.</haxe_doc>
		</counterReset>
		<counterSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-set" CSS property.</haxe_doc>
		</counterSet>
		<crop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "crop" CSS property.</haxe_doc>
		</crop>
		<cssFloat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "css-float" CSS property.</haxe_doc>
		</cssFloat>
		<cue public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue" CSS property.</haxe_doc>
		</cue>
		<cueAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-after" CSS property.</haxe_doc>
		</cueAfter>
		<cueBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-before" CSS property.</haxe_doc>
		</cueBefore>
		<cursor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cursor" CSS property.</haxe_doc>
		</cursor>
		<cx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cx" CSS property.</haxe_doc>
		</cx>
		<cy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cy" CSS property.</haxe_doc>
		</cy>
		<d public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "d" CSS property.</haxe_doc>
		</d>
		<direction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "direction" CSS property.</haxe_doc>
		</direction>
		<display public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display" CSS property.</haxe_doc>
		</display>
		<displayInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-inside" CSS property.</haxe_doc>
		</displayInside>
		<displayList public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-list" CSS property.</haxe_doc>
		</displayList>
		<displayOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-outside" CSS property.</haxe_doc>
		</displayOutside>
		<dominantBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "dominant-baseline" CSS property.</haxe_doc>
		</dominantBaseline>
		<elevation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "elevation" CSS property.</haxe_doc>
		</elevation>
		<emptyCells public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "empty-cells" CSS property.</haxe_doc>
		</emptyCells>
		<fill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill" CSS property.</haxe_doc>
		</fill>
		<fillOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-opacity" CSS property.</haxe_doc>
		</fillOpacity>
		<fillRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-rule" CSS property.</haxe_doc>
		</fillRule>
		<filter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "filter" CSS property.</haxe_doc>
		</filter>
		<flex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex" CSS property.</haxe_doc>
		</flex>
		<flexBasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-basis" CSS property.</haxe_doc>
		</flexBasis>
		<flexDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-direction" CSS property.</haxe_doc>
		</flexDirection>
		<flexFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-flow" CSS property.</haxe_doc>
		</flexFlow>
		<flexGrow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-grow" CSS property.</haxe_doc>
		</flexGrow>
		<flexShrink public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-shrink" CSS property.</haxe_doc>
		</flexShrink>
		<flexWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-wrap" CSS property.</haxe_doc>
		</flexWrap>
		<float public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float" CSS property.</haxe_doc>
		</float>
		<floatOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float-offset" CSS property.</haxe_doc>
		</floatOffset>
		<floodColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-color" CSS property.</haxe_doc>
		</floodColor>
		<floodOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-opacity" CSS property.</haxe_doc>
		</floodOpacity>
		<flowFrom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-from" CSS property.</haxe_doc>
		</flowFrom>
		<flowInto public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-into" CSS property.</haxe_doc>
		</flowInto>
		<font public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font" CSS property.</haxe_doc>
		</font>
		<fontDisplay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-display" CSS property.</haxe_doc>
		</fontDisplay>
		<fontFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-family" CSS property.</haxe_doc>
		</fontFamily>
		<fontFeatureSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-feature-settings" CSS property.</haxe_doc>
		</fontFeatureSettings>
		<fontKerning public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-kerning" CSS property.</haxe_doc>
		</fontKerning>
		<fontLanguageOverride public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-language-override" CSS property.</haxe_doc>
		</fontLanguageOverride>
		<fontOpticalSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-optical-sizing" CSS property.</haxe_doc>
		</fontOpticalSizing>
		<fontSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size" CSS property.</haxe_doc>
		</fontSize>
		<fontSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size-adjust" CSS property.</haxe_doc>
		</fontSizeAdjust>
		<fontStretch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-stretch" CSS property.</haxe_doc>
		</fontStretch>
		<fontStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-style" CSS property.</haxe_doc>
		</fontStyle>
		<fontSynthesis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-synthesis" CSS property.</haxe_doc>
		</fontSynthesis>
		<fontVariant public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant" CSS property.</haxe_doc>
		</fontVariant>
		<fontVariantAlternates public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-alternates" CSS property.</haxe_doc>
		</fontVariantAlternates>
		<fontVariantCaps public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-caps" CSS property.</haxe_doc>
		</fontVariantCaps>
		<fontVariantEastAsian public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-east-asian" CSS property.</haxe_doc>
		</fontVariantEastAsian>
		<fontVariantLigatures public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-ligatures" CSS property.</haxe_doc>
		</fontVariantLigatures>
		<fontVariantNumeric public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-numeric" CSS property.</haxe_doc>
		</fontVariantNumeric>
		<fontVariantPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-position" CSS property.</haxe_doc>
		</fontVariantPosition>
		<fontVariationSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variation-settings" CSS property.</haxe_doc>
		</fontVariationSettings>
		<fontWeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-weight" CSS property.</haxe_doc>
		</fontWeight>
		<gap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "gap" CSS property.</haxe_doc>
		</gap>
		<grid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid" CSS property.</haxe_doc>
		</grid>
		<gridArea public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-area" CSS property.</haxe_doc>
		</gridArea>
		<gridAutoColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-columns" CSS property.</haxe_doc>
		</gridAutoColumns>
		<gridAutoFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-flow" CSS property.</haxe_doc>
		</gridAutoFlow>
		<gridAutoRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-rows" CSS property.</haxe_doc>
		</gridAutoRows>
		<gridColumn public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column" CSS property.</haxe_doc>
		</gridColumn>
		<gridColumnEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-end" CSS property.</haxe_doc>
		</gridColumnEnd>
		<gridColumnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-gap" CSS property.</haxe_doc>
		</gridColumnGap>
		<gridColumnStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-start" CSS property.</haxe_doc>
		</gridColumnStart>
		<gridGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-gap" CSS property.</haxe_doc>
		</gridGap>
		<gridRow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row" CSS property.</haxe_doc>
		</gridRow>
		<gridRowEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-end" CSS property.</haxe_doc>
		</gridRowEnd>
		<gridRowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-gap" CSS property.</haxe_doc>
		</gridRowGap>
		<gridRowStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-start" CSS property.</haxe_doc>
		</gridRowStart>
		<gridTemplate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template" CSS property.</haxe_doc>
		</gridTemplate>
		<gridTemplateAreas public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-areas" CSS property.</haxe_doc>
		</gridTemplateAreas>
		<gridTemplateColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-columns" CSS property.</haxe_doc>
		</gridTemplateColumns>
		<gridTemplateRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-rows" CSS property.</haxe_doc>
		</gridTemplateRows>
		<hangingPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hanging-punctuation" CSS property.</haxe_doc>
		</hangingPunctuation>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "height" CSS property.</haxe_doc>
		</height>
		<hyphens public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hyphens" CSS property.</haxe_doc>
		</hyphens>
		<icon public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "icon" CSS property.</haxe_doc>
		</icon>
		<imageOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-orientation" CSS property.</haxe_doc>
		</imageOrientation>
		<imageRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-rendering" CSS property.</haxe_doc>
		</imageRendering>
		<imageResolution public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-resolution" CSS property.</haxe_doc>
		</imageResolution>
		<imeMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ime-mode" CSS property.</haxe_doc>
		</imeMode>
		<initialLetters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "initial-letters" CSS property.</haxe_doc>
		</initialLetters>
		<inlineBoxAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-box-align" CSS property.</haxe_doc>
		</inlineBoxAlign>
		<inlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-size" CSS property.</haxe_doc>
		</inlineSize>
		<isolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "isolation" CSS property.</haxe_doc>
		</isolation>
		<justifyContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-content" CSS property.</haxe_doc>
		</justifyContent>
		<justifyItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-items" CSS property.</haxe_doc>
		</justifyItems>
		<justifySelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-self" CSS property.</haxe_doc>
		</justifySelf>
		<left public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "left" CSS property.</haxe_doc>
		</left>
		<letterSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "letter-spacing" CSS property.</haxe_doc>
		</letterSpacing>
		<lightingColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "lighting-color" CSS property.</haxe_doc>
		</lightingColor>
		<lineBoxContain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-box-contain" CSS property.</haxe_doc>
		</lineBoxContain>
		<lineBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-break" CSS property.</haxe_doc>
		</lineBreak>
		<lineGrid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-grid" CSS property.</haxe_doc>
		</lineGrid>
		<lineHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-height" CSS property.</haxe_doc>
		</lineHeight>
		<lineSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-snap" CSS property.</haxe_doc>
		</lineSnap>
		<lineStacking public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking" CSS property.</haxe_doc>
		</lineStacking>
		<lineStackingRuby public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-ruby" CSS property.</haxe_doc>
		</lineStackingRuby>
		<lineStackingShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-shift" CSS property.</haxe_doc>
		</lineStackingShift>
		<lineStackingStrategy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-strategy" CSS property.</haxe_doc>
		</lineStackingStrategy>
		<listStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style" CSS property.</haxe_doc>
		</listStyle>
		<listStyleImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-image" CSS property.</haxe_doc>
		</listStyleImage>
		<listStylePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-position" CSS property.</haxe_doc>
		</listStylePosition>
		<listStyleType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-type" CSS property.</haxe_doc>
		</listStyleType>
		<margin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin" CSS property.</haxe_doc>
		</margin>
		<marginBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-end" CSS property.</haxe_doc>
		</marginBlockEnd>
		<marginBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-start" CSS property.</haxe_doc>
		</marginBlockStart>
		<marginBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-bottom" CSS property.</haxe_doc>
		</marginBottom>
		<marginInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-end" CSS property.</haxe_doc>
		</marginInlineEnd>
		<marginInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-start" CSS property.</haxe_doc>
		</marginInlineStart>
		<marginLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-left" CSS property.</haxe_doc>
		</marginLeft>
		<marginRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-right" CSS property.</haxe_doc>
		</marginRight>
		<marginTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-top" CSS property.</haxe_doc>
		</marginTop>
		<marker public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker" CSS property.</haxe_doc>
		</marker>
		<markerEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-end" CSS property.</haxe_doc>
		</markerEnd>
		<markerMid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-mid" CSS property.</haxe_doc>
		</markerMid>
		<markerOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-offset" CSS property.</haxe_doc>
		</markerOffset>
		<markerSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-side" CSS property.</haxe_doc>
		</markerSide>
		<markerStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-start" CSS property.</haxe_doc>
		</markerStart>
		<marks public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marks" CSS property.</haxe_doc>
		</marks>
		<mask public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask" CSS property.</haxe_doc>
		</mask>
		<maskBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box" CSS property.</haxe_doc>
		</maskBox>
		<maskBoxOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-outset" CSS property.</haxe_doc>
		</maskBoxOutset>
		<maskBoxRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-repeat" CSS property.</haxe_doc>
		</maskBoxRepeat>
		<maskBoxSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-slice" CSS property.</haxe_doc>
		</maskBoxSlice>
		<maskBoxSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-source" CSS property.</haxe_doc>
		</maskBoxSource>
		<maskBoxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-width" CSS property.</haxe_doc>
		</maskBoxWidth>
		<maskClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-clip" CSS property.</haxe_doc>
		</maskClip>
		<maskComposite public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-composite" CSS property.</haxe_doc>
		</maskComposite>
		<maskImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-image" CSS property.</haxe_doc>
		</maskImage>
		<maskMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-mode" CSS property.</haxe_doc>
		</maskMode>
		<maskOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-origin" CSS property.</haxe_doc>
		</maskOrigin>
		<maskPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position" CSS property.</haxe_doc>
		</maskPosition>
		<maskPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-x" CSS property.</haxe_doc>
		</maskPositionX>
		<maskPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-y" CSS property.</haxe_doc>
		</maskPositionY>
		<maskRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-repeat" CSS property.</haxe_doc>
		</maskRepeat>
		<maskSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-size" CSS property.</haxe_doc>
		</maskSize>
		<maskSourceType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-source-type" CSS property.</haxe_doc>
		</maskSourceType>
		<maskType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-type" CSS property.</haxe_doc>
		</maskType>
		<maxBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-block-size" CSS property.</haxe_doc>
		</maxBlockSize>
		<maxHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-height" CSS property.</haxe_doc>
		</maxHeight>
		<maxInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-inline-size" CSS property.</haxe_doc>
		</maxInlineSize>
		<maxLines public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-lines" CSS property.</haxe_doc>
		</maxLines>
		<maxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-width" CSS property.</haxe_doc>
		</maxWidth>
		<maxZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-zoom" CSS property.</haxe_doc>
		</maxZoom>
		<minBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-block-size" CSS property.</haxe_doc>
		</minBlockSize>
		<minHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-height" CSS property.</haxe_doc>
		</minHeight>
		<minInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-inline-size" CSS property.</haxe_doc>
		</minInlineSize>
		<minWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-width" CSS property.</haxe_doc>
		</minWidth>
		<minZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-zoom" CSS property.</haxe_doc>
		</minZoom>
		<mixBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mix-blend-mode" CSS property.</haxe_doc>
		</mixBlendMode>
		<moveTo public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "move-to" CSS property.</haxe_doc>
		</moveTo>
		<navDown public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-down" CSS property.</haxe_doc>
		</navDown>
		<navIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-index" CSS property.</haxe_doc>
		</navIndex>
		<navLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-left" CSS property.</haxe_doc>
		</navLeft>
		<navRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-right" CSS property.</haxe_doc>
		</navRight>
		<navUp public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-up" CSS property.</haxe_doc>
		</navUp>
		<objectFit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-fit" CSS property.</haxe_doc>
		</objectFit>
		<objectPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-position" CSS property.</haxe_doc>
		</objectPosition>
		<offset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset" CSS property.</haxe_doc>
		</offset>
		<offsetBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-end" CSS property.</haxe_doc>
		</offsetBlockEnd>
		<offsetBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-start" CSS property.</haxe_doc>
		</offsetBlockStart>
		<offsetDistance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-distance" CSS property.</haxe_doc>
		</offsetDistance>
		<offsetInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-end" CSS property.</haxe_doc>
		</offsetInlineEnd>
		<offsetInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-start" CSS property.</haxe_doc>
		</offsetInlineStart>
		<offsetPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-path" CSS property.</haxe_doc>
		</offsetPath>
		<offsetRotate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-rotate" CSS property.</haxe_doc>
		</offsetRotate>
		<opacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "opacity" CSS property.</haxe_doc>
		</opacity>
		<order public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "order" CSS property.</haxe_doc>
		</order>
		<orientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orientation" CSS property.</haxe_doc>
		</orientation>
		<orphans public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orphans" CSS property.</haxe_doc>
		</orphans>
		<outline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline" CSS property.</haxe_doc>
		</outline>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-color" CSS property.</haxe_doc>
		</outlineColor>
		<outlineOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-offset" CSS property.</haxe_doc>
		</outlineOffset>
		<outlineStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-style" CSS property.</haxe_doc>
		</outlineStyle>
		<outlineWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-width" CSS property.</haxe_doc>
		</outlineWidth>
		<overflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow" CSS property.</haxe_doc>
		</overflow>
		<overflowAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-anchor" CSS property.</haxe_doc>
		</overflowAnchor>
		<overflowWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-wrap" CSS property.</haxe_doc>
		</overflowWrap>
		<overflowX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-x" CSS property.</haxe_doc>
		</overflowX>
		<overflowY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-y" CSS property.</haxe_doc>
		</overflowY>
		<overscrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior" CSS property.</haxe_doc>
		</overscrollBehavior>
		<overscrollBehaviorX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-x" CSS property.</haxe_doc>
		</overscrollBehaviorX>
		<overscrollBehaviorY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-y" CSS property.</haxe_doc>
		</overscrollBehaviorY>
		<padding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding" CSS property.</haxe_doc>
		</padding>
		<paddingBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-end" CSS property.</haxe_doc>
		</paddingBlockEnd>
		<paddingBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-start" CSS property.</haxe_doc>
		</paddingBlockStart>
		<paddingBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-bottom" CSS property.</haxe_doc>
		</paddingBottom>
		<paddingInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-end" CSS property.</haxe_doc>
		</paddingInlineEnd>
		<paddingInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-start" CSS property.</haxe_doc>
		</paddingInlineStart>
		<paddingLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-left" CSS property.</haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-right" CSS property.</haxe_doc>
		</paddingRight>
		<paddingTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-top" CSS property.</haxe_doc>
		</paddingTop>
		<page public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page" CSS property.</haxe_doc>
		</page>
		<pageBreakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-after" CSS property.</haxe_doc>
		</pageBreakAfter>
		<pageBreakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-before" CSS property.</haxe_doc>
		</pageBreakBefore>
		<pageBreakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-inside" CSS property.</haxe_doc>
		</pageBreakInside>
		<pagePolicy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-policy" CSS property.</haxe_doc>
		</pagePolicy>
		<paintOrder public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "paint-order" CSS property.</haxe_doc>
		</paintOrder>
		<pause public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause" CSS property.</haxe_doc>
		</pause>
		<pauseAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-after" CSS property.</haxe_doc>
		</pauseAfter>
		<pauseBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-before" CSS property.</haxe_doc>
		</pauseBefore>
		<perspective public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective" CSS property.</haxe_doc>
		</perspective>
		<perspectiveOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective-origin" CSS property.</haxe_doc>
		</perspectiveOrigin>
		<pitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch" CSS property.</haxe_doc>
		</pitch>
		<pitchRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch-range" CSS property.</haxe_doc>
		</pitchRange>
		<placeContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-content" CSS property.</haxe_doc>
		</placeContent>
		<placeItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-items" CSS property.</haxe_doc>
		</placeItems>
		<placeSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-self" CSS property.</haxe_doc>
		</placeSelf>
		<playDuring public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "play-during" CSS property.</haxe_doc>
		</playDuring>
		<pointerEvents public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pointer-events" CSS property.</haxe_doc>
		</pointerEvents>
		<position public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "position" CSS property.</haxe_doc>
		</position>
		<presentationLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "presentation-level" CSS property.</haxe_doc>
		</presentationLevel>
		<quotes public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "quotes" CSS property.</haxe_doc>
		</quotes>
		<r public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "r" CSS property.</haxe_doc>
		</r>
		<regionFragment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "region-fragment" CSS property.</haxe_doc>
		</regionFragment>
		<resize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "resize" CSS property.</haxe_doc>
		</resize>
		<rest public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest" CSS property.</haxe_doc>
		</rest>
		<restAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-after" CSS property.</haxe_doc>
		</restAfter>
		<restBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-before" CSS property.</haxe_doc>
		</restBefore>
		<richness public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "richness" CSS property.</haxe_doc>
		</richness>
		<right public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "right" CSS property.</haxe_doc>
		</right>
		<rotation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation" CSS property.</haxe_doc>
		</rotation>
		<rotationPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation-point" CSS property.</haxe_doc>
		</rotationPoint>
		<rowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "row-gap" CSS property.</haxe_doc>
		</rowGap>
		<rubyAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-align" CSS property.</haxe_doc>
		</rubyAlign>
		<rubyMerge public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-merge" CSS property.</haxe_doc>
		</rubyMerge>
		<rubyPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-position" CSS property.</haxe_doc>
		</rubyPosition>
		<rx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rx" CSS property.</haxe_doc>
		</rx>
		<ry public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ry" CSS property.</haxe_doc>
		</ry>
		<scrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-behavior" CSS property.</haxe_doc>
		</scrollBehavior>
		<scrollSnapCoordinate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-coordinate" CSS property.</haxe_doc>
		</scrollSnapCoordinate>
		<scrollSnapDestination public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-destination" CSS property.</haxe_doc>
		</scrollSnapDestination>
		<scrollSnapPointsX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-x" CSS property.</haxe_doc>
		</scrollSnapPointsX>
		<scrollSnapPointsY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-y" CSS property.</haxe_doc>
		</scrollSnapPointsY>
		<scrollSnapType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type" CSS property.</haxe_doc>
		</scrollSnapType>
		<scrollSnapTypeX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-x" CSS property.</haxe_doc>
		</scrollSnapTypeX>
		<scrollSnapTypeY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-y" CSS property.</haxe_doc>
		</scrollSnapTypeY>
		<shapeImageThreshold public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-image-threshold" CSS property.</haxe_doc>
		</shapeImageThreshold>
		<shapeMargin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-margin" CSS property.</haxe_doc>
		</shapeMargin>
		<shapeOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-outside" CSS property.</haxe_doc>
		</shapeOutside>
		<shapeRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-rendering" CSS property.</haxe_doc>
		</shapeRendering>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "size" CSS property.</haxe_doc>
		</size>
		<speak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak" CSS property.</haxe_doc>
		</speak>
		<speakAs public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-as" CSS property.</haxe_doc>
		</speakAs>
		<speakHeader public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-header" CSS property.</haxe_doc>
		</speakHeader>
		<speakNumeral public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-numeral" CSS property.</haxe_doc>
		</speakNumeral>
		<speakPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-punctuation" CSS property.</haxe_doc>
		</speakPunctuation>
		<speechRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speech-rate" CSS property.</haxe_doc>
		</speechRate>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "src" CSS property.</haxe_doc>
		</src>
		<stopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-color" CSS property.</haxe_doc>
		</stopColor>
		<stopOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-opacity" CSS property.</haxe_doc>
		</stopOpacity>
		<stress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stress" CSS property.</haxe_doc>
		</stress>
		<stringSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "string-set" CSS property.</haxe_doc>
		</stringSet>
		<stroke public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke" CSS property.</haxe_doc>
		</stroke>
		<strokeDasharray public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dasharray" CSS property.</haxe_doc>
		</strokeDasharray>
		<strokeDashoffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dashoffset" CSS property.</haxe_doc>
		</strokeDashoffset>
		<strokeLinecap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linecap" CSS property.</haxe_doc>
		</strokeLinecap>
		<strokeLinejoin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linejoin" CSS property.</haxe_doc>
		</strokeLinejoin>
		<strokeMiterlimit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-miterlimit" CSS property.</haxe_doc>
		</strokeMiterlimit>
		<strokeOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-opacity" CSS property.</haxe_doc>
		</strokeOpacity>
		<strokeWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-width" CSS property.</haxe_doc>
		</strokeWidth>
		<tabSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "tab-size" CSS property.</haxe_doc>
		</tabSize>
		<tableLayout public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "table-layout" CSS property.</haxe_doc>
		</tableLayout>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align" CSS property.</haxe_doc>
		</textAlign>
		<textAlignLast public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align-last" CSS property.</haxe_doc>
		</textAlignLast>
		<textAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-anchor" CSS property.</haxe_doc>
		</textAnchor>
		<textCombineUpright public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-combine-upright" CSS property.</haxe_doc>
		</textCombineUpright>
		<textDecoration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration" CSS property.</haxe_doc>
		</textDecoration>
		<textDecorationColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-color" CSS property.</haxe_doc>
		</textDecorationColor>
		<textDecorationLine public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-line" CSS property.</haxe_doc>
		</textDecorationLine>
		<textDecorationSkip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip" CSS property.</haxe_doc>
		</textDecorationSkip>
		<textDecorationSkipInk public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip-ink" CSS property.</haxe_doc>
		</textDecorationSkipInk>
		<textDecorationStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-style" CSS property.</haxe_doc>
		</textDecorationStyle>
		<textEmphasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis" CSS property.</haxe_doc>
		</textEmphasis>
		<textEmphasisColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-color" CSS property.</haxe_doc>
		</textEmphasisColor>
		<textEmphasisPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-position" CSS property.</haxe_doc>
		</textEmphasisPosition>
		<textEmphasisStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-style" CSS property.</haxe_doc>
		</textEmphasisStyle>
		<textHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-height" CSS property.</haxe_doc>
		</textHeight>
		<textIndent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-indent" CSS property.</haxe_doc>
		</textIndent>
		<textJustify public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-justify" CSS property.</haxe_doc>
		</textJustify>
		<textOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-orientation" CSS property.</haxe_doc>
		</textOrientation>
		<textOverflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-overflow" CSS property.</haxe_doc>
		</textOverflow>
		<textRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-rendering" CSS property.</haxe_doc>
		</textRendering>
		<textShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-shadow" CSS property.</haxe_doc>
		</textShadow>
		<textSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-size-adjust" CSS property.</haxe_doc>
		</textSizeAdjust>
		<textSpaceCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-space-collapse" CSS property.</haxe_doc>
		</textSpaceCollapse>
		<textTransform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-transform" CSS property.</haxe_doc>
		</textTransform>
		<textUnderlinePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-underline-position" CSS property.</haxe_doc>
		</textUnderlinePosition>
		<textWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-wrap" CSS property.</haxe_doc>
		</textWrap>
		<top public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "top" CSS property.</haxe_doc>
		</top>
		<touchAction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "touch-action" CSS property.</haxe_doc>
		</touchAction>
		<transform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform" CSS property.</haxe_doc>
		</transform>
		<transformBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-box" CSS property.</haxe_doc>
		</transformBox>
		<transformOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-origin" CSS property.</haxe_doc>
		</transformOrigin>
		<transformStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-style" CSS property.</haxe_doc>
		</transformStyle>
		<transition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition" CSS property.</haxe_doc>
		</transition>
		<transitionDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-delay" CSS property.</haxe_doc>
		</transitionDelay>
		<transitionDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-duration" CSS property.</haxe_doc>
		</transitionDuration>
		<transitionProperty public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-property" CSS property.</haxe_doc>
		</transitionProperty>
		<transitionTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-timing-function" CSS property.</haxe_doc>
		</transitionTimingFunction>
		<unicodeBidi public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-bidi" CSS property.</haxe_doc>
		</unicodeBidi>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-range" CSS property.</haxe_doc>
		</unicodeRange>
		<userSelect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-select" CSS property.</haxe_doc>
		</userSelect>
		<userZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-zoom" CSS property.</haxe_doc>
		</userZoom>
		<vectorEffect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vector-effect" CSS property.</haxe_doc>
		</vectorEffect>
		<verticalAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vertical-align" CSS property.</haxe_doc>
		</verticalAlign>
		<visibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "visibility" CSS property.</haxe_doc>
		</visibility>
		<voiceBalance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-balance" CSS property.</haxe_doc>
		</voiceBalance>
		<voiceDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-duration" CSS property.</haxe_doc>
		</voiceDuration>
		<voiceFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-family" CSS property.</haxe_doc>
		</voiceFamily>
		<voicePitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-pitch" CSS property.</haxe_doc>
		</voicePitch>
		<voiceRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-range" CSS property.</haxe_doc>
		</voiceRange>
		<voiceRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-rate" CSS property.</haxe_doc>
		</voiceRate>
		<voiceStress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-stress" CSS property.</haxe_doc>
		</voiceStress>
		<voiceVolume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-volume" CSS property.</haxe_doc>
		</voiceVolume>
		<volume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "volume" CSS property.</haxe_doc>
		</volume>
		<whiteSpace public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "white-space" CSS property.</haxe_doc>
		</whiteSpace>
		<widows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "widows" CSS property.</haxe_doc>
		</widows>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "width" CSS property.</haxe_doc>
		</width>
		<willChange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "will-change" CSS property.</haxe_doc>
		</willChange>
		<wordBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-break" CSS property.</haxe_doc>
		</wordBreak>
		<wordSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-spacing" CSS property.</haxe_doc>
		</wordSpacing>
		<wordWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-wrap" CSS property.</haxe_doc>
		</wordWrap>
		<wrapFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-flow" CSS property.</haxe_doc>
		</wrapFlow>
		<wrapThrough public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-through" CSS property.</haxe_doc>
		</wrapThrough>
		<writingMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "writing-mode" CSS property.</haxe_doc>
		</writingMode>
		<x public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "x" CSS property.</haxe_doc>
		</x>
		<y public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "y" CSS property.</haxe_doc>
		</y>
		<zIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "z-index" CSS property.</haxe_doc>
		</zIndex>
		<zoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "zoom" CSS property.</haxe_doc>
		</zoom>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<getPropertyValue public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPropertyValue>
		<getPropertyPriority public="1" set="method"><f a="property">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyPriority>
		<setProperty public="1" set="method">
			<f a="property:value:?priority" v="::&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setProperty>
		<removeProperty public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeProperty>
		<haxe_doc><![CDATA[`CSSStyleDeclaration` represents a collection of CSS property-value pairs. It is used in a few APIs:

	Documentation [CSSStyleDeclaration](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleDeclaration"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSStyleRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<selectorText public="1">
			<c path="String"/>
			<haxe_doc>Gets the textual representation of the selector for this rule, e.g. `"h1,h2"`.</haxe_doc>
		</selectorText>
		<style public="1" set="null">
			<c path="js.html.CSSStyleDeclaration"/>
			<haxe_doc>Returns the `CSSStyleDeclaration` object for the rule.</haxe_doc>
		</style>
		<haxe_doc><![CDATA[`CSSStyleRule` represents a single CSS style rule. It implements the `CSSRule` interface with a type value of `1` (`CSSRule.STYLE_RULE`).

	Documentation [CSSStyleRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleRule"</e></m></meta>
	</class>
	<class path="js.html.StyleSheet" params="" file="/home/vsts/work/1/s/std/js/html/StyleSheet.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the style sheet language for this style sheet.</haxe_doc>
		</type>
		<href public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the location of the stylesheet.</haxe_doc>
		</href>
		<ownerNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` associating this style sheet with the current document.</haxe_doc>
		</ownerNode>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.StyleSheet"/>
			<haxe_doc>Returns a `StyleSheet` including this one, if any; returns `null` if there aren't any.</haxe_doc>
		</parentStyleSheet>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the advisory title of the current style sheet.</haxe_doc>
		</title>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Returns a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` representing whether the current stylesheet has been applied or not.</haxe_doc>
		</disabled>
		<haxe_doc><![CDATA[An object implementing the `StyleSheet` interface represents a single style sheet. CSS style sheets will further implement the more specialized `CSSStyleSheet` interface.

	Documentation [StyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleSheet" params="" file="/home/vsts/work/1/s/std/js/html/CSSStyleSheet.hx" extern="1">
		<extends path="js.html.StyleSheet"/>
		<ownerRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc>If this style sheet is imported into the document using an `@import` rule, the `ownerRule` property will return that `CSSImportRule`, otherwise it returns `null`.</haxe_doc>
		</ownerRule>
		<cssRules public="1" set="null">
			<c path="js.html.CSSRuleList"/>
			<haxe_doc>Returns a live `CSSRuleList`, listing the `CSSRule` objects in the style sheet.
		
		 This is normally used to access individual rules like this:
		
		 `   styleSheet.cssRules[i] // where i = 0..cssRules.length-1`
		
		 To add or remove items in `cssRules`, use the `CSSStyleSheet`'s `deleteRule()` and `insertRule()` methods, described below.</haxe_doc>
		</cssRules>
		<insertRule public="1" set="method">
			<f a="rule:?index" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
			<haxe_doc>Inserts a new rule at the specified position in the style sheet, given the textual representation of the rule.
		@throws DOMError</haxe_doc>
		</insertRule>
		<deleteRule public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a rule at the specified position from the style sheet.
		@throws DOMError</haxe_doc>
		</deleteRule>
		<haxe_doc><![CDATA[The `CSSStyleSheet` interface represents a single CSS style sheet. It inherits properties and methods from its parent, `StyleSheet`.

	Documentation [CSSStyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSSupportsRule" params="" file="/home/vsts/work/1/s/std/js/html/CSSSupportsRule.hx" extern="1">
		<extends path="js.html.CSSConditionRule"/>
		<haxe_doc><![CDATA[The `CSSSupportsRule` interface describes an object representing a single CSS `@supports` at-rule. It implements the `CSSConditionRule` interface, and therefore the `CSSRule` and `CSSGroupingRule` interfaces with a type value of `12` (`CSSRule.SUPPORTS_RULE`).

	Documentation [CSSSupportsRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSSupportsRule"</e></m></meta>
	</class>
	<class path="js.html.CSSTransition" params="" file="/home/vsts/work/1/s/std/js/html/CSSTransition.hx" extern="1">
		<extends path="js.html.Animation"/>
		<transitionProperty public="1" set="null"><c path="String"/></transitionProperty>
		<meta><m n=":native"><e>"CSSTransition"</e></m></meta>
	</class>
	<class path="js.html.Cache" params="" file="/home/vsts/work/1/s/std/js/html/Cache.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><match public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></match></overloads>
		</match>
		<matchAll public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
			</f>
			<overloads><matchAll public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
</f></matchAll></overloads>
		</matchAll>
		<add public="1" set="method">
			<f a="request">
				<c path="js.html.Request"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><add public="1" set="method"><f a="request">
	<c path="String"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></add></overloads>
		</add>
		<addAll public="1" set="method"><f a="requests">
	<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Request"/>
	<c path="String"/>
</x></c>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></addAll>
		<put public="1" set="method">
			<f a="request:response">
				<c path="js.html.Request"/>
				<c path="js.html.Response"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><put public="1" set="method"><f a="request:response">
	<c path="String"/>
	<c path="js.html.Response"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></put></overloads>
		</put>
		<delete public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<overloads><delete public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><x path="Bool"/></c>
</f></delete></overloads>
		</delete>
		<keys public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
			</f>
			<overloads><keys public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
</f></keys></overloads>
		</keys>
		<haxe_doc><![CDATA[The `Cache` interface provides a storage mechanism for `Request` / `Response` object pairs that are cached, for example as part of the `ServiceWorker` life cycle. Note that the `Cache` interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.

	Documentation [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Cache$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Cache>]]></haxe_doc>
		<meta><m n=":native"><e>"Cache"</e></m></meta>
	</class>
	<typedef path="js.html.CacheQueryOptions" params="" file="/home/vsts/work/1/s/std/js/html/CacheQueryOptions.hx"><a>
	<ignoreVary>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreVary>
	<ignoreSearch>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreSearch>
	<ignoreMethod>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreMethod>
	<cacheName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</cacheName>
</a></typedef>
	<class path="js.html.CacheStorage" params="" file="/home/vsts/work/1/s/std/js/html/CacheStorage.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
			<overloads><match public="1" set="method">
	<f a="request:?options">
		<c path="String"/>
		<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
		<c path="js.lib.Promise"><c path="js.html.Response"/></c>
	</f>
	<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
</match></overloads>
		</match>
		<has public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if a `Cache` object matching the `cacheName` exists.</haxe_doc>
		</has>
		<open public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><c path="js.html.Cache"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the `Cache` object matching the `cacheName` (a new cache is created if it doesn't already exist.)</haxe_doc>
		</open>
		<delete public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Finds the `Cache` object matching the `cacheName`, and if found, deletes the `Cache` object and returns a `Promise` that resolves to `true`. If no `Cache` object is found, it returns `false`.</haxe_doc>
		</delete>
		<keys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="String"/></c></c></f>
			<haxe_doc>Returns a `Promise` that will resolve with an array containing strings corresponding to all of the named `Cache` objects tracked by the `CacheStorage`. Use this method to iterate over a list of all the `Cache` objects.</haxe_doc>
		</keys>
		<new public="1" set="method">
			<f a="namespace:principal">
				<x path="js.html.CacheStorageNamespace"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `CacheStorage` interface represents the storage for `Cache` objects.

	Documentation [CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage>]]></haxe_doc>
		<meta><m n=":native"><e>"CacheStorage"</e></m></meta>
	</class>
	<abstract path="js.html.CacheStorageNamespace" params="" file="/home/vsts/work/1/s/std/js/html/CacheStorageNamespace.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CacheStorageNamespace.CacheStorageNamespace_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CacheStorageNamespace.hx" private="1" module="js.html.CacheStorageNamespace" extern="1" final="1">
	<CONTENT public="1" get="inline" set="null" expr="cast &quot;content&quot;" line="28" static="1">
		<x path="js.html.CacheStorageNamespace"/>
		<meta>
			<m n=":value"><e>cast "content"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONTENT>
	<CHROME public="1" get="inline" set="null" expr="cast &quot;chrome&quot;" line="29" static="1">
		<x path="js.html.CacheStorageNamespace"/>
		<meta>
			<m n=":value"><e>cast "chrome"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHROME>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._CacheStorageNamespace.CacheStorageNamespace_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CacheStorageNamespace.hx" private="1" module="js.html.CacheStorageNamespace" extern="1" final="1">
		<CONTENT public="1" get="inline" set="null" expr="cast &quot;content&quot;" line="28" static="1">
			<x path="js.html.CacheStorageNamespace"/>
			<meta>
				<m n=":value"><e>cast "content"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONTENT>
		<CHROME public="1" get="inline" set="null" expr="cast &quot;chrome&quot;" line="29" static="1">
			<x path="js.html.CacheStorageNamespace"/>
			<meta>
				<m n=":value"><e>cast "chrome"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHROME>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.MediaStream" params="" file="/home/vsts/work/1/s/std/js/html/MediaStream.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing 36 characters denoting a universally unique identifier (UUID) for the object.</haxe_doc>
		</id>
		<active public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value that returns `true` if the `MediaStream` is active, or `false` otherwise.</haxe_doc>
		</active>
		<onaddtrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `addtrack` event is fired when a new `MediaStreamTrack` object is added.</haxe_doc>
		</onaddtrack>
		<onremovetrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when a `removetrack` event is fired when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onremovetrack>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<getAudioTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.AudioStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the MediaStream` object that have their kind` attribute set to "audio"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getAudioTracks>
		<getVideoTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.VideoStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `"video"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getVideoTracks>
		<getTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.MediaStreamTrack"/></c></f>
			<haxe_doc>Returns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getTracks>
		<getTrackById public="1" set="method">
			<f a="trackId">
				<c path="String"/>
				<c path="js.html.MediaStreamTrack"/>
			</f>
			<haxe_doc>Returns the track whose ID corresponds to the one given in parameters, trackid`. If no parameter is given, or if no track with that ID does exist, it returns null`. If several tracks have the same ID, it returns the first one.</haxe_doc>
		</getTrackById>
		<addTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.</haxe_doc>
		</addTrack>
		<removeTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the `MediaStreamTrack` given as argument. If the track is not part of the MediaStream` object, nothing happens.</haxe_doc>
		</removeTrack>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStream"/></f>
			<haxe_doc>Returns a clone of the `MediaStream` object. The clone will, however, have a unique value for `MediaStream.id`.</haxe_doc>
		</clone>
		<new public="1" set="method">
			<f a="tracks">
				<c path="Array"><c path="js.html.MediaStreamTrack"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="stream">
						<c path="js.html.MediaStream"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaStream` interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.

	Documentation [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasCaptureMediaStream" params="" file="/home/vsts/work/1/s/std/js/html/CanvasCaptureMediaStream.hx" extern="1">
		<extends path="js.html.MediaStream"/>
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<requestFrame public="1" set="method"><f a=""><x path="Void"/></f></requestFrame>
		<meta><m n=":native"><e>"CanvasCaptureMediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasElement" params="" file="/home/vsts/work/1/s/std/js/html/CanvasElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.</haxe_doc>
		</height>
		<getContext public="1" set="method">
			<f a="contextId:?contextOptions">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `"2d"` returns a `CanvasRenderingContext2D` object, whereas calling it with `"webgl"` (or `"experimental-webgl"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.
		@throws DOMError</haxe_doc>
		</getContext>
		<toDataURL public="1" set="method">
			<f a="?type:?encoderOptions" v="&quot;&quot;:">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Returns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.
		@throws DOMError</haxe_doc>
		</toDataURL>
		<toBlob public="1" set="method">
			<f a="callback:?type:?encoderOptions" v=":&quot;&quot;:">
				<f a="">
					<c path="js.html.Blob"/>
					<x path="Void"/>
				</f>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Creates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.
		@throws DOMError</haxe_doc>
		</toBlob>
		<captureStream public="1" set="method">
			<f a="?frameRate">
				<x path="Float"/>
				<c path="js.html.CanvasCaptureMediaStream"/>
			</f>
			<haxe_doc>Returns a `CanvasCaptureMediaStream` that is a real-time video capture of the surface of the canvas.
		@throws DOMError</haxe_doc>
		</captureStream>
		<getContext2d public="1" get="inline" set="null" line="73">
			<f a="?attribs">
				<a/>
				<c path="js.html.CanvasRenderingContext2D"/>
			</f>
			<haxe_doc>Shorthand for getting a CanvasRenderingContext2D.</haxe_doc>
		</getContext2d>
		<getContextWebGL public="1" get="inline" set="null" line="77">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.RenderingContext.</haxe_doc>
		</getContextWebGL>
		<getContextWebGL2 public="1" get="inline" set="null" line="81">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.WebGL2RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.WebGL2RenderingContext.</haxe_doc>
		</getContextWebGL2>
		<haxe_doc><![CDATA[The `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCanvasElement"</e></m></meta>
	</class>
	<class path="js.html._CanvasElement.CanvasUtil" params="" file="/home/vsts/work/1/s/std/js/html/CanvasElement.hx" private="1" module="js.html.CanvasElement"><getContextWebGL public="1" set="method" line="87" static="1"><f a="canvas:attribs">
	<c path="js.html.CanvasElement"/>
	<a/>
	<c path="js.html.webgl.RenderingContext"/>
</f></getContextWebGL></class>
	<class path="js.html.CanvasGradient" params="" file="/home/vsts/work/1/s/std/js/html/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method">
			<f a="offset:color">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a new stop, defined by an `offset` and a `color`, to the gradient. If the offset is not between `0` and `1` an `INDEX_SIZE_ERR` is raised, if the color can't be parsed as a CSS `color`, a `SYNTAX_ERR` is raised.
		@throws DOMError</haxe_doc>
		</addColorStop>
		<haxe_doc><![CDATA[The `CanvasGradient` interface represents an opaque object describing a gradient. It is returned by the methods `CanvasRenderingContext2D.createLinearGradient()` or `CanvasRenderingContext2D.createRadialGradient()`.

	Documentation [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasGradient"</e></m></meta>
	</class>
	<class path="js.html.CanvasPattern" params="" file="/home/vsts/work/1/s/std/js/html/CanvasPattern.hx" extern="1">
		<setTransform public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies an `SVGMatrix` representing a linear transform to the pattern.</haxe_doc>
		</setTransform>
		<haxe_doc><![CDATA[The `CanvasPattern` interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the `CanvasRenderingContext2D.createPattern()` method.

	Documentation [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasPattern"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext2D" params="" file="/home/vsts/work/1/s/std/js/html/CanvasRenderingContext2D.hx" extern="1">
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<globalAlpha public="1"><x path="Float"/></globalAlpha>
		<globalCompositeOperation public="1"><c path="String"/></globalCompositeOperation>
		<strokeStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></strokeStyle>
		<fillStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></fillStyle>
		<filter public="1"><c path="String"/></filter>
		<imageSmoothingEnabled public="1"><x path="Bool"/></imageSmoothingEnabled>
		<lineWidth public="1"><x path="Float"/></lineWidth>
		<lineCap public="1"><c path="String"/></lineCap>
		<lineJoin public="1"><c path="String"/></lineJoin>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<lineDashOffset public="1"><x path="Float"/></lineDashOffset>
		<shadowOffsetX public="1"><x path="Float"/></shadowOffsetX>
		<shadowOffsetY public="1"><x path="Float"/></shadowOffsetY>
		<shadowBlur public="1"><x path="Float"/></shadowBlur>
		<shadowColor public="1"><c path="String"/></shadowColor>
		<font public="1"><c path="String"/></font>
		<textAlign public="1"><c path="String"/></textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<drawImage public="1" set="method">
			<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
				<c path="js.html.ImageElement"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
			</overloads>
		</drawImage>
		<beginPath public="1" set="method"><f a=""><x path="Void"/></f></beginPath>
		<fill public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><fill public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</fill></overloads>
		</fill>
		<stroke public="1" set="method">
			<f a="path">
				<c path="js.html.Path2D"/>
				<x path="Void"/>
			</f>
			<overloads><stroke public="1" set="method"><f a=""><x path="Void"/></f></stroke></overloads>
		</stroke>
		<clip public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><clip public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</clip></overloads>
		</clip>
		<isPointInPath public="1" set="method">
			<f a="path:x:y:?winding" v=":::NONZERO">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><isPointInPath public="1" set="method">
	<f a="x:y:?winding" v="::NONZERO">
		<x path="Float"/>
		<x path="Float"/>
		<x path="js.html.CanvasWindingRule"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</isPointInPath></overloads>
		</isPointInPath>
		<isPointInStroke public="1" set="method">
			<f a="path:x:y">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<overloads><isPointInStroke public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInStroke></overloads>
		</isPointInStroke>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createLinearGradient>
		<createRadialGradient public="1" set="method">
			<f a="x0:y0:r0:x1:y1:r1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.CanvasGradient"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createRadialGradient>
		<createPattern public="1" set="method">
			<f a="image:repetition">
				<c path="js.html.ImageElement"/>
				<c path="String"/>
				<c path="js.html.CanvasPattern"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.svg.ImageElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.CanvasElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.VideoElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.ImageBitmap"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
			</overloads>
		</createPattern>
		<addHitRegion public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.HitRegionOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addHitRegion>
		<removeHitRegion public="1" set="method"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></removeHitRegion>
		<clearHitRegions public="1" set="method"><f a=""><x path="Void"/></f></clearHitRegions>
		<createImageData public="1" set="method">
			<f a="imagedata">
				<c path="js.html.ImageData"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageData public="1" set="method">
	<f a="sw:sh">
		<x path="Float"/>
		<x path="Float"/>
		<c path="js.html.ImageData"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageData></overloads>
		</createImageData>
		<getImageData public="1" set="method">
			<f a="sx:sy:sw:sh">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getImageData>
		<putImageData public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><putImageData public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</putImageData></overloads>
		</putImageData>
		<setLineDash public="1" set="method">
			<f a="segments">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setLineDash>
		<getLineDash public="1" set="method"><f a=""><c path="Array"><x path="Float"/></c></f></getLineDash>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<clearRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<fillRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<strokeRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeRect>
		<save public="1" set="method"><f a=""><x path="Void"/></f></save>
		<restore public="1" set="method"><f a=""><x path="Void"/></f></restore>
		<fillText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fillText>
		<strokeText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</strokeText>
		<measureText public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="js.html.TextMetrics"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</measureText>
		<scale public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</rotate>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</translate>
		<transform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transform>
		<setTransform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTransform>
		<resetTransform public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resetTransform>
		<drawFocusIfNeeded public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</drawFocusIfNeeded>
		<drawCustomFocusRing public="1" set="method"><f a="element">
	<c path="js.html.Element"/>
	<x path="Bool"/>
</f></drawCustomFocusRing>
		<haxe_doc><![CDATA[To get an object of this interface, call `getContext()` on a `canvas element`, supplying "2d" as the argument:

	Documentation [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasRenderingContext2D"</e></m></meta>
	</class>
	<abstract path="js.html.CanvasWindingRule" params="" file="/home/vsts/work/1/s/std/js/html/CanvasWindingRule.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" extern="1" final="1">
	<NONZERO public="1" get="inline" set="null" expr="cast &quot;nonzero&quot;" line="28" static="1">
		<x path="js.html.CanvasWindingRule"/>
		<meta>
			<m n=":value"><e>cast "nonzero"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONZERO>
	<EVENODD public="1" get="inline" set="null" expr="cast &quot;evenodd&quot;" line="29" static="1">
		<x path="js.html.CanvasWindingRule"/>
		<meta>
			<m n=":value"><e>cast "evenodd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EVENODD>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" extern="1" final="1">
		<NONZERO public="1" get="inline" set="null" expr="cast &quot;nonzero&quot;" line="28" static="1">
			<x path="js.html.CanvasWindingRule"/>
			<meta>
				<m n=":value"><e>cast "nonzero"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONZERO>
		<EVENODD public="1" get="inline" set="null" expr="cast &quot;evenodd&quot;" line="29" static="1">
			<x path="js.html.CanvasWindingRule"/>
			<meta>
				<m n=":value"><e>cast "evenodd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EVENODD>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.CaretPosition" params="" file="/home/vsts/work/1/s/std/js/html/CaretPosition.hx" extern="1">
		<offsetNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` containing the found node at the caret's position.</haxe_doc>
		</offsetNode>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the character offset in the caret position node.</haxe_doc>
		</offset>
		<getClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getClientRect>
		<haxe_doc><![CDATA[The `CaretPosition` interface represents the caret postion, an indicator for the text insertion point. You can get a `CaretPosition` using the `document.caretPositionFromPoint` method.

	Documentation [CaretPosition](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition>]]></haxe_doc>
		<meta><m n=":native"><e>"CaretPosition"</e></m></meta>
	</class>
	<typedef path="js.html.ChannelPixelLayout" params="" file="/home/vsts/work/1/s/std/js/html/ChannelPixelLayout.hx"><a>
	<width><x path="Int"/></width>
	<stride><x path="Int"/></stride>
	<skip><x path="Int"/></skip>
	<offset><x path="Int"/></offset>
	<height><x path="Int"/></height>
	<dataType><x path="js.html.ChannelPixelLayoutDataType"/></dataType>
</a></typedef>
	<abstract path="js.html.ChannelPixelLayoutDataType" params="" file="/home/vsts/work/1/s/std/js/html/ChannelPixelLayoutDataType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ChannelPixelLayoutDataType.ChannelPixelLayoutDataType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ChannelPixelLayoutDataType.hx" private="1" module="js.html.ChannelPixelLayoutDataType" extern="1" final="1">
	<UINT8 public="1" get="inline" set="null" expr="cast &quot;uint8&quot;" line="28" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "uint8"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UINT8>
	<INT8 public="1" get="inline" set="null" expr="cast &quot;int8&quot;" line="29" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "int8"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INT8>
	<UINT16 public="1" get="inline" set="null" expr="cast &quot;uint16&quot;" line="30" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "uint16"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UINT16>
	<INT16 public="1" get="inline" set="null" expr="cast &quot;int16&quot;" line="31" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "int16"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INT16>
	<UINT32 public="1" get="inline" set="null" expr="cast &quot;uint32&quot;" line="32" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "uint32"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UINT32>
	<INT32 public="1" get="inline" set="null" expr="cast &quot;int32&quot;" line="33" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "int32"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INT32>
	<FLOAT32 public="1" get="inline" set="null" expr="cast &quot;float32&quot;" line="34" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "float32"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FLOAT32>
	<FLOAT64 public="1" get="inline" set="null" expr="cast &quot;float64&quot;" line="35" static="1">
		<x path="js.html.ChannelPixelLayoutDataType"/>
		<meta>
			<m n=":value"><e>cast "float64"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FLOAT64>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ChannelPixelLayoutDataType.ChannelPixelLayoutDataType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ChannelPixelLayoutDataType.hx" private="1" module="js.html.ChannelPixelLayoutDataType" extern="1" final="1">
		<UINT8 public="1" get="inline" set="null" expr="cast &quot;uint8&quot;" line="28" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "uint8"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UINT8>
		<INT8 public="1" get="inline" set="null" expr="cast &quot;int8&quot;" line="29" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "int8"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INT8>
		<UINT16 public="1" get="inline" set="null" expr="cast &quot;uint16&quot;" line="30" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "uint16"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UINT16>
		<INT16 public="1" get="inline" set="null" expr="cast &quot;int16&quot;" line="31" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "int16"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INT16>
		<UINT32 public="1" get="inline" set="null" expr="cast &quot;uint32&quot;" line="32" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "uint32"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UINT32>
		<INT32 public="1" get="inline" set="null" expr="cast &quot;int32&quot;" line="33" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "int32"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INT32>
		<FLOAT32 public="1" get="inline" set="null" expr="cast &quot;float32&quot;" line="34" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "float32"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FLOAT32>
		<FLOAT64 public="1" get="inline" set="null" expr="cast &quot;float64&quot;" line="35" static="1">
			<x path="js.html.ChannelPixelLayoutDataType"/>
			<meta>
				<m n=":value"><e>cast "float64"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FLOAT64>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Client" params="" file="/home/vsts/work/1/s/std/js/html/Client.hx" extern="1">
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the client as a string.</haxe_doc>
		</url>
		<frameType public="1" set="null"><x path="js.html.FrameType"/></frameType>
		<type public="1" set="null">
			<x path="js.html.ClientType"/>
			<haxe_doc>The client's type as a string. It can be "`window"`, "`worker"`, or "`sharedworker"`.</haxe_doc>
		</type>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>The universally unique identifier of the client as a string.</haxe_doc>
		</id>
		<postMessage public="1" set="method">
			<f a="message:?transfer">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends a message to the client.
		@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `Client` interface represents an executable context such as a `Worker`, or a `SharedWorker`. `Window` clients are represented by the more-specific `WindowClient`. You can get `Client`/`WindowClient` objects from methods such as `Clients.matchAll()` and `Clients.get()`.

	Documentation [Client](https://developer.mozilla.org/en-US/docs/Web/API/Client) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Client$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Client>]]></haxe_doc>
		<meta><m n=":native"><e>"Client"</e></m></meta>
	</class>
	<typedef path="js.html.ClientQueryOptions" params="" file="/home/vsts/work/1/s/std/js/html/ClientQueryOptions.hx"><a>
	<type>
		<x path="Null"><x path="js.html.ClientType"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<includeUncontrolled>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</includeUncontrolled>
</a></typedef>
	<abstract path="js.html.ClientType" params="" file="/home/vsts/work/1/s/std/js/html/ClientType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ClientType.ClientType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ClientType.hx" private="1" module="js.html.ClientType" extern="1" final="1">
	<WINDOW public="1" get="inline" set="null" expr="cast &quot;window&quot;" line="28" static="1">
		<x path="js.html.ClientType"/>
		<meta>
			<m n=":value"><e>cast "window"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WINDOW>
	<WORKER public="1" get="inline" set="null" expr="cast &quot;worker&quot;" line="29" static="1">
		<x path="js.html.ClientType"/>
		<meta>
			<m n=":value"><e>cast "worker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WORKER>
	<SHAREDWORKER public="1" get="inline" set="null" expr="cast &quot;sharedworker&quot;" line="30" static="1">
		<x path="js.html.ClientType"/>
		<meta>
			<m n=":value"><e>cast "sharedworker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHAREDWORKER>
	<SERVICEWORKER public="1" get="inline" set="null" expr="cast &quot;serviceworker&quot;" line="31" static="1">
		<x path="js.html.ClientType"/>
		<meta>
			<m n=":value"><e>cast "serviceworker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SERVICEWORKER>
	<ALL public="1" get="inline" set="null" expr="cast &quot;all&quot;" line="32" static="1">
		<x path="js.html.ClientType"/>
		<meta>
			<m n=":value"><e>cast "all"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ClientType.ClientType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ClientType.hx" private="1" module="js.html.ClientType" extern="1" final="1">
		<WINDOW public="1" get="inline" set="null" expr="cast &quot;window&quot;" line="28" static="1">
			<x path="js.html.ClientType"/>
			<meta>
				<m n=":value"><e>cast "window"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WINDOW>
		<WORKER public="1" get="inline" set="null" expr="cast &quot;worker&quot;" line="29" static="1">
			<x path="js.html.ClientType"/>
			<meta>
				<m n=":value"><e>cast "worker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WORKER>
		<SHAREDWORKER public="1" get="inline" set="null" expr="cast &quot;sharedworker&quot;" line="30" static="1">
			<x path="js.html.ClientType"/>
			<meta>
				<m n=":value"><e>cast "sharedworker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHAREDWORKER>
		<SERVICEWORKER public="1" get="inline" set="null" expr="cast &quot;serviceworker&quot;" line="31" static="1">
			<x path="js.html.ClientType"/>
			<meta>
				<m n=":value"><e>cast "serviceworker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SERVICEWORKER>
		<ALL public="1" get="inline" set="null" expr="cast &quot;all&quot;" line="32" static="1">
			<x path="js.html.ClientType"/>
			<meta>
				<m n=":value"><e>cast "all"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALL>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Clients" params="" file="/home/vsts/work/1/s/std/js/html/Clients.hx" extern="1">
		<get public="1" set="method">
			<f a="id">
				<c path="String"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` for a `Client` matching a given `Client.id`.</haxe_doc>
		</get>
		<matchAll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ClientQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Client"/></c></c>
			</f>
			<haxe_doc>Returns a `Promise` for an array of `Client` objects. An options argument allows you to control the types of clients returned. </haxe_doc>
		</matchAll>
		<openWindow public="1" set="method">
			<f a="url">
				<c path="String"/>
				<c path="js.lib.Promise"><c path="js.html.WindowClient"/></c>
			</f>
			<haxe_doc>Opens a new browser window for a given url and returns a `Promise` for the new `WindowClient`.</haxe_doc>
		</openWindow>
		<claim public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Allows an active service worker to set itself as the `ServiceWorkerContainer.controller` for all clients within its `ServiceWorkerRegistration.scope`. </haxe_doc>
		</claim>
		<haxe_doc><![CDATA[The `Clients` interface provides access to `Client` objects. Access it via ``self`.clients` within a service worker.

	Documentation [Clients](https://developer.mozilla.org/en-US/docs/Web/API/Clients) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Clients$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Clients>]]></haxe_doc>
		<meta><m n=":native"><e>"Clients"</e></m></meta>
	</class>
	<class path="js.html.Clipboard" params="" file="/home/vsts/work/1/s/std/js/html/Clipboard.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<read public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.DataTransfer"/></c></f>
			<haxe_doc>Requests arbitrary data (such as images) from the clipboard, returning a `Promise`. When the data has been retrieved, the promise is resolved with a `DataTransfer` object that provides the data.
		@throws DOMError</haxe_doc>
		</read>
		<readText public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>Requests text from the system clipboard; returns a `Promise` which is resolved with a `DOMString` containing the clipboard's text once it's available.
		@throws DOMError</haxe_doc>
		</readText>
		<write public="1" set="method">
			<f a="data">
				<c path="js.html.DataTransfer"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned `Promise`.
		@throws DOMError</haxe_doc>
		</write>
		<writeText public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes text to the system clipboard, returning a `Promise` which is resolved once the text is fully copied into the clipboard.
		@throws DOMError</haxe_doc>
		</writeText>
		<haxe_doc><![CDATA[The `Clipboard` interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.

	Documentation [Clipboard](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Clipboard>]]></haxe_doc>
		<meta><m n=":native"><e>"Clipboard"</e></m></meta>
	</class>
	<class path="js.html.ClipboardEvent" params="" file="/home/vsts/work/1/s/std/js/html/ClipboardEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<clipboardData public="1" set="null">
			<c path="js.html.DataTransfer"/>
			<haxe_doc>Is a `DataTransfer` object containing the data affected by the user-initiated `cut`, `copy`, or `paste` operation, along with its MIME type.</haxe_doc>
		</clipboardData>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.ClipboardEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ClipboardEvent` interface represents events providing information related to modification of the clipboard, that is `cut`, `copy`, and `paste` events.

	Documentation [ClipboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ClipboardEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ClipboardEventInit" params="" file="/home/vsts/work/1/s/std/js/html/ClipboardEventInit.hx"><a>
	<dataType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</dataType>
	<data>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.CloseEvent" params="" file="/home/vsts/work/1/s/std/js/html/CloseEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<wasClean public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that Indicates whether or not the connection was cleanly closed.</haxe_doc>
		</wasClean>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> containing the close code send by the server. The following values are permitted status codes. The following definitions are sourced from the IANA website [Ref]. Note that the 1xxx codes are only WebSocket-internal and not for the same meaning by the transported data (like when the application-layer protocol is invalid). The only permitted codes to be specified in Firefox are 1000 and 3000 to 4999 [Source, Bug].
			<table id="Status_codes" class="standard-table">
				
					<tr>
						<td class="header">Status code</td>
						<td class="header">Name</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>0</code>–<code>999</code></td>
						<td> </td>
						<td>Reserved and not used.</td>
					</tr>
					<tr>
						<td><code>1000</code></td>
						<td>Normal Closure</td>
						<td>Normal closure; the connection successfully completed whatever purpose for which it was created.</td>
					</tr>
					<tr>
						<td><code>1001</code></td>
						<td>Going Away</td>
						<td>The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.</td>
					</tr>
					<tr>
						<td><code>1002</code></td>
						<td>Protocol Error</td>
						<td>The endpoint is terminating the connection due to a protocol error.</td>
					</tr>
					<tr>
						<td><code>1003</code></td>
						<td>Unsupported Data</td>
						<td>The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data).</td>
					</tr>
					<tr>
						<td><code>1004</code></td>
						<td> </td>
						<td>Reserved. A meaning might be defined in the future.</td>
					</tr>
					<tr>
						<td><code>1005</code></td>
						<td>No Status Recvd</td>
						<td>Reserved.  Indicates that no status code was provided even though one was expected.</td>
					</tr>
					<tr>
						<td><code>1006</code></td>
						<td>Abnormal Closure</td>
						<td>Reserved. Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.</td>
					</tr>
					<tr>
						<td><code>1007</code></td>
						<td>Invalid frame payload data</td>
						<td>The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).</td>
					</tr>
					<tr>
						<td><code>1008</code></td>
						<td>Policy Violation</td>
						<td>The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable.</td>
					</tr>
					<tr>
						<td><code>1009</code></td>
						<td>Message too big</td>
						<td>The endpoint is terminating the connection because a data frame was received that is too large.</td>
					</tr>
					<tr>
						<td><code>1010</code></td>
						<td>Missing Extension</td>
						<td>The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't.</td>
					</tr>
					<tr>
						<td><code>1011</code></td>
						<td>Internal Error</td>
						<td>The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.</td>
					</tr>
					<tr>
						<td><code>1012</code></td>
						<td>Service Restart</td>
						<td>The server is terminating the connection because it is restarting. [Ref]</td>
					</tr>
					<tr>
						<td><code>1013</code></td>
						<td>Try Again Later</td>
						<td>The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients. [Ref]</td>
					</tr>
					<tr>
						<td><code>1014</code></td>
						<td>Bad Gateway</td>
						<td>The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code.</td>
					</tr>
					<tr>
						<td><code>1015</code></td>
						<td>TLS Handshake</td>
						<td>Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).</td>
					</tr>
					<tr>
						<td><code>1016</code>–<code>1999</code></td>
						<td> </td>
						<td>Reserved for future use by the WebSocket standard.</td>
					</tr>
					<tr>
						<td><code>2000</code>–<code>2999</code></td>
						<td> </td>
						<td>Reserved for use by WebSocket extensions.</td>
					</tr>
					<tr>
						<td><code>3000</code>–<code>3999</code></td>
						<td> </td>
						<td>Available for use by libraries and frameworks. May not be used by applications. Available for registration at the IANA via first-come, first-serve.</td>
					</tr>
					<tr>
						<td><code>4000</code>–<code>4999</code></td>
						<td> </td>
						<td>Available for use by applications.</td>
					</tr>
				
			</table>]]></haxe_doc>
		</code>
		<reason public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol.</haxe_doc>
		</reason>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.CloseEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `CloseEvent` is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the `WebSocket` object's `onclose` attribute.

	Documentation [CloseEvent](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"CloseEvent"</e></m></meta>
	</class>
	<typedef path="js.html.CloseEventInit" params="" file="/home/vsts/work/1/s/std/js/html/CloseEventInit.hx"><a>
	<wasClean>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</wasClean>
	<reason>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</reason>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<code>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</code>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.Comment" params="" file="/home/vsts/work/1/s/std/js/html/Comment.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Comment` interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '`!--`' and '`--`'. In XML, the character sequence '`--`' cannot be used within a comment.

	Documentation [Comment](https://developer.mozilla.org/en-US/docs/Web/API/Comment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Comment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Comment>]]></haxe_doc>
		<meta><m n=":native"><e>"Comment"</e></m></meta>
	</class>
	<abstract path="js.html.CompositeOperation" params="" file="/home/vsts/work/1/s/std/js/html/CompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" extern="1" final="1">
	<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="28" static="1">
		<x path="js.html.CompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "replace"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPLACE>
	<ADD public="1" get="inline" set="null" expr="cast &quot;add&quot;" line="29" static="1">
		<x path="js.html.CompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "add"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ADD>
	<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="30" static="1">
		<x path="js.html.CompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "accumulate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACCUMULATE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" extern="1" final="1">
		<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="28" static="1">
			<x path="js.html.CompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "replace"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPLACE>
		<ADD public="1" get="inline" set="null" expr="cast &quot;add&quot;" line="29" static="1">
			<x path="js.html.CompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "add"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ADD>
		<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="30" static="1">
			<x path="js.html.CompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "accumulate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACCUMULATE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.UIEvent" params="" file="/home/vsts/work/1/s/std/js/html/UIEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<SCROLL_PAGE_UP public="1" get="inline" set="null" expr="-32768" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-32768</e></m></meta>
		</SCROLL_PAGE_UP>
		<SCROLL_PAGE_DOWN public="1" get="inline" set="null" expr="32768" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32768</e></m></meta>
		</SCROLL_PAGE_DOWN>
		<view public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` that contains the view that generated the event.</haxe_doc>
		</view>
		<detail public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` with details about the event, depending on the event type.</haxe_doc>
		</detail>
		<layerX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the current layer.</haxe_doc>
		</layerX>
		<layerY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the current layer.</haxe_doc>
		</layerY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the whole document.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the whole document.</haxe_doc>
		</pageY>
		<which public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the numeric `keyCode` of the key pressed, or the character code (`charCode`) for an alphanumeric key pressed.</haxe_doc>
		</which>
		<rangeParent public="1" set="null"><c path="js.html.Node"/></rangeParent>
		<rangeOffset public="1" set="null"><x path="Int"/></rangeOffset>
		<initUIEvent public="1" set="method">
			<f a="aType:?aCanBubble:?aCancelable:?aView:?aDetail" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ aDetail : 0, aCancelable : false, aCanBubble : false }</e></m></meta>
			<haxe_doc>Initializes a `UIEvent` object. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initUIEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.UIEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `UIEvent` interface represents simple user interface events.

	Documentation [UIEvent](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/UIEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"UIEvent"</e></m></meta>
	</class>
	<class path="js.html.CompositionEvent" params="" file="/home/vsts/work/1/s/std/js/html/CompositionEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<data public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the characters generated by the input method that raised the event; its varies depending on the type of event that generated the `CompositionEvent` object.</haxe_doc>
		</data>
		<locale public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the locale of current input method (for example, the keyboard layout locale if the composition is associated with IME).</haxe_doc>
		</locale>
		<initCompositionEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?viewArg:?dataArg:?localeArg" v=":false:false:::&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ localeArg : "", cancelableArg : false, canBubbleArg : false }</e></m></meta>
			<haxe_doc>Initializes the attributes of a `CompositionEvent` object.</haxe_doc>
		</initCompositionEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.CompositionEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The DOM `CompositionEvent` represents events that occur due to the user indirectly entering text.

	Documentation [CompositionEvent](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"CompositionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.CompositionEventInit" params="" file="/home/vsts/work/1/s/std/js/html/CompositionEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<data>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.ComputedEffectTiming" params="" file="/home/vsts/work/1/s/std/js/html/ComputedEffectTiming.hx"><a>
	<progress>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</progress>
	<localTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</localTime>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endTime>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<currentIteration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</currentIteration>
	<activeDuration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</activeDuration>
</a></typedef>
	<class path="js.html.Console" params="" file="/home/vsts/work/1/s/std/js/html/Console.hx" extern="1">
		<assert public="1" set="method" static="1">
			<f a="?condition:data" v="false:">
				<x path="Bool"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ condition : false }</e></m></meta>
			<haxe_doc>Log a message and stack trace to console if the first argument is `false`.</haxe_doc>
		</assert>
		<clear public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<count public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<countReset public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Resets the value of the counter with the given label.</haxe_doc>
		</countReset>
		<debug public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a message to the console with the log level `"debug"`.
		 Note: Starting with Chromium 58 this method only appears in Chromium browser consoles when level "Verbose" is selected.</haxe_doc>
		</debug>
		<error public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<info public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging of information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<log public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<table public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<warn public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<dir public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</haxe_doc>
		</dirxml>
		<group public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. However, unlike `group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeLog public="1" set="method" static="1">
			<f a="?label:data" v="&quot;default&quot;:">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Logs the value of the specified timer to the console.</haxe_doc>
		</timeLog>
		<timeEnd public="1" set="method" static="1">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since it started.</haxe_doc>
		</timeEnd>
		<exception public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`.</haxe_doc>
		</exception>
		<timeStamp public="1" set="method" static="1">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method" static="1">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [console](https://developer.mozilla.org/en-US/docs/Web/API/console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/console>]]></haxe_doc>
		<meta><m n=":native"><e>"console"</e></m></meta>
	</class>
	<class path="js.html.ConsoleInstance" params="" file="/home/vsts/work/1/s/std/js/html/ConsoleInstance.hx" extern="1" interface="1">
		<assert public="1" set="method">
			<f a="?condition:data" v="false:">
				<x path="Bool"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ condition : false }</e></m></meta>
			<haxe_doc>Log a message and stack trace to console if the first argument is `false`.</haxe_doc>
		</assert>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<count public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<countReset public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Resets the value of the counter with the given label.</haxe_doc>
		</countReset>
		<debug public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a message to the console with the log level `"debug"`.
		 Note: Starting with Chromium 58 this method only appears in Chromium browser consoles when level "Verbose" is selected.</haxe_doc>
		</debug>
		<error public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<info public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging of information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<log public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<table public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<warn public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<dir public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</haxe_doc>
		</dirxml>
		<group public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. However, unlike `group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeLog public="1" set="method">
			<f a="?label:data" v="&quot;default&quot;:">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Logs the value of the specified timer to the console.</haxe_doc>
		</timeLog>
		<timeEnd public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since it started.</haxe_doc>
		</timeEnd>
		<exception public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`.</haxe_doc>
		</exception>
		<timeStamp public="1" set="method">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [Console](https://developer.mozilla.org/en-US/docs/Web/API/Console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Console>]]></haxe_doc>
	</class>
	<typedef path="js.html.ConstrainBooleanParameters" params="" file="/home/vsts/work/1/s/std/js/html/ConstrainBooleanParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDOMStringParameters" params="" file="/home/vsts/work/1/s/std/js/html/ConstrainDOMStringParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDoubleRange" params="" file="/home/vsts/work/1/s/std/js/html/ConstrainDoubleRange.hx"><a>
	<min>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainLongRange" params="" file="/home/vsts/work/1/s/std/js/html/ConstrainLongRange.hx"><a>
	<min>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConvertCoordinateOptions" params="" file="/home/vsts/work/1/s/std/js/html/ConvertCoordinateOptions.hx"><a>
	<toBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</toBox>
	<fromBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</fromBox>
</a></typedef>
	<typedef path="js.html.Coordinates" params="" file="/home/vsts/work/1/s/std/js/html/Coordinates.hx">
		<a>
			<speed set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the velocity of the device in meters per second. This value can be `null`.</haxe_doc>
			</speed>
			<longitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's longitude in decimal degrees.</haxe_doc>
			</longitude>
			<latitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's latitude in decimal degrees.</haxe_doc>
			</latitude>
			<heading set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading true north the device is. `0` degrees represents true north, and the direction is determined clockwise (which means that east is `90` degrees and west is `270` degrees). If `speed` is `0`, `heading` is `NaN`. If the device is unable to provide `heading` information, this value is `null`.</haxe_doc>
			</heading>
			<altitudeAccuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `altitude` expressed in meters. This value can be `null`.</haxe_doc>
			</altitudeAccuracy>
			<altitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's altitude in meters, relative to sea level. This value can be `null` if the implementation cannot provide the data.</haxe_doc>
			</altitude>
			<accuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `latitude` and `longitude` properties, expressed in meters.</haxe_doc>
			</accuracy>
		</a>
		<haxe_doc><![CDATA[The `Coordinates` interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.

	Documentation [Coordinates](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Coordinates>]]></haxe_doc>
	</typedef>
	<class path="js.html.Crypto" params="" file="/home/vsts/work/1/s/std/js/html/Crypto.hx" extern="1">
		<subtle public="1" set="null">
			<c path="js.html.SubtleCrypto"/>
			<haxe_doc>Returns a `SubtleCrypto` object providing access to common cryptographic primitives, like hashing, signing, encryption or decryption.</haxe_doc>
		</subtle>
		<getRandomValues public="1" set="method">
			<f a="array">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.ArrayBufferView"/>
			</f>
			<haxe_doc>Fills the passed `TypedArray` with cryptographically sound random values.
		@throws DOMError</haxe_doc>
		</getRandomValues>
		<haxe_doc><![CDATA[The `Crypto` interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.

	Documentation [Crypto](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Crypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Crypto>]]></haxe_doc>
		<meta><m n=":native"><e>"Crypto"</e></m></meta>
	</class>
	<class path="js.html.CryptoKey" params="" file="/home/vsts/work/1/s/std/js/html/CryptoKey.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns an enumerated value representing the type of the key, a secret key (for symmetric algorithm), a public or a private key (for an asymmetric algorithm)</haxe_doc>
		</type>
		<extractable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating if the raw information may be exported to the application or not.</haxe_doc>
		</extractable>
		<algorithm public="1" set="null">
			<d/>
			<haxe_doc>Returns an opaque object representing a particular cipher the key has to be used with.</haxe_doc>
		</algorithm>
		<usages public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Returns an array of enumerated values indicating what the key can be used for.</haxe_doc>
		</usages>
		<haxe_doc><![CDATA[The `CryptoKey` interface represents a cryptographic key derived from a specific key algorithm.

	Documentation [CryptoKey](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey>]]></haxe_doc>
		<meta><m n=":native"><e>"CryptoKey"</e></m></meta>
	</class>
	<class path="js.html.CustomEvent" params="" file="/home/vsts/work/1/s/std/js/html/CustomEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<detail public="1" set="null">
			<d/>
			<haxe_doc>Any data passed when initializing the event.</haxe_doc>
		</detail>
		<initCustomEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?detail" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, canBubble : false }</e></m></meta>
			<haxe_doc>Initializes a `CustomEvent` object. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initCustomEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.CustomEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This interface inherits properties from its parent, `Event`:

	Documentation [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"CustomEvent"</e></m></meta>
	</class>
	<typedef path="js.html.CustomEventInit" params="" file="/home/vsts/work/1/s/std/js/html/CustomEventInit.hx"><a>
	<detail>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.DListElement" params="" file="/home/vsts/work/1/s/std/js/html/DListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLDListElement` interface provides special properties (beyond those of the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating definition list elements.

	Documentation [HTMLDListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDListElement"</e></m></meta>
	</class>
	<class path="js.html.DOMError" params="" file="/home/vsts/work/1/s/std/js/html/DOMError.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing one of the error type names (see below).</haxe_doc>
		</name>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a message or description associated with the given error type name.</haxe_doc>
		</message>
		<new public="1" set="method">
			<f a="name:?message" v=":&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMError` interface describes an error object that contains an error name.

	Documentation [DOMError](https://developer.mozilla.org/en-US/docs/Web/API/DOMError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMError>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMError"</e></m></meta>
	</class>
	<class path="js.html.DOMException" params="" file="/home/vsts/work/1/s/std/js/html/DOMException.hx" extern="1">
		<INDEX_SIZE_ERR public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</INDEX_SIZE_ERR>
		<DOMSTRING_SIZE_ERR public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIERARCHY_REQUEST_ERR>
		<WRONG_DOCUMENT_ERR public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WRONG_DOCUMENT_ERR>
		<INVALID_CHARACTER_ERR public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</INVALID_CHARACTER_ERR>
		<NO_DATA_ALLOWED_ERR public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</NO_MODIFICATION_ALLOWED_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</NOT_SUPPORTED_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</INUSE_ATTRIBUTE_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</INVALID_STATE_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SYNTAX_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" expr="13" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</INVALID_MODIFICATION_ERR>
		<NAMESPACE_ERR public="1" get="inline" set="null" expr="14" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</NAMESPACE_ERR>
		<INVALID_ACCESS_ERR public="1" get="inline" set="null" expr="15" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</INVALID_ACCESS_ERR>
		<VALIDATION_ERR public="1" get="inline" set="null" expr="16" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</VALIDATION_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" expr="17" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</TYPE_MISMATCH_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" expr="18" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</SECURITY_ERR>
		<NETWORK_ERR public="1" get="inline" set="null" expr="19" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</NETWORK_ERR>
		<ABORT_ERR public="1" get="inline" set="null" expr="20" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</ABORT_ERR>
		<URL_MISMATCH_ERR public="1" get="inline" set="null" expr="21" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</URL_MISMATCH_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" expr="22" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</QUOTA_EXCEEDED_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" expr="23" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</TIMEOUT_ERR>
		<INVALID_NODE_TYPE_ERR public="1" get="inline" set="null" expr="24" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</INVALID_NODE_TYPE_ERR>
		<DATA_CLONE_ERR public="1" get="inline" set="null" expr="25" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DATA_CLONE_ERR>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains one of the strings associated with an error name.</haxe_doc>
		</name>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a message or description associated with the given error name.</haxe_doc>
		</message>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `short` that contains one of the `Error codes`, or `0` if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the `DOMException.name` attribute.</haxe_doc>
		</code>
		<result public="1" set="null"><x path="Int"/></result>
		<filename public="1" set="null"><c path="String"/></filename>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<columnNumber public="1" set="null"><x path="Int"/></columnNumber>
		<data public="1" set="null"><d/></data>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method">
			<f a="?message:?name" v="&quot;&quot;:">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMException` interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.

	Documentation [DOMException](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMException$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMException>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMException"</e></m></meta>
	</class>
	<class path="js.html.DOMImplementation" params="" file="/home/vsts/work/1/s/std/js/html/DOMImplementation.hx" extern="1">
		<hasFeature public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns `true`. Old browsers are very inconsistent in their behavior.</haxe_doc>
		</hasFeature>
		<createDocumentType public="1" set="method">
			<f a="qualifiedName:publicId:systemId">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
			</f>
			<haxe_doc>Creates and returns a `DocumentType`.
		@throws DOMError</haxe_doc>
		</createDocumentType>
		<createDocument public="1" set="method">
			<f a="namespace:qualifiedName:?doctype">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an `XMLDocument`.
		@throws DOMError</haxe_doc>
		</createDocument>
		<createHTMLDocument public="1" set="method">
			<f a="?title">
				<c path="String"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an HTML `Document`.
		@throws DOMError</haxe_doc>
		</createHTMLDocument>
		<haxe_doc><![CDATA[The `DOMImplementation` interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property.

	Documentation [DOMImplementation](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMImplementation"</e></m></meta>
	</class>
	<class path="js.html.DOMMatrixReadOnly" params="" file="/home/vsts/work/1/s/std/js/html/DOMMatrixReadOnly.hx" extern="1">
		<a public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[Are <code>double</code> representing each component of a 4x4 matrix needed for 2D rotations and translations. They are aliases for some components of the 4x4 matrix:
			<table class="standard-table">
				
					<tr>
						2D
						3D equivalent
					</tr>
				
				
					<tr>
						<td><code>a</code></td>
						<td><code>m11</code></td>
					</tr>
					<tr>
						<td><code>b</code></td>
						<td><code>m12</code></td>
					</tr>
					<tr>
						<td><code>c</code></td>
						<td><code>m21</code></td>
					</tr>
					<tr>
						<td><code>d</code></td>
						<td><code>m22</code></td>
					</tr>
					<tr>
						<td><code>e</code></td>
						<td><code>m41</code></td>
					</tr>
					<tr>
						<td><code>f</code></td>
						<td><code>m42</code></td>
					</tr>
				
			</table>
			They are read-only, but their counterpart, with the same name, in <code>DOMMatrix</code> aren't.]]></haxe_doc>
		</a>
		<b public="1" set="null"><x path="Float"/></b>
		<c public="1" set="null"><x path="Float"/></c>
		<d public="1" set="null"><x path="Float"/></d>
		<e public="1" set="null"><x path="Float"/></e>
		<f public="1" set="null"><x path="Float"/></f>
		<m11 public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Are `double` representing each component of a 4x4 matrix. They are read-only, but their counterpart, with the same name, in `DOMMatrix` aren't.</haxe_doc>
		</m11>
		<m12 public="1" set="null"><x path="Float"/></m12>
		<m13 public="1" set="null"><x path="Float"/></m13>
		<m14 public="1" set="null"><x path="Float"/></m14>
		<m21 public="1" set="null"><x path="Float"/></m21>
		<m22 public="1" set="null"><x path="Float"/></m22>
		<m23 public="1" set="null"><x path="Float"/></m23>
		<m24 public="1" set="null"><x path="Float"/></m24>
		<m31 public="1" set="null"><x path="Float"/></m31>
		<m32 public="1" set="null"><x path="Float"/></m32>
		<m33 public="1" set="null"><x path="Float"/></m33>
		<m34 public="1" set="null"><x path="Float"/></m34>
		<m41 public="1" set="null"><x path="Float"/></m41>
		<m42 public="1" set="null"><x path="Float"/></m42>
		<m43 public="1" set="null"><x path="Float"/></m43>
		<m44 public="1" set="null"><x path="Float"/></m44>
		<is2D public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating if the matrix contains a 2D matrix and only accept 2D transformations.</haxe_doc>
		</is2D>
		<isIdentity public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indincating if the matrix identity, that is a matrix with `1` on the components of its diagonal, and `0` elsewhere.</haxe_doc>
		</isIdentity>
		<translate public="1" set="method">
			<f a="tx:ty:?tz" v="::0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ tz : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix being translated by the given vector. The original matrix is not modified.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="scale:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix x and y dimensions being scaled by the given factor, centered on the origin given. The original matrix is not modified.</haxe_doc>
		</scale>
		<scale3d public="1" set="method">
			<f a="scale:?originX:?originY:?originZ" v=":0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix x, y and z dimension being scaled by the given factor, centered on the origin given. The original matrix is not modified.</haxe_doc>
		</scale3d>
		<scaleNonUniform public="1" set="method">
			<f a="scaleX:?scaleY:?scaleZ:?originX:?originY:?originZ" v=":1.0:1.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0, scaleZ : 1.0, scaleY : 1.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix x, y and z dimension being scaled by the given factor for each dimension, centered on the origin given. The original matrix is not modified.</haxe_doc>
		</scaleNonUniform>
		<rotate public="1" set="method">
			<f a="angle:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being rotated by the given angle, with the rotation centered on the origin given. The original matrix is not modified.</haxe_doc>
		</rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being rotated by the angle between the given vector and (1,0), centered on the origin given. The original matrix is not modified.</haxe_doc>
		</rotateFromVector>
		<rotateAxisAngle public="1" set="method">
			<f a="x:y:z:angle">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being rotated by the given angle and the given vector. The original matrix is not modified.</haxe_doc>
		</rotateAxisAngle>
		<skewX public="1" set="method">
			<f a="sx">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being skewed along the x-axis by the given factor. The original matrix is not modified.</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="sy">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being skewed along the y-axis by the given factor. The original matrix is not modified.</haxe_doc>
		</skewY>
		<multiply public="1" set="method">
			<f a="other">
				<c path="js.html.DOMMatrix"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being multiplied by the given `DOMMatrix`. The original matrix is not modified.</haxe_doc>
		</multiply>
		<flipX public="1" set="method">
			<f a=""><c path="js.html.DOMMatrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being flipped around the x-axis, that is multiplied by the `DOMMatrix(-1, 0, 0, 1, 0, 0)`. The original matrix is not modified.</haxe_doc>
		</flipX>
		<flipY public="1" set="method">
			<f a=""><c path="js.html.DOMMatrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being flipped around the y-axis, that is multiplied by the `DOMMatrix(1, 0, 0, -1, 0, 0)`. The original matrix is not modified.</haxe_doc>
		</flipY>
		<inverse public="1" set="method">
			<f a=""><c path="js.html.DOMMatrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being inverted. The original matrix is not modified. If the matrix cannot be inverted, all its components are set to `NaN` and `is2D()` returns `false`.</haxe_doc>
		</inverse>
		<transformPoint public="1" set="method">
			<f a="?point">
				<x path="Null"><t path="js.html.DOMPointInit"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>Returns a `DOMPoint` that is the point given in parameter multiplied by the matrix. But the original point and the matrix aren't modified.</haxe_doc>
		</transformPoint>
		<toFloat32Array public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Returns a `Float32Array` containing the 6 components (`a`, `b`, `c`, `d`, `e`, `f`) in the case of a 2D matrix or the 16 components (`m11`, `m12`, `m13`, `m14`, `m21`, `m22`, `m23`, `m24`, `m31`, `m32`, `m33`, `m34`, `m41`, `m42`, `m43`, `m44`) for a 3D matrix.
		@throws DOMError</haxe_doc>
		</toFloat32Array>
		<toFloat64Array public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Returns a `Float64Array` containing the 6 components (`a`, `b`, `c`, `d`, `e`, `f`) in the case of a 2D matrix or the 16 components (`m11`, `m12`, `m13`, `m14`, `m21`, `m22`, `m23`, `m24`, `m31`, `m32`, `m33`, `m34`, `m41`, `m42`, `m43`, `m44`) for a 3D matrix.
		@throws DOMError</haxe_doc>
		</toFloat64Array>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of the `DOMMatrixReadOnly` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="?init">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?init">
		<c path="Array"><x path="Float"/></c>
		<c path="js.html.DOMMatrixReadOnly"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `DOMMatrixReadOnly` interface represents 4x4 matrices, suitable for 2D and 3D operations. If this interface defines only read-only matrices, the `DOMMatrix` interface which inherits from it, add all the properties and the methods to allow to have modifiable matrices.

	Documentation [DOMMatrixReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMMatrixReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMMatrix" params="" file="/home/vsts/work/1/s/std/js/html/DOMMatrix.hx" extern="1">
		<extends path="js.html.DOMMatrixReadOnly"/>
		<multiplySelf public="1" set="method"><f a="other">
	<c path="js.html.DOMMatrix"/>
	<c path="js.html.DOMMatrix"/>
</f></multiplySelf>
		<preMultiplySelf public="1" set="method"><f a="other">
	<c path="js.html.DOMMatrix"/>
	<c path="js.html.DOMMatrix"/>
</f></preMultiplySelf>
		<translateSelf public="1" set="method">
			<f a="tx:ty:?tz" v="::0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ tz : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix being translated by the given vector.</haxe_doc>
		</translateSelf>
		<scaleSelf public="1" set="method">
			<f a="scale:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix x and y dimensions being scaled by the given factor, centered on the origin given.</haxe_doc>
		</scaleSelf>
		<scale3dSelf public="1" set="method">
			<f a="scale:?originX:?originY:?originZ" v=":0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix x, y and z dimension being scaled by the given factor, centered on the origin given.</haxe_doc>
		</scale3dSelf>
		<scaleNonUniformSelf public="1" set="method">
			<f a="scaleX:?scaleY:?scaleZ:?originX:?originY:?originZ" v=":1.0:1.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0, scaleZ : 1.0, scaleY : 1.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix x, y and z dimension being scaled by the given factor for each dimension, centered on the origin given.</haxe_doc>
		</scaleNonUniformSelf>
		<rotateSelf public="1" set="method">
			<f a="angle:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being rotated by the given angle, with the rotation centered on the origin given.</haxe_doc>
		</rotateSelf>
		<rotateFromVectorSelf public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being rotated by the angle between the given vector and (1,0), centered on the origin given.</haxe_doc>
		</rotateFromVectorSelf>
		<rotateAxisAngleSelf public="1" set="method">
			<f a="x:y:z:angle">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being rotated by the given angle and the give vector.</haxe_doc>
		</rotateAxisAngleSelf>
		<skewXSelf public="1" set="method">
			<f a="sx">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being skewed along the x-axis by the given factor.</haxe_doc>
		</skewXSelf>
		<skewYSelf public="1" set="method">
			<f a="sy">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being skewed along the y-axis by the given factor.</haxe_doc>
		</skewYSelf>
		<invertSelf public="1" set="method">
			<f a=""><c path="js.html.DOMMatrix"/></f>
			<haxe_doc>Returns itself,  a `DOMMatrix`, with its new content being the result of the original matrix being inverted. If the matrix cannot be inverted, all its components are set to `NaN` and `is2D()` returns `false`.</haxe_doc>
		</invertSelf>
		<setMatrixValue public="1" set="method">
			<f a="transformList">
				<c path="String"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its describing the matrix representing the same transformation as the CSS `transform` functions given in parameter.
		@throws DOMError</haxe_doc>
		</setMatrixValue>
		<new public="1" set="method">
			<f a="numberSequence">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="transformList">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.DOMMatrixReadOnly"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array32">
						<c path="js.lib.Float32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array64">
						<c path="js.lib.Float64Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `DOMMatrix` interface represents 4x4 matrices, suitable for 2D and 3D operations.

	Documentation [DOMMatrix](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMMatrix"</e></m></meta>
	</class>
	<class path="js.html.DOMParser" params="" file="/home/vsts/work/1/s/std/js/html/DOMParser.hx" extern="1">
		<parseFromString public="1" set="method">
			<f a="str:type">
				<c path="String"/>
				<x path="js.html.SupportedType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</parseFromString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMParser` interface provides the ability to parse XML or HTML source code from a string into a DOM `Document`.

	Documentation [DOMParser](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMParser>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMParser"</e></m></meta>
	</class>
	<class path="js.html.DOMPointReadOnly" params="" file="/home/vsts/work/1/s/std/js/html/DOMPointReadOnly.hx" extern="1">
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPointReadOnly"/>
</f></fromPoint>
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's horizontal coordinate, `x`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's vertical coordinate, `y`.</haxe_doc>
		</y>
		<z public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's depth coordinate, `z`.</haxe_doc>
		</z>
		<w public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's perspective value, `w`.</haxe_doc>
		</w>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of the `DOMPointReadOnly` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMPointReadOnly` interface specifies the coordinate and perspective fields used by `DOMPoint` to define a 2D or 3D point in a coordinate system.

	Documentation [DOMPointReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPointReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMPoint" params="" file="/home/vsts/work/1/s/std/js/html/DOMPoint.hx" extern="1">
		<extends path="js.html.DOMPointReadOnly"/>
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPoint"/>
</f></fromPoint>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMPoint` object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.

	Documentation [DOMPoint](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPoint"</e></m></meta>
	</class>
	<typedef path="js.html.DOMPointInit" params="" file="/home/vsts/work/1/s/std/js/html/DOMPointInit.hx">
		<a>
			<z>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value which gives the point's z-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is 0.</haxe_doc>
			</z>
			<y>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point number providing the point's y-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is 0.</haxe_doc>
			</y>
			<x>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value indicating the x-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is 0.</haxe_doc>
			</x>
			<w>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The point's w perspective value given as an unrestricted floating-point number. The default is 1.</haxe_doc>
			</w>
		</a>
		<haxe_doc><![CDATA[The `DOMPointInit` dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a `DOMPoint` or `DOMPointReadOnly` object.

	Documentation [DOMPointInit](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit>]]></haxe_doc>
	</typedef>
	<class path="js.html.DOMQuad" params="" file="/home/vsts/work/1/s/std/js/html/DOMQuad.hx" extern="1">
		<p1 public="1" set="null">
			<c path="js.html.DOMPoint"/>
			<haxe_doc>are `DOMPoint` objects for each of the `DOMQuad` object's four corners.</haxe_doc>
		</p1>
		<p2 public="1" set="null"><c path="js.html.DOMPoint"/></p2>
		<p3 public="1" set="null"><c path="js.html.DOMPoint"/></p3>
		<p4 public="1" set="null"><c path="js.html.DOMPoint"/></p4>
		<bounds public="1" set="null"><c path="js.html.DOMRectReadOnly"/></bounds>
		<getBounds public="1" set="method">
			<f a=""><c path="js.html.DOMRectReadOnly"/></f>
			<haxe_doc>Returns a `DOMRect` object with the coordinates and dimensions of the `DOMQuad` object.</haxe_doc>
		</getBounds>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.DOMQuadJSON"/></f>
			<haxe_doc>Returns a JSON representation of the `DOMQuad` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="rect">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?p1:?p2:?p3:?p4">
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral. Returning `DOMQuad`s lets `getBoxQuads()` return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy `bounds` attribute returning a `DOMRectReadOnly` for those cases where you just want an axis-aligned bounding rectangle.

	Documentation [DOMQuad](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMQuad"</e></m></meta>
	</class>
	<typedef path="js.html.DOMQuadJSON" params="" file="/home/vsts/work/1/s/std/js/html/DOMQuadJSON.hx"><a>
	<p4>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p4>
	<p3>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p3>
	<p2>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p2>
	<p1>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p1>
</a></typedef>
	<class path="js.html.DOMRectReadOnly" params="" file="/home/vsts/work/1/s/std/js/html/DOMRectReadOnly.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The x coordinate of the `DOMRect`'s origin.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The y coordinate of the `DOMRect`'s origin.</haxe_doc>
		</y>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The width of the `DOMRect`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The height of the `DOMRect`.</haxe_doc>
		</height>
		<top public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the top coordinate value of the `DOMRect` (usually the same as `y`.)</haxe_doc>
		</top>
		<right public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the right coordinate value of the `DOMRect` (usually the same as `x + width`).</haxe_doc>
		</right>
		<bottom public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the bottom coordinate value of the `DOMRect` (usually the same as y + height).</haxe_doc>
		</bottom>
		<left public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the left coordinate value of the `DOMRect` (usually the same as `x`).</haxe_doc>
		</left>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMRectReadOnly` interface specifies the standard properties used by `DOMRect` to define a rectangle.

	Documentation [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMRect" params="" file="/home/vsts/work/1/s/std/js/html/DOMRect.hx" extern="1">
		<extends path="js.html.DOMRectReadOnly"/>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMRect` represents a rectangle.

	Documentation [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRect>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRect"</e></m></meta>
	</class>
	<class path="js.html.DOMRectList" params="" file="/home/vsts/work/1/s/std/js/html/DOMRectList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMRect"/>
</f></item>
		<meta><m n=":native"><e>"DOMRectList"</e></m></meta>
	</class>
	<class path="js.html.DOMRequest" params="" file="/home/vsts/work/1/s/std/js/html/DOMRequest.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<readyState public="1" set="null"><x path="js.html.DOMRequestReadyState"/></readyState>
		<result public="1" set="null"><d/></result>
		<error public="1" set="null"><c path="js.html.DOMException"/></error>
		<onsuccess public="1"><x path="haxe.Function"/></onsuccess>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<then public="1" set="method">
			<f a="?fulfillCallback:?rejectCallback">
				<x path="haxe.Function"/>
				<x path="haxe.Function"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</then>
		<meta><m n=":native"><e>"DOMRequest"</e></m></meta>
	</class>
	<abstract path="js.html.DOMRequestReadyState" params="" file="/home/vsts/work/1/s/std/js/html/DOMRequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DOMRequestReadyState.DOMRequestReadyState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/DOMRequestReadyState.hx" private="1" module="js.html.DOMRequestReadyState" extern="1" final="1">
	<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="28" static="1">
		<x path="js.html.DOMRequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENDING>
	<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="29" static="1">
		<x path="js.html.DOMRequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "done"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DONE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._DOMRequestReadyState.DOMRequestReadyState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/DOMRequestReadyState.hx" private="1" module="js.html.DOMRequestReadyState" extern="1" final="1">
		<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="28" static="1">
			<x path="js.html.DOMRequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENDING>
		<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="29" static="1">
			<x path="js.html.DOMRequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "done"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DONE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.DOMStringList" params="" file="/home/vsts/work/1/s/std/js/html/DOMStringList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the list,</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString`.</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `Boolean` indicating if the given string is in the list</haxe_doc>
		</contains>
		<haxe_doc><![CDATA[A type returned by some APIs which contains a list of DOMString (strings).

	Documentation [DOMStringList](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringMap" params="" file="/home/vsts/work/1/s/std/js/html/DOMStringMap.hx" extern="1">
		<haxe_doc><![CDATA[Used by the `dataset` HTML attribute to represent data for custom attributes added to elements.

	Documentation [DOMStringMap](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringMap"</e></m></meta>
	</class>
	<class path="js.html.DOMTokenList" params="" file="/home/vsts/work/1/s/std/js/html/DOMTokenList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` representing the number of objects stored in the object.</haxe_doc>
		</length>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The value of the list as a `DOMString`.</haxe_doc>
		</value>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns an item in the list by its index (returns undefined if the number is greater than or equal to the length of the list).</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the list contains the given token, otherwise `false`.</haxe_doc>
		</contains>
		<add public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the given token to the list.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified token from the list.
		@throws DOMError</haxe_doc>
		</remove>
		<replace public="1" set="method">
			<f a="token:newToken">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Replaces an existing token with a new token.
		@throws DOMError</haxe_doc>
		</replace>
		<toggle public="1" set="method">
			<f a="token:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a given token from the list and returns false. If token doesn't exist it's added and the function returns `true`.
		@throws DOMError</haxe_doc>
		</toggle>
		<supports public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given token is in the associated attribute's supported tokens.
		@throws DOMError</haxe_doc>
		</supports>
		<haxe_doc><![CDATA[The `DOMTokenList` interface represents a set of space-separated tokens. Such a set is returned by `Element.classList`, `HTMLLinkElement.relList`, `HTMLAnchorElement.relList`, `HTMLAreaElement.relList`, `HTMLIframeElement.sandbox`, or `HTMLOutputElement.htmlFor`. It is indexed beginning with `0` as with JavaScript `Array` objects. `DOMTokenList` is always case-sensitive.

	Documentation [DOMTokenList](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMTokenList"</e></m></meta>
	</class>
	<class path="js.html.DataElement" params="" file="/home/vsts/work/1/s/std/js/html/DataElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `value` HTML attribute, containing a machine-readable form of the element's value.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `HTMLDataElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `data` elements.

	Documentation [HTMLDataElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataElement"</e></m></meta>
	</class>
	<class path="js.html.DataListElement" params="" file="/home/vsts/work/1/s/std/js/html/DataListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<options public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a `HTMLCollection` representing a collection of the contained option elements.</haxe_doc>
		</options>
		<haxe_doc><![CDATA[The `HTMLDataListElement` interface provides special properties (beyond the `HTMLElement` object interface it also has available to it by inheritance) to manipulate `datalist` elements and their content.

	Documentation [HTMLDataListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataListElement"</e></m></meta>
	</class>
	<class path="js.html.DataTransfer" params="" file="/home/vsts/work/1/s/std/js/html/DataTransfer.hx" extern="1">
		<dropEffect public="1">
			<c path="String"/>
			<haxe_doc>Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be `none`, `copy`, `link` or `move`.</haxe_doc>
		</dropEffect>
		<effectAllowed public="1">
			<c path="String"/>
			<haxe_doc>Provides all of the types of operations that are possible. Must be one of `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.</haxe_doc>
		</effectAllowed>
		<items public="1" set="null">
			<c path="js.html.DataTransferItemList"/>
			<haxe_doc>Gives a `DataTransferItemList` object which is a list of all of the drag data.</haxe_doc>
		</items>
		<types public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>An array of `DOMString` giving the formats that were set in the `dragstart` event.</haxe_doc>
		</types>
		<files public="1" set="null">
			<c path="js.html.FileList"/>
			<haxe_doc>Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.</haxe_doc>
		</files>
		<setDragImage public="1" set="method">
			<f a="image:x:y">
				<c path="js.html.Element"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the image to be used for dragging if a custom one is desired.</haxe_doc>
		</setDragImage>
		<getData public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.
		@throws DOMError</haxe_doc>
		</getData>
		<setData public="1" set="method">
			<f a="format:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position.
		@throws DOMError</haxe_doc>
		</setData>
		<clearData public="1" set="method">
			<f a="?format">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect.
		@throws DOMError</haxe_doc>
		</clearData>
		<addElement public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the drag source to the given element.
		@throws DOMError</haxe_doc>
		</addElement>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DataTransfer` object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.

	Documentation [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransfer"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItem" params="" file="/home/vsts/work/1/s/std/js/html/DataTransferItem.hx" extern="1">
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>The kind of drag data item, `string` or `file`.</haxe_doc>
		</kind>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The drag data item's type, typically a MIME type.</haxe_doc>
		</type>
		<getAsString public="1" set="method">
			<f a="callback">
				<f a="">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Invokes the specified callback with the drag data item string as its argument.
		@throws DOMError</haxe_doc>
		</getAsString>
		<getAsFile public="1" set="method">
			<f a=""><c path="js.html.File"/></f>
			<haxe_doc>Returns the `File` object associated with the drag data item (or null if the drag item is not a file).
		@throws DOMError</haxe_doc>
		</getAsFile>
		<haxe_doc><![CDATA[The `DataTransferItem` object represents one drag data item. During a drag operation, each `drag event` has a `dataTransfer` property which contains a `list` of drag data items. Each item in the list is a `DataTransferItem` object.

	Documentation [DataTransferItem](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItem"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItemList" params="" file="/home/vsts/work/1/s/std/js/html/DataTransferItemList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` that is the number of drag items in the list.</haxe_doc>
		</length>
		<add public="1" set="method">
			<f a="data">
				<c path="js.html.File"/>
				<c path="js.html.DataTransferItem"/>
			</f>
			<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
			<overloads><add public="1" set="method">
	<f a="data:type">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.DataTransferItem"/>
	</f>
	<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
</add></overloads>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the drag item from the list at the given index.
		@throws DOMError</haxe_doc>
		</remove>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all of the drag items from the list.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `DataTransferItemList` object is a list of `DataTransferItem` objects representing items being dragged. During a drag operation, each `DragEvent` has a `dataTransfer` property and that property is a `DataTransferItemList`.

	Documentation [DataTransferItemList](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItemList"</e></m></meta>
	</class>
	<typedef path="js.html.DataView" params="" file="/home/vsts/work/1/s/std/js/html/DataView.hx">
		<c path="js.lib.DataView"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.html.WorkerGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/WorkerGlobalScope.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<self public="1" set="null">
			<c path="js.html.WorkerGlobalScope"/>
			<haxe_doc>Returns a reference to the `WorkerGlobalScope` itself. Most of the time it is a specific scope like `DedicatedWorkerGlobalScope`,  `SharedWorkerGlobalScope` or `ServiceWorkerGlobalScope`.</haxe_doc>
		</self>
		<location public="1" set="null">
			<c path="js.html.WorkerLocation"/>
			<haxe_doc>Returns the `WorkerLocation` associated with the worker. It is a specific location object, mostly a subset of the `Location` for browsing scopes, but adapted to workers.</haxe_doc>
		</location>
		<navigator public="1" set="null"><c path="js.html.WorkerNavigator"/></navigator>
		<onerror public="1">
			<f a="::::">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Event"/>
					<c path="String"/>
				</x>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `error` event is raised.</haxe_doc>
		</onerror>
		<onoffline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `offline` event is raised.</haxe_doc>
		</onoffline>
		<ononline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `online` event is raised.</haxe_doc>
		</ononline>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns the `Performance` associated with the worker. It is a regular performance object, except that only a subset of its property and methods are available to workers.</haxe_doc>
		</performance>
		<crypto public="1" set="null"><c path="js.html.Crypto"/></crypto>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null"><x path="Bool"/></isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<importScripts public="1" set="method">
			<f a="urls">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example:` importScripts('foo.js', 'bar.js');`
		@throws DOMError</haxe_doc>
		</importScripts>
		<dump public="1" set="method">
			<f a="?str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's `window.dump`, but for workers.</haxe_doc>
		</dump>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `WorkerGlobalScope` interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by `Window` objects — in this case event handlers, the console or the associated `WorkerNavigator` object. Each `WorkerGlobalScope` has its own event loop.

	Documentation [WorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.DedicatedWorkerGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/DedicatedWorkerGlobalScope.hx" extern="1">
		<extends path="js.html.WorkerGlobalScope"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name that the `Worker` was (optionally) given when it was created using the `Worker.Worker` constructor. This is mainly useful for debugging purposes.</haxe_doc>
		</name>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `message` event is raised. These events are of type `MessageEvent` and will be called when the worker receives a message from the document that started it (i.e. from the `Worker.postMessage` method.)</haxe_doc>
		</onmessage>
		<onmessageerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `messageerror` event is raised.</haxe_doc>
		</onmessageerror>
		<postMessage public="1" set="method">
			<f a="message:?transfer">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends a message — which can consist of `any` JavaScript object — to the parent document that first spawned the worker.
		@throws DOMError</haxe_doc>
		</postMessage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Discards any tasks queued in the `WorkerGlobalScope`'s event loop, effectively closing this particular scope.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `DedicatedWorkerGlobalScope` object (the `Worker` global scope) is accessible through the `self` keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.

	Documentation [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"DedicatedWorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.DetailsElement" params="" file="/home/vsts/work/1/s/std/js/html/DetailsElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<open public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` reflecting the `open` HTML attribute, indicating whether or not the element’s contents (not counting the `summary`) is to be shown to the user.</haxe_doc>
		</open>
		<haxe_doc><![CDATA[The `HTMLDetailsElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `details` elements.

	Documentation [HTMLDetailsElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDetailsElement"</e></m></meta>
	</class>
	<typedef path="js.html.DeviceAcceleration" params="" file="/home/vsts/work/1/s/std/js/html/DeviceAcceleration.hx">
		<a>
			<z set="null">
				<x path="Float"/>
				<haxe_doc>The amount of acceleration along the Z axis. Read only.</haxe_doc>
			</z>
			<y set="null">
				<x path="Float"/>
				<haxe_doc>The amount of acceleration along the Y axis. Read only.</haxe_doc>
			</y>
			<x set="null">
				<x path="Float"/>
				<haxe_doc>The amount of acceleration along the X axis. Read only.</haxe_doc>
			</x>
		</a>
		<haxe_doc><![CDATA[A `DeviceAcceleration` object provides information about the amount of acceleration the device is experiencing along all three axes.

	Documentation [DeviceAcceleration](https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.DeviceAccelerationInit" params="" file="/home/vsts/work/1/s/std/js/html/DeviceAccelerationInit.hx"><a>
	<z>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</z>
	<y>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</y>
	<x>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</x>
</a></typedef>
	<class path="js.html.DeviceMotionEvent" params="" file="/home/vsts/work/1/s/std/js/html/DeviceMotionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<acceleration public="1" set="null">
			<t path="js.html.DeviceAcceleration"/>
			<haxe_doc>An object giving the acceleration of the device on the three axis X, Y and Z. Acceleration is expressed in m/s2.</haxe_doc>
		</acceleration>
		<accelerationIncludingGravity public="1" set="null">
			<t path="js.html.DeviceAcceleration"/>
			<haxe_doc>An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. Acceleration is expressed in m/s2.</haxe_doc>
		</accelerationIncludingGravity>
		<rotationRate public="1" set="null">
			<t path="js.html.DeviceRotationRate"/>
			<haxe_doc>An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. Rotation rate is expressed in degrees per seconds.</haxe_doc>
		</rotationRate>
		<interval public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the interval of time, in milliseconds, at which data is obtained from the device.</haxe_doc>
		</interval>
		<initDeviceMotionEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?acceleration:?accelerationIncludingGravity:?rotationRate:?interval" v=":false:false::::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Null"><t path="js.html.DeviceAccelerationInit"/></x>
				<x path="Null"><t path="js.html.DeviceAccelerationInit"/></x>
				<x path="Null"><t path="js.html.DeviceRotationRateInit"/></x>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, canBubble : false }</e></m></meta>
		</initDeviceMotionEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.DeviceMotionEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DeviceMotionEvent` provides web developers with information about the speed of changes for the device's position and orientation.

	Documentation [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"DeviceMotionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.DeviceMotionEventInit" params="" file="/home/vsts/work/1/s/std/js/html/DeviceMotionEventInit.hx"><a>
	<rotationRate>
		<x path="Null"><t path="js.html.DeviceRotationRateInit"/></x>
		<meta><m n=":optional"/></meta>
	</rotationRate>
	<interval>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</interval>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<accelerationIncludingGravity>
		<x path="Null"><t path="js.html.DeviceAccelerationInit"/></x>
		<meta><m n=":optional"/></meta>
	</accelerationIncludingGravity>
	<acceleration>
		<x path="Null"><t path="js.html.DeviceAccelerationInit"/></x>
		<meta><m n=":optional"/></meta>
	</acceleration>
</a></typedef>
	<class path="js.html.DeviceOrientationEvent" params="" file="/home/vsts/work/1/s/std/js/html/DeviceOrientationEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<alpha public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 to 360.</haxe_doc>
		</alpha>
		<beta public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 to 180. This represents a front to back motion of the device.</haxe_doc>
		</beta>
		<gamma public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 to 90. This represents a left to right motion of the device.</haxe_doc>
		</gamma>
		<absolute public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean that indicates whether or not the device is providing orientation data absolutely.</haxe_doc>
		</absolute>
		<initDeviceOrientationEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?alpha:?beta:?gamma:?absolute" v=":false:false::::false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ absolute : false, cancelable : false, canBubble : false }</e></m></meta>
		</initDeviceOrientationEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.DeviceOrientationEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DeviceOrientationEvent` provides web developers with information from the physical orientation of the device running the web page.

	Documentation [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"DeviceOrientationEvent"</e></m></meta>
	</class>
	<typedef path="js.html.DeviceOrientationEventInit" params="" file="/home/vsts/work/1/s/std/js/html/DeviceOrientationEventInit.hx"><a>
	<gamma>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</gamma>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<beta>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</beta>
	<alpha>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</alpha>
	<absolute>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</absolute>
</a></typedef>
	<typedef path="js.html.DeviceRotationRate" params="" file="/home/vsts/work/1/s/std/js/html/DeviceRotationRate.hx">
		<a>
			<gamma set="null">
				<x path="Float"/>
				<haxe_doc>The amount of rotation around the Y axis, in degrees per second.</haxe_doc>
			</gamma>
			<beta set="null">
				<x path="Float"/>
				<haxe_doc>The amount of rotation around the X axis, in degrees per second.</haxe_doc>
			</beta>
			<alpha set="null">
				<x path="Float"/>
				<haxe_doc>The amount of rotation around the Z axis, in degrees per second.</haxe_doc>
			</alpha>
		</a>
		<haxe_doc><![CDATA[A `DeviceRotationRate` object provides information about the rate at which the device is rotating around all three axes.

	Documentation [DeviceRotationRate](https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.DeviceRotationRateInit" params="" file="/home/vsts/work/1/s/std/js/html/DeviceRotationRateInit.hx"><a>
	<gamma>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</gamma>
	<beta>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</beta>
	<alpha>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<abstract path="js.html.DirectionSetting" params="" file="/home/vsts/work/1/s/std/js/html/DirectionSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
		<x path="js.html.DirectionSetting"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<RL public="1" get="inline" set="null" expr="cast &quot;rl&quot;" line="29" static="1">
		<x path="js.html.DirectionSetting"/>
		<meta>
			<m n=":value"><e>cast "rl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RL>
	<LR public="1" get="inline" set="null" expr="cast &quot;lr&quot;" line="30" static="1">
		<x path="js.html.DirectionSetting"/>
		<meta>
			<m n=":value"><e>cast "lr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LR>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
			<x path="js.html.DirectionSetting"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<RL public="1" get="inline" set="null" expr="cast &quot;rl&quot;" line="29" static="1">
			<x path="js.html.DirectionSetting"/>
			<meta>
				<m n=":value"><e>cast "rl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RL>
		<LR public="1" get="inline" set="null" expr="cast &quot;lr&quot;" line="30" static="1">
			<x path="js.html.DirectionSetting"/>
			<meta>
				<m n=":value"><e>cast "lr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LR>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Directory" params="" file="/home/vsts/work/1/s/std/js/html/Directory.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<path public="1" set="null"><c path="String"/></path>
		<getFilesAndDirectories public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.File"/>
	<c path="js.html.Directory"/>
</x></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFilesAndDirectories>
		<getFiles public="1" set="method">
			<f a="?recursiveFlag" v="false">
				<x path="Bool"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.File"/></c></c>
			</f>
			<meta><m n=":value"><e>{ recursiveFlag : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFiles>
		<new public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Directory"</e></m></meta>
	</class>
	<class path="js.html.DirectoryElement" params="" file="/home/vsts/work/1/s/std/js/html/DirectoryElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLDirectoryElement"</e></m></meta>
	</class>
	<typedef path="js.html.DisplayNameOptions" params="" file="/home/vsts/work/1/s/std/js/html/DisplayNameOptions.hx"><a>
	<style>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</style>
	<keys>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</keys>
</a></typedef>
	<typedef path="js.html.DisplayNameResult" params="" file="/home/vsts/work/1/s/std/js/html/DisplayNameResult.hx"><a>
	<values>
		<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
		<meta><m n=":optional"/></meta>
	</values>
	<style>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</style>
	<locale>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</locale>
</a></typedef>
	<class path="js.html.DivElement" params="" file="/home/vsts/work/1/s/std/js/html/DivElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLDivElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating div elements.

	Documentation [HTMLDivElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDivElement"</e></m></meta>
	</class>
	<class path="js.html.Document" params="" file="/home/vsts/work/1/s/std/js/html/Document.hx" extern="1">
		<extends path="js.html.Node"/>
		<implementation public="1" set="null">
			<c path="js.html.DOMImplementation"/>
			<haxe_doc>Returns the DOM implementation associated with the current document.</haxe_doc>
		</implementation>
		<URL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</URL>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</documentURI>
		<compatMode public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates whether the document is rendered in quirks or strict mode.</haxe_doc>
		</compatMode>
		<characterSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the character set being used by the document.</haxe_doc>
		</characterSet>
		<charset public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</charset>
		<inputEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</inputEncoding>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the Content-Type from the MIME Header of the current document.</haxe_doc>
		</contentType>
		<doctype public="1" set="null">
			<c path="js.html.DocumentType"/>
			<haxe_doc>Returns the Document Type Definition (DTD) of the current document.</haxe_doc>
		</doctype>
		<documentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `Element` that is a direct child of the document. For HTML documents, this is normally the `HTMLElement` element.</haxe_doc>
		</documentElement>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Returns the URI of the current document.</haxe_doc>
		</location>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the URI of the page that linked to this page.</haxe_doc>
		</referrer>
		<lastModified public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the date on which the document was last modified.</haxe_doc>
		</lastModified>
		<readyState public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns loading status of the document.</haxe_doc>
		</readyState>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Sets or gets the title of the current document.</haxe_doc>
		</title>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets directionality (rtl/ltr) of the document.</haxe_doc>
		</dir>
		<body public="1">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `body` or `frameset` node of the current document.</haxe_doc>
		</body>
		<head public="1" set="null">
			<c path="js.html.HeadElement"/>
			<haxe_doc>Returns the `head` element of the current document.</haxe_doc>
		</head>
		<images public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the images in the current document.</haxe_doc>
		</images>
		<embeds public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the embedded `embed` elements within the current document.</haxe_doc>
		</embeds>
		<plugins public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the available plugins.</haxe_doc>
		</plugins>
		<links public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all the hyperlinks in the document.</haxe_doc>
		</links>
		<forms public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the `form` elements within the current document.</haxe_doc>
		</forms>
		<scripts public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns all the `script` elements on the document.</haxe_doc>
		</scripts>
		<defaultView public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the window object.</haxe_doc>
		</defaultView>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `readystatechange` event.</haxe_doc>
		</onreadystatechange>
		<onbeforescriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `beforescriptexecute` event.</haxe_doc>
		</onbeforescriptexecute>
		<onafterscriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `afterscriptexecute` event.</haxe_doc>
		</onafterscriptexecute>
		<onselectionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `selectionchange` event is raised.</haxe_doc>
		</onselectionchange>
		<currentScript public="1" set="null"><c path="js.html.Element"/></currentScript>
		<anchors public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all of the anchors in the document.</haxe_doc>
		</anchors>
		<applets public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns an ordered list of the applets within a document.</haxe_doc>
		</applets>
		<fullscreen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` when the document is in `Using_full-screen_mode`.</haxe_doc>
		</fullscreen>
		<fullscreenEnabled public="1" set="null"><x path="Bool"/></fullscreenEnabled>
		<onfullscreenchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenchange` event is raised.</haxe_doc>
		</onfullscreenchange>
		<onfullscreenerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenerror` event is raised.</haxe_doc>
		</onfullscreenerror>
		<onpointerlockchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockchange` event.</haxe_doc>
		</onpointerlockchange>
		<onpointerlockerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockerror` event.</haxe_doc>
		</onpointerlockerror>
		<hidden public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>…</haxe_doc>
		</hidden>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Returns a `string` denoting the visibility state of the document. Possible values are `visible`,  `hidden`,  `prerender`, and `unloaded`.</haxe_doc>
		</visibilityState>
		<onvisibilitychange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `visibilitychange` event is raised.</haxe_doc>
		</onvisibilitychange>
		<selectedStyleSheetSet public="1">
			<c path="String"/>
			<haxe_doc>Returns which style sheet set is currently in use.</haxe_doc>
		</selectedStyleSheetSet>
		<lastStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the style sheet set that was last enabled. Has the value `null` until the style sheet is changed by setting the value of `document.selectedStyleSheetSet`.</haxe_doc>
		</lastStyleSheetSet>
		<preferredStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the preferred style sheet set as specified by the page author.</haxe_doc>
		</preferredStyleSheetSet>
		<styleSheetSets public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a list of the style sheet sets available on the document.</haxe_doc>
		</styleSheetSets>
		<scrollingElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the `Element` that scrolls the document.</haxe_doc>
		</scrollingElement>
		<timeline public="1" set="null">
			<c path="js.html.DocumentTimeline"/>
			<haxe_doc>…</haxe_doc>
		</timeline>
		<rootElement public="1" set="null"><c path="js.html.svg.SVGElement"/></rootElement>
		<oncopy public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `copy` event.</haxe_doc>
		</oncopy>
		<oncut public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `cut` event.</haxe_doc>
		</oncut>
		<onpaste public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `paste` event.</haxe_doc>
		</onpaste>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element that's currently in full screen mode for this document.</haxe_doc>
		</fullscreenElement>
		<fonts public="1" set="null"><c path="js.html.FontFaceSet"/></fonts>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `wheel` event.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name and namespace.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given class name.</haxe_doc>
		</getElementsByClassName>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<createElement public="1" set="method">
			<f a="localName:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
			<overloads><createElement public="1" set="method">
	<f a="localName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
</createElement></overloads>
		</createElement>
		<createElementNS public="1" set="method">
			<f a="namespace:qualifiedName:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
			<overloads><createElementNS public="1" set="method">
	<f a="namespace:qualifiedName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
</createElementNS></overloads>
		</createElementNS>
		<createDocumentFragment public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Creates a new document fragment.</haxe_doc>
		</createDocumentFragment>
		<createTextNode public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>Creates a text node.</haxe_doc>
		</createTextNode>
		<createComment public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Comment"/>
			</f>
			<haxe_doc>Creates a new comment node and returns it.</haxe_doc>
		</createComment>
		<createProcessingInstruction public="1" set="method">
			<f a="target:data">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.ProcessingInstruction"/>
			</f>
			<haxe_doc>Creates a new `ProcessingInstruction` object.
		@throws DOMError</haxe_doc>
		</createProcessingInstruction>
		<importNode public="1" set="method">
			<f a="node:?deep" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Returns a clone of a node from an external document.
		@throws DOMError</haxe_doc>
		</importNode>
		<adoptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adopt node from an external document.
		@throws DOMError</haxe_doc>
		</adoptNode>
		<createEvent public="1" set="method">
			<f a="interface_">
				<c path="String"/>
				<c path="js.html.Event"/>
			</f>
			<haxe_doc>Creates an event object.
		@throws DOMError</haxe_doc>
		</createEvent>
		<createRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Creates a `Range` object.
		@throws DOMError</haxe_doc>
		</createRange>
		<createNodeIterator public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeIterator"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
			</overloads>
		</createNodeIterator>
		<createTreeWalker public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.TreeWalker"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
			</overloads>
		</createTreeWalker>
		<createCDATASection public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.CDATASection"/>
			</f>
			<haxe_doc>Creates a new CDATA node and returns it.
		@throws DOMError</haxe_doc>
		</createCDATASection>
		<createAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new `Attr` object and returns it.
		@throws DOMError</haxe_doc>
		</createAttribute>
		<createAttributeNS public="1" set="method">
			<f a="namespace:name">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new attribute node in a given namespace and returns it.
		@throws DOMError</haxe_doc>
		</createAttributeNS>
		<getElementsByName public="1" set="method"><f a="elementName">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByName>
		<hasFocus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the focus is currently located anywhere inside the specified document.
		@throws DOMError</haxe_doc>
		</hasFocus>
		<releaseCapture public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the current mouse capture if it's on an element in this document.</haxe_doc>
		</releaseCapture>
		<exitFullscreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullscreen>
		<exitPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the pointer lock.</haxe_doc>
		</exitPointerLock>
		<enableStyleSheetsForSet public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables the style sheets for the specified style sheet set.</haxe_doc>
		</enableStyleSheetsForSet>
		<caretPositionFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CaretPosition"/>
</f></caretPositionFromPoint>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<getAnimations public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Animation"/></c></f>
			<haxe_doc>Returns an array of all `Animation` objects currently in effect, whose target elements are descendants of the `document`.</haxe_doc>
		</getAnimations>
		<createTouch public="1" set="method">
			<f a="?view:?target:?identifier:?pageX:?pageY:?screenX:?screenY:?clientX:?clientY:?radiusX:?radiusY:?rotationAngle:?force" v="::0:0:0:0:0:0:0:0:0:0.0:0.0">
				<c path="js.html.Window"/>
				<c path="js.html.EventTarget"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.Touch"/>
			</f>
			<meta><m n=":value"><e>{ force : 0.0, rotationAngle : 0.0, radiusY : 0, radiusX : 0, clientY : 0, clientX : 0, screenY : 0, screenX : 0, pageY : 0, pageX : 0, identifier : 0 }</e></m></meta>
			<haxe_doc>Creates a `Touch` object.</haxe_doc>
		</createTouch>
		<createTouchList public="1" set="method">
			<f a="touches">
				<c path="Array"><c path="js.html.Touch"/></c>
				<c path="js.html.TouchList"/>
			</f>
			<haxe_doc>Creates a `TouchList` object.</haxe_doc>
			<overloads>
				<createTouchList public="1" set="method">
					<f a="touch:touches">
						<c path="js.html.Touch"/>
						<x path="haxe.extern.Rest"><c path="js.html.Touch"/></x>
						<c path="js.html.TouchList"/>
					</f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
				<createTouchList public="1" set="method">
					<f a=""><c path="js.html.TouchList"/></f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
			</overloads>
		</createTouchList>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSelection>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<createExpression public="1" set="method">
			<f a="expression:?resolver">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
			</overloads>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
				<c path="String"/>
				<c path="js.html.Node"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="haxe.Function"/>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
			</overloads>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Document` interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.`HTMLElement`

	Documentation [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Document$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Document>]]></haxe_doc>
		<meta><m n=":native"><e>"Document"</e></m></meta>
	</class>
	<class path="js.html.DocumentFragment" params="" file="/home/vsts/work/1/s/std/js/html/DocumentFragment.hx" extern="1">
		<extends path="js.html.Node"/>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the DocumentFragment`, in document order, that matches the specified ID.</haxe_doc>
		</getElementById>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the `DocumentFragment`, in document order, that matches the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of all the `Element` nodes within the `DocumentFragment` that match the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<prepend public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentFragment` interface represents a minimal document object that has no parent. It is used as a lightweight version of `Document` that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.

	Documentation [DocumentFragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentFragment"</e></m></meta>
	</class>
	<class path="js.html.DocumentTimeline" params="" file="/home/vsts/work/1/s/std/js/html/DocumentTimeline.hx" extern="1">
		<extends path="js.html.AnimationTimeline"/>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.DocumentTimelineOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentTimeline` interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via `Document.timeline`).

	Documentation [DocumentTimeline](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentTimeline"</e></m></meta>
	</class>
	<typedef path="js.html.DocumentTimelineOptions" params="" file="/home/vsts/work/1/s/std/js/html/DocumentTimelineOptions.hx"><a><originTime>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
</originTime></a></typedef>
	<class path="js.html.DocumentType" params="" file="/home/vsts/work/1/s/std/js/html/DocumentType.hx" extern="1">
		<extends path="js.html.Node"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"html"` for `!DOCTYPE HTML`.</haxe_doc>
		</name>
		<publicId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"-//W3C//DTD HTML 4.01//EN"`, empty string for HTML5.</haxe_doc>
		</publicId>
		<systemId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"http://www.w3.org/TR/html4/strict.dtd"`, empty string for HTML5.</haxe_doc>
		</systemId>
		<before public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<x path="haxe.extern.Rest"><c path="js.html.Node"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `DocumentType` interface represents a `Node` containing a doctype.

	Documentation [DocumentType](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentType>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentType"</e></m></meta>
	</class>
	<class path="js.html.MouseEvent" params="" file="/home/vsts/work/1/s/std/js/html/MouseEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientY>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Alias for `MouseEvent.clientX`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Alias for `MouseEvent.clientY`</haxe_doc>
		</y>
		<offsetX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetX>
		<offsetY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetY>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the control key was down when the mouse event was fired.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the shift key was down when the mouse event was fired.</haxe_doc>
		</shiftKey>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the alt key was down when the mouse event was fired.</haxe_doc>
		</altKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the meta key was down when the mouse event was fired.</haxe_doc>
		</metaKey>
		<button public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The button number that was pressed (if applicable) when the mouse event was fired.</haxe_doc>
		</button>
		<buttons public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The buttons being depressed (if any) when the mouse event was fired.</haxe_doc>
		</buttons>
		<relatedTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The secondary target for the event, if there is one.</haxe_doc>
		</relatedTarget>
		<region public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the id of the hit region affected by the event. If no hit region is affected, `null` is returned.</haxe_doc>
		</region>
		<movementX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementX>
		<movementY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementY>
		<initMouseEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?viewArg:?detailArg:?screenXArg:?screenYArg:?clientXArg:?clientYArg:?ctrlKeyArg:?altKeyArg:?shiftKeyArg:?metaKeyArg:?buttonArg:?relatedTargetArg" v=":false:false::0:0:0:0:0:false:false:false:false:0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ buttonArg : 0, metaKeyArg : false, shiftKeyArg : false, altKeyArg : false, ctrlKeyArg : false, clientYArg : 0, clientXArg : 0, screenYArg : 0, screenXArg : 0, detailArg : 0, cancelableArg : false, canBubbleArg : false }</e></m></meta>
			<haxe_doc>Initializes the value of a `MouseEvent` created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initMouseEvent>
		<getModifierState public="1" set="method">
			<f a="keyArg">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns the current state of the specified modifier key. See the `KeyboardEvent.getModifierState`() for details.</haxe_doc>
		</getModifierState>
		<initNSMouseEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?viewArg:?detailArg:?screenXArg:?screenYArg:?clientXArg:?clientYArg:?ctrlKeyArg:?altKeyArg:?shiftKeyArg:?metaKeyArg:?buttonArg:?relatedTargetArg:?pressure:?inputSourceArg" v=":false:false::0:0:0:0:0:false:false:false:false:0::0.0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inputSourceArg : 0, pressure : 0.0, buttonArg : 0, metaKeyArg : false, shiftKeyArg : false, altKeyArg : false, ctrlKeyArg : false, clientYArg : 0, clientXArg : 0, screenYArg : 0, screenXArg : 0, detailArg : 0, cancelableArg : false, canBubbleArg : false }</e></m></meta>
		</initNSMouseEvent>
		<new public="1" set="method">
			<f a="typeArg:?mouseEventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.MouseEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include `click`, `dblclick`, `mouseup`, `mousedown`.

	Documentation [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MouseEvent"</e></m></meta>
	</class>
	<class path="js.html.DragEvent" params="" file="/home/vsts/work/1/s/std/js/html/DragEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<dataTransfer public="1" set="null">
			<c path="js.html.DataTransfer"/>
			<haxe_doc>The data that is transferred during a drag and drop interaction.</haxe_doc>
		</dataTransfer>
		<initDragEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?aView:?aDetail:?aScreenX:?aScreenY:?aClientX:?aClientY:?aCtrlKey:?aAltKey:?aShiftKey:?aMetaKey:?aButton:?aRelatedTarget:?aDataTransfer" v=":false:false::0:0:0:0:0:false:false:false:false:0::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<c path="js.html.DataTransfer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ aButton : 0, aMetaKey : false, aShiftKey : false, aAltKey : false, aCtrlKey : false, aClientY : 0, aClientX : 0, aScreenY : 0, aScreenX : 0, aDetail : 0, cancelable : false, canBubble : false }</e></m></meta>
		</initDragEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.DragEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DragEvent` interface is a `DOM event` that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.

	Documentation [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DragEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"DragEvent"</e></m></meta>
	</class>
	<typedef path="js.html.DragEventInit" params="" file="/home/vsts/work/1/s/std/js/html/DragEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<dataTransfer>
		<x path="Null"><c path="js.html.DataTransfer"/></x>
		<meta><m n=":optional"/></meta>
	</dataTransfer>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.EffectTiming" params="" file="/home/vsts/work/1/s/std/js/html/EffectTiming.hx">
		<a>
			<iterations>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
			</iterations>
			<iterationStart>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
			</iterationStart>
			<fill>
				<x path="Null"><x path="js.html.FillMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
			</fill>
			<endDelay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
			</endDelay>
			<easing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
			</easing>
			<duration>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
			</duration>
			<direction>
				<x path="Null"><x path="js.html.PlaybackDirection"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
			</direction>
			<delay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
			</delay>
		</a>
		<haxe_doc><![CDATA[The `EffectTiming` dictionary, part of the Web Animations API, is used by `Element.animate()`, `KeyframeEffectReadOnly()`, and `KeyframeEffect()` to describe timing properties for animation effects. These properties are all optional, although without setting a `duration` the animation will not play.

	Documentation [EffectTiming](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.ElementCreationOptions" params="" file="/home/vsts/work/1/s/std/js/html/ElementCreationOptions.hx"><a><is>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</is></a></typedef>
	<class path="js.html.EmbedElement" params="" file="/home/vsts/work/1/s/std/js/html/EmbedElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the resource.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, containing the type of the resource.</haxe_doc>
		</type>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, containing the displayed width of the resource.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `height` HTML attribute, containing the displayed height of the resource.</haxe_doc>
		</height>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"center"`, and `"justify"`.</haxe_doc>
		</align>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the embedded object.</haxe_doc>
		</name>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLEmbedElement` interface, which provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `embed` elements.

	Documentation [HTMLEmbedElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLEmbedElement"</e></m></meta>
	</class>
	<abstract path="js.html.EndingTypes" params="" file="/home/vsts/work/1/s/std/js/html/EndingTypes.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._EndingTypes.EndingTypes_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/EndingTypes.hx" private="1" module="js.html.EndingTypes" extern="1" final="1">
	<TRANSPARENT public="1" get="inline" set="null" expr="cast &quot;transparent&quot;" line="28" static="1">
		<x path="js.html.EndingTypes"/>
		<meta>
			<m n=":value"><e>cast "transparent"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TRANSPARENT>
	<NATIVE public="1" get="inline" set="null" expr="cast &quot;native&quot;" line="29" static="1">
		<x path="js.html.EndingTypes"/>
		<meta>
			<m n=":value"><e>cast "native"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NATIVE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._EndingTypes.EndingTypes_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/EndingTypes.hx" private="1" module="js.html.EndingTypes" extern="1" final="1">
		<TRANSPARENT public="1" get="inline" set="null" expr="cast &quot;transparent&quot;" line="28" static="1">
			<x path="js.html.EndingTypes"/>
			<meta>
				<m n=":value"><e>cast "transparent"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TRANSPARENT>
		<NATIVE public="1" get="inline" set="null" expr="cast &quot;native&quot;" line="29" static="1">
			<x path="js.html.EndingTypes"/>
			<meta>
				<m n=":value"><e>cast "native"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NATIVE>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.ErrorCallback" params="" file="/home/vsts/work/1/s/std/js/html/ErrorCallback.hx"><a><handleEvent set="method"><f a="err">
	<c path="js.html.DOMException"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<class path="js.html.ErrorEvent" params="" file="/home/vsts/work/1/s/std/js/html/ErrorEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a human-readable error message describing the problem.</haxe_doc>
		</message>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name of the script file in which the error occurred.</haxe_doc>
		</filename>
		<lineno public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` containing the line number of the script file on which the error occurred.</haxe_doc>
		</lineno>
		<colno public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` containing the column number of the script file on which the error occurred.</haxe_doc>
		</colno>
		<error public="1" set="null">
			<d/>
			<haxe_doc>Is a JavaScript `Object` that is concerned by the event.</haxe_doc>
		</error>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.ErrorEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ErrorEvent` interface represents events providing information related to errors in scripts or in files.

	Documentation [ErrorEvent](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ErrorEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ErrorEventInit" params="" file="/home/vsts/work/1/s/std/js/html/ErrorEventInit.hx"><a>
	<message>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<lineno>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</lineno>
	<filename>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</filename>
	<error>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</error>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<colno>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</colno>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.EventInit" params="" file="/home/vsts/work/1/s/std/js/html/EventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.EventListener" params="" file="/home/vsts/work/1/s/std/js/html/EventListener.hx">
		<a><handleEvent set="method">
	<f a="event">
		<c path="js.html.Event"/>
		<x path="Void"/>
	</f>
	<haxe_doc>A function that is called whenever an event of the specified type occurs.</haxe_doc>
</handleEvent></a>
		<haxe_doc><![CDATA[The `EventListener` interface represents an object that can handle an event dispatched by an `EventTarget` object.

	Documentation [EventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventListener>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.EventListenerOptions" params="" file="/home/vsts/work/1/s/std/js/html/EventListenerOptions.hx"><a><capture>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</capture></a></typedef>
	<typedef path="js.html.EventModifierInit" params="" file="/home/vsts/work/1/s/std/js/html/EventModifierInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.EventSource" params="" file="/home/vsts/work/1/s/std/js/html/EventSource.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<CONNECTING public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CONNECTING>
		<OPEN public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPEN>
		<CLOSED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CLOSED>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the URL of the source.</haxe_doc>
		</url>
		<withCredentials public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the `EventSource` object was instantiated with cross-origin (CORS) credentials set (`true`), or not (`false`, the default).</haxe_doc>
		</withCredentials>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number representing the state of the connection. Possible values are `CONNECTING` (`0`), `OPEN` (`1`), or `CLOSED` (`2`).</haxe_doc>
		</readyState>
		<onopen public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` called when an `open` event is received, that is when the connection was just opened.</haxe_doc>
		</onopen>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` called when a `message` event is received, that is when a message is coming from the source.</haxe_doc>
		</onmessage>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` called when an error occurs and the `error` event is dispatched on an `EventSource` object.</haxe_doc>
		</onerror>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the connection, if any, and sets the `readyState` attribute to `CLOSED`. If the connection is already closed, the method does nothing.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="url:?eventSourceInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.EventSourceInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `EventSource` interface is web content's interface to server-sent events. An `EventSource` instance opens a persistent connection to an HTTP server, which sends events in `text/event-stream` format.

	Documentation [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventSource$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventSource>]]></haxe_doc>
		<meta><m n=":native"><e>"EventSource"</e></m></meta>
	</class>
	<typedef path="js.html.EventSourceInit" params="" file="/home/vsts/work/1/s/std/js/html/EventSourceInit.hx"><a><withCredentials>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</withCredentials></a></typedef>
	<typedef path="js.html.Exception" params="" file="/home/vsts/work/1/s/std/js/html/Exception.hx"><a>
	<stack set="null"><c path="String"/></stack>
	<result set="null"><x path="Int"/></result>
	<name set="null"><c path="String"/></name>
	<message set="null"><c path="String"/></message>
	<lineNumber set="null"><x path="Int"/></lineNumber>
	<filename set="null"><c path="String"/></filename>
	<data set="null"><d/></data>
	<columnNumber set="null"><x path="Int"/></columnNumber>
</a></typedef>
	<class path="js.html.ExtendableEvent" params="" file="/home/vsts/work/1/s/std/js/html/ExtendableEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<waitUntil public="1" set="method">
			<f a="p">
				<c path="js.lib.Promise"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</waitUntil>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.ExtendableEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ExtendableEvent` interface extends the lifetime of the `install` and `activate` events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like `FetchEvent`) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.

	Documentation [ExtendableEvent](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ExtendableEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ExtendableEventInit" params="" file="/home/vsts/work/1/s/std/js/html/ExtendableEventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.ExtendableMessageEvent" params="" file="/home/vsts/work/1/s/std/js/html/ExtendableMessageEvent.hx" extern="1">
		<extends path="js.html.ExtendableEvent"/>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns the event's data. It can be any data type.</haxe_doc>
		</data>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the origin of the `ServiceWorkerClient` that sent the message</haxe_doc>
		</origin>
		<lastEventId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Represents, in server-sent events, the last event ID of the event source.</haxe_doc>
		</lastEventId>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.Client"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ServiceWorker"/>
					<c path="js.html.MessagePort"/>
				</x>
			</x>
			<haxe_doc>Returns a reference to the service worker that sent the message.</haxe_doc>
		</source>
		<ports public="1" set="null">
			<c path="Array"><c path="js.html.MessagePort"/></c>
			<haxe_doc>Returns the array containing the `MessagePort` objects representing the ports of the associated message channel.</haxe_doc>
		</ports>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.ExtendableMessageEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ExtendableMessageEvent` interface of the `ServiceWorker API` represents the event object of a `message` event fired on a service worker (when a channel message is received on the `ServiceWorkerGlobalScope` from another context) — extends the lifetime of such events.

	Documentation [ExtendableMessageEvent](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ExtendableMessageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ExtendableMessageEventInit" params="" file="/home/vsts/work/1/s/std/js/html/ExtendableMessageEventInit.hx"><a>
	<source>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Client"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.ServiceWorker"/>
		<c path="js.html.MessagePort"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</source>
	<ports>
		<x path="Null"><c path="Array"><c path="js.html.MessagePort"/></c></x>
		<meta><m n=":optional"/></meta>
	</ports>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<lastEventId>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</lastEventId>
	<data>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.External" params="" file="/home/vsts/work/1/s/std/js/html/External.hx"><a>
	<IsSearchProviderInstalled set="method"><f a="aSearchURL">
	<c path="String"/>
	<x path="Int"/>
</f></IsSearchProviderInstalled>
	<AddSearchProvider set="method"><f a="aDescriptionURL">
	<c path="String"/>
	<x path="Void"/>
</f></AddSearchProvider>
</a></typedef>
	<class path="js.html.FetchEvent" params="" file="/home/vsts/work/1/s/std/js/html/FetchEvent.hx" extern="1">
		<extends path="js.html.ExtendableEvent"/>
		<request public="1" set="null">
			<c path="js.html.Request"/>
			<haxe_doc>The `Request` the browser intends to make.</haxe_doc>
		</request>
		<clientId public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `Client.id` of the same-origin `Client` that initiated the fetch.</haxe_doc>
		</clientId>
		<isReload public="1" set="null"><x path="Bool"/></isReload>
		<respondWith public="1" set="method">
			<f a="r">
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Prevent the browser's default fetch handling, and provide (a promise for) a response yourself.
		@throws DOMError</haxe_doc>
		</respondWith>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.FetchEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This is the event type for `fetch` events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the `event.respondWith()` method, which allows us to provide a response to this fetch.

	Documentation [FetchEvent](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"FetchEvent"</e></m></meta>
	</class>
	<typedef path="js.html.FetchEventInit" params="" file="/home/vsts/work/1/s/std/js/html/FetchEventInit.hx"><a>
	<request><c path="js.html.Request"/></request>
	<isReload>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isReload>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientId>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</clientId>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.FetchObserver" params="" file="/home/vsts/work/1/s/std/js/html/FetchObserver.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null"><x path="js.html.FetchState"/></state>
		<onstatechange public="1"><x path="haxe.Function"/></onstatechange>
		<onrequestprogress public="1"><x path="haxe.Function"/></onrequestprogress>
		<onresponseprogress public="1"><x path="haxe.Function"/></onresponseprogress>
		<meta><m n=":native"><e>"FetchObserver"</e></m></meta>
	</class>
	<abstract path="js.html.FetchState" params="" file="/home/vsts/work/1/s/std/js/html/FetchState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FetchState.FetchState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FetchState.hx" private="1" module="js.html.FetchState" extern="1" final="1">
	<REQUESTING public="1" get="inline" set="null" expr="cast &quot;requesting&quot;" line="28" static="1">
		<x path="js.html.FetchState"/>
		<meta>
			<m n=":value"><e>cast "requesting"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REQUESTING>
	<RESPONDING public="1" get="inline" set="null" expr="cast &quot;responding&quot;" line="29" static="1">
		<x path="js.html.FetchState"/>
		<meta>
			<m n=":value"><e>cast "responding"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RESPONDING>
	<ABORTED public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="30" static="1">
		<x path="js.html.FetchState"/>
		<meta>
			<m n=":value"><e>cast "aborted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ABORTED>
	<ERRORED public="1" get="inline" set="null" expr="cast &quot;errored&quot;" line="31" static="1">
		<x path="js.html.FetchState"/>
		<meta>
			<m n=":value"><e>cast "errored"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERRORED>
	<COMPLETE public="1" get="inline" set="null" expr="cast &quot;complete&quot;" line="32" static="1">
		<x path="js.html.FetchState"/>
		<meta>
			<m n=":value"><e>cast "complete"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMPLETE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._FetchState.FetchState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FetchState.hx" private="1" module="js.html.FetchState" extern="1" final="1">
		<REQUESTING public="1" get="inline" set="null" expr="cast &quot;requesting&quot;" line="28" static="1">
			<x path="js.html.FetchState"/>
			<meta>
				<m n=":value"><e>cast "requesting"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REQUESTING>
		<RESPONDING public="1" get="inline" set="null" expr="cast &quot;responding&quot;" line="29" static="1">
			<x path="js.html.FetchState"/>
			<meta>
				<m n=":value"><e>cast "responding"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RESPONDING>
		<ABORTED public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="30" static="1">
			<x path="js.html.FetchState"/>
			<meta>
				<m n=":value"><e>cast "aborted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ABORTED>
		<ERRORED public="1" get="inline" set="null" expr="cast &quot;errored&quot;" line="31" static="1">
			<x path="js.html.FetchState"/>
			<meta>
				<m n=":value"><e>cast "errored"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERRORED>
		<COMPLETE public="1" get="inline" set="null" expr="cast &quot;complete&quot;" line="32" static="1">
			<x path="js.html.FetchState"/>
			<meta>
				<m n=":value"><e>cast "complete"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMPLETE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.FieldSetElement" params="" file="/home/vsts/work/1/s/std/js/html/FieldSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, indicating whether the user can interact with the control.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormControlsCollection` or `HTMLCollection` referencing the containing form element, if this element is in a form.
		
		 If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of the field set, used for submitting the form.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"fieldset"`.</haxe_doc>
		</type>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.</haxe_doc>
		</elements>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` `false`, because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Always returns `true` because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLFieldSetElement` interface has special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.

	Documentation [HTMLFieldSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFieldSetElement"</e></m></meta>
	</class>
	<class path="js.html.File" params="" file="/home/vsts/work/1/s/std/js/html/File.hx" extern="1">
		<extends path="js.html.Blob"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the file referenced by the `File` object.</haxe_doc>
		</name>
		<lastModified public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</haxe_doc>
		</lastModified>
		<new public="1" set="method">
			<f a="fileBits:fileName:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Blob"/>
		<c path="String"/>
	</x>
</x></c>
				<c path="String"/>
				<x path="Null"><t path="js.html.FilePropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `File` interface provides information about files and allows JavaScript in a web page to access their content.

	Documentation [File](https://developer.mozilla.org/en-US/docs/Web/API/File) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/File$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/File>]]></haxe_doc>
		<meta><m n=":native"><e>"File"</e></m></meta>
	</class>
	<typedef path="js.html.FileCallback" params="" file="/home/vsts/work/1/s/std/js/html/FileCallback.hx"><a><handleEvent set="method"><f a="file">
	<c path="js.html.File"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<class path="js.html.FileList" params="" file="/home/vsts/work/1/s/std/js/html/FileList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.File"/>
</f></item>
		<haxe_doc><![CDATA[An object of this type is returned by the `files` property of the HTML `input` element; this lets you access the list of files selected with the `input type="file"` element. It's also used for a list of files dropped into web content when using the drag and drop API; see the `DataTransfer` object for details on this usage.

	Documentation [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileList>]]></haxe_doc>
		<meta><m n=":native"><e>"FileList"</e></m></meta>
	</class>
	<abstract path="js.html.FileMode" params="" file="/home/vsts/work/1/s/std/js/html/FileMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FileMode.FileMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FileMode.hx" private="1" module="js.html.FileMode" extern="1" final="1">
	<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="28" static="1">
		<x path="js.html.FileMode"/>
		<meta>
			<m n=":value"><e>cast "readonly"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READONLY>
	<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="29" static="1">
		<x path="js.html.FileMode"/>
		<meta>
			<m n=":value"><e>cast "readwrite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READWRITE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._FileMode.FileMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FileMode.hx" private="1" module="js.html.FileMode" extern="1" final="1">
		<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="28" static="1">
			<x path="js.html.FileMode"/>
			<meta>
				<m n=":value"><e>cast "readonly"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READONLY>
		<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="29" static="1">
			<x path="js.html.FileMode"/>
			<meta>
				<m n=":value"><e>cast "readwrite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READWRITE>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.FilePropertyBag" params="" file="/home/vsts/work/1/s/std/js/html/FilePropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<lastModified>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<class path="js.html.FileReader" params="" file="/home/vsts/work/1/s/std/js/html/FileReader.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<EMPTY public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</EMPTY>
		<LOADING public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<DONE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DONE>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[A number indicating the state of the <code>FileReader</code>. This is one of the following:
		 <table class="standard-table">
		  
		   <tr>
		    <td><code>EMPTY</code></td>
		    <td><code>0</code></td>
		    <td>No data has been loaded yet.</td>
		   </tr>
		   <tr>
		    <td><code>LOADING</code></td>
		    <td><code>1</code></td>
		    <td>Data is currently being loaded.</td>
		   </tr>
		   <tr>
		    <td><code>DONE</code></td>
		    <td><code>2</code></td>
		    <td>The entire read request has been completed.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<result public="1" set="null">
			<d/>
			<haxe_doc>The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>A `DOMException` representing the error that occurred while reading the file.</haxe_doc>
		</error>
		<onloadstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `loadstart` event. This event is triggered each time the reading is starting.</haxe_doc>
		</onloadstart>
		<onprogress public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `progress` event. This event is triggered while reading a `Blob` content.</haxe_doc>
		</onprogress>
		<onload public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `load` event. This event is triggered each time the reading operation is successfully completed.</haxe_doc>
		</onload>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `abort` event. This event is triggered each time the reading operation is aborted.</haxe_doc>
		</onabort>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. This event is triggered each time the reading operation encounter an error.</haxe_doc>
		</onerror>
		<onloadend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `loadend` event. This event is triggered each time the reading operation is completed (either in success or failure).</haxe_doc>
		</onloadend>
		<readAsArrayBuffer public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains an `ArrayBuffer` representing the file's data.
		@throws DOMError</haxe_doc>
		</readAsArrayBuffer>
		<readAsBinaryString public="1" set="method">
			<f a="filedata">
				<c path="js.html.Blob"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains the raw binary data from the file as a string.
		@throws DOMError</haxe_doc>
		</readAsBinaryString>
		<readAsText public="1" set="method">
			<f a="blob:?label">
				<c path="js.html.Blob"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains the contents of the file as a text string.
		@throws DOMError</haxe_doc>
		</readAsText>
		<readAsDataURL public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts reading the contents of the specified `Blob`, once finished, the `result` attribute contains a `data:` URL representing the file's data.
		@throws DOMError</haxe_doc>
		</readAsDataURL>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Aborts the read operation. Upon return, the `readyState` will be `DONE`.</haxe_doc>
		</abort>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FileReader` object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using `File` or `Blob` objects to specify the file or data to read.

	Documentation [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileReader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileReader>]]></haxe_doc>
		<meta><m n=":native"><e>"FileReader"</e></m></meta>
	</class>
	<class path="js.html.FileReaderSync" params="" file="/home/vsts/work/1/s/std/js/html/FileReaderSync.hx" extern="1">
		<readAsArrayBuffer public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<c path="js.lib.ArrayBuffer"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsArrayBuffer>
		<readAsBinaryString public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsBinaryString>
		<readAsText public="1" set="method">
			<f a="blob:?encoding">
				<c path="js.html.Blob"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsText>
		<readAsDataURL public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsDataURL>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FileReaderSync` interface allows to read `File` or `Blob` objects in a synchronous way.

	Documentation [FileReaderSync](https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync>]]></haxe_doc>
		<meta><m n=":native"><e>"FileReaderSync"</e></m></meta>
	</class>
	<class path="js.html.FileSystem" params="" file="/home/vsts/work/1/s/std/js/html/FileSystem.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` representing the file system's name. This name is unique among the entire list of exposed file systems.</haxe_doc>
		</name>
		<root public="1" set="null">
			<c path="js.html.FileSystemDirectoryEntry"/>
			<haxe_doc>A `FileSystemDirectoryEntry` object which represents the file system's root directory. Through this object, you can gain access to all files and directories in the file system.</haxe_doc>
		</root>
		<haxe_doc><![CDATA[The File and Directory Entries API interface `FileSystem` is used to represent a file system. These objects can be obtained from the `filesystem` property on any file system entry. Some browsers offer additional APIs to create and manage file systems, such as Chrome's `requestFileSystem()` method.

	Documentation [FileSystem](https://developer.mozilla.org/en-US/docs/Web/API/FileSystem) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileSystem$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileSystem>]]></haxe_doc>
		<meta><m n=":native"><e>"FileSystem"</e></m></meta>
	</class>
	<class path="js.html.FileSystemEntry" params="" file="/home/vsts/work/1/s/std/js/html/FileSystemEntry.hx" extern="1">
		<isFile public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean which is `true` if the entry represents a file. If it's not a file, this value is `false`.</haxe_doc>
		</isFile>
		<isDirectory public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` which is `true` if the entry represents a directory; otherwise, it's `false`.</haxe_doc>
		</isDirectory>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` containing the name of the entry (the final part of the path, after the last "/" character).</haxe_doc>
		</name>
		<fullPath public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` object which provides the full, absolute path from the file system's root to the entry; it can also be thought of as a path which is relative to the root directory, prepended with a "/" character.</haxe_doc>
		</fullPath>
		<filesystem public="1" set="null">
			<c path="js.html.FileSystem"/>
			<haxe_doc>A `FileSystem` object representing the file system in which the entry is located.</haxe_doc>
		</filesystem>
		<getParent public="1" set="method">
			<f a="?successCallback:?errorCallback">
				<f a="">
					<c path="js.html.FileSystemEntry"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<overloads>
				<getParent public="1" set="method"><f a="?successCallback:?errorCallback">
	<x path="haxe.Function"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></getParent>
				<getParent public="1" set="method"><f a="?successCallback:?errorCallback">
	<x path="Null"><t path="js.html.FileSystemEntryCallback"/></x>
	<x path="Null"><t path="js.html.ErrorCallback"/></x>
	<x path="Void"/>
</f></getParent>
			</overloads>
		</getParent>
		<haxe_doc><![CDATA[The `FileSystemEntry` interface of the File and Directory Entries API represents a single in a file system. The entry can be a file or a directory (directories are represented by the `DirectoryEntry` interface). It includes methods for working with files—including copying, moving, removing, and reading files—as well as information about a file it points to—including the file name and its path from the root to the entry.

	Documentation [FileSystemEntry](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"FileSystemEntry"</e></m></meta>
	</class>
	<class path="js.html.FileSystemDirectoryEntry" params="" file="/home/vsts/work/1/s/std/js/html/FileSystemDirectoryEntry.hx" extern="1">
		<extends path="js.html.FileSystemEntry"/>
		<createReader public="1" set="method"><f a=""><c path="js.html.FileSystemDirectoryReader"/></f></createReader>
		<getFile public="1" set="method">
			<f a="?path:?options:?successCallback:?errorCallback">
				<c path="String"/>
				<x path="Null"><t path="js.html.FileSystemFlags"/></x>
				<f a="">
					<c path="js.html.FileSystemEntry"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<overloads>
				<getFile public="1" set="method"><f a="?path:?options:?successCallback:?errorCallback">
	<c path="String"/>
	<x path="Null"><t path="js.html.FileSystemFlags"/></x>
	<x path="haxe.Function"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></getFile>
				<getFile public="1" set="method"><f a="?path:?options:?successCallback:?errorCallback">
	<c path="String"/>
	<x path="Null"><t path="js.html.FileSystemFlags"/></x>
	<x path="Null"><t path="js.html.FileSystemEntryCallback"/></x>
	<x path="Null"><t path="js.html.ErrorCallback"/></x>
	<x path="Void"/>
</f></getFile>
			</overloads>
		</getFile>
		<getDirectory public="1" set="method">
			<f a="?path:?options:?successCallback:?errorCallback">
				<c path="String"/>
				<x path="Null"><t path="js.html.FileSystemFlags"/></x>
				<f a="">
					<c path="js.html.FileSystemEntry"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<overloads>
				<getDirectory public="1" set="method"><f a="?path:?options:?successCallback:?errorCallback">
	<c path="String"/>
	<x path="Null"><t path="js.html.FileSystemFlags"/></x>
	<x path="haxe.Function"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></getDirectory>
				<getDirectory public="1" set="method"><f a="?path:?options:?successCallback:?errorCallback">
	<c path="String"/>
	<x path="Null"><t path="js.html.FileSystemFlags"/></x>
	<x path="Null"><t path="js.html.FileSystemEntryCallback"/></x>
	<x path="Null"><t path="js.html.ErrorCallback"/></x>
	<x path="Void"/>
</f></getDirectory>
			</overloads>
		</getDirectory>
		<haxe_doc><![CDATA[The `FileSystemDirectoryEntry` interface of the File and Directory Entries API represents a directory in a file system. It provides methods which make it possible to access and manipulate the files in a directory, as well as to access the entries within the directory.

	Documentation [FileSystemDirectoryEntry](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"FileSystemDirectoryEntry"</e></m></meta>
	</class>
	<class path="js.html.FileSystemDirectoryReader" params="" file="/home/vsts/work/1/s/std/js/html/FileSystemDirectoryReader.hx" extern="1">
		<readEntries public="1" set="method">
			<f a="successCallback:?errorCallback">
				<f a="">
					<c path="Array"><c path="js.html.FileSystemEntry"/></c>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<readEntries public="1" set="method">
					<f a="successCallback:?errorCallback">
						<x path="haxe.Function"/>
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readEntries>
				<readEntries public="1" set="method">
					<f a="successCallback:?errorCallback">
						<t path="js.html.FileSystemEntriesCallback"/>
						<x path="Null"><t path="js.html.ErrorCallback"/></x>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readEntries>
			</overloads>
		</readEntries>
		<haxe_doc><![CDATA[The `FileSystemDirectoryReader` interface of the File and Directory Entries API lets you access the `FileEntry`-based objects (generally `FileSystemFileEntry` or `FileSystemDirectoryEntry`) representing each entry in a directory.

	Documentation [FileSystemDirectoryReader](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader>]]></haxe_doc>
		<meta><m n=":native"><e>"FileSystemDirectoryReader"</e></m></meta>
	</class>
	<typedef path="js.html.FileSystemEntriesCallback" params="" file="/home/vsts/work/1/s/std/js/html/FileSystemEntriesCallback.hx"><a><handleEvent set="method"><f a="entries">
	<c path="Array"><c path="js.html.FileSystemEntry"/></c>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<typedef path="js.html.FileSystemEntryCallback" params="" file="/home/vsts/work/1/s/std/js/html/FileSystemEntryCallback.hx"><a><handleEvent set="method"><f a="entry">
	<c path="js.html.FileSystemEntry"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<class path="js.html.FileSystemFileEntry" params="" file="/home/vsts/work/1/s/std/js/html/FileSystemFileEntry.hx" extern="1">
		<extends path="js.html.FileSystemEntry"/>
		<file public="1" set="method">
			<f a="successCallback:?errorCallback">
				<f a="">
					<c path="js.html.File"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<overloads>
				<file public="1" set="method"><f a="successCallback:?errorCallback">
	<x path="haxe.Function"/>
	<x path="haxe.Function"/>
	<x path="Void"/>
</f></file>
				<file public="1" set="method"><f a="successCallback:?errorCallback">
	<t path="js.html.FileCallback"/>
	<x path="Null"><t path="js.html.ErrorCallback"/></x>
	<x path="Void"/>
</f></file>
			</overloads>
		</file>
		<haxe_doc><![CDATA[The `FileSystemFileEntry` interface of the File System API represents a file in a file system. It offers properties describing the file's attributes, as well as the `file()` method, which creates a `File` object that can be used to read the file.

	Documentation [FileSystemFileEntry](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"FileSystemFileEntry"</e></m></meta>
	</class>
	<typedef path="js.html.FileSystemFlags" params="" file="/home/vsts/work/1/s/std/js/html/FileSystemFlags.hx">
		<a>
			<exclusive>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If `true`, and the `create` option is also `true`, the file must not exist prior to issuing the call. Instead, it must be possible for it to be created newly at call time. The default is `false`.</haxe_doc>
			</exclusive>
			<create>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If this property is `true`, and the requested file or directory doesn't exist, the user agent should create it. The default is `false`. The parent directory must already exist.</haxe_doc>
			</create>
		</a>
		<haxe_doc><![CDATA[The `FileSystemFlags` dictionary defines a set of values which are used when specifying option flags when calling certain methods in the File and Directory Entries API. Methods which accept an options parameter of this type may specify zero or more of these flags as fields in an object, like this:

	Documentation [FileSystemFlags](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.FillMode" params="" file="/home/vsts/work/1/s/std/js/html/FillMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FillMode.FillMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="28" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<FORWARDS public="1" get="inline" set="null" expr="cast &quot;forwards&quot;" line="29" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "forwards"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FORWARDS>
	<BACKWARDS public="1" get="inline" set="null" expr="cast &quot;backwards&quot;" line="30" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "backwards"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BACKWARDS>
	<BOTH public="1" get="inline" set="null" expr="cast &quot;both&quot;" line="31" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "both"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BOTH>
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="32" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._FillMode.FillMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="28" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<FORWARDS public="1" get="inline" set="null" expr="cast &quot;forwards&quot;" line="29" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "forwards"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FORWARDS>
		<BACKWARDS public="1" get="inline" set="null" expr="cast &quot;backwards&quot;" line="30" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "backwards"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BACKWARDS>
		<BOTH public="1" get="inline" set="null" expr="cast &quot;both&quot;" line="31" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "both"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BOTH>
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="32" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.Float32Array" params="" file="/home/vsts/work/1/s/std/js/html/Float32Array.hx">
		<c path="js.lib.Float32Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.Float64Array" params="" file="/home/vsts/work/1/s/std/js/html/Float64Array.hx">
		<c path="js.lib.Float64Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.html.FocusEvent" params="" file="/home/vsts/work/1/s/std/js/html/FocusEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<relatedTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>Is an `EventTarget` representing a secondary target for this event. As in some cases (like when tabbing in or out a page), this property may be set to `null` for security reasons.</haxe_doc>
		</relatedTarget>
		<new public="1" set="method">
			<f a="typeArg:?focusEventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.FocusEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FocusEvent` interface represents focus-related events like `focus`, `blur`, `focusin`, or `focusout`.

	Documentation [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"FocusEvent"</e></m></meta>
	</class>
	<typedef path="js.html.FocusEventInit" params="" file="/home/vsts/work/1/s/std/js/html/FocusEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.FontElement" params="" file="/home/vsts/work/1/s/std/js/html/FontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.</haxe_doc>
		</color>
		<face public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.</haxe_doc>
		</face>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `size` HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the `size` attribute of the `basefont` element, for example -2 or +1.</haxe_doc>
		</size>
		<haxe_doc><![CDATA[Implements the document object model (DOM) representation of the font element. The HTML Font Element `font` defines the font size, font face and color of text.

	Documentation [HTMLFontElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFontElement"</e></m></meta>
	</class>
	<class path="js.html.FontFace" params="" file="/home/vsts/work/1/s/std/js/html/FontFace.hx" extern="1">
		<family public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the family of the font. It is equivalent to the `@font-face/font-family` descriptor.</haxe_doc>
		</family>
		<style public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the style of the font. It is equivalent to the `@font-face/font-style` descriptor.</haxe_doc>
		</style>
		<weight public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the weight of the font. It is equivalent to the `@font-face/font-weight` descriptor.</haxe_doc>
		</weight>
		<stretch public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains how the font stretches. It is equivalent to the `@font-face/font-stretch` descriptor.</haxe_doc>
		</stretch>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the range of code encompassed the font. It is equivalent to the `@font-face/unicode-range` descriptor.</haxe_doc>
		</unicodeRange>
		<variant public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the variant of the font. It is equivalent to the `@font-face/font-variant` descriptor.</haxe_doc>
		</variant>
		<featureSettings public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the features of the font. It is equivalent to the `@font-face/font-feature-settings`descriptor.</haxe_doc>
		</featureSettings>
		<status public="1" set="null">
			<x path="js.html.FontFaceLoadStatus"/>
			<haxe_doc>Returns an enumerated value indicating the status of the font. It can be one of the following: `"unloaded"`, `"loading"`, `"loaded"`, or `"error"`.</haxe_doc>
		</status>
		<loaded public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.FontFace"/></c>
			<haxe_doc>Returns a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.</haxe_doc>
		</loaded>
		<load public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FontFace"/></c></f>
			<haxe_doc>Loads the font, returning a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.
		@throws DOMError</haxe_doc>
		</load>
		<new public="1" set="method">
			<f a="family:source:?descriptors">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `FontFace` interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.

	Documentation [FontFace](https://developer.mozilla.org/en-US/docs/Web/API/FontFace) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFace$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFace>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFace"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceDescriptors" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceDescriptors.hx"><a>
	<weight>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</weight>
	<variationSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variationSettings>
	<variant>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variant>
	<unicodeRange>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</unicodeRange>
	<style>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</style>
	<stretch>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</stretch>
	<featureSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</featureSettings>
	<display>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</display>
</a></typedef>
	<abstract path="js.html.FontFaceLoadStatus" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" extern="1" final="1">
	<UNLOADED public="1" get="inline" set="null" expr="cast &quot;unloaded&quot;" line="28" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "unloaded"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UNLOADED>
	<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="29" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loading"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADING>
	<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="30" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loaded"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADED>
	<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="31" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERROR>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" extern="1" final="1">
		<UNLOADED public="1" get="inline" set="null" expr="cast &quot;unloaded&quot;" line="28" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "unloaded"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UNLOADED>
		<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="29" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loading"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="30" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loaded"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="31" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERROR>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.FontFaceSet" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSet.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<size public="1" set="null"><x path="Int"/></size>
		<onloading public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loading` is fired, indicating a font-face set has started loading.</haxe_doc>
		</onloading>
		<onloadingdone public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingdone` is fired, indicating that a font face set has finished loading.</haxe_doc>
		</onloadingdone>
		<onloadingerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingerror` is fired, indicating that an error occurred whilst loading a font-face set.</haxe_doc>
		</onloadingerror>
		<ready public="1" set="null"><c path="js.lib.Promise"><x path="Void"/></c></ready>
		<status public="1" set="null">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<haxe_doc>Indicates the font-face's loading status. It will be one of `'loading'` or `'loaded'`.</haxe_doc>
		</status>
		<add public="1" set="method">
			<f a="font">
				<c path="js.html.FontFace"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<has public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></has>
		<delete public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></delete>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<entries public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></entries>
		<values public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></values>
		<forEach public="1" set="method">
			<f a="cb:?thisArg">
				<f a="::">
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFaceSet"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<load public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.FontFace"/></c></c>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
		</load>
		<check public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</check>
		<haxe_doc><![CDATA[The `FontFaceSet` interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.

	Documentation [FontFaceSet](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFaceSet"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceSetIterator" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSetIterator.hx"><a><next set="method">
	<f a=""><t path="js.html.FontFaceSetIteratorResult"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<typedef path="js.html.FontFaceSetIteratorResult" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSetIteratorResult.hx"><a>
	<value><d/></value>
	<done><x path="Bool"/></done>
</a></typedef>
	<class path="js.html.FontFaceSetLoadEvent" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSetLoadEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<fontfaces public="1" set="null">
			<c path="Array"><c path="js.html.FontFace"/></c>
			<haxe_doc>Returns an array of `FontFace` instances each of which represents a single usable font.</haxe_doc>
		</fontfaces>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.FontFaceSetLoadEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FontFaceSetLoadEvent` interface of the the Css Font Loading API is fired whenever a `FontFaceSet` loads.

	Documentation [FontFaceSetLoadEvent](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSetLoadEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSetLoadEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSetLoadEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFaceSetLoadEvent"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceSetLoadEventInit" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSetLoadEventInit.hx"><a>
	<fontfaces>
		<x path="Null"><c path="Array"><c path="js.html.FontFace"/></c></x>
		<meta><m n=":optional"/></meta>
	</fontfaces>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.FontFaceSetLoadStatus" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSetLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" extern="1" final="1">
	<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="28" static="1">
		<x path="js.html.FontFaceSetLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loading"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADING>
	<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="29" static="1">
		<x path="js.html.FontFaceSetLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loaded"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" extern="1" final="1">
		<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="28" static="1">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loading"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="29" static="1">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loaded"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.FormData" params="" file="/home/vsts/work/1/s/std/js/html/FormData.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a key/value pair from a `FormData` object.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Blob"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Directory"/>
						<c path="String"/>
					</x>
				</x>
			</f>
			<haxe_doc>Returns the first value associated with a given key from within a `FormData` object.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Directory"/>
		<c path="String"/>
	</x>
</x></c>
			</f>
			<haxe_doc>Returns an array of all the values associated with a given key from within a `FormData`.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `FormData` object contains a certain key/value pair.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><set public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
</set></overloads>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?form">
				<c path="js.html.FormElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FormData` interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the `XMLHttpRequest.send()` method. It uses the same format a form would use if the encoding type were set to `"multipart/form-data"`.

	Documentation [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FormData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FormData>]]></haxe_doc>
		<meta><m n=":native"><e>"FormData"</e></m></meta>
	</class>
	<typedef path="js.html.FormDataIterator" params="" file="/home/vsts/work/1/s/std/js/html/FormDataIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.FormElement" params="" file="/home/vsts/work/1/s/std/js/html/FormElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<acceptCharset public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `accept-charset` HTML attribute, representing the character encoding that the server accepts.</haxe_doc>
		</acceptCharset>
		<action public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `action` HTML attribute, containing the URI of a program that processes the information submitted by the form.</haxe_doc>
		</action>
		<autocomplete public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `autocomplete` HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.</haxe_doc>
		</autocomplete>
		<enctype public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</enctype>
		<encoding public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</encoding>
		<method public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `method` HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.</haxe_doc>
		</method>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `name` HTML attribute, containing the name of the form.</haxe_doc>
		</name>
		<noValidate public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the value of the form's  `novalidate` HTML attribute, indicating whether the form should not be validated.</haxe_doc>
		</noValidate>
		<target public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `target` HTML attribute, indicating where to display the results received from submitting the form.</haxe_doc>
		</target>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>A `HTMLFormControlsCollection` holding all form controls belonging to this form element.</haxe_doc>
		</elements>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting  the number of controls in the form.</haxe_doc>
		</length>
		<submit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Submits the form to the server.
		@throws DOMError</haxe_doc>
		</submit>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the form to its initial state.</haxe_doc>
		</reset>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls are subject to constraint validation and satisfy those contraints; returns `false` if some controls do not satisfy their constraints. Fires an event named `invalid` at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to `false`.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls satisfy their validation constraints. When `false` is returned, cancelable `invalid` events are fired for each invalid child and validation problems are reported to the user.</haxe_doc>
		</reportValidity>
		<haxe_doc><![CDATA[The `HTMLFormElement` interface represents a `form` element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.

	Documentation [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormElement"</e></m></meta>
	</class>
	<class path="js.html.FrameElement" params="" file="/home/vsts/work/1/s/std/js/html/FrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<scrolling public="1"><c path="String"/></scrolling>
		<src public="1"><c path="String"/></src>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<longDesc public="1"><c path="String"/></longDesc>
		<noResize public="1"><x path="Bool"/></noResize>
		<contentDocument public="1" set="null"><c path="js.html.HTMLDocument"/></contentDocument>
		<contentWindow public="1" set="null"><c path="js.html.Window"/></contentWindow>
		<marginHeight public="1"><c path="String"/></marginHeight>
		<marginWidth public="1"><c path="String"/></marginWidth>
		<meta><m n=":native"><e>"HTMLFrameElement"</e></m></meta>
	</class>
	<class path="js.html.FrameSetElement" params="" file="/home/vsts/work/1/s/std/js/html/FrameSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the width of each column inside a frameset.</haxe_doc>
		</cols>
		<rows public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the height of each column inside a frameset.</haxe_doc>
		</rows>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLFrameSetElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating `frameset` elements.

	Documentation [HTMLFrameSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameSetElement"</e></m></meta>
	</class>
	<abstract path="js.html.FrameType" params="" file="/home/vsts/work/1/s/std/js/html/FrameType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FrameType.FrameType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FrameType.hx" private="1" module="js.html.FrameType" extern="1" final="1">
	<AUXILIARY public="1" get="inline" set="null" expr="cast &quot;auxiliary&quot;" line="28" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "auxiliary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUXILIARY>
	<TOP_LEVEL public="1" get="inline" set="null" expr="cast &quot;top-level&quot;" line="29" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "top-level"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOP_LEVEL>
	<NESTED public="1" get="inline" set="null" expr="cast &quot;nested&quot;" line="30" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "nested"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NESTED>
	<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="31" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._FrameType.FrameType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/FrameType.hx" private="1" module="js.html.FrameType" extern="1" final="1">
		<AUXILIARY public="1" get="inline" set="null" expr="cast &quot;auxiliary&quot;" line="28" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "auxiliary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUXILIARY>
		<TOP_LEVEL public="1" get="inline" set="null" expr="cast &quot;top-level&quot;" line="29" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "top-level"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOP_LEVEL>
		<NESTED public="1" get="inline" set="null" expr="cast &quot;nested&quot;" line="30" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "nested"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NESTED>
		<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="31" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Gamepad" params="" file="/home/vsts/work/1/s/std/js/html/Gamepad.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing identifying information about the controller.</haxe_doc>
		</id>
		<index public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An integer that is auto-incremented to be unique for each device currently connected to the system.</haxe_doc>
		</index>
		<mapping public="1" set="null">
			<x path="js.html.GamepadMappingType"/>
			<haxe_doc>A string indicating whether the browser has remapped the controls on the device to a known layout.</haxe_doc>
		</mapping>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the gamepad is still connected to the system.</haxe_doc>
		</connected>
		<buttons public="1" set="null">
			<c path="Array"><c path="js.html.GamepadButton"/></c>
			<haxe_doc>An array of `gamepadButton` objects representing the buttons present on the device.</haxe_doc>
		</buttons>
		<axes public="1" set="null">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>An array representing the controls with axes present on the device (e.g. analog thumb sticks).</haxe_doc>
		</axes>
		<timestamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the last time the data for this gamepad was updated.</haxe_doc>
		</timestamp>
		<haxe_doc><![CDATA[The `Gamepad` interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.

	Documentation [Gamepad](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Gamepad>]]></haxe_doc>
		<meta><m n=":native"><e>"Gamepad"</e></m></meta>
	</class>
	<class path="js.html.GamepadButton" params="" file="/home/vsts/work/1/s/std/js/html/GamepadButton.hx" extern="1">
		<pressed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean value indicating whether the button is currently pressed (`true`) or unpressed (`false`).</haxe_doc>
		</pressed>
		<touched public="1" set="null"><x path="Bool"/></touched>
		<value public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `GamepadButton` interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.

	Documentation [GamepadButton](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton>]]></haxe_doc>
		<meta><m n=":native"><e>"GamepadButton"</e></m></meta>
	</class>
	<class path="js.html.GamepadEvent" params="" file="/home/vsts/work/1/s/std/js/html/GamepadEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<gamepad public="1" set="null">
			<c path="js.html.Gamepad"/>
			<haxe_doc>Returns a `Gamepad` object, providing access to the associated gamepad data for the event fired.</haxe_doc>
		</gamepad>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.GamepadEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events `Window.gamepadconnected` and `Window.gamepaddisconnected` are fired in response to.

	Documentation [GamepadEvent](https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"GamepadEvent"</e></m></meta>
	</class>
	<typedef path="js.html.GamepadEventInit" params="" file="/home/vsts/work/1/s/std/js/html/GamepadEventInit.hx"><a>
	<gamepad>
		<x path="Null"><c path="js.html.Gamepad"/></x>
		<meta><m n=":optional"/></meta>
	</gamepad>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.GamepadMappingType" params="" file="/home/vsts/work/1/s/std/js/html/GamepadMappingType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
		<x path="js.html.GamepadMappingType"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<STANDARD public="1" get="inline" set="null" expr="cast &quot;standard&quot;" line="29" static="1">
		<x path="js.html.GamepadMappingType"/>
		<meta>
			<m n=":value"><e>cast "standard"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STANDARD>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
			<x path="js.html.GamepadMappingType"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<STANDARD public="1" get="inline" set="null" expr="cast &quot;standard&quot;" line="29" static="1">
			<x path="js.html.GamepadMappingType"/>
			<meta>
				<m n=":value"><e>cast "standard"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STANDARD>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.Geolocation" params="" file="/home/vsts/work/1/s/std/js/html/Geolocation.hx">
		<a>
			<watchPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Int"/>
				</f>
				<haxe_doc>Returns a `long` value representing the newly established callback function to be invoked whenever the device location changes.
		@throws DOMError</haxe_doc>
			</watchPosition>
			<getCurrentPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Determines the device's current location and gives back a `Position` object with the data.
		@throws DOMError</haxe_doc>
			</getCurrentPosition>
			<clearWatch set="method">
				<f a="watchId">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes the particular handler previously installed using `watchPosition()`.</haxe_doc>
			</clearWatch>
		</a>
		<haxe_doc><![CDATA[The `Geolocation` interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.

	Documentation [Geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Geolocation>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.GetNotificationOptions" params="" file="/home/vsts/work/1/s/std/js/html/GetNotificationOptions.hx"><a><tag>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</tag></a></typedef>
	<typedef path="js.html.GetRootNodeOptions" params="" file="/home/vsts/work/1/s/std/js/html/GetRootNodeOptions.hx"><a><composed>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</composed></a></typedef>
	<typedef path="js.html.GetUserMediaRequest" params="" file="/home/vsts/work/1/s/std/js/html/GetUserMediaRequest.hx"><a>
	<windowID set="null"><x path="Int"/></windowID>
	<rawID set="null"><c path="String"/></rawID>
	<mediaSource set="null"><c path="String"/></mediaSource>
	<isSecure set="null"><x path="Bool"/></isSecure>
	<isHandlingUserInput set="null"><x path="Bool"/></isHandlingUserInput>
	<innerWindowID set="null"><x path="Int"/></innerWindowID>
	<getConstraints set="method"><f a=""><t path="js.html.MediaStreamConstraints"/></f></getConstraints>
	<callID set="null"><c path="String"/></callID>
</a></typedef>
	<class path="js.html.HRElement" params="" file="/home/vsts/work/1/s/std/js/html/HRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<color public="1"><c path="String"/></color>
		<noShade public="1"><x path="Bool"/></noShade>
		<size public="1"><c path="String"/></size>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLHRElement` interface provides special properties (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating `hr` elements.

	Documentation [HTMLHRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHRElement"</e></m></meta>
	</class>
	<class path="js.html.HTMLAllCollection" params="" file="/home/vsts/work/1/s/std/js/html/HTMLAllCollection.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Node"/>
					<c path="js.html.HTMLCollection"/>
				</x>
			</f>
			<overloads><item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item></overloads>
		</item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Node"/>
		<c path="js.html.HTMLCollection"/>
	</x>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLAllCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLCollection" params="" file="/home/vsts/work/1/s/std/js/html/HTMLCollection.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of items in the collection.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node at the given zero-based `index` into the list. Returns `null` if the `index` is out of range.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node whose ID or, as a fallback, name matches the string specified by `name`. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the `name` attribute. Returns `null` if no node exists by the given name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `HTMLCollection` interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.

	Documentation [HTMLCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLDocument" params="" file="/home/vsts/work/1/s/std/js/html/HTMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<domain public="1"><c path="String"/></domain>
		<cookie public="1"><c path="String"/></cookie>
		<designMode public="1"><c path="String"/></designMode>
		<fgColor public="1"><c path="String"/></fgColor>
		<linkColor public="1"><c path="String"/></linkColor>
		<vlinkColor public="1"><c path="String"/></vlinkColor>
		<alinkColor public="1"><c path="String"/></alinkColor>
		<bgColor public="1"><c path="String"/></bgColor>
		<all public="1" set="null"><c path="js.html.HTMLAllCollection"/></all>
		<open public="1" set="method">
			<f a="url:name:features:?replace" v=":::false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ replace : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="?type:?replace" v=":&quot;&quot;">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.HTMLDocument"/>
	</f>
	<meta><m n=":value"><e>{ replace : "" }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<write public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</write>
		<writeln public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</writeln>
		<execCommand public="1" set="method">
			<f a="commandId:?showUI:?value" v=":false:&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ value : "", showUI : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</execCommand>
		<queryCommandEnabled public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandEnabled>
		<queryCommandIndeterm public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandIndeterm>
		<queryCommandState public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandState>
		<queryCommandSupported public="1" set="method"><f a="commandId">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandSupported>
		<queryCommandValue public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandValue>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<createTableCellElement public="1" get="inline" set="null" line="70">
			<f a=""><c path="js.html.TableCellElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<td>` element.]]></haxe_doc>
		</createTableCellElement>
		<createSelectElement public="1" get="inline" set="null" line="72">
			<f a=""><c path="js.html.SelectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<select>` element.]]></haxe_doc>
		</createSelectElement>
		<createFontElement public="1" get="inline" set="null" line="74">
			<f a=""><c path="js.html.FontElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<font>` element.]]></haxe_doc>
		</createFontElement>
		<createDListElement public="1" get="inline" set="null" line="76">
			<f a=""><c path="js.html.DListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dl>` element.]]></haxe_doc>
		</createDListElement>
		<createFrameElement public="1" get="inline" set="null" line="78">
			<f a=""><c path="js.html.FrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frame>` element.]]></haxe_doc>
		</createFrameElement>
		<createOListElement public="1" get="inline" set="null" line="80">
			<f a=""><c path="js.html.OListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ol>` element.]]></haxe_doc>
		</createOListElement>
		<createLIElement public="1" get="inline" set="null" line="82">
			<f a=""><c path="js.html.LIElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<li>` element.]]></haxe_doc>
		</createLIElement>
		<createHRElement public="1" get="inline" set="null" line="84">
			<f a=""><c path="js.html.HRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<hr>` element.]]></haxe_doc>
		</createHRElement>
		<createParamElement public="1" get="inline" set="null" line="86">
			<f a=""><c path="js.html.ParamElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<param>` element.]]></haxe_doc>
		</createParamElement>
		<createLabelElement public="1" get="inline" set="null" line="88">
			<f a=""><c path="js.html.LabelElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<label>` element.]]></haxe_doc>
		</createLabelElement>
		<createTrackElement public="1" get="inline" set="null" line="90">
			<f a=""><c path="js.html.TrackElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<track>` element.]]></haxe_doc>
		</createTrackElement>
		<createDivElement public="1" get="inline" set="null" line="92">
			<f a=""><c path="js.html.DivElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<div>` element.]]></haxe_doc>
		</createDivElement>
		<createTitleElement public="1" get="inline" set="null" line="94">
			<f a=""><c path="js.html.TitleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<title>` element.]]></haxe_doc>
		</createTitleElement>
		<createAnchorElement public="1" get="inline" set="null" line="96">
			<f a=""><c path="js.html.AnchorElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<a>` element.]]></haxe_doc>
		</createAnchorElement>
		<createStyleElement public="1" get="inline" set="null" line="98">
			<f a=""><c path="js.html.StyleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<style>` element.]]></haxe_doc>
		</createStyleElement>
		<createEmbedElement public="1" get="inline" set="null" line="100">
			<f a=""><c path="js.html.EmbedElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<embed>` element.]]></haxe_doc>
		</createEmbedElement>
		<createMeterElement public="1" get="inline" set="null" line="102">
			<f a=""><c path="js.html.MeterElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meter>` element.]]></haxe_doc>
		</createMeterElement>
		<createPictureElement public="1" get="inline" set="null" line="104">
			<f a=""><c path="js.html.PictureElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<picture>` element.]]></haxe_doc>
		</createPictureElement>
		<createPreElement public="1" get="inline" set="null" line="106">
			<f a=""><c path="js.html.PreElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<pre>` element.]]></haxe_doc>
		</createPreElement>
		<createTableSectionElement public="1" get="inline" set="null" line="108">
			<f a=""><c path="js.html.TableSectionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<thead>` element.]]></haxe_doc>
		</createTableSectionElement>
		<createHeadElement public="1" get="inline" set="null" line="110">
			<f a=""><c path="js.html.HeadElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<head>` element.]]></haxe_doc>
		</createHeadElement>
		<createOptGroupElement public="1" get="inline" set="null" line="112">
			<f a=""><c path="js.html.OptGroupElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<optgroup>` element.]]></haxe_doc>
		</createOptGroupElement>
		<createAudioElement public="1" get="inline" set="null" line="114">
			<f a=""><c path="js.html.AudioElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<audio>` element.]]></haxe_doc>
		</createAudioElement>
		<createVideoElement public="1" get="inline" set="null" line="116">
			<f a=""><c path="js.html.VideoElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<video>` element.]]></haxe_doc>
		</createVideoElement>
		<createLegendElement public="1" get="inline" set="null" line="118">
			<f a=""><c path="js.html.LegendElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<legend>` element.]]></haxe_doc>
		</createLegendElement>
		<createUListElement public="1" get="inline" set="null" line="120">
			<f a=""><c path="js.html.UListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ul>` element.]]></haxe_doc>
		</createUListElement>
		<createDirectoryElement public="1" get="inline" set="null" line="122">
			<f a=""><c path="js.html.DirectoryElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dir>` element.]]></haxe_doc>
		</createDirectoryElement>
		<createTableElement public="1" get="inline" set="null" line="124">
			<f a=""><c path="js.html.TableElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<table>` element.]]></haxe_doc>
		</createTableElement>
		<createSlotElement public="1" get="inline" set="null" line="126">
			<f a=""><c path="js.html.SlotElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<slot>` element.]]></haxe_doc>
		</createSlotElement>
		<createSourceElement public="1" get="inline" set="null" line="128">
			<f a=""><c path="js.html.SourceElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<source>` element.]]></haxe_doc>
		</createSourceElement>
		<createLinkElement public="1" get="inline" set="null" line="130">
			<f a=""><c path="js.html.LinkElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<link>` element.]]></haxe_doc>
		</createLinkElement>
		<createIFrameElement public="1" get="inline" set="null" line="132">
			<f a=""><c path="js.html.IFrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<iframe>` element.]]></haxe_doc>
		</createIFrameElement>
		<createMediaElement public="1" get="inline" set="null" line="134">
			<f a=""><c path="js.html.MediaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<media>` element.]]></haxe_doc>
		</createMediaElement>
		<createMapElement public="1" get="inline" set="null" line="136">
			<f a=""><c path="js.html.MapElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<map>` element.]]></haxe_doc>
		</createMapElement>
		<createFormElement public="1" get="inline" set="null" line="138">
			<f a=""><c path="js.html.FormElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<form>` element.]]></haxe_doc>
		</createFormElement>
		<createOptionElement public="1" get="inline" set="null" line="140">
			<f a=""><c path="js.html.OptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<option>` element.]]></haxe_doc>
		</createOptionElement>
		<createMetaElement public="1" get="inline" set="null" line="142">
			<f a=""><c path="js.html.MetaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meta>` element.]]></haxe_doc>
		</createMetaElement>
		<createObjectElement public="1" get="inline" set="null" line="144">
			<f a=""><c path="js.html.ObjectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<object>` element.]]></haxe_doc>
		</createObjectElement>
		<createTableCaptionElement public="1" get="inline" set="null" line="146">
			<f a=""><c path="js.html.TableCaptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<caption>` element.]]></haxe_doc>
		</createTableCaptionElement>
		<createImageElement public="1" get="inline" set="null" line="148">
			<f a=""><c path="js.html.ImageElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<img>` element.]]></haxe_doc>
		</createImageElement>
		<createTextAreaElement public="1" get="inline" set="null" line="150">
			<f a=""><c path="js.html.TextAreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<textarea>` element.]]></haxe_doc>
		</createTextAreaElement>
		<createScriptElement public="1" get="inline" set="null" line="152">
			<f a=""><c path="js.html.ScriptElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<script>` element.]]></haxe_doc>
		</createScriptElement>
		<createDataListElement public="1" get="inline" set="null" line="154">
			<f a=""><c path="js.html.DataListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<datalist>` element.]]></haxe_doc>
		</createDataListElement>
		<createModElement public="1" get="inline" set="null" line="156">
			<f a=""><c path="js.html.ModElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<mod>` element.]]></haxe_doc>
		</createModElement>
		<createOutputElement public="1" get="inline" set="null" line="158">
			<f a=""><c path="js.html.OutputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<output>` element.]]></haxe_doc>
		</createOutputElement>
		<createAreaElement public="1" get="inline" set="null" line="160">
			<f a=""><c path="js.html.AreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<area>` element.]]></haxe_doc>
		</createAreaElement>
		<createProgressElement public="1" get="inline" set="null" line="162">
			<f a=""><c path="js.html.ProgressElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<progress>` element.]]></haxe_doc>
		</createProgressElement>
		<createButtonElement public="1" get="inline" set="null" line="164">
			<f a=""><c path="js.html.ButtonElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<button>` element.]]></haxe_doc>
		</createButtonElement>
		<createFieldSetElement public="1" get="inline" set="null" line="166">
			<f a=""><c path="js.html.FieldSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<fieldset>` element.]]></haxe_doc>
		</createFieldSetElement>
		<createMenuElement public="1" get="inline" set="null" line="168">
			<f a=""><c path="js.html.MenuElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<menu>` element.]]></haxe_doc>
		</createMenuElement>
		<createBRElement public="1" get="inline" set="null" line="170">
			<f a=""><c path="js.html.BRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<br>` element.]]></haxe_doc>
		</createBRElement>
		<createSpanElement public="1" get="inline" set="null" line="172">
			<f a=""><c path="js.html.SpanElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<span>` element.]]></haxe_doc>
		</createSpanElement>
		<createDetailsElement public="1" get="inline" set="null" line="174">
			<f a=""><c path="js.html.DetailsElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<details>` element.]]></haxe_doc>
		</createDetailsElement>
		<createBodyElement public="1" get="inline" set="null" line="176">
			<f a=""><c path="js.html.BodyElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<body>` element.]]></haxe_doc>
		</createBodyElement>
		<createInputElement public="1" get="inline" set="null" line="178">
			<f a=""><c path="js.html.InputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<input>` element.]]></haxe_doc>
		</createInputElement>
		<createBaseElement public="1" get="inline" set="null" line="180">
			<f a=""><c path="js.html.BaseElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<base>` element.]]></haxe_doc>
		</createBaseElement>
		<createQuoteElement public="1" get="inline" set="null" line="182">
			<f a=""><c path="js.html.QuoteElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<quote>` element.]]></haxe_doc>
		</createQuoteElement>
		<createFrameSetElement public="1" get="inline" set="null" line="184">
			<f a=""><c path="js.html.FrameSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frameset>` element.]]></haxe_doc>
		</createFrameSetElement>
		<createCanvasElement public="1" get="inline" set="null" line="186">
			<f a=""><c path="js.html.CanvasElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<canvas>` element.]]></haxe_doc>
		</createCanvasElement>
		<createParagraphElement public="1" get="inline" set="null" line="188">
			<f a=""><c path="js.html.ParagraphElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<p>` element.]]></haxe_doc>
		</createParagraphElement>
		<createTableColElement public="1" get="inline" set="null" line="190">
			<f a=""><c path="js.html.TableColElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<col>` element.]]></haxe_doc>
		</createTableColElement>
		<createTableRowElement public="1" get="inline" set="null" line="192">
			<f a=""><c path="js.html.TableRowElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<tr>` element.]]></haxe_doc>
		</createTableRowElement>
		<createHtmlElement public="1" get="inline" set="null" line="194">
			<f a=""><c path="js.html.HtmlElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<html>` element.]]></haxe_doc>
		</createHtmlElement>
		<haxe_doc><![CDATA[`HTMLDocument` is an abstract interface which extends the `Document` interface to add HTML-specific features to the document object. It represents the root of the HTML document, within which its entire DOM hierarchy resides.

	Documentation [HTMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDocument"</e></m></meta>
	</class>
	<class path="js.html.HTMLFormControlsCollection" params="" file="/home/vsts/work/1/s/std/js/html/HTMLFormControlsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<namedItem public="1" set="method" override="1">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.RadioNodeList"/>
					<c path="js.html.Element"/>
				</x>
			</f>
			<haxe_doc>Returns the `RadioNodeList` or the `Element` in the collection whose `name` or `id` match the specified name, or `null` if no nodes match. Note that this version of `namedItem()` hide the one inherited from `HTMLCollection`. Like that one, in JavaScript, using the array bracket syntax with a `String`, like `collection["value"]` is equivalent to `collection.namedItem("value")`.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `HTMLFormControlsCollection` interface represents a collection of HTML form control elements. 

	Documentation [HTMLFormControlsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormControlsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLOptionsCollection" params="" file="/home/vsts/work/1/s/std/js/html/HTMLOptionsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<selectedIndex public="1"><x path="Int"/></selectedIndex>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[`HTMLOptionsCollection` is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.

	Documentation [HTMLOptionsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLPropertiesCollection" params="" file="/home/vsts/work/1/s/std/js/html/HTMLPropertiesCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<names public="1" set="null"><c path="js.html.DOMStringList"/></names>
		<namedItem public="1" set="method" override="1"><f a="name">
	<c path="String"/>
	<c path="js.html.PropertyNodeList"/>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLPropertiesCollection"</e></m></meta>
	</class>
	<class path="js.html.HashChangeEvent" params="" file="/home/vsts/work/1/s/std/js/html/HashChangeEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<oldURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>The previous URL from which the window was navigated.</haxe_doc>
		</oldURL>
		<newURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>The new URL to which the window is navigating.</haxe_doc>
		</newURL>
		<initHashChangeEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?oldURLArg:?newURLArg" v=":false:false:&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ newURLArg : "", oldURLArg : "", cancelableArg : false, canBubbleArg : false }</e></m></meta>
		</initHashChangeEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.HashChangeEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `HashChangeEvent` event is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol).

	Documentation [HashChangeEvent](https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"HashChangeEvent"</e></m></meta>
	</class>
	<typedef path="js.html.HashChangeEventInit" params="" file="/home/vsts/work/1/s/std/js/html/HashChangeEventInit.hx"><a>
	<oldURL>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</oldURL>
	<newURL>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</newURL>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.HeadElement" params="" file="/home/vsts/work/1/s/std/js/html/HeadElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLHeadElement` interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHeadElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadElement"</e></m></meta>
	</class>
	<class path="js.html.Headers" params="" file="/home/vsts/work/1/s/std/js/html/Headers.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a header from a `Headers` object.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `ByteString` sequence of all the values of a header within a `Headers` object with a given name.
		@throws DOMError</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `Headers` object contains a certain header.
		@throws DOMError</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Executes a provided function once for each array element.
		@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="js.html.Headers"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<c path="Array"><c path="Array"><c path="String"/></c></c>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Headers` interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A `Headers` object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like `append()` (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.

	Documentation [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Headers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Headers>]]></haxe_doc>
		<meta><m n=":native"><e>"Headers"</e></m></meta>
	</class>
	<typedef path="js.html.HeadersIterator" params="" file="/home/vsts/work/1/s/std/js/html/HeadersIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.HeadingElement" params="" file="/home/vsts/work/1/s/std/js/html/HeadingElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLHeadingElement` interface represents the different heading elements. It inherits methods and properties from the `HTMLElement` interface.

	Documentation [HTMLHeadingElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadingElement"</e></m></meta>
	</class>
	<class path="js.html.History" params="" file="/home/vsts/work/1/s/std/js/html/History.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `Integer` representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns `1`.</haxe_doc>
		</length>
		<scrollRestoration public="1">
			<x path="js.html.ScrollRestoration"/>
			<haxe_doc>Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either `auto` or `manual`.</haxe_doc>
		</scrollRestoration>
		<state public="1" set="null">
			<d/>
			<haxe_doc>Returns an `any` value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a `popstate` event.</haxe_doc>
		</state>
		<go public="1" set="method">
			<f a="?delta" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0 }</e></m></meta>
			<haxe_doc>Loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1  for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling `go()` without parameters or a value of 0 reloads the current page. Internet Explorer lets you also specify a string to go to a specific page in the history list.
		@throws DOMError</haxe_doc>
		</go>
		<back public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to `history.go(-1)`.
		 Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</back>
		<forward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to `history.go(1)`.
		 Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</forward>
		<pushState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes the given data onto the session history stack with the specified title and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</pushState>
		<replaceState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</replaceState>
		<haxe_doc><![CDATA[The `History` interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.

	Documentation [History](https://developer.mozilla.org/en-US/docs/Web/API/History) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/History$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/History>]]></haxe_doc>
		<meta><m n=":native"><e>"History"</e></m></meta>
	</class>
	<typedef path="js.html.HitRegionOptions" params="" file="/home/vsts/work/1/s/std/js/html/HitRegionOptions.hx"><a>
	<path>
		<x path="Null"><c path="js.html.Path2D"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<control>
		<x path="Null"><c path="js.html.Element"/></x>
		<meta><m n=":optional"/></meta>
	</control>
</a></typedef>
	<class path="js.html.HtmlElement" params="" file="/home/vsts/work/1/s/std/js/html/HtmlElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<version public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Simply omit it.</haxe_doc>
		</version>
		<haxe_doc><![CDATA[The `HTMLHtmlElement` interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHtmlElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHtmlElement"</e></m></meta>
	</class>
	<class path="js.html.IFrameElement" params="" file="/home/vsts/work/1/s/std/js/html/IFrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the content to be embedded.</haxe_doc>
		</src>
		<srcdoc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the content to display in the frame.</haxe_doc>
		</srcdoc>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, containing a name by which to refer to the frame.</haxe_doc>
		</name>
		<sandbox public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sandbox` HTML attribute, indicating extra restrictions on the behavior of the nested content.</haxe_doc>
		</sandbox>
		<allowFullscreen public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the inline frame is willing to be placed into full screen mode. See Using full-screen mode for details.</haxe_doc>
		</allowFullscreen>
		<allowPaymentRequest public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the Payment Request API may be invoked inside a cross-origin iframe.</haxe_doc>
		</allowPaymentRequest>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, indicating the width of the frame.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, indicating the height of the frame.</haxe_doc>
		</height>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerPolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document`, the active document in the inline frame's nested browsing context.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy`, the window proxy for the nested browsing context.</haxe_doc>
		</contentWindow>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that specifies the alignment of the frame with respect to the surrounding context.</haxe_doc>
		</align>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether the browser should provide scrollbars for the frame.</haxe_doc>
		</scrolling>
		<frameBorder public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether to create borders between frames.</haxe_doc>
		</frameBorder>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the URI of a long description of the frame.</haxe_doc>
		</longDesc>
		<marginHeight public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the height of the frame margin.</haxe_doc>
		</marginHeight>
		<marginWidth public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the width of the frame margin.</haxe_doc>
		</marginWidth>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLIFrameElement` interface provides special properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.

	Documentation [HTMLIFrameElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLIFrameElement"</e></m></meta>
	</class>
	<class path="js.html.ImageElement" params="" file="/home/vsts/work/1/s/std/js/html/ImageElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute,  thus indicating fallback context for the image.</haxe_doc>
		</alt>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the full URL of the image including base URI.</haxe_doc>
		</src>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the CORS setting for this image element. See CORS settings attributes for further details.</haxe_doc>
		</crossOrigin>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, containing a partial URL of a map element.</haxe_doc>
		</useMap>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use in order to fetch the image.</haxe_doc>
		</referrerPolicy>
		<isMap public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `ismap` HTML attribute, indicating that the image is part of a server-side image map.</haxe_doc>
		</isMap>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `width` HTML attribute, indicating the rendered width of the image in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `height` HTML attribute, indicating the rendered height of the image in CSS pixels.</haxe_doc>
		</height>
		<decoding public="1">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a hint given to the browser on how it should decode the image.</haxe_doc>
		</decoding>
		<naturalWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show `0`.</haxe_doc>
		</naturalWidth>
		<naturalHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows `0`.</haxe_doc>
		</naturalHeight>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no `HTMLImageElement.src` value.</haxe_doc>
		</complete>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the element.</haxe_doc>
		</name>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the alignment of the image with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space on either side of the image.</haxe_doc>
		</hspace>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space above and below the image.</haxe_doc>
		</vspace>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI of a long description of the image.</haxe_doc>
		</longDesc>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that is responsible for the width of the border surrounding the image. This is now deprecated and the CSS `border` property should be used instead.</haxe_doc>
		</border>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `sizes` HTML attribute.</haxe_doc>
		</sizes>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the URL to the currently displayed image (which may change, for example in response to media queries).</haxe_doc>
		</currentSrc>
		<lowsrc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that refers to a low-quality (but faster to load) copy of the image.</haxe_doc>
		</lowsrc>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the horizontal offset from the nearest layer. This property mimics an old Netscape 4 behavior.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the vertical offset from the nearest layer. This property is also similar to behavior of an old Netscape 4.</haxe_doc>
		</y>
		<haxe_doc><![CDATA[The `HTMLImageElement` interface provides special properties and methods  for manipulating the layout and presentation of `img` elements.

	Documentation [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLImageElement"</e></m></meta>
	</class>
	<class path="js.html.Image" params="" file="/home/vsts/work/1/s/std/js/html/Image.hx" extern="1">
		<extends path="js.html.ImageElement"/>
		<new public="1" set="method">
			<f a="?width:?height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Image"</e></m></meta>
	</class>
	<class path="js.html.ImageBitmap" params="" file="/home/vsts/work/1/s/std/js/html/ImageBitmap.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the width, in CSS pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the height, in CSS pixels, of the `ImageData`.</haxe_doc>
		</height>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes of all graphical resources associated with an `ImageBitmap`.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `ImageBitmap` interface represents a bitmap image which can be drawn to a `canvas` without undue latency. It can be created from a variety of source objects using the `createImageBitmap()` factory method. `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.

	Documentation [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmap"</e></m></meta>
	</class>
	<abstract path="js.html.ImageBitmapFormat" params="" file="/home/vsts/work/1/s/std/js/html/ImageBitmapFormat.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ImageBitmapFormat.ImageBitmapFormat_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ImageBitmapFormat.hx" private="1" module="js.html.ImageBitmapFormat" extern="1" final="1">
	<RGBA32 public="1" get="inline" set="null" expr="cast &quot;RGBA32&quot;" line="28" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "RGBA32"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBA32>
	<BGRA32 public="1" get="inline" set="null" expr="cast &quot;BGRA32&quot;" line="29" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "BGRA32"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGRA32>
	<RGB24 public="1" get="inline" set="null" expr="cast &quot;RGB24&quot;" line="30" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "RGB24"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGB24>
	<BGR24 public="1" get="inline" set="null" expr="cast &quot;BGR24&quot;" line="31" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "BGR24"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGR24>
	<GRAY8 public="1" get="inline" set="null" expr="cast &quot;GRAY8&quot;" line="32" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "GRAY8"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRAY8>
	<YUV444P public="1" get="inline" set="null" expr="cast &quot;YUV444P&quot;" line="33" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "YUV444P"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YUV444P>
	<YUV422P public="1" get="inline" set="null" expr="cast &quot;YUV422P&quot;" line="34" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "YUV422P"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YUV422P>
	<YUV420P public="1" get="inline" set="null" expr="cast &quot;YUV420P&quot;" line="35" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "YUV420P"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YUV420P>
	<YUV420SP_NV12 public="1" get="inline" set="null" expr="cast &quot;YUV420SP_NV12&quot;" line="36" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "YUV420SP_NV12"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YUV420SP_NV12>
	<YUV420SP_NV21 public="1" get="inline" set="null" expr="cast &quot;YUV420SP_NV21&quot;" line="37" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "YUV420SP_NV21"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YUV420SP_NV21>
	<HSV public="1" get="inline" set="null" expr="cast &quot;HSV&quot;" line="38" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "HSV"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HSV>
	<LAB public="1" get="inline" set="null" expr="cast &quot;Lab&quot;" line="39" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "Lab"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LAB>
	<DEPTH public="1" get="inline" set="null" expr="cast &quot;DEPTH&quot;" line="40" static="1">
		<x path="js.html.ImageBitmapFormat"/>
		<meta>
			<m n=":value"><e>cast "DEPTH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEPTH>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ImageBitmapFormat.ImageBitmapFormat_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ImageBitmapFormat.hx" private="1" module="js.html.ImageBitmapFormat" extern="1" final="1">
		<RGBA32 public="1" get="inline" set="null" expr="cast &quot;RGBA32&quot;" line="28" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "RGBA32"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBA32>
		<BGRA32 public="1" get="inline" set="null" expr="cast &quot;BGRA32&quot;" line="29" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "BGRA32"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGRA32>
		<RGB24 public="1" get="inline" set="null" expr="cast &quot;RGB24&quot;" line="30" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "RGB24"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGB24>
		<BGR24 public="1" get="inline" set="null" expr="cast &quot;BGR24&quot;" line="31" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "BGR24"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGR24>
		<GRAY8 public="1" get="inline" set="null" expr="cast &quot;GRAY8&quot;" line="32" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "GRAY8"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRAY8>
		<YUV444P public="1" get="inline" set="null" expr="cast &quot;YUV444P&quot;" line="33" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "YUV444P"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YUV444P>
		<YUV422P public="1" get="inline" set="null" expr="cast &quot;YUV422P&quot;" line="34" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "YUV422P"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YUV422P>
		<YUV420P public="1" get="inline" set="null" expr="cast &quot;YUV420P&quot;" line="35" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "YUV420P"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YUV420P>
		<YUV420SP_NV12 public="1" get="inline" set="null" expr="cast &quot;YUV420SP_NV12&quot;" line="36" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "YUV420SP_NV12"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YUV420SP_NV12>
		<YUV420SP_NV21 public="1" get="inline" set="null" expr="cast &quot;YUV420SP_NV21&quot;" line="37" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "YUV420SP_NV21"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YUV420SP_NV21>
		<HSV public="1" get="inline" set="null" expr="cast &quot;HSV&quot;" line="38" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "HSV"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HSV>
		<LAB public="1" get="inline" set="null" expr="cast &quot;Lab&quot;" line="39" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "Lab"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LAB>
		<DEPTH public="1" get="inline" set="null" expr="cast &quot;DEPTH&quot;" line="40" static="1">
			<x path="js.html.ImageBitmapFormat"/>
			<meta>
				<m n=":value"><e>cast "DEPTH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEPTH>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.ImageBitmapRenderingContext" params="" file="/home/vsts/work/1/s/std/js/html/ImageBitmapRenderingContext.hx" extern="1">
		<transferFromImageBitmap public="1" set="method">
			<f a="bitmap">
				<c path="js.html.ImageBitmap"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays the given `ImageBitmap` in the canvas associated with this rendering context. Ownership of the `ImageBitmap` is transferred to the canvas. This was previously named `transferImageBitmap()`, but was renamed in a spec change. The old name is being kept as an alias to avoid code breakage.</haxe_doc>
		</transferFromImageBitmap>
		<transferImageBitmap public="1" set="method"><f a="bitmap">
	<c path="js.html.ImageBitmap"/>
	<x path="Void"/>
</f></transferImageBitmap>
		<haxe_doc><![CDATA[The `ImageBitmapRenderingContext` interface is a canvas rendering context which only provides the functionality to replace the canvas's contents with the given `ImageBitmap`. Its context id (the first argument to `HTMLCanvasElement.getContext()` or `OffscreenCanvas.getContext()`  is `"bitmaprenderer"`.

	Documentation [ImageBitmapRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmapRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.ImageCapture" params="" file="/home/vsts/work/1/s/std/js/html/ImageCapture.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<videoStreamTrack public="1" set="null"><c path="js.html.VideoStreamTrack"/></videoStreamTrack>
		<onphoto public="1"><x path="haxe.Function"/></onphoto>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<takePhoto public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Takes a single exposure using the video capture device sourcing a `MediaStreamTrack` and returns a `Promise` that resolves with a `Blob` containing the data.
		@throws DOMError</haxe_doc>
		</takePhoto>
		<new public="1" set="method">
			<f a="track">
				<c path="js.html.VideoStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ImageCapture` interface of the MediaStream Image Capture API provides an interface for capturing images from a photographic device referenced through a valid `MediaStreamTrack`.

	Documentation [ImageCapture](https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageCapture"</e></m></meta>
	</class>
	<class path="js.html.ImageCaptureError" params="" file="/home/vsts/work/1/s/std/js/html/ImageCaptureError.hx" extern="1">
		<FRAME_GRAB_ERROR public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FRAME_GRAB_ERROR>
		<SETTINGS_ERROR public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SETTINGS_ERROR>
		<PHOTO_ERROR public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</PHOTO_ERROR>
		<ERROR_UNKNOWN public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</ERROR_UNKNOWN>
		<code public="1" set="null"><x path="Int"/></code>
		<message public="1" set="null"><c path="String"/></message>
		<meta><m n=":native"><e>"ImageCaptureError"</e></m></meta>
	</class>
	<class path="js.html.ImageCaptureErrorEvent" params="" file="/home/vsts/work/1/s/std/js/html/ImageCaptureErrorEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<imageCaptureError public="1" set="null"><c path="js.html.ImageCaptureError"/></imageCaptureError>
		<new public="1" set="method">
			<f a="type:?imageCaptureErrorInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.ImageCaptureErrorEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ImageCaptureErrorEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ImageCaptureErrorEventInit" params="" file="/home/vsts/work/1/s/std/js/html/ImageCaptureErrorEventInit.hx"><a>
	<imageCaptureError>
		<x path="Null"><c path="js.html.ImageCaptureError"/></x>
		<meta><m n=":optional"/></meta>
	</imageCaptureError>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.ImageData" params="" file="/home/vsts/work/1/s/std/js/html/ImageData.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual width, in pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual height, in pixels, of the `ImageData`.</haxe_doc>
		</height>
		<data public="1" set="null">
			<c path="js.lib.Uint8ClampedArray"/>
			<haxe_doc>Is a `Uint8ClampedArray` representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` (included).</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:sw:?sh">
				<c path="js.lib.Uint8ClampedArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="sw:sh">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `ImageData` interface represents the underlying pixel data of an area of a `canvas` element. It is created using the `ImageData()` constructor or creator methods on the `CanvasRenderingContext2D` object associated with a canvas: `createImageData()` and `getImageData()`. It can also be used to set a part of the canvas by using `putImageData()`.

	Documentation [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageData>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageData"</e></m></meta>
	</class>
	<class path="js.html.InputElement" params="" file="/home/vsts/work/1/s/std/js/html/InputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<accept public="1"><c path="String"/></accept>
		<alt public="1"><c path="String"/></alt>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<checked public="1"><x path="Bool"/></checked>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<files public="1"><c path="js.html.FileList"/></files>
		<formAction public="1"><c path="String"/></formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1"><c path="String"/></formMethod>
		<formNoValidate public="1"><x path="Bool"/></formNoValidate>
		<formTarget public="1"><c path="String"/></formTarget>
		<height public="1"><x path="Int"/></height>
		<indeterminate public="1"><x path="Bool"/></indeterminate>
		<list public="1" set="null"><c path="js.html.Element"/></list>
		<max public="1"><c path="String"/></max>
		<maxLength public="1"><x path="Int"/></maxLength>
		<min public="1"><c path="String"/></min>
		<minLength public="1"><x path="Int"/></minLength>
		<multiple public="1"><x path="Bool"/></multiple>
		<name public="1"><c path="String"/></name>
		<pattern public="1"><c path="String"/></pattern>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<size public="1"><x path="Int"/></size>
		<src public="1"><c path="String"/></src>
		<step public="1"><c path="String"/></step>
		<type public="1"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<valueAsDate public="1"><c path="Date"/></valueAsDate>
		<valueAsNumber public="1"><x path="Float"/></valueAsNumber>
		<width public="1"><x path="Int"/></width>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<align public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents the alignment of the element. Use CSS instead.</haxe_doc>
		</align>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents a client-side image map.</haxe_doc>
		</useMap>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<stepUp public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Increments the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value.,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`.
		 
		 
		@throws DOMError</haxe_doc>
		</stepUp>
		<stepDown public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Decrements the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`. 
		 
		 
		@throws DOMError</haxe_doc>
		</stepDown>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLInputElement` interface provides special properties and methods for manipulating the layout and presentation of input elements.

	Documentation [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLInputElement"</e></m></meta>
	</class>
	<class path="js.html.InputEvent" params="" file="/home/vsts/work/1/s/std/js/html/InputEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<isComposing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` value indicating if the event is fired after `compositionstart` and before `compositionend`.</haxe_doc>
		</isComposing>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.InputEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `InputEvent` interface represents an event notifying of editable content change.

	Documentation [InputEvent](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/InputEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"InputEvent"</e></m></meta>
	</class>
	<typedef path="js.html.InputEventInit" params="" file="/home/vsts/work/1/s/std/js/html/InputEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<isComposing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isComposing>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.Int16Array" params="" file="/home/vsts/work/1/s/std/js/html/Int16Array.hx">
		<c path="js.lib.Int16Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.Int32Array" params="" file="/home/vsts/work/1/s/std/js/html/Int32Array.hx">
		<c path="js.lib.Int32Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.Int8Array" params="" file="/home/vsts/work/1/s/std/js/html/Int8Array.hx">
		<c path="js.lib.Int8Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.html.IntersectionObserver" params="" file="/home/vsts/work/1/s/std/js/html/IntersectionObserver.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>A specific ancestor of the target `element` being observed. If no value was passed to the constructor or this is `null`, the top-level document's viewport is used.</haxe_doc>
		</root>
		<rootMargin public="1" set="null">
			<c path="String"/>
			<haxe_doc>An offset rectangle applied to the root's `bounding box` when calculating intersections, effectively shrinking or growing the root for calculation purposes. The value returned by this property may not be the same as the one specified when calling the constructor as it may be changed to match internal requirements. Each offset can be expressed in pixels (`px`) or as a percentage (`%`). The default is "0px 0px 0px 0px".</haxe_doc>
		</rootMargin>
		<thresholds public="1" set="null">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. Notifications for a target are generated when any of the thresholds are crossed for that target. If no value was passed to the constructor, 0 is used.</haxe_doc>
		</thresholds>
		<observe public="1" set="method">
			<f a="target">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Tells the `IntersectionObserver` a target element to observe.</haxe_doc>
		</observe>
		<unobserve public="1" set="method">
			<f a="target">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Tells the `IntersectionObserver` to stop observing a particular target element.</haxe_doc>
		</unobserve>
		<disconnect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the `IntersectionObserver` object from observing any target.</haxe_doc>
		</disconnect>
		<takeRecords public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.IntersectionObserverEntry"/></c></f>
			<haxe_doc>Returns an array of `IntersectionObserverEntry` objects for all observed targets.</haxe_doc>
		</takeRecords>
		<new public="1" set="method">
			<f a="intersectionCallback:?options">
				<f a=":">
					<c path="Array"><c path="js.html.IntersectionObserverEntry"/></c>
					<c path="js.html.IntersectionObserver"/>
					<x path="Void"/>
				</f>
				<x path="Null"><t path="js.html.IntersectionObserverInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.

	Documentation [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver>]]></haxe_doc>
		<meta><m n=":native"><e>"IntersectionObserver"</e></m></meta>
	</class>
	<class path="js.html.IntersectionObserverEntry" params="" file="/home/vsts/work/1/s/std/js/html/IntersectionObserverEntry.hx" extern="1">
		<time public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` indicating the time at which the intersection was recorded, relative to the `IntersectionObserver`'s time origin.</haxe_doc>
		</time>
		<rootBounds public="1" set="null">
			<c path="js.html.DOMRectReadOnly"/>
			<haxe_doc>Returns a `DOMRectReadOnly` for the intersection observer's root.</haxe_doc>
		</rootBounds>
		<boundingClientRect public="1" set="null">
			<c path="js.html.DOMRectReadOnly"/>
			<haxe_doc>Returns the bounds rectangle of the target element as a `DOMRectReadOnly`. The bounds are computed as described in the documentation for `Element.getBoundingClientRect()`.</haxe_doc>
		</boundingClientRect>
		<intersectionRect public="1" set="null">
			<c path="js.html.DOMRectReadOnly"/>
			<haxe_doc>Returns a `DOMRectReadOnly` representing the target's visible area.</haxe_doc>
		</intersectionRect>
		<isIntersecting public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value which is `true` if the target element intersects with the intersection observer's root. If this is `true`, then, the `IntersectionObserverEntry` describes a transition into a state of intersection; if it's `false`, then you know the transition is from intersecting to not-intersecting.</haxe_doc>
		</isIntersecting>
		<intersectionRatio public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the ratio of the `intersectionRect` to the `boundingClientRect`.</haxe_doc>
		</intersectionRatio>
		<target public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The `Element` whose intersection with the root changed.</haxe_doc>
		</target>
		<haxe_doc><![CDATA[The `IntersectionObserverEntry` interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.

	Documentation [IntersectionObserverEntry](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"IntersectionObserverEntry"</e></m></meta>
	</class>
	<typedef path="js.html.IntersectionObserverInit" params="" file="/home/vsts/work/1/s/std/js/html/IntersectionObserverInit.hx"><a>
	<threshold>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</threshold>
	<rootMargin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</rootMargin>
	<root>
		<x path="Null"><c path="js.html.Element"/></x>
		<meta><m n=":optional"/></meta>
	</root>
</a></typedef>
	<typedef path="js.html.IntlUtils" params="" file="/home/vsts/work/1/s/std/js/html/IntlUtils.hx"><a>
	<getLocaleInfo set="method">
		<f a="locales">
			<c path="Array"><c path="String"/></c>
			<t path="js.html.LocaleInfo"/>
		</f>
		<haxe_doc>@throws DOMError</haxe_doc>
	</getLocaleInfo>
	<getDisplayNames set="method">
		<f a="locales:?options">
			<c path="Array"><c path="String"/></c>
			<t path="js.html.DisplayNameOptions"/>
			<t path="js.html.DisplayNameResult"/>
		</f>
		<haxe_doc>@throws DOMError</haxe_doc>
	</getDisplayNames>
</a></typedef>
	<abstract path="js.html.IterationCompositeOperation" params="" file="/home/vsts/work/1/s/std/js/html/IterationCompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" extern="1" final="1">
	<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="28" static="1">
		<x path="js.html.IterationCompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "replace"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPLACE>
	<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="29" static="1">
		<x path="js.html.IterationCompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "accumulate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACCUMULATE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" extern="1" final="1">
		<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="28" static="1">
			<x path="js.html.IterationCompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "replace"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPLACE>
		<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="29" static="1">
			<x path="js.html.IterationCompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "accumulate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACCUMULATE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.KeyEvent" params="" file="/home/vsts/work/1/s/std/js/html/KeyEvent.hx" extern="1">
		<DOM_VK_CANCEL public="1" get="inline" set="null" expr="3" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_VK_CANCEL>
		<DOM_VK_HELP public="1" get="inline" set="null" expr="6" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</DOM_VK_HELP>
		<DOM_VK_BACK_SPACE public="1" get="inline" set="null" expr="8" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOM_VK_BACK_SPACE>
		<DOM_VK_TAB public="1" get="inline" set="null" expr="9" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOM_VK_TAB>
		<DOM_VK_CLEAR public="1" get="inline" set="null" expr="12" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</DOM_VK_CLEAR>
		<DOM_VK_RETURN public="1" get="inline" set="null" expr="13" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</DOM_VK_RETURN>
		<DOM_VK_SHIFT public="1" get="inline" set="null" expr="16" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOM_VK_SHIFT>
		<DOM_VK_CONTROL public="1" get="inline" set="null" expr="17" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</DOM_VK_CONTROL>
		<DOM_VK_ALT public="1" get="inline" set="null" expr="18" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</DOM_VK_ALT>
		<DOM_VK_PAUSE public="1" get="inline" set="null" expr="19" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</DOM_VK_PAUSE>
		<DOM_VK_CAPS_LOCK public="1" get="inline" set="null" expr="20" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</DOM_VK_CAPS_LOCK>
		<DOM_VK_KANA public="1" get="inline" set="null" expr="21" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_KANA>
		<DOM_VK_HANGUL public="1" get="inline" set="null" expr="21" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_HANGUL>
		<DOM_VK_EISU public="1" get="inline" set="null" expr="22" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</DOM_VK_EISU>
		<DOM_VK_JUNJA public="1" get="inline" set="null" expr="23" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</DOM_VK_JUNJA>
		<DOM_VK_FINAL public="1" get="inline" set="null" expr="24" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</DOM_VK_FINAL>
		<DOM_VK_HANJA public="1" get="inline" set="null" expr="25" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_HANJA>
		<DOM_VK_KANJI public="1" get="inline" set="null" expr="25" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_KANJI>
		<DOM_VK_ESCAPE public="1" get="inline" set="null" expr="27" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</DOM_VK_ESCAPE>
		<DOM_VK_CONVERT public="1" get="inline" set="null" expr="28" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</DOM_VK_CONVERT>
		<DOM_VK_NONCONVERT public="1" get="inline" set="null" expr="29" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</DOM_VK_NONCONVERT>
		<DOM_VK_ACCEPT public="1" get="inline" set="null" expr="30" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</DOM_VK_ACCEPT>
		<DOM_VK_MODECHANGE public="1" get="inline" set="null" expr="31" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</DOM_VK_MODECHANGE>
		<DOM_VK_SPACE public="1" get="inline" set="null" expr="32" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOM_VK_SPACE>
		<DOM_VK_PAGE_UP public="1" get="inline" set="null" expr="33" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</DOM_VK_PAGE_UP>
		<DOM_VK_PAGE_DOWN public="1" get="inline" set="null" expr="34" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34</e></m></meta>
		</DOM_VK_PAGE_DOWN>
		<DOM_VK_END public="1" get="inline" set="null" expr="35" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</DOM_VK_END>
		<DOM_VK_HOME public="1" get="inline" set="null" expr="36" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36</e></m></meta>
		</DOM_VK_HOME>
		<DOM_VK_LEFT public="1" get="inline" set="null" expr="37" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37</e></m></meta>
		</DOM_VK_LEFT>
		<DOM_VK_UP public="1" get="inline" set="null" expr="38" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>38</e></m></meta>
		</DOM_VK_UP>
		<DOM_VK_RIGHT public="1" get="inline" set="null" expr="39" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>39</e></m></meta>
		</DOM_VK_RIGHT>
		<DOM_VK_DOWN public="1" get="inline" set="null" expr="40" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>40</e></m></meta>
		</DOM_VK_DOWN>
		<DOM_VK_SELECT public="1" get="inline" set="null" expr="41" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>41</e></m></meta>
		</DOM_VK_SELECT>
		<DOM_VK_PRINT public="1" get="inline" set="null" expr="42" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>42</e></m></meta>
		</DOM_VK_PRINT>
		<DOM_VK_EXECUTE public="1" get="inline" set="null" expr="43" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>43</e></m></meta>
		</DOM_VK_EXECUTE>
		<DOM_VK_PRINTSCREEN public="1" get="inline" set="null" expr="44" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>44</e></m></meta>
		</DOM_VK_PRINTSCREEN>
		<DOM_VK_INSERT public="1" get="inline" set="null" expr="45" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>45</e></m></meta>
		</DOM_VK_INSERT>
		<DOM_VK_DELETE public="1" get="inline" set="null" expr="46" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</DOM_VK_DELETE>
		<DOM_VK_0 public="1" get="inline" set="null" expr="48" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>48</e></m></meta>
		</DOM_VK_0>
		<DOM_VK_1 public="1" get="inline" set="null" expr="49" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>49</e></m></meta>
		</DOM_VK_1>
		<DOM_VK_2 public="1" get="inline" set="null" expr="50" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</DOM_VK_2>
		<DOM_VK_3 public="1" get="inline" set="null" expr="51" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>51</e></m></meta>
		</DOM_VK_3>
		<DOM_VK_4 public="1" get="inline" set="null" expr="52" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>52</e></m></meta>
		</DOM_VK_4>
		<DOM_VK_5 public="1" get="inline" set="null" expr="53" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>53</e></m></meta>
		</DOM_VK_5>
		<DOM_VK_6 public="1" get="inline" set="null" expr="54" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>54</e></m></meta>
		</DOM_VK_6>
		<DOM_VK_7 public="1" get="inline" set="null" expr="55" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>55</e></m></meta>
		</DOM_VK_7>
		<DOM_VK_8 public="1" get="inline" set="null" expr="56" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</DOM_VK_8>
		<DOM_VK_9 public="1" get="inline" set="null" expr="57" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>57</e></m></meta>
		</DOM_VK_9>
		<DOM_VK_COLON public="1" get="inline" set="null" expr="58" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>58</e></m></meta>
		</DOM_VK_COLON>
		<DOM_VK_SEMICOLON public="1" get="inline" set="null" expr="59" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>59</e></m></meta>
		</DOM_VK_SEMICOLON>
		<DOM_VK_LESS_THAN public="1" get="inline" set="null" expr="60" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</DOM_VK_LESS_THAN>
		<DOM_VK_EQUALS public="1" get="inline" set="null" expr="61" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>61</e></m></meta>
		</DOM_VK_EQUALS>
		<DOM_VK_GREATER_THAN public="1" get="inline" set="null" expr="62" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>62</e></m></meta>
		</DOM_VK_GREATER_THAN>
		<DOM_VK_QUESTION_MARK public="1" get="inline" set="null" expr="63" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>63</e></m></meta>
		</DOM_VK_QUESTION_MARK>
		<DOM_VK_AT public="1" get="inline" set="null" expr="64" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</DOM_VK_AT>
		<DOM_VK_A public="1" get="inline" set="null" expr="65" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65</e></m></meta>
		</DOM_VK_A>
		<DOM_VK_B public="1" get="inline" set="null" expr="66" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>66</e></m></meta>
		</DOM_VK_B>
		<DOM_VK_C public="1" get="inline" set="null" expr="67" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>67</e></m></meta>
		</DOM_VK_C>
		<DOM_VK_D public="1" get="inline" set="null" expr="68" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68</e></m></meta>
		</DOM_VK_D>
		<DOM_VK_E public="1" get="inline" set="null" expr="69" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>69</e></m></meta>
		</DOM_VK_E>
		<DOM_VK_F public="1" get="inline" set="null" expr="70" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>70</e></m></meta>
		</DOM_VK_F>
		<DOM_VK_G public="1" get="inline" set="null" expr="71" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>71</e></m></meta>
		</DOM_VK_G>
		<DOM_VK_H public="1" get="inline" set="null" expr="72" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>72</e></m></meta>
		</DOM_VK_H>
		<DOM_VK_I public="1" get="inline" set="null" expr="73" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>73</e></m></meta>
		</DOM_VK_I>
		<DOM_VK_J public="1" get="inline" set="null" expr="74" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>74</e></m></meta>
		</DOM_VK_J>
		<DOM_VK_K public="1" get="inline" set="null" expr="75" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>75</e></m></meta>
		</DOM_VK_K>
		<DOM_VK_L public="1" get="inline" set="null" expr="76" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>76</e></m></meta>
		</DOM_VK_L>
		<DOM_VK_M public="1" get="inline" set="null" expr="77" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>77</e></m></meta>
		</DOM_VK_M>
		<DOM_VK_N public="1" get="inline" set="null" expr="78" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>78</e></m></meta>
		</DOM_VK_N>
		<DOM_VK_O public="1" get="inline" set="null" expr="79" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>79</e></m></meta>
		</DOM_VK_O>
		<DOM_VK_P public="1" get="inline" set="null" expr="80" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</DOM_VK_P>
		<DOM_VK_Q public="1" get="inline" set="null" expr="81" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>81</e></m></meta>
		</DOM_VK_Q>
		<DOM_VK_R public="1" get="inline" set="null" expr="82" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>82</e></m></meta>
		</DOM_VK_R>
		<DOM_VK_S public="1" get="inline" set="null" expr="83" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>83</e></m></meta>
		</DOM_VK_S>
		<DOM_VK_T public="1" get="inline" set="null" expr="84" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>84</e></m></meta>
		</DOM_VK_T>
		<DOM_VK_U public="1" get="inline" set="null" expr="85" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>85</e></m></meta>
		</DOM_VK_U>
		<DOM_VK_V public="1" get="inline" set="null" expr="86" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86</e></m></meta>
		</DOM_VK_V>
		<DOM_VK_W public="1" get="inline" set="null" expr="87" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>87</e></m></meta>
		</DOM_VK_W>
		<DOM_VK_X public="1" get="inline" set="null" expr="88" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>88</e></m></meta>
		</DOM_VK_X>
		<DOM_VK_Y public="1" get="inline" set="null" expr="89" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>89</e></m></meta>
		</DOM_VK_Y>
		<DOM_VK_Z public="1" get="inline" set="null" expr="90" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>90</e></m></meta>
		</DOM_VK_Z>
		<DOM_VK_WIN public="1" get="inline" set="null" expr="91" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>91</e></m></meta>
		</DOM_VK_WIN>
		<DOM_VK_CONTEXT_MENU public="1" get="inline" set="null" expr="93" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>93</e></m></meta>
		</DOM_VK_CONTEXT_MENU>
		<DOM_VK_SLEEP public="1" get="inline" set="null" expr="95" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>95</e></m></meta>
		</DOM_VK_SLEEP>
		<DOM_VK_NUMPAD0 public="1" get="inline" set="null" expr="96" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>96</e></m></meta>
		</DOM_VK_NUMPAD0>
		<DOM_VK_NUMPAD1 public="1" get="inline" set="null" expr="97" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>97</e></m></meta>
		</DOM_VK_NUMPAD1>
		<DOM_VK_NUMPAD2 public="1" get="inline" set="null" expr="98" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>98</e></m></meta>
		</DOM_VK_NUMPAD2>
		<DOM_VK_NUMPAD3 public="1" get="inline" set="null" expr="99" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>99</e></m></meta>
		</DOM_VK_NUMPAD3>
		<DOM_VK_NUMPAD4 public="1" get="inline" set="null" expr="100" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>100</e></m></meta>
		</DOM_VK_NUMPAD4>
		<DOM_VK_NUMPAD5 public="1" get="inline" set="null" expr="101" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>101</e></m></meta>
		</DOM_VK_NUMPAD5>
		<DOM_VK_NUMPAD6 public="1" get="inline" set="null" expr="102" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>102</e></m></meta>
		</DOM_VK_NUMPAD6>
		<DOM_VK_NUMPAD7 public="1" get="inline" set="null" expr="103" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>103</e></m></meta>
		</DOM_VK_NUMPAD7>
		<DOM_VK_NUMPAD8 public="1" get="inline" set="null" expr="104" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</DOM_VK_NUMPAD8>
		<DOM_VK_NUMPAD9 public="1" get="inline" set="null" expr="105" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>105</e></m></meta>
		</DOM_VK_NUMPAD9>
		<DOM_VK_MULTIPLY public="1" get="inline" set="null" expr="106" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>106</e></m></meta>
		</DOM_VK_MULTIPLY>
		<DOM_VK_ADD public="1" get="inline" set="null" expr="107" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>107</e></m></meta>
		</DOM_VK_ADD>
		<DOM_VK_SEPARATOR public="1" get="inline" set="null" expr="108" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>108</e></m></meta>
		</DOM_VK_SEPARATOR>
		<DOM_VK_SUBTRACT public="1" get="inline" set="null" expr="109" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</DOM_VK_SUBTRACT>
		<DOM_VK_DECIMAL public="1" get="inline" set="null" expr="110" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>110</e></m></meta>
		</DOM_VK_DECIMAL>
		<DOM_VK_DIVIDE public="1" get="inline" set="null" expr="111" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</DOM_VK_DIVIDE>
		<DOM_VK_F1 public="1" get="inline" set="null" expr="112" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>112</e></m></meta>
		</DOM_VK_F1>
		<DOM_VK_F2 public="1" get="inline" set="null" expr="113" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>113</e></m></meta>
		</DOM_VK_F2>
		<DOM_VK_F3 public="1" get="inline" set="null" expr="114" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>114</e></m></meta>
		</DOM_VK_F3>
		<DOM_VK_F4 public="1" get="inline" set="null" expr="115" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>115</e></m></meta>
		</DOM_VK_F4>
		<DOM_VK_F5 public="1" get="inline" set="null" expr="116" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>116</e></m></meta>
		</DOM_VK_F5>
		<DOM_VK_F6 public="1" get="inline" set="null" expr="117" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>117</e></m></meta>
		</DOM_VK_F6>
		<DOM_VK_F7 public="1" get="inline" set="null" expr="118" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>118</e></m></meta>
		</DOM_VK_F7>
		<DOM_VK_F8 public="1" get="inline" set="null" expr="119" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>119</e></m></meta>
		</DOM_VK_F8>
		<DOM_VK_F9 public="1" get="inline" set="null" expr="120" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>120</e></m></meta>
		</DOM_VK_F9>
		<DOM_VK_F10 public="1" get="inline" set="null" expr="121" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>121</e></m></meta>
		</DOM_VK_F10>
		<DOM_VK_F11 public="1" get="inline" set="null" expr="122" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>122</e></m></meta>
		</DOM_VK_F11>
		<DOM_VK_F12 public="1" get="inline" set="null" expr="123" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>123</e></m></meta>
		</DOM_VK_F12>
		<DOM_VK_F13 public="1" get="inline" set="null" expr="124" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>124</e></m></meta>
		</DOM_VK_F13>
		<DOM_VK_F14 public="1" get="inline" set="null" expr="125" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>125</e></m></meta>
		</DOM_VK_F14>
		<DOM_VK_F15 public="1" get="inline" set="null" expr="126" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>126</e></m></meta>
		</DOM_VK_F15>
		<DOM_VK_F16 public="1" get="inline" set="null" expr="127" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>127</e></m></meta>
		</DOM_VK_F16>
		<DOM_VK_F17 public="1" get="inline" set="null" expr="128" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</DOM_VK_F17>
		<DOM_VK_F18 public="1" get="inline" set="null" expr="129" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>129</e></m></meta>
		</DOM_VK_F18>
		<DOM_VK_F19 public="1" get="inline" set="null" expr="130" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>130</e></m></meta>
		</DOM_VK_F19>
		<DOM_VK_F20 public="1" get="inline" set="null" expr="131" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>131</e></m></meta>
		</DOM_VK_F20>
		<DOM_VK_F21 public="1" get="inline" set="null" expr="132" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>132</e></m></meta>
		</DOM_VK_F21>
		<DOM_VK_F22 public="1" get="inline" set="null" expr="133" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>133</e></m></meta>
		</DOM_VK_F22>
		<DOM_VK_F23 public="1" get="inline" set="null" expr="134" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>134</e></m></meta>
		</DOM_VK_F23>
		<DOM_VK_F24 public="1" get="inline" set="null" expr="135" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>135</e></m></meta>
		</DOM_VK_F24>
		<DOM_VK_NUM_LOCK public="1" get="inline" set="null" expr="144" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>144</e></m></meta>
		</DOM_VK_NUM_LOCK>
		<DOM_VK_SCROLL_LOCK public="1" get="inline" set="null" expr="145" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>145</e></m></meta>
		</DOM_VK_SCROLL_LOCK>
		<DOM_VK_WIN_OEM_FJ_JISHO public="1" get="inline" set="null" expr="146" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>146</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_JISHO>
		<DOM_VK_WIN_OEM_FJ_MASSHOU public="1" get="inline" set="null" expr="147" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>147</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_MASSHOU>
		<DOM_VK_WIN_OEM_FJ_TOUROKU public="1" get="inline" set="null" expr="148" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>148</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_TOUROKU>
		<DOM_VK_WIN_OEM_FJ_LOYA public="1" get="inline" set="null" expr="149" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>149</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_LOYA>
		<DOM_VK_WIN_OEM_FJ_ROYA public="1" get="inline" set="null" expr="150" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>150</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_ROYA>
		<DOM_VK_CIRCUMFLEX public="1" get="inline" set="null" expr="160" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>160</e></m></meta>
		</DOM_VK_CIRCUMFLEX>
		<DOM_VK_EXCLAMATION public="1" get="inline" set="null" expr="161" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>161</e></m></meta>
		</DOM_VK_EXCLAMATION>
		<DOM_VK_DOUBLE_QUOTE public="1" get="inline" set="null" expr="162" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>162</e></m></meta>
		</DOM_VK_DOUBLE_QUOTE>
		<DOM_VK_HASH public="1" get="inline" set="null" expr="163" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>163</e></m></meta>
		</DOM_VK_HASH>
		<DOM_VK_DOLLAR public="1" get="inline" set="null" expr="164" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>164</e></m></meta>
		</DOM_VK_DOLLAR>
		<DOM_VK_PERCENT public="1" get="inline" set="null" expr="165" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>165</e></m></meta>
		</DOM_VK_PERCENT>
		<DOM_VK_AMPERSAND public="1" get="inline" set="null" expr="166" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>166</e></m></meta>
		</DOM_VK_AMPERSAND>
		<DOM_VK_UNDERSCORE public="1" get="inline" set="null" expr="167" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>167</e></m></meta>
		</DOM_VK_UNDERSCORE>
		<DOM_VK_OPEN_PAREN public="1" get="inline" set="null" expr="168" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>168</e></m></meta>
		</DOM_VK_OPEN_PAREN>
		<DOM_VK_CLOSE_PAREN public="1" get="inline" set="null" expr="169" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>169</e></m></meta>
		</DOM_VK_CLOSE_PAREN>
		<DOM_VK_ASTERISK public="1" get="inline" set="null" expr="170" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>170</e></m></meta>
		</DOM_VK_ASTERISK>
		<DOM_VK_PLUS public="1" get="inline" set="null" expr="171" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>171</e></m></meta>
		</DOM_VK_PLUS>
		<DOM_VK_PIPE public="1" get="inline" set="null" expr="172" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>172</e></m></meta>
		</DOM_VK_PIPE>
		<DOM_VK_HYPHEN_MINUS public="1" get="inline" set="null" expr="173" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>173</e></m></meta>
		</DOM_VK_HYPHEN_MINUS>
		<DOM_VK_OPEN_CURLY_BRACKET public="1" get="inline" set="null" expr="174" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>174</e></m></meta>
		</DOM_VK_OPEN_CURLY_BRACKET>
		<DOM_VK_CLOSE_CURLY_BRACKET public="1" get="inline" set="null" expr="175" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>175</e></m></meta>
		</DOM_VK_CLOSE_CURLY_BRACKET>
		<DOM_VK_TILDE public="1" get="inline" set="null" expr="176" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>176</e></m></meta>
		</DOM_VK_TILDE>
		<DOM_VK_VOLUME_MUTE public="1" get="inline" set="null" expr="181" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>181</e></m></meta>
		</DOM_VK_VOLUME_MUTE>
		<DOM_VK_VOLUME_DOWN public="1" get="inline" set="null" expr="182" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>182</e></m></meta>
		</DOM_VK_VOLUME_DOWN>
		<DOM_VK_VOLUME_UP public="1" get="inline" set="null" expr="183" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>183</e></m></meta>
		</DOM_VK_VOLUME_UP>
		<DOM_VK_COMMA public="1" get="inline" set="null" expr="188" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>188</e></m></meta>
		</DOM_VK_COMMA>
		<DOM_VK_PERIOD public="1" get="inline" set="null" expr="190" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>190</e></m></meta>
		</DOM_VK_PERIOD>
		<DOM_VK_SLASH public="1" get="inline" set="null" expr="191" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>191</e></m></meta>
		</DOM_VK_SLASH>
		<DOM_VK_BACK_QUOTE public="1" get="inline" set="null" expr="192" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>192</e></m></meta>
		</DOM_VK_BACK_QUOTE>
		<DOM_VK_OPEN_BRACKET public="1" get="inline" set="null" expr="219" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>219</e></m></meta>
		</DOM_VK_OPEN_BRACKET>
		<DOM_VK_BACK_SLASH public="1" get="inline" set="null" expr="220" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>220</e></m></meta>
		</DOM_VK_BACK_SLASH>
		<DOM_VK_CLOSE_BRACKET public="1" get="inline" set="null" expr="221" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>221</e></m></meta>
		</DOM_VK_CLOSE_BRACKET>
		<DOM_VK_QUOTE public="1" get="inline" set="null" expr="222" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>222</e></m></meta>
		</DOM_VK_QUOTE>
		<DOM_VK_META public="1" get="inline" set="null" expr="224" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>224</e></m></meta>
		</DOM_VK_META>
		<DOM_VK_ALTGR public="1" get="inline" set="null" expr="225" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>225</e></m></meta>
		</DOM_VK_ALTGR>
		<DOM_VK_WIN_ICO_HELP public="1" get="inline" set="null" expr="227" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>227</e></m></meta>
		</DOM_VK_WIN_ICO_HELP>
		<DOM_VK_WIN_ICO_00 public="1" get="inline" set="null" expr="228" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>228</e></m></meta>
		</DOM_VK_WIN_ICO_00>
		<DOM_VK_PROCESSKEY public="1" get="inline" set="null" expr="229" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>229</e></m></meta>
		</DOM_VK_PROCESSKEY>
		<DOM_VK_WIN_ICO_CLEAR public="1" get="inline" set="null" expr="230" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>230</e></m></meta>
		</DOM_VK_WIN_ICO_CLEAR>
		<DOM_VK_WIN_OEM_RESET public="1" get="inline" set="null" expr="233" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>233</e></m></meta>
		</DOM_VK_WIN_OEM_RESET>
		<DOM_VK_WIN_OEM_JUMP public="1" get="inline" set="null" expr="234" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>234</e></m></meta>
		</DOM_VK_WIN_OEM_JUMP>
		<DOM_VK_WIN_OEM_PA1 public="1" get="inline" set="null" expr="235" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>235</e></m></meta>
		</DOM_VK_WIN_OEM_PA1>
		<DOM_VK_WIN_OEM_PA2 public="1" get="inline" set="null" expr="236" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>236</e></m></meta>
		</DOM_VK_WIN_OEM_PA2>
		<DOM_VK_WIN_OEM_PA3 public="1" get="inline" set="null" expr="237" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>237</e></m></meta>
		</DOM_VK_WIN_OEM_PA3>
		<DOM_VK_WIN_OEM_WSCTRL public="1" get="inline" set="null" expr="238" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>238</e></m></meta>
		</DOM_VK_WIN_OEM_WSCTRL>
		<DOM_VK_WIN_OEM_CUSEL public="1" get="inline" set="null" expr="239" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>239</e></m></meta>
		</DOM_VK_WIN_OEM_CUSEL>
		<DOM_VK_WIN_OEM_ATTN public="1" get="inline" set="null" expr="240" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>240</e></m></meta>
		</DOM_VK_WIN_OEM_ATTN>
		<DOM_VK_WIN_OEM_FINISH public="1" get="inline" set="null" expr="241" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>241</e></m></meta>
		</DOM_VK_WIN_OEM_FINISH>
		<DOM_VK_WIN_OEM_COPY public="1" get="inline" set="null" expr="242" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>242</e></m></meta>
		</DOM_VK_WIN_OEM_COPY>
		<DOM_VK_WIN_OEM_AUTO public="1" get="inline" set="null" expr="243" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>243</e></m></meta>
		</DOM_VK_WIN_OEM_AUTO>
		<DOM_VK_WIN_OEM_ENLW public="1" get="inline" set="null" expr="244" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>244</e></m></meta>
		</DOM_VK_WIN_OEM_ENLW>
		<DOM_VK_WIN_OEM_BACKTAB public="1" get="inline" set="null" expr="245" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>245</e></m></meta>
		</DOM_VK_WIN_OEM_BACKTAB>
		<DOM_VK_ATTN public="1" get="inline" set="null" expr="246" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>246</e></m></meta>
		</DOM_VK_ATTN>
		<DOM_VK_CRSEL public="1" get="inline" set="null" expr="247" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>247</e></m></meta>
		</DOM_VK_CRSEL>
		<DOM_VK_EXSEL public="1" get="inline" set="null" expr="248" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>248</e></m></meta>
		</DOM_VK_EXSEL>
		<DOM_VK_EREOF public="1" get="inline" set="null" expr="249" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>249</e></m></meta>
		</DOM_VK_EREOF>
		<DOM_VK_PLAY public="1" get="inline" set="null" expr="250" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>250</e></m></meta>
		</DOM_VK_PLAY>
		<DOM_VK_ZOOM public="1" get="inline" set="null" expr="251" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>251</e></m></meta>
		</DOM_VK_ZOOM>
		<DOM_VK_PA1 public="1" get="inline" set="null" expr="253" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>253</e></m></meta>
		</DOM_VK_PA1>
		<DOM_VK_WIN_OEM_CLEAR public="1" get="inline" set="null" expr="254" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>254</e></m></meta>
		</DOM_VK_WIN_OEM_CLEAR>
		<initKeyEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?ctrlKey:?altKey:?shiftKey:?metaKey:?keyCode:?charCode" v=":false:false::false:false:false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ charCode : 0, keyCode : 0, metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, cancelable : false, canBubble : false }</e></m></meta>
		</initKeyEvent>
		<meta><m n=":native"><e>"KeyEvent"</e></m></meta>
	</class>
	<class path="js.html.KeyboardEvent" params="" file="/home/vsts/work/1/s/std/js/html/KeyboardEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<DOM_KEY_LOCATION_STANDARD public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_KEY_LOCATION_STANDARD>
		<DOM_KEY_LOCATION_LEFT public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_KEY_LOCATION_LEFT>
		<DOM_KEY_LOCATION_RIGHT public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_KEY_LOCATION_RIGHT>
		<DOM_KEY_LOCATION_NUMPAD public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_KEY_LOCATION_NUMPAD>
		<DOM_VK_CANCEL public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_VK_CANCEL>
		<DOM_VK_HELP public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</DOM_VK_HELP>
		<DOM_VK_BACK_SPACE public="1" get="inline" set="null" expr="8" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOM_VK_BACK_SPACE>
		<DOM_VK_TAB public="1" get="inline" set="null" expr="9" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOM_VK_TAB>
		<DOM_VK_CLEAR public="1" get="inline" set="null" expr="12" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</DOM_VK_CLEAR>
		<DOM_VK_RETURN public="1" get="inline" set="null" expr="13" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</DOM_VK_RETURN>
		<DOM_VK_SHIFT public="1" get="inline" set="null" expr="16" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOM_VK_SHIFT>
		<DOM_VK_CONTROL public="1" get="inline" set="null" expr="17" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</DOM_VK_CONTROL>
		<DOM_VK_ALT public="1" get="inline" set="null" expr="18" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</DOM_VK_ALT>
		<DOM_VK_PAUSE public="1" get="inline" set="null" expr="19" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</DOM_VK_PAUSE>
		<DOM_VK_CAPS_LOCK public="1" get="inline" set="null" expr="20" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</DOM_VK_CAPS_LOCK>
		<DOM_VK_KANA public="1" get="inline" set="null" expr="21" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_KANA>
		<DOM_VK_HANGUL public="1" get="inline" set="null" expr="21" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_HANGUL>
		<DOM_VK_EISU public="1" get="inline" set="null" expr="22" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</DOM_VK_EISU>
		<DOM_VK_JUNJA public="1" get="inline" set="null" expr="23" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</DOM_VK_JUNJA>
		<DOM_VK_FINAL public="1" get="inline" set="null" expr="24" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</DOM_VK_FINAL>
		<DOM_VK_HANJA public="1" get="inline" set="null" expr="25" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_HANJA>
		<DOM_VK_KANJI public="1" get="inline" set="null" expr="25" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_KANJI>
		<DOM_VK_ESCAPE public="1" get="inline" set="null" expr="27" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</DOM_VK_ESCAPE>
		<DOM_VK_CONVERT public="1" get="inline" set="null" expr="28" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</DOM_VK_CONVERT>
		<DOM_VK_NONCONVERT public="1" get="inline" set="null" expr="29" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</DOM_VK_NONCONVERT>
		<DOM_VK_ACCEPT public="1" get="inline" set="null" expr="30" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</DOM_VK_ACCEPT>
		<DOM_VK_MODECHANGE public="1" get="inline" set="null" expr="31" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</DOM_VK_MODECHANGE>
		<DOM_VK_SPACE public="1" get="inline" set="null" expr="32" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOM_VK_SPACE>
		<DOM_VK_PAGE_UP public="1" get="inline" set="null" expr="33" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</DOM_VK_PAGE_UP>
		<DOM_VK_PAGE_DOWN public="1" get="inline" set="null" expr="34" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34</e></m></meta>
		</DOM_VK_PAGE_DOWN>
		<DOM_VK_END public="1" get="inline" set="null" expr="35" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</DOM_VK_END>
		<DOM_VK_HOME public="1" get="inline" set="null" expr="36" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36</e></m></meta>
		</DOM_VK_HOME>
		<DOM_VK_LEFT public="1" get="inline" set="null" expr="37" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37</e></m></meta>
		</DOM_VK_LEFT>
		<DOM_VK_UP public="1" get="inline" set="null" expr="38" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>38</e></m></meta>
		</DOM_VK_UP>
		<DOM_VK_RIGHT public="1" get="inline" set="null" expr="39" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>39</e></m></meta>
		</DOM_VK_RIGHT>
		<DOM_VK_DOWN public="1" get="inline" set="null" expr="40" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>40</e></m></meta>
		</DOM_VK_DOWN>
		<DOM_VK_SELECT public="1" get="inline" set="null" expr="41" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>41</e></m></meta>
		</DOM_VK_SELECT>
		<DOM_VK_PRINT public="1" get="inline" set="null" expr="42" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>42</e></m></meta>
		</DOM_VK_PRINT>
		<DOM_VK_EXECUTE public="1" get="inline" set="null" expr="43" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>43</e></m></meta>
		</DOM_VK_EXECUTE>
		<DOM_VK_PRINTSCREEN public="1" get="inline" set="null" expr="44" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>44</e></m></meta>
		</DOM_VK_PRINTSCREEN>
		<DOM_VK_INSERT public="1" get="inline" set="null" expr="45" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>45</e></m></meta>
		</DOM_VK_INSERT>
		<DOM_VK_DELETE public="1" get="inline" set="null" expr="46" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</DOM_VK_DELETE>
		<DOM_VK_0 public="1" get="inline" set="null" expr="48" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>48</e></m></meta>
		</DOM_VK_0>
		<DOM_VK_1 public="1" get="inline" set="null" expr="49" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>49</e></m></meta>
		</DOM_VK_1>
		<DOM_VK_2 public="1" get="inline" set="null" expr="50" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</DOM_VK_2>
		<DOM_VK_3 public="1" get="inline" set="null" expr="51" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>51</e></m></meta>
		</DOM_VK_3>
		<DOM_VK_4 public="1" get="inline" set="null" expr="52" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>52</e></m></meta>
		</DOM_VK_4>
		<DOM_VK_5 public="1" get="inline" set="null" expr="53" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>53</e></m></meta>
		</DOM_VK_5>
		<DOM_VK_6 public="1" get="inline" set="null" expr="54" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>54</e></m></meta>
		</DOM_VK_6>
		<DOM_VK_7 public="1" get="inline" set="null" expr="55" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>55</e></m></meta>
		</DOM_VK_7>
		<DOM_VK_8 public="1" get="inline" set="null" expr="56" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</DOM_VK_8>
		<DOM_VK_9 public="1" get="inline" set="null" expr="57" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>57</e></m></meta>
		</DOM_VK_9>
		<DOM_VK_COLON public="1" get="inline" set="null" expr="58" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>58</e></m></meta>
		</DOM_VK_COLON>
		<DOM_VK_SEMICOLON public="1" get="inline" set="null" expr="59" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>59</e></m></meta>
		</DOM_VK_SEMICOLON>
		<DOM_VK_LESS_THAN public="1" get="inline" set="null" expr="60" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</DOM_VK_LESS_THAN>
		<DOM_VK_EQUALS public="1" get="inline" set="null" expr="61" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>61</e></m></meta>
		</DOM_VK_EQUALS>
		<DOM_VK_GREATER_THAN public="1" get="inline" set="null" expr="62" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>62</e></m></meta>
		</DOM_VK_GREATER_THAN>
		<DOM_VK_QUESTION_MARK public="1" get="inline" set="null" expr="63" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>63</e></m></meta>
		</DOM_VK_QUESTION_MARK>
		<DOM_VK_AT public="1" get="inline" set="null" expr="64" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</DOM_VK_AT>
		<DOM_VK_A public="1" get="inline" set="null" expr="65" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65</e></m></meta>
		</DOM_VK_A>
		<DOM_VK_B public="1" get="inline" set="null" expr="66" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>66</e></m></meta>
		</DOM_VK_B>
		<DOM_VK_C public="1" get="inline" set="null" expr="67" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>67</e></m></meta>
		</DOM_VK_C>
		<DOM_VK_D public="1" get="inline" set="null" expr="68" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68</e></m></meta>
		</DOM_VK_D>
		<DOM_VK_E public="1" get="inline" set="null" expr="69" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>69</e></m></meta>
		</DOM_VK_E>
		<DOM_VK_F public="1" get="inline" set="null" expr="70" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>70</e></m></meta>
		</DOM_VK_F>
		<DOM_VK_G public="1" get="inline" set="null" expr="71" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>71</e></m></meta>
		</DOM_VK_G>
		<DOM_VK_H public="1" get="inline" set="null" expr="72" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>72</e></m></meta>
		</DOM_VK_H>
		<DOM_VK_I public="1" get="inline" set="null" expr="73" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>73</e></m></meta>
		</DOM_VK_I>
		<DOM_VK_J public="1" get="inline" set="null" expr="74" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>74</e></m></meta>
		</DOM_VK_J>
		<DOM_VK_K public="1" get="inline" set="null" expr="75" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>75</e></m></meta>
		</DOM_VK_K>
		<DOM_VK_L public="1" get="inline" set="null" expr="76" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>76</e></m></meta>
		</DOM_VK_L>
		<DOM_VK_M public="1" get="inline" set="null" expr="77" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>77</e></m></meta>
		</DOM_VK_M>
		<DOM_VK_N public="1" get="inline" set="null" expr="78" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>78</e></m></meta>
		</DOM_VK_N>
		<DOM_VK_O public="1" get="inline" set="null" expr="79" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>79</e></m></meta>
		</DOM_VK_O>
		<DOM_VK_P public="1" get="inline" set="null" expr="80" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</DOM_VK_P>
		<DOM_VK_Q public="1" get="inline" set="null" expr="81" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>81</e></m></meta>
		</DOM_VK_Q>
		<DOM_VK_R public="1" get="inline" set="null" expr="82" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>82</e></m></meta>
		</DOM_VK_R>
		<DOM_VK_S public="1" get="inline" set="null" expr="83" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>83</e></m></meta>
		</DOM_VK_S>
		<DOM_VK_T public="1" get="inline" set="null" expr="84" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>84</e></m></meta>
		</DOM_VK_T>
		<DOM_VK_U public="1" get="inline" set="null" expr="85" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>85</e></m></meta>
		</DOM_VK_U>
		<DOM_VK_V public="1" get="inline" set="null" expr="86" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86</e></m></meta>
		</DOM_VK_V>
		<DOM_VK_W public="1" get="inline" set="null" expr="87" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>87</e></m></meta>
		</DOM_VK_W>
		<DOM_VK_X public="1" get="inline" set="null" expr="88" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>88</e></m></meta>
		</DOM_VK_X>
		<DOM_VK_Y public="1" get="inline" set="null" expr="89" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>89</e></m></meta>
		</DOM_VK_Y>
		<DOM_VK_Z public="1" get="inline" set="null" expr="90" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>90</e></m></meta>
		</DOM_VK_Z>
		<DOM_VK_WIN public="1" get="inline" set="null" expr="91" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>91</e></m></meta>
		</DOM_VK_WIN>
		<DOM_VK_CONTEXT_MENU public="1" get="inline" set="null" expr="93" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>93</e></m></meta>
		</DOM_VK_CONTEXT_MENU>
		<DOM_VK_SLEEP public="1" get="inline" set="null" expr="95" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>95</e></m></meta>
		</DOM_VK_SLEEP>
		<DOM_VK_NUMPAD0 public="1" get="inline" set="null" expr="96" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>96</e></m></meta>
		</DOM_VK_NUMPAD0>
		<DOM_VK_NUMPAD1 public="1" get="inline" set="null" expr="97" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>97</e></m></meta>
		</DOM_VK_NUMPAD1>
		<DOM_VK_NUMPAD2 public="1" get="inline" set="null" expr="98" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>98</e></m></meta>
		</DOM_VK_NUMPAD2>
		<DOM_VK_NUMPAD3 public="1" get="inline" set="null" expr="99" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>99</e></m></meta>
		</DOM_VK_NUMPAD3>
		<DOM_VK_NUMPAD4 public="1" get="inline" set="null" expr="100" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>100</e></m></meta>
		</DOM_VK_NUMPAD4>
		<DOM_VK_NUMPAD5 public="1" get="inline" set="null" expr="101" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>101</e></m></meta>
		</DOM_VK_NUMPAD5>
		<DOM_VK_NUMPAD6 public="1" get="inline" set="null" expr="102" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>102</e></m></meta>
		</DOM_VK_NUMPAD6>
		<DOM_VK_NUMPAD7 public="1" get="inline" set="null" expr="103" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>103</e></m></meta>
		</DOM_VK_NUMPAD7>
		<DOM_VK_NUMPAD8 public="1" get="inline" set="null" expr="104" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</DOM_VK_NUMPAD8>
		<DOM_VK_NUMPAD9 public="1" get="inline" set="null" expr="105" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>105</e></m></meta>
		</DOM_VK_NUMPAD9>
		<DOM_VK_MULTIPLY public="1" get="inline" set="null" expr="106" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>106</e></m></meta>
		</DOM_VK_MULTIPLY>
		<DOM_VK_ADD public="1" get="inline" set="null" expr="107" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>107</e></m></meta>
		</DOM_VK_ADD>
		<DOM_VK_SEPARATOR public="1" get="inline" set="null" expr="108" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>108</e></m></meta>
		</DOM_VK_SEPARATOR>
		<DOM_VK_SUBTRACT public="1" get="inline" set="null" expr="109" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</DOM_VK_SUBTRACT>
		<DOM_VK_DECIMAL public="1" get="inline" set="null" expr="110" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>110</e></m></meta>
		</DOM_VK_DECIMAL>
		<DOM_VK_DIVIDE public="1" get="inline" set="null" expr="111" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</DOM_VK_DIVIDE>
		<DOM_VK_F1 public="1" get="inline" set="null" expr="112" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>112</e></m></meta>
		</DOM_VK_F1>
		<DOM_VK_F2 public="1" get="inline" set="null" expr="113" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>113</e></m></meta>
		</DOM_VK_F2>
		<DOM_VK_F3 public="1" get="inline" set="null" expr="114" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>114</e></m></meta>
		</DOM_VK_F3>
		<DOM_VK_F4 public="1" get="inline" set="null" expr="115" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>115</e></m></meta>
		</DOM_VK_F4>
		<DOM_VK_F5 public="1" get="inline" set="null" expr="116" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>116</e></m></meta>
		</DOM_VK_F5>
		<DOM_VK_F6 public="1" get="inline" set="null" expr="117" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>117</e></m></meta>
		</DOM_VK_F6>
		<DOM_VK_F7 public="1" get="inline" set="null" expr="118" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>118</e></m></meta>
		</DOM_VK_F7>
		<DOM_VK_F8 public="1" get="inline" set="null" expr="119" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>119</e></m></meta>
		</DOM_VK_F8>
		<DOM_VK_F9 public="1" get="inline" set="null" expr="120" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>120</e></m></meta>
		</DOM_VK_F9>
		<DOM_VK_F10 public="1" get="inline" set="null" expr="121" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>121</e></m></meta>
		</DOM_VK_F10>
		<DOM_VK_F11 public="1" get="inline" set="null" expr="122" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>122</e></m></meta>
		</DOM_VK_F11>
		<DOM_VK_F12 public="1" get="inline" set="null" expr="123" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>123</e></m></meta>
		</DOM_VK_F12>
		<DOM_VK_F13 public="1" get="inline" set="null" expr="124" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>124</e></m></meta>
		</DOM_VK_F13>
		<DOM_VK_F14 public="1" get="inline" set="null" expr="125" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>125</e></m></meta>
		</DOM_VK_F14>
		<DOM_VK_F15 public="1" get="inline" set="null" expr="126" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>126</e></m></meta>
		</DOM_VK_F15>
		<DOM_VK_F16 public="1" get="inline" set="null" expr="127" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>127</e></m></meta>
		</DOM_VK_F16>
		<DOM_VK_F17 public="1" get="inline" set="null" expr="128" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</DOM_VK_F17>
		<DOM_VK_F18 public="1" get="inline" set="null" expr="129" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>129</e></m></meta>
		</DOM_VK_F18>
		<DOM_VK_F19 public="1" get="inline" set="null" expr="130" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>130</e></m></meta>
		</DOM_VK_F19>
		<DOM_VK_F20 public="1" get="inline" set="null" expr="131" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>131</e></m></meta>
		</DOM_VK_F20>
		<DOM_VK_F21 public="1" get="inline" set="null" expr="132" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>132</e></m></meta>
		</DOM_VK_F21>
		<DOM_VK_F22 public="1" get="inline" set="null" expr="133" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>133</e></m></meta>
		</DOM_VK_F22>
		<DOM_VK_F23 public="1" get="inline" set="null" expr="134" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>134</e></m></meta>
		</DOM_VK_F23>
		<DOM_VK_F24 public="1" get="inline" set="null" expr="135" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>135</e></m></meta>
		</DOM_VK_F24>
		<DOM_VK_NUM_LOCK public="1" get="inline" set="null" expr="144" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>144</e></m></meta>
		</DOM_VK_NUM_LOCK>
		<DOM_VK_SCROLL_LOCK public="1" get="inline" set="null" expr="145" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>145</e></m></meta>
		</DOM_VK_SCROLL_LOCK>
		<DOM_VK_WIN_OEM_FJ_JISHO public="1" get="inline" set="null" expr="146" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>146</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_JISHO>
		<DOM_VK_WIN_OEM_FJ_MASSHOU public="1" get="inline" set="null" expr="147" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>147</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_MASSHOU>
		<DOM_VK_WIN_OEM_FJ_TOUROKU public="1" get="inline" set="null" expr="148" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>148</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_TOUROKU>
		<DOM_VK_WIN_OEM_FJ_LOYA public="1" get="inline" set="null" expr="149" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>149</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_LOYA>
		<DOM_VK_WIN_OEM_FJ_ROYA public="1" get="inline" set="null" expr="150" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>150</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_ROYA>
		<DOM_VK_CIRCUMFLEX public="1" get="inline" set="null" expr="160" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>160</e></m></meta>
		</DOM_VK_CIRCUMFLEX>
		<DOM_VK_EXCLAMATION public="1" get="inline" set="null" expr="161" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>161</e></m></meta>
		</DOM_VK_EXCLAMATION>
		<DOM_VK_DOUBLE_QUOTE public="1" get="inline" set="null" expr="162" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>162</e></m></meta>
		</DOM_VK_DOUBLE_QUOTE>
		<DOM_VK_HASH public="1" get="inline" set="null" expr="163" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>163</e></m></meta>
		</DOM_VK_HASH>
		<DOM_VK_DOLLAR public="1" get="inline" set="null" expr="164" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>164</e></m></meta>
		</DOM_VK_DOLLAR>
		<DOM_VK_PERCENT public="1" get="inline" set="null" expr="165" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>165</e></m></meta>
		</DOM_VK_PERCENT>
		<DOM_VK_AMPERSAND public="1" get="inline" set="null" expr="166" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>166</e></m></meta>
		</DOM_VK_AMPERSAND>
		<DOM_VK_UNDERSCORE public="1" get="inline" set="null" expr="167" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>167</e></m></meta>
		</DOM_VK_UNDERSCORE>
		<DOM_VK_OPEN_PAREN public="1" get="inline" set="null" expr="168" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>168</e></m></meta>
		</DOM_VK_OPEN_PAREN>
		<DOM_VK_CLOSE_PAREN public="1" get="inline" set="null" expr="169" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>169</e></m></meta>
		</DOM_VK_CLOSE_PAREN>
		<DOM_VK_ASTERISK public="1" get="inline" set="null" expr="170" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>170</e></m></meta>
		</DOM_VK_ASTERISK>
		<DOM_VK_PLUS public="1" get="inline" set="null" expr="171" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>171</e></m></meta>
		</DOM_VK_PLUS>
		<DOM_VK_PIPE public="1" get="inline" set="null" expr="172" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>172</e></m></meta>
		</DOM_VK_PIPE>
		<DOM_VK_HYPHEN_MINUS public="1" get="inline" set="null" expr="173" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>173</e></m></meta>
		</DOM_VK_HYPHEN_MINUS>
		<DOM_VK_OPEN_CURLY_BRACKET public="1" get="inline" set="null" expr="174" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>174</e></m></meta>
		</DOM_VK_OPEN_CURLY_BRACKET>
		<DOM_VK_CLOSE_CURLY_BRACKET public="1" get="inline" set="null" expr="175" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>175</e></m></meta>
		</DOM_VK_CLOSE_CURLY_BRACKET>
		<DOM_VK_TILDE public="1" get="inline" set="null" expr="176" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>176</e></m></meta>
		</DOM_VK_TILDE>
		<DOM_VK_VOLUME_MUTE public="1" get="inline" set="null" expr="181" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>181</e></m></meta>
		</DOM_VK_VOLUME_MUTE>
		<DOM_VK_VOLUME_DOWN public="1" get="inline" set="null" expr="182" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>182</e></m></meta>
		</DOM_VK_VOLUME_DOWN>
		<DOM_VK_VOLUME_UP public="1" get="inline" set="null" expr="183" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>183</e></m></meta>
		</DOM_VK_VOLUME_UP>
		<DOM_VK_COMMA public="1" get="inline" set="null" expr="188" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>188</e></m></meta>
		</DOM_VK_COMMA>
		<DOM_VK_PERIOD public="1" get="inline" set="null" expr="190" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>190</e></m></meta>
		</DOM_VK_PERIOD>
		<DOM_VK_SLASH public="1" get="inline" set="null" expr="191" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>191</e></m></meta>
		</DOM_VK_SLASH>
		<DOM_VK_BACK_QUOTE public="1" get="inline" set="null" expr="192" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>192</e></m></meta>
		</DOM_VK_BACK_QUOTE>
		<DOM_VK_OPEN_BRACKET public="1" get="inline" set="null" expr="219" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>219</e></m></meta>
		</DOM_VK_OPEN_BRACKET>
		<DOM_VK_BACK_SLASH public="1" get="inline" set="null" expr="220" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>220</e></m></meta>
		</DOM_VK_BACK_SLASH>
		<DOM_VK_CLOSE_BRACKET public="1" get="inline" set="null" expr="221" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>221</e></m></meta>
		</DOM_VK_CLOSE_BRACKET>
		<DOM_VK_QUOTE public="1" get="inline" set="null" expr="222" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>222</e></m></meta>
		</DOM_VK_QUOTE>
		<DOM_VK_META public="1" get="inline" set="null" expr="224" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>224</e></m></meta>
		</DOM_VK_META>
		<DOM_VK_ALTGR public="1" get="inline" set="null" expr="225" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>225</e></m></meta>
		</DOM_VK_ALTGR>
		<DOM_VK_WIN_ICO_HELP public="1" get="inline" set="null" expr="227" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>227</e></m></meta>
		</DOM_VK_WIN_ICO_HELP>
		<DOM_VK_WIN_ICO_00 public="1" get="inline" set="null" expr="228" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>228</e></m></meta>
		</DOM_VK_WIN_ICO_00>
		<DOM_VK_PROCESSKEY public="1" get="inline" set="null" expr="229" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>229</e></m></meta>
		</DOM_VK_PROCESSKEY>
		<DOM_VK_WIN_ICO_CLEAR public="1" get="inline" set="null" expr="230" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>230</e></m></meta>
		</DOM_VK_WIN_ICO_CLEAR>
		<DOM_VK_WIN_OEM_RESET public="1" get="inline" set="null" expr="233" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>233</e></m></meta>
		</DOM_VK_WIN_OEM_RESET>
		<DOM_VK_WIN_OEM_JUMP public="1" get="inline" set="null" expr="234" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>234</e></m></meta>
		</DOM_VK_WIN_OEM_JUMP>
		<DOM_VK_WIN_OEM_PA1 public="1" get="inline" set="null" expr="235" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>235</e></m></meta>
		</DOM_VK_WIN_OEM_PA1>
		<DOM_VK_WIN_OEM_PA2 public="1" get="inline" set="null" expr="236" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>236</e></m></meta>
		</DOM_VK_WIN_OEM_PA2>
		<DOM_VK_WIN_OEM_PA3 public="1" get="inline" set="null" expr="237" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>237</e></m></meta>
		</DOM_VK_WIN_OEM_PA3>
		<DOM_VK_WIN_OEM_WSCTRL public="1" get="inline" set="null" expr="238" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>238</e></m></meta>
		</DOM_VK_WIN_OEM_WSCTRL>
		<DOM_VK_WIN_OEM_CUSEL public="1" get="inline" set="null" expr="239" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>239</e></m></meta>
		</DOM_VK_WIN_OEM_CUSEL>
		<DOM_VK_WIN_OEM_ATTN public="1" get="inline" set="null" expr="240" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>240</e></m></meta>
		</DOM_VK_WIN_OEM_ATTN>
		<DOM_VK_WIN_OEM_FINISH public="1" get="inline" set="null" expr="241" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>241</e></m></meta>
		</DOM_VK_WIN_OEM_FINISH>
		<DOM_VK_WIN_OEM_COPY public="1" get="inline" set="null" expr="242" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>242</e></m></meta>
		</DOM_VK_WIN_OEM_COPY>
		<DOM_VK_WIN_OEM_AUTO public="1" get="inline" set="null" expr="243" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>243</e></m></meta>
		</DOM_VK_WIN_OEM_AUTO>
		<DOM_VK_WIN_OEM_ENLW public="1" get="inline" set="null" expr="244" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>244</e></m></meta>
		</DOM_VK_WIN_OEM_ENLW>
		<DOM_VK_WIN_OEM_BACKTAB public="1" get="inline" set="null" expr="245" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>245</e></m></meta>
		</DOM_VK_WIN_OEM_BACKTAB>
		<DOM_VK_ATTN public="1" get="inline" set="null" expr="246" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>246</e></m></meta>
		</DOM_VK_ATTN>
		<DOM_VK_CRSEL public="1" get="inline" set="null" expr="247" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>247</e></m></meta>
		</DOM_VK_CRSEL>
		<DOM_VK_EXSEL public="1" get="inline" set="null" expr="248" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>248</e></m></meta>
		</DOM_VK_EXSEL>
		<DOM_VK_EREOF public="1" get="inline" set="null" expr="249" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>249</e></m></meta>
		</DOM_VK_EREOF>
		<DOM_VK_PLAY public="1" get="inline" set="null" expr="250" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>250</e></m></meta>
		</DOM_VK_PLAY>
		<DOM_VK_ZOOM public="1" get="inline" set="null" expr="251" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>251</e></m></meta>
		</DOM_VK_ZOOM>
		<DOM_VK_PA1 public="1" get="inline" set="null" expr="253" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>253</e></m></meta>
		</DOM_VK_PA1>
		<DOM_VK_WIN_OEM_CLEAR public="1" get="inline" set="null" expr="254" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>254</e></m></meta>
		</DOM_VK_WIN_OEM_CLEAR>
		<charCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the Unicode reference number of the key; this attribute is used only by the `keypress` event. For keys whose `char` attribute contains multiple characters, this is the Unicode value of the first character in that attribute. In Firefox 26 this returns codes for printable characters.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</charCode>
		<keyCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</keyCode>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Alt ( Option or ⌥ on OS X) key was active when the key event was generated.</haxe_doc>
		</altKey>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Ctrl key was active when the key event was generated.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Shift key was active when the key event was generated.</haxe_doc>
		</shiftKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated.</haxe_doc>
		</metaKey>
		<location public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the location of the key on the keyboard or other input device.</haxe_doc>
		</location>
		<repeat public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the key is being held down such that it is automatically repeating.</haxe_doc>
		</repeat>
		<isComposing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the event is fired between after `compositionstart` and before `compositionend`.</haxe_doc>
		</isComposing>
		<key public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the key value of the key represented by the event.</haxe_doc>
		</key>
		<code public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the code value of the key represented by the event.</haxe_doc>
		</code>
		<getModifierState public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if a modifier key such as Alt, Shift, Ctrl, or Meta, was pressed when the event was created.</haxe_doc>
		</getModifierState>
		<initKeyboardEvent public="1" set="method">
			<f a="typeArg:?bubblesArg:?cancelableArg:?viewArg:?keyArg:?locationArg:?ctrlKey:?altKey:?shiftKey:?metaKey" v=":false:false::&quot;&quot;:0:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, locationArg : 0, keyArg : "", cancelableArg : false, bubblesArg : false }</e></m></meta>
			<haxe_doc>Initializes a `KeyboardEvent` object. This is now deprecated. You should instead use the `KeyboardEvent.KeyboardEvent` constructor.
		@throws DOMError</haxe_doc>
		</initKeyboardEvent>
		<initKeyEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?ctrlKey:?altKey:?shiftKey:?metaKey:?keyCode:?charCode" v=":false:false::false:false:false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ charCode : 0, keyCode : 0, metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, cancelable : false, canBubble : false }</e></m></meta>
			<haxe_doc>Initializes a `KeyboardEvent` object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the `KeyboardEvent.KeyboardEvent` constructor.</haxe_doc>
		</initKeyEvent>
		<new public="1" set="method">
			<f a="typeArg:?keyboardEventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.KeyboardEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`KeyboardEvent` objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.

	Documentation [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"KeyboardEvent"</e></m></meta>
	</class>
	<typedef path="js.html.KeyboardEventInit" params="" file="/home/vsts/work/1/s/std/js/html/KeyboardEventInit.hx"><a>
	<which>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</which>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<repeat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</repeat>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<location>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</location>
	<keyCode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</keyCode>
	<key>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</key>
	<isComposing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isComposing>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<code>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</code>
	<charCode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</charCode>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.KeyframeAnimationOptions" params="" file="/home/vsts/work/1/s/std/js/html/KeyframeAnimationOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<class path="js.html.KeyframeEffect" params="" file="/home/vsts/work/1/s/std/js/html/KeyframeEffect.hx" extern="1">
		<extends path="js.html.AnimationEffect"/>
		<target public="1">
			<x path="haxe.extern.EitherType">
				<c path="js.html.Element"/>
				<c path="js.html.CSSPseudoElement"/>
			</x>
			<haxe_doc>Gets and sets the element or pseudo-element being animated by this object. This may be `null` for animations that do not target a specific element.</haxe_doc>
		</target>
		<getKeyframes public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>Returns the computed keyframes that make up this effect along with their computed keyframe offsets.
		@throws DOMError</haxe_doc>
		</getKeyframes>
		<setKeyframes public="1" set="method">
			<f a="keyframes">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the set of keyframes that make up this effect.
		@throws DOMError</haxe_doc>
		</setKeyframes>
		<new public="1" set="method">
			<f a="source">
				<c path="js.html.KeyframeEffect"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="target:keyframes:?options">
		<x path="haxe.extern.EitherType">
			<c path="js.html.Element"/>
			<c path="js.html.CSSPseudoElement"/>
		</x>
		<d/>
		<x path="haxe.extern.EitherType">
			<x path="Float"/>
			<t path="js.html.KeyframeEffectOptions"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `KeyframeEffect` interface of the Web Animations API lets us create sets of animatable properties and values, called keyframes. These can then be played using the `Animation()` constructor.

	Documentation [KeyframeEffect](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect>]]></haxe_doc>
		<meta><m n=":native"><e>"KeyframeEffect"</e></m></meta>
	</class>
	<typedef path="js.html.KeyframeEffectOptions" params="" file="/home/vsts/work/1/s/std/js/html/KeyframeEffectOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<class path="js.html.LIElement" params="" file="/home/vsts/work/1/s/std/js/html/LIElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` indicating the ordinal position of the list element inside a given `ol`. It reflects the `value` attribute of the HTML `li` element, and can be smaller than `0`. If the `li` element is not a child of an `ol` element, the property has no meaning.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of the bullets, `"disc"`, `"square"` or `"circle"`. As the standard way of defining the list type is via the CSS `list-style-type` property, use the CSSOM methods to set it via a script.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLLIElement` interface exposes specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating list elements.

	Documentation [HTMLLIElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLIElement"</e></m></meta>
	</class>
	<class path="js.html.LabelElement" params="" file="/home/vsts/work/1/s/std/js/html/LabelElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` object representing the form with which the labeled control is associated, or `null` if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for `HTMLLabelElement.control.form`.</haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="String"/>
			<haxe_doc>Is a string containing the ID of the labeled control. This reflects the `for` attribute.</haxe_doc>
		</htmlFor>
		<control public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Is a `HTMLElement` representing the control with which the label is associated.</haxe_doc>
		</control>
		<haxe_doc><![CDATA[The `HTMLLabelElement` interface gives access to properties specific to `label` elements. It inherits methods and properties from the base `HTMLElement` interface.

	Documentation [HTMLLabelElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLabelElement"</e></m></meta>
	</class>
	<class path="js.html.LegendElement" params="" file="/home/vsts/work/1/s/std/js/html/LegendElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<align public="1"><c path="String"/></align>
		<haxe_doc><![CDATA[The `HTMLLegendElement` is an interface allowing to access properties of the `legend` elements. It inherits properties and methods from the `HTMLElement` interface.

	Documentation [HTMLLegendElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLegendElement"</e></m></meta>
	</class>
	<abstract path="js.html.LineAlignSetting" params="" file="/home/vsts/work/1/s/std/js/html/LineAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._LineAlignSetting.LineAlignSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/LineAlignSetting.hx" private="1" module="js.html.LineAlignSetting" extern="1" final="1">
	<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="28" static="1">
		<x path="js.html.LineAlignSetting"/>
		<meta>
			<m n=":value"><e>cast "start"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</START>
	<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
		<x path="js.html.LineAlignSetting"/>
		<meta>
			<m n=":value"><e>cast "center"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CENTER>
	<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
		<x path="js.html.LineAlignSetting"/>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</END>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._LineAlignSetting.LineAlignSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/LineAlignSetting.hx" private="1" module="js.html.LineAlignSetting" extern="1" final="1">
		<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="28" static="1">
			<x path="js.html.LineAlignSetting"/>
			<meta>
				<m n=":value"><e>cast "start"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</START>
		<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
			<x path="js.html.LineAlignSetting"/>
			<meta>
				<m n=":value"><e>cast "center"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CENTER>
		<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
			<x path="js.html.LineAlignSetting"/>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</END>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.LinkElement" params="" file="/home/vsts/work/1/s/std/js/html/LinkElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` which represents whether the link is disabled; currently only used with style sheet links.</haxe_doc>
		</disabled>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI for the target resource.</haxe_doc>
		</href>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that corresponds to the CORS setting for this link element. See CORS settings attributes for details.</haxe_doc>
		</crossOrigin>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the forward relationship of the linked resource from the document to the resource.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a list of one or more media formats to which the resource applies.</haxe_doc>
		</media>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the language code for the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the MIME type of the linked resource.</haxe_doc>
		</type>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<sizes public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sizes` HTML attribute, as a list of tokens.</haxe_doc>
		</sizes>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding for the target resource.</haxe_doc>
		</charset>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the reverse relationship of the linked resource from the resource to the document.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the target frame to which the resource applies.</haxe_doc>
		</target>
		<integrity public="1"><c path="String"/></integrity>
		<as public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of content being loaded by the HTML link.</haxe_doc>
		</as>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLLinkElement` interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLLinkElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLinkElement"</e></m></meta>
	</class>
	<class path="js.html.LocalMediaStream" params="" file="/home/vsts/work/1/s/std/js/html/LocalMediaStream.hx" extern="1">
		<extends path="js.html.MediaStream"/>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<haxe_doc><![CDATA[The `LocalMediaStream` interface was part of the Media Capture and Streams API, representing a stream of data being generated locally (such as by `getUserMedia()`. However, `getUserMedia()` now returns a `MediaStream` instead, and this interface has been removed from the specification.

	Documentation [LocalMediaStream](https://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"LocalMediaStream"</e></m></meta>
	</class>
	<typedef path="js.html.LocaleInfo" params="" file="/home/vsts/work/1/s/std/js/html/LocaleInfo.hx"><a>
	<locale>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</locale>
	<direction>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</direction>
</a></typedef>
	<class path="js.html.Location" params="" file="/home/vsts/work/1/s/std/js/html/Location.hx" extern="1">
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the canonical form of the origin of the specific location.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the host, that is the hostname, a `':'`, and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters or "querystring" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.</haxe_doc>
		</search>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<assign public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loads the resource at the URL provided in parameter.
		@throws DOMError</haxe_doc>
		</assign>
		<replace public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the current resource with the one at the provided URL. The difference from the `assign()` method is that after using `replace()` the current page will not be saved in session `History`, meaning the user won't be able to use the back button to navigate to it.
		@throws DOMError</haxe_doc>
		</replace>
		<reload public="1" set="method">
			<f a="?forceget" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceget : false }</e></m></meta>
			<haxe_doc>Reloads the resource from the current URL. Its optional unique parameter is a `Boolean`, which, when it is `true`, causes the page to always be reloaded from the server. If it is `false` or not specified, the browser may reload the page from its cache.
		@throws DOMError</haxe_doc>
		</reload>
		<haxe_doc><![CDATA[The `Location` interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the `Document` and `Window` interface have such a linked `Location`, accessible via `Document.location` and `Window.location` respectively.

	Documentation [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Location$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Location>]]></haxe_doc>
		<meta><m n=":native"><e>"Location"</e></m></meta>
	</class>
	<class path="js.html.MapElement" params="" file="/home/vsts/work/1/s/std/js/html/MapElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the `map` element for referencing it other context. If the `id` attribute is set, this must have the same value; and it cannot be `null` or empty.</haxe_doc>
		</name>
		<areas public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a live `HTMLCollection` representing the `area` elements associated to this `map`.</haxe_doc>
		</areas>
		<haxe_doc><![CDATA[The `HTMLMapElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.

	Documentation [HTMLMapElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMapElement"</e></m></meta>
	</class>
	<class path="js.html.MediaDeviceInfo" params="" file="/home/vsts/work/1/s/std/js/html/MediaDeviceInfo.hx" extern="1">
		<deviceId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).</haxe_doc>
		</deviceId>
		<kind public="1" set="null">
			<x path="js.html.MediaDeviceKind"/>
			<haxe_doc>Returns an enumerated value that is either `"videoinput"`, `"audioinput"` or `"audiooutput"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a label describing this device (for example "External USB Webcam").</haxe_doc>
		</label>
		<groupId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone.</haxe_doc>
		</groupId>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `MediaDevicesInfo` interface contains information that describes a single media input or output device.

	Documentation [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDeviceInfo"</e></m></meta>
	</class>
	<abstract path="js.html.MediaDeviceKind" params="" file="/home/vsts/work/1/s/std/js/html/MediaDeviceKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaDeviceKind.MediaDeviceKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaDeviceKind.hx" private="1" module="js.html.MediaDeviceKind" extern="1" final="1">
	<AUDIOINPUT public="1" get="inline" set="null" expr="cast &quot;audioinput&quot;" line="28" static="1">
		<x path="js.html.MediaDeviceKind"/>
		<meta>
			<m n=":value"><e>cast "audioinput"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIOINPUT>
	<AUDIOOUTPUT public="1" get="inline" set="null" expr="cast &quot;audiooutput&quot;" line="29" static="1">
		<x path="js.html.MediaDeviceKind"/>
		<meta>
			<m n=":value"><e>cast "audiooutput"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIOOUTPUT>
	<VIDEOINPUT public="1" get="inline" set="null" expr="cast &quot;videoinput&quot;" line="30" static="1">
		<x path="js.html.MediaDeviceKind"/>
		<meta>
			<m n=":value"><e>cast "videoinput"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VIDEOINPUT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._MediaDeviceKind.MediaDeviceKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaDeviceKind.hx" private="1" module="js.html.MediaDeviceKind" extern="1" final="1">
		<AUDIOINPUT public="1" get="inline" set="null" expr="cast &quot;audioinput&quot;" line="28" static="1">
			<x path="js.html.MediaDeviceKind"/>
			<meta>
				<m n=":value"><e>cast "audioinput"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIOINPUT>
		<AUDIOOUTPUT public="1" get="inline" set="null" expr="cast &quot;audiooutput&quot;" line="29" static="1">
			<x path="js.html.MediaDeviceKind"/>
			<meta>
				<m n=":value"><e>cast "audiooutput"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIOOUTPUT>
		<VIDEOINPUT public="1" get="inline" set="null" expr="cast &quot;videoinput&quot;" line="30" static="1">
			<x path="js.html.MediaDeviceKind"/>
			<meta>
				<m n=":value"><e>cast "videoinput"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VIDEOINPUT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.MediaDevices" params="" file="/home/vsts/work/1/s/std/js/html/MediaDevices.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ondevicechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `devicechange` event. This event is delivered to the `MediaDevices` object when a media input or output device is attached to or removed from the user's computer.</haxe_doc>
		</ondevicechange>
		<getSupportedConstraints public="1" set="method"><f a=""><t path="js.html.MediaTrackSupportedConstraints"/></f></getSupportedConstraints>
		<enumerateDevices public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.MediaDeviceInfo"/></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</enumerateDevices>
		<getUserMedia public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaStreamConstraints"/></x>
				<c path="js.lib.Promise"><c path="js.html.MediaStream"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getUserMedia>
		<haxe_doc><![CDATA[The `MediaDevices` interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.

	Documentation [MediaDevices](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDevices"</e></m></meta>
	</class>
	<class path="js.html.MediaError" params="" file="/home/vsts/work/1/s/std/js/html/MediaError.hx" extern="1">
		<MEDIA_ERR_ABORTED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MEDIA_ERR_ABORTED>
		<MEDIA_ERR_NETWORK public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIA_ERR_NETWORK>
		<MEDIA_ERR_DECODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MEDIA_ERR_DECODE>
		<MEDIA_ERR_SRC_NOT_SUPPORTED public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_ERR_SRC_NOT_SUPPORTED>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number which represents the general type of error that occurred, as follows: `/en-US/docs/Web/API/MediaError/code`</haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't simply a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one `user agent` to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (`""`).</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `MediaError` interface represents an error which occurred while handling media in an HTML media element based on `HTMLMediaElement`, such as `audio` or `video`.

	Documentation [MediaError](https://developer.mozilla.org/en-US/docs/Web/API/MediaError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaError>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaError"</e></m></meta>
	</class>
	<typedef path="js.html.MediaKeyStatusMapIterator" params="" file="/home/vsts/work/1/s/std/js/html/MediaKeyStatusMapIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.MediaList" params="" file="/home/vsts/work/1/s/std/js/html/MediaList.hx" extern="1">
		<mediaText public="1"><c path="String"/></mediaText>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<deleteMedium public="1" set="method">
			<f a="oldMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteMedium>
		<appendMedium public="1" set="method">
			<f a="newMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendMedium>
		<meta><m n=":native"><e>"MediaList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryList" params="" file="/home/vsts/work/1/s/std/js/html/MediaQueryList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<media public="1" set="null">
			<c path="String"/>
			<haxe_doc> A `DOMString` representing a serialized media query.</haxe_doc>
		</media>
		<matches public="1" set="null">
			<x path="Bool"/>
			<haxe_doc> A `Boolean` that returns `true` if the `document` currently matches the media query list, or `false` if not.</haxe_doc>
		</matches>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc> An event handler property representing a function that is invoked when the `change` event fires, i.e when the status of media query support changes. The event object is a `MediaQueryListEvent` instance, which is recognised as a `MediaListQuery` instance in older browsers, for backwards compatibility purposes.</haxe_doc>
		</onchange>
		<addListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<addListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
				<addListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
			</overloads>
		</addListener>
		<removeListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<removeListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
				<removeListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
			</overloads>
		</removeListener>
		<haxe_doc><![CDATA[A `MediaQueryList` object stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to `true`).

	Documentation [MediaQueryList](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryListEvent" params="" file="/home/vsts/work/1/s/std/js/html/MediaQueryListEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<media public="1" set="null">
			<c path="String"/>
			<haxe_doc> A `DOMString` representing a serialized media query.</haxe_doc>
		</media>
		<matches public="1" set="null">
			<x path="Bool"/>
			<haxe_doc> A `Boolean` that returns `true` if the `document` currently matches the media query list, or `false` if not.</haxe_doc>
		</matches>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.MediaQueryListEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MediaQueryListEvent` object stores information on the changes that have happened to a `MediaQueryList` object — instances are available as the event object on a function referenced by a `MediaQueryList.onchange` property or `MediaQueryList.addEvent()` call.

	Documentation [MediaQueryListEvent](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryListEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MediaQueryListEventInit" params="" file="/home/vsts/work/1/s/std/js/html/MediaQueryListEventInit.hx"><a>
	<media>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</media>
	<matches>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</matches>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.MediaRecorder" params="" file="/home/vsts/work/1/s/std/js/html/MediaRecorder.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<isTypeSupported public="1" set="method" static="1"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></isTypeSupported>
		<stream public="1" set="null">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Returns the stream that was passed into the constructor when the `MediaRecorder` was created.</haxe_doc>
		</stream>
		<state public="1" set="null">
			<x path="js.html.RecordingState"/>
			<haxe_doc>Returns the current state of the `MediaRecorder` object (`inactive`, `recording`, or `paused`.)</haxe_doc>
		</state>
		<mimeType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the MIME type that was selected as the recording container for the `MediaRecorder` object when it was created.</haxe_doc>
		</mimeType>
		<ondataavailable public="1"><x path="haxe.Function"/></ondataavailable>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onstart public="1"><x path="haxe.Function"/></onstart>
		<onstop public="1"><x path="haxe.Function"/></onstop>
		<onwarning public="1"><x path="haxe.Function"/></onwarning>
		<start public="1" set="method">
			<f a="?timeSlice">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Begins recording media; this method can optionally be passed a `timeslice` argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.
		@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops recording, at which point a `dataavailable` event containing the final `Blob` of saved data is fired. No more recording occurs.
		@throws DOMError</haxe_doc>
		</stop>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses the recording of media.
		@throws DOMError</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resumes recording of media after having been paused.
		@throws DOMError</haxe_doc>
		</resume>
		<requestData public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Requests a `Blob` containing the saved data received thus far (or since the last time `requestData()` was called. After calling this method, recording continues, but in a new `Blob`.
		@throws DOMError</haxe_doc>
		</requestData>
		<new public="1" set="method">
			<f a="node:?output:?options" v=":0:">
				<c path="js.html.audio.AudioNode"/>
				<x path="Int"/>
				<x path="Null"><t path="js.html.MediaRecorderOptions"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ output : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="stream:?options">
		<c path="js.html.MediaStream"/>
		<x path="Null"><t path="js.html.MediaRecorderOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaRecorder` interface of the MediaStream Recording API provides functionality to easily record media. It is created using the `MediaRecorder()` constructor.

	Documentation [MediaRecorder](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaRecorder"</e></m></meta>
	</class>
	<class path="js.html.MediaRecorderErrorEvent" params="" file="/home/vsts/work/1/s/std/js/html/MediaRecorderErrorEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>A `DOMException` containing information about the error that occurred. Read only.</haxe_doc>
		</error>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.MediaRecorderErrorEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MediaRecorderErrorEvent` interface represents errors returned by the MediaStream Recording API. It is an `Event` object that encapsulates a reference to a `DOMException` describing the error that occurred.

	Documentation [MediaRecorderErrorEvent](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorderErrorEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaRecorderErrorEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MediaRecorderErrorEventInit" params="" file="/home/vsts/work/1/s/std/js/html/MediaRecorderErrorEventInit.hx"><a>
	<error><c path="js.html.DOMException"/></error>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.MediaRecorderOptions" params="" file="/home/vsts/work/1/s/std/js/html/MediaRecorderOptions.hx"><a>
	<videoBitsPerSecond>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</videoBitsPerSecond>
	<mimeType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</mimeType>
	<bitsPerSecond>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</bitsPerSecond>
	<audioBitsPerSecond>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</audioBitsPerSecond>
</a></typedef>
	<class path="js.html.MediaSource" params="" file="/home/vsts/work/1/s/std/js/html/MediaSource.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<isTypeSupported public="1" set="method" static="1"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></isTypeSupported>
		<sourceBuffers public="1" set="null">
			<c path="js.html.SourceBufferList"/>
			<haxe_doc>Returns a `SourceBufferList` object containing the list of `SourceBuffer` objects associated with this `MediaSource`.</haxe_doc>
		</sourceBuffers>
		<activeSourceBuffers public="1" set="null">
			<c path="js.html.SourceBufferList"/>
			<haxe_doc>Returns a `SourceBufferList` object containing a subset of the `SourceBuffer` objects contained within `MediaSource.sourceBuffers` — the list of objects providing the selected video track,  enabled audio tracks, and shown/hidden text tracks.</haxe_doc>
		</activeSourceBuffers>
		<readyState public="1" set="null">
			<x path="js.html.MediaSourceReadyState"/>
			<haxe_doc>Returns an enum representing the state of the current `MediaSource`, whether it is not currently attached to a media element (`closed`), attached and ready to receive `SourceBuffer` objects (`open`), or attached but the stream has been ended via `MediaSource.endOfStream()` (`ended`.)</haxe_doc>
		</readyState>
		<duration public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the duration of the current media being presented.</haxe_doc>
		</duration>
		<onsourceopen public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `sourceopen` event.</haxe_doc>
		</onsourceopen>
		<onsourceended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `sourceended` event.</haxe_doc>
		</onsourceended>
		<onsourceclosed public="1"><x path="haxe.Function"/></onsourceclosed>
		<addSourceBuffer public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="js.html.SourceBuffer"/>
			</f>
			<haxe_doc>Creates a new `SourceBuffer` of the given MIME type and adds it to the `MediaSource.sourceBuffers` list.
		@throws DOMError</haxe_doc>
		</addSourceBuffer>
		<removeSourceBuffer public="1" set="method">
			<f a="sourceBuffer">
				<c path="js.html.SourceBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given `SourceBuffer` from the `MediaSource.sourceBuffers` list.
		@throws DOMError</haxe_doc>
		</removeSourceBuffer>
		<endOfStream public="1" set="method">
			<f a="?error">
				<x path="js.html.MediaSourceEndOfStreamError"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Signals the end of the stream.
		@throws DOMError</haxe_doc>
		</endOfStream>
		<setLiveSeekableRange public="1" set="method">
			<f a="start:end">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the range that the user can seek to in the media element.
		@throws DOMError</haxe_doc>
		</setLiveSeekableRange>
		<clearLiveSeekableRange public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears a seekable range privious set with a call to `setLiveSeekableRange()`.
		@throws DOMError</haxe_doc>
		</clearLiveSeekableRange>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MediaSource` interface of the Media Source Extensions API represents a source of media data for an `HTMLMediaElement` object. A `MediaSource` object can be attached to a `HTMLMediaElement` to be played in the user agent.

	Documentation [MediaSource](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaSource>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaSource"</e></m></meta>
	</class>
	<abstract path="js.html.MediaSourceEndOfStreamError" params="" file="/home/vsts/work/1/s/std/js/html/MediaSourceEndOfStreamError.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaSourceEndOfStreamError.MediaSourceEndOfStreamError_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaSourceEndOfStreamError.hx" private="1" module="js.html.MediaSourceEndOfStreamError" extern="1" final="1">
	<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="28" static="1">
		<x path="js.html.MediaSourceEndOfStreamError"/>
		<meta>
			<m n=":value"><e>cast "network"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NETWORK>
	<DECODE public="1" get="inline" set="null" expr="cast &quot;decode&quot;" line="29" static="1">
		<x path="js.html.MediaSourceEndOfStreamError"/>
		<meta>
			<m n=":value"><e>cast "decode"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DECODE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._MediaSourceEndOfStreamError.MediaSourceEndOfStreamError_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaSourceEndOfStreamError.hx" private="1" module="js.html.MediaSourceEndOfStreamError" extern="1" final="1">
		<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="28" static="1">
			<x path="js.html.MediaSourceEndOfStreamError"/>
			<meta>
				<m n=":value"><e>cast "network"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NETWORK>
		<DECODE public="1" get="inline" set="null" expr="cast &quot;decode&quot;" line="29" static="1">
			<x path="js.html.MediaSourceEndOfStreamError"/>
			<meta>
				<m n=":value"><e>cast "decode"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DECODE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.MediaSourceReadyState" params="" file="/home/vsts/work/1/s/std/js/html/MediaSourceReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaSourceReadyState.MediaSourceReadyState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaSourceReadyState.hx" private="1" module="js.html.MediaSourceReadyState" extern="1" final="1">
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="28" static="1">
		<x path="js.html.MediaSourceReadyState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="29" static="1">
		<x path="js.html.MediaSourceReadyState"/>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN>
	<ENDED public="1" get="inline" set="null" expr="cast &quot;ended&quot;" line="30" static="1">
		<x path="js.html.MediaSourceReadyState"/>
		<meta>
			<m n=":value"><e>cast "ended"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ENDED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._MediaSourceReadyState.MediaSourceReadyState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaSourceReadyState.hx" private="1" module="js.html.MediaSourceReadyState" extern="1" final="1">
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="28" static="1">
			<x path="js.html.MediaSourceReadyState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="29" static="1">
			<x path="js.html.MediaSourceReadyState"/>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN>
		<ENDED public="1" get="inline" set="null" expr="cast &quot;ended&quot;" line="30" static="1">
			<x path="js.html.MediaSourceReadyState"/>
			<meta>
				<m n=":value"><e>cast "ended"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ENDED>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.MediaStreamConstraints" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamConstraints.hx">
		<a>
			<video>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not a video track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the video track included in the returned `MediaStream`. If constraints are specified, a video track is inherently requested.</haxe_doc>
			</video>
			<picture>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</picture>
			<peerIdentity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` identifying the peer who has sole access to the stream. If this property is specified, only the indicated peer can receive and use the stream. Streams isolated in this way can only be displayed in a media element (`audio` or `video`) where the content is protected just as if `CORS` cross-origin rules were in effect. When a peer identity is set, `MediaStreamTrack`s from that peer have their `MediaStreamTrack.isolated` flag set to `true`.</haxe_doc>
			</peerIdentity>
			<fake>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</fake>
			<audio>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not an audio track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the audio track included in the returned `MediaStream`. If constraints are specified, an audio track is inherently requested.</haxe_doc>
			</audio>
		</a>
		<haxe_doc><![CDATA[The `MediaStreamConstraints` dictionary is used when calling `getUserMedia()` to specify what kinds of tracks should be included in the returned `MediaStream`, and, optionally, to establish constraints for those tracks' settings.

	Documentation [MediaStreamConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaStreamError" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamError.hx"><a>
	<name set="null"><c path="String"/></name>
	<message set="null"><c path="String"/></message>
	<constraint set="null"><c path="String"/></constraint>
</a></typedef>
	<class path="js.html.MediaStreamEvent" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<stream public="1" set="null">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Contains the `MediaStream` containing the stream associated with the event.</haxe_doc>
		</stream>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.MediaStreamEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MediaStreamEvent` interface represents events that occurs in relation to a `MediaStream`. Two events of this type can be thrown: `addstream` and `removestream`.

	Documentation [MediaStreamEvent](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MediaStreamEventInit" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamEventInit.hx"><a>
	<stream>
		<x path="Null"><c path="js.html.MediaStream"/></x>
		<meta><m n=":optional"/></meta>
	</stream>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.MediaStreamTrackEvent" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamTrackEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<track public="1" set="null">
			<c path="js.html.MediaStreamTrack"/>
			<haxe_doc>A `MediaStreamTrack` object representing the track which was added to the stream.</haxe_doc>
		</track>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.MediaStreamTrackEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MediaStreamTrackEvent` interface represents events which indicate that a `MediaStream` has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.

	Documentation [MediaStreamTrackEvent](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamTrackEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MediaStreamTrackEventInit" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamTrackEventInit.hx"><a>
	<track><c path="js.html.MediaStreamTrack"/></track>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.MediaStreamTrackState" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamTrackState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaStreamTrackState.MediaStreamTrackState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamTrackState.hx" private="1" module="js.html.MediaStreamTrackState" extern="1" final="1">
	<LIVE public="1" get="inline" set="null" expr="cast &quot;live&quot;" line="28" static="1">
		<x path="js.html.MediaStreamTrackState"/>
		<meta>
			<m n=":value"><e>cast "live"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LIVE>
	<ENDED public="1" get="inline" set="null" expr="cast &quot;ended&quot;" line="29" static="1">
		<x path="js.html.MediaStreamTrackState"/>
		<meta>
			<m n=":value"><e>cast "ended"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ENDED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._MediaStreamTrackState.MediaStreamTrackState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/MediaStreamTrackState.hx" private="1" module="js.html.MediaStreamTrackState" extern="1" final="1">
		<LIVE public="1" get="inline" set="null" expr="cast &quot;live&quot;" line="28" static="1">
			<x path="js.html.MediaStreamTrackState"/>
			<meta>
				<m n=":value"><e>cast "live"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LIVE>
		<ENDED public="1" get="inline" set="null" expr="cast &quot;ended&quot;" line="29" static="1">
			<x path="js.html.MediaStreamTrackState"/>
			<meta>
				<m n=":value"><e>cast "ended"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ENDED>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.MediaTrackConstraintSet" params="" file="/home/vsts/work/1/s/std/js/html/MediaTrackConstraintSet.hx"><a>
	<width>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</width>
	<viewportWidth>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportWidth>
	<viewportOffsetY>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetY>
	<viewportOffsetX>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetX>
	<viewportHeight>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportHeight>
	<scrollWithPage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</scrollWithPage>
	<noiseSuppression>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</noiseSuppression>
	<mediaSource>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</mediaSource>
	<height>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</height>
	<frameRate>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</frameRate>
	<facingMode>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</facingMode>
	<echoCancellation>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</echoCancellation>
	<deviceId>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</deviceId>
	<channelCount>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</channelCount>
	<browserWindow>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</browserWindow>
	<autoGainControl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</autoGainControl>
</a></typedef>
	<typedef path="js.html.MediaTrackConstraints" params="" file="/home/vsts/work/1/s/std/js/html/MediaTrackConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</width>
			<viewportWidth>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</height>
			<frameRate>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</autoGainControl>
			<advanced>
				<x path="Null"><c path="Array"><t path="js.html.MediaTrackConstraintSet"/></c></x>
				<meta><m n=":optional"/></meta>
			</advanced>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackConstraints` dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into `applyConstraints()` to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling `getConstraints()`.

	Documentation [MediaTrackConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSettings" params="" file="/home/vsts/work/1/s/std/js/html/MediaTrackSettings.hx">
		<a>
			<width>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the `MediaTrackSettings.width` property, specifying the width of the track's video data in pixels.</haxe_doc>
			</width>
			<viewportWidth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.noiseSuppression` property, which is `true` if noise suppression is enabled and is `false` otherwise.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.height`` property, specifying the height of the track's video data in pixels.</haxe_doc>
			</height>
			<frameRate>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A double-precision floating point value indicating the current value of the ``MediaTrackConstraints.frameRate`` property, specifying how many frames of video per second the track includes. If the value can't be determined for any reason, the value will match the vertical sync rate of the device the user agent is running on.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean indicating the current value of the ``MediaTrackConstraints.echoCancellation`` property, specifying `true` if echo cancellation is enabled, otherwise `false`.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` indicating the current value of the ``MediaTrackConstraints.deviceId`` property. The device ID is a origin-unique string identifying the source of the track; this is usually a `GUID`. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling `MediaDevices.getUserMedia()`.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.channelCount`` property, specifying the number of audio channels present on the track (therefore indicating how many audio samples exist in each audio frame). This is 1 for mono, 2 for stereo, and so forth.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.autoGainControl` property, which is `true` if automatic gain control is enabled and is `false` otherwise.</haxe_doc>
			</autoGainControl>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSettings` dictionary is used to return the current values configured for each of a `MediaStreamTrack`'s settings. These values will adhere as closely as possible to any constraints previously described using a `MediaTrackConstraints` object and set using `applyConstraints()`, and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.

	Documentation [MediaTrackSettings](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSupportedConstraints" params="" file="/home/vsts/work/1/s/std/js/html/MediaTrackSupportedConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `width` constraint is supported in the current environment.</haxe_doc>
			</width>
			<volume>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `volume` constraint is supported in the current environment.</haxe_doc>
			</volume>
			<viewportWidth>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<sampleSize>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleSize` constraint is supported in the current environment.</haxe_doc>
			</sampleSize>
			<sampleRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleRate` constraint is supported in the current environment.</haxe_doc>
			</sampleRate>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `noiseSuppression` constraint is supported in the current environment.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<latency>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `latency` constraint is supported in the current environment.</haxe_doc>
			</latency>
			<height>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `height` constraint is supported in the current environment.</haxe_doc>
			</height>
			<groupId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `groupId` constraint is supported in the current environment.</haxe_doc>
			</groupId>
			<frameRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `frameRate` constraint is supported in the current environment.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `facingMode` constraint is supported in the current environment.</haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `echoCancellation` constraint is supported in the current environment.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `deviceId` constraint is supported in the current environment.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `channelCount` constraint is supported in the current environment.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `autoGainControl` constraint is supported in the current environment.</haxe_doc>
			</autoGainControl>
			<aspectRatio>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `aspectRatio` constraint is supported in the current environment.</haxe_doc>
			</aspectRatio>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSupportedConstraints` dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the `MediaStreamTrack` object. An object conforming to `MediaTrackSupportedConstraints` is returned by `MediaDevices.getSupportedConstraints()`.

	Documentation [MediaTrackSupportedConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints>]]></haxe_doc>
	</typedef>
	<class path="js.html.MenuElement" params="" file="/home/vsts/work/1/s/std/js/html/MenuElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLMenuElement"</e></m></meta>
	</class>
	<class path="js.html.MenuItemElement" params="" file="/home/vsts/work/1/s/std/js/html/MenuItemElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<icon public="1"><c path="String"/></icon>
		<disabled public="1"><x path="Bool"/></disabled>
		<checked public="1"><x path="Bool"/></checked>
		<radiogroup public="1"><c path="String"/></radiogroup>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<meta><m n=":native"><e>"HTMLMenuItemElement"</e></m></meta>
	</class>
	<class path="js.html.MessageChannel" params="" file="/home/vsts/work/1/s/std/js/html/MessageChannel.hx" extern="1">
		<port1 public="1" set="null">
			<c path="js.html.MessagePort"/>
			<haxe_doc>Returns port1 of the channel.</haxe_doc>
		</port1>
		<port2 public="1" set="null">
			<c path="js.html.MessagePort"/>
			<haxe_doc>Returns port2 of the channel.</haxe_doc>
		</port2>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MessageChannel` interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two `MessagePort` properties.

	Documentation [MessageChannel](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel>]]></haxe_doc>
		<meta><m n=":native"><e>"MessageChannel"</e></m></meta>
	</class>
	<class path="js.html.MessageEvent" params="" file="/home/vsts/work/1/s/std/js/html/MessageEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<data public="1" set="null">
			<d/>
			<haxe_doc>The data sent by the message emitter.</haxe_doc>
		</data>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` representing the origin of the message emitter.</haxe_doc>
		</origin>
		<lastEventId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a unique ID for the event.</haxe_doc>
		</lastEventId>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.Window"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.MessagePort"/>
					<c path="js.html.ServiceWorker"/>
				</x>
			</x>
			<haxe_doc>A `MessageEventSource` (which can be a `WindowProxy`, `MessagePort`, or `ServiceWorker` object) representing the message emitter.</haxe_doc>
		</source>
		<ports public="1" set="null">
			<c path="Array"><c path="js.html.MessagePort"/></c>
			<haxe_doc>An array of `MessagePort` objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).</haxe_doc>
		</ports>
		<initMessageEvent public="1" set="method">
			<f a="type:?bubbles:?cancelable:?data:?origin:?lastEventId:?source:?ports" v=":false:false::&quot;&quot;:&quot;&quot;::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Window"/>
				<c path="Array"><c path="js.html.MessagePort"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ lastEventId : "", origin : "", cancelable : false, bubbles : false }</e></m></meta>
			<haxe_doc>Initializes a message event. Do not use this anymore — use the `MessageEvent.MessageEvent` constructor instead.</haxe_doc>
			<overloads>
				<initMessageEvent public="1" set="method">
					<f a="type:?bubbles:?cancelable:?data:?origin:?lastEventId:?source:?ports" v=":false:false::&quot;&quot;:&quot;&quot;::">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<d/>
						<c path="String"/>
						<c path="String"/>
						<c path="js.html.MessagePort"/>
						<c path="Array"><c path="js.html.MessagePort"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":value"><e>{ lastEventId : "", origin : "", cancelable : false, bubbles : false }</e></m></meta>
					<haxe_doc>Initializes a message event. Do not use this anymore — use the `MessageEvent.MessageEvent` constructor instead.</haxe_doc>
				</initMessageEvent>
				<initMessageEvent public="1" set="method">
					<f a="type:?bubbles:?cancelable:?data:?origin:?lastEventId:?source:?ports" v=":false:false::&quot;&quot;:&quot;&quot;::">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<d/>
						<c path="String"/>
						<c path="String"/>
						<c path="js.html.ServiceWorker"/>
						<c path="Array"><c path="js.html.MessagePort"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":value"><e>{ lastEventId : "", origin : "", cancelable : false, bubbles : false }</e></m></meta>
					<haxe_doc>Initializes a message event. Do not use this anymore — use the `MessageEvent.MessageEvent` constructor instead.</haxe_doc>
				</initMessageEvent>
			</overloads>
		</initMessageEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.MessageEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MessageEvent` interface represents a message received by a target object.

	Documentation [MessageEvent](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MessageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MessageEventInit" params="" file="/home/vsts/work/1/s/std/js/html/MessageEventInit.hx"><a>
	<source>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Window"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.MessagePort"/>
		<c path="js.html.ServiceWorker"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</source>
	<ports>
		<x path="Null"><c path="Array"><c path="js.html.MessagePort"/></c></x>
		<meta><m n=":optional"/></meta>
	</ports>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<lastEventId>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</lastEventId>
	<data>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.MessagePort" params="" file="/home/vsts/work/1/s/std/js/html/MessagePort.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<haxe_doc><![CDATA[The `MessagePort` interface of the Channel Messaging API represents one of the two ports of a `MessageChannel`, allowing messages to be sent from one port and listening out for them arriving at the other.

	Documentation [MessagePort](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MessagePort>]]></haxe_doc>
		<meta><m n=":native"><e>"MessagePort"</e></m></meta>
	</class>
	<class path="js.html.MetaElement" params="" file="/home/vsts/work/1/s/std/js/html/MetaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<httpEquiv public="1"><c path="String"/></httpEquiv>
		<content public="1"><c path="String"/></content>
		<scheme public="1"><c path="String"/></scheme>
		<haxe_doc><![CDATA[The `HTMLMetaElement` interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLMetaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMetaElement"</e></m></meta>
	</class>
	<class path="js.html.MeterElement" params="" file="/home/vsts/work/1/s/std/js/html/MeterElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the currrent value, reflecting the `value` attribute.</haxe_doc>
		</value>
		<min public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the minimum value, reflecting the `min` attribute.</haxe_doc>
		</min>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the maximum value, reflecting the `max` attribute.</haxe_doc>
		</max>
		<low public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the low boundary, reflecting the `low`attribute.</haxe_doc>
		</low>
		<high public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the high boundary, reflecting the `high` attribute.</haxe_doc>
		</high>
		<optimum public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the optimum, reflecting the `optimum` attribute.</haxe_doc>
		</optimum>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements that are associated with the element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The HTML `meter` elements expose the `HTMLMeterElement` interface, which provides special properties and methods (beyond the `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `meter` elements.

	Documentation [HTMLMeterElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMeterElement"</e></m></meta>
	</class>
	<class path="js.html.MimeType" params="" file="/home/vsts/work/1/s/std/js/html/MimeType.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a description of the associated plugin or an empty string if there is none.</haxe_doc>
		</description>
		<enabledPlugin public="1" set="null">
			<c path="js.html.Plugin"/>
			<haxe_doc>Returns an instance of `Plugin` containing information about the plugin itself.</haxe_doc>
		</enabledPlugin>
		<suffixes public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list, but support more file extenions than can be anticipated. It might therefore return an empty string.</haxe_doc>
		</suffixes>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the MIME type of the associated plugin.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `MimeType` interface provides contains information about a MIME type associated with a particular plugin. `NavigatorPlugins.mimeTypes` returns an array of this object.

	Documentation [MimeType](https://developer.mozilla.org/en-US/docs/Web/API/MimeType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeType>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeType"</e></m></meta>
	</class>
	<class path="js.html.MimeTypeArray" params="" file="/home/vsts/work/1/s/std/js/html/MimeTypeArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of items in the array.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified index.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `MimeTypeArray` interface returns an array of `MimeType` instances, each of which contains information about a supported browser plugins. This object is returned by `NavigatorPlugins.mimeTypes`.

	Documentation [MimeTypeArray](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeTypeArray"</e></m></meta>
	</class>
	<class path="js.html.ModElement" params="" file="/home/vsts/work/1/s/std/js/html/ModElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URI of a resource explaining the change.</haxe_doc>
		</cite>
		<dateTime public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `datetime` HTML attribute, containing a date-and-time string representing a timestamp for the change.</haxe_doc>
		</dateTime>
		<haxe_doc><![CDATA[The `HTMLModElement` interface provides special properties (beyond the regular methods and properties available through the `HTMLElement` interface they also have available to them by inheritance) for manipulating modification elements, that is `del` and `ins`.

	Documentation [HTMLModElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLModElement"</e></m></meta>
	</class>
	<typedef path="js.html.MouseEventInit" params="" file="/home/vsts/work/1/s/std/js/html/MouseEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.MouseScrollEvent" params="" file="/home/vsts/work/1/s/std/js/html/MouseScrollEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<HORIZONTAL_AXIS public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HORIZONTAL_AXIS>
		<VERTICAL_AXIS public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</VERTICAL_AXIS>
		<axis public="1" set="null"><x path="Int"/></axis>
		<initMouseScrollEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?detail:?screenX:?screenY:?clientX:?clientY:?ctrlKey:?altKey:?shiftKey:?metaKey:?button:?relatedTarget:?axis" v=":false:false::0:0:0:0:0:false:false:false:false:0::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ axis : 0, button : 0, metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, clientY : 0, clientX : 0, screenY : 0, screenX : 0, detail : 0, cancelable : false, canBubble : false }</e></m></meta>
		</initMouseScrollEvent>
		<haxe_doc><![CDATA[The `MouseScrollEvent` interface represents events that occur due to the user moving a mouse wheel or similar input device.

	Documentation [MouseScrollEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MouseScrollEvent"</e></m></meta>
	</class>
	<class path="js.html.MutationEvent" params="" file="/home/vsts/work/1/s/std/js/html/MutationEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<MODIFICATION public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MODIFICATION>
		<ADDITION public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ADDITION>
		<REMOVAL public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</REMOVAL>
		<relatedNode public="1" set="null"><c path="js.html.Node"/></relatedNode>
		<prevValue public="1" set="null"><c path="String"/></prevValue>
		<newValue public="1" set="null"><c path="String"/></newValue>
		<attrName public="1" set="null"><c path="String"/></attrName>
		<attrChange public="1" set="null"><x path="Int"/></attrChange>
		<initMutationEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?relatedNode:?prevValue:?newValue:?attrName:?attrChange" v=":false:false::&quot;&quot;:&quot;&quot;:&quot;&quot;:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ attrChange : 0, attrName : "", newValue : "", prevValue : "", cancelable : false, canBubble : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initMutationEvent>
		<haxe_doc><![CDATA[Provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.

	Documentation [MutationEvent](https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MutationEvent"</e></m></meta>
	</class>
	<class path="js.html.MutationObserver" params="" file="/home/vsts/work/1/s/std/js/html/MutationObserver.hx" extern="1">
		<observe public="1" set="method">
			<f a="target:?options">
				<c path="js.html.Node"/>
				<x path="Null"><t path="js.html.MutationObserverInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</observe>
		<disconnect public="1" set="method"><f a=""><x path="Void"/></f></disconnect>
		<takeRecords public="1" set="method"><f a=""><c path="Array"><c path="js.html.MutationRecord"/></c></f></takeRecords>
		<new public="1" set="method">
			<f a="mutationCallback">
				<f a=":">
					<c path="Array"><c path="js.html.MutationRecord"/></c>
					<c path="js.html.MutationObserver"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MutationObserver` interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification.

	Documentation [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver>]]></haxe_doc>
		<meta><m n=":native"><e>"MutationObserver"</e></m></meta>
	</class>
	<typedef path="js.html.MutationObserverInit" params="" file="/home/vsts/work/1/s/std/js/html/MutationObserverInit.hx">
		<a>
			<subtree>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Set to `true` to extend monitoring to the entire subtree of nodes rooted at `target`. All of the other `MutationObserverInit` properties are then extended to all of the nodes in the subtree instead of applying solely to the `target` node. The default value is `false`.</haxe_doc>
			</subtree>
			<childList>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Set to `true` to monitor the target node (and, if `subtree` is `true`, its descendants) for the addition or removal of new child nodes. The default is `false`.</haxe_doc>
			</childList>
			<characterDataOldValue>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Set to `true` to record the previous value of a node's text whenever the text changes on nodes being monitored. For details and an example, see `/en-US/docs/Web/API/MutationObserver`. No default value.</haxe_doc>
			</characterDataOldValue>
			<characterData>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Set to `true` to monitor the specified target node or subtree for changes to the character data contained within the node or nodes. No default value.</haxe_doc>
			</characterData>
			<attributes>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Set to `true` to watch for changes to the value of attributes on the node or nodes being monitored. The default value is `false`.</haxe_doc>
			</attributes>
			<attributeOldValue>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Set to `true` to record the previous value of any attribute that changes when monitoring the node or nodes for attribute changes; see `/en-US/docs/Web/API/MutationObserver` for details on watching for attribute changes and value recording. No default value.</haxe_doc>
			</attributeOldValue>
			<attributeFilter>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An array of specific attribute names to be monitored. If this property isn't included, changes to all attributes cause mutation notifications. No default value.</haxe_doc>
			</attributeFilter>
		</a>
		<haxe_doc><![CDATA[The `MutationObserverInit` dictionary describes the configuration of a mutation observer. As such, it's primarily used as the type of the `options` parameter on the `MutationObserver.observe()` method.

	Documentation [MutationObserverInit](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MutationObserverInit>]]></haxe_doc>
	</typedef>
	<class path="js.html.MutationRecord" params="" file="/home/vsts/work/1/s/std/js/html/MutationRecord.hx" extern="1">
		<type public="1" set="null"><c path="String"/></type>
		<target public="1" set="null"><c path="js.html.Node"/></target>
		<addedNodes public="1" set="null"><c path="js.html.NodeList"/></addedNodes>
		<removedNodes public="1" set="null"><c path="js.html.NodeList"/></removedNodes>
		<previousSibling public="1" set="null"><c path="js.html.Node"/></previousSibling>
		<nextSibling public="1" set="null"><c path="js.html.Node"/></nextSibling>
		<attributeName public="1" set="null"><c path="String"/></attributeName>
		<attributeNamespace public="1" set="null"><c path="String"/></attributeNamespace>
		<oldValue public="1" set="null"><c path="String"/></oldValue>
		<haxe_doc><![CDATA[A `MutationRecord` represents an individual DOM mutation. It is the object that is passed to `MutationObserver`'s callback.

	Documentation [MutationRecord](https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord>]]></haxe_doc>
		<meta><m n=":native"><e>"MutationRecord"</e></m></meta>
	</class>
	<class path="js.html.NamedNodeMap" params="" file="/home/vsts/work/1/s/std/js/html/NamedNodeMap.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the amount of objects in the map.</haxe_doc>
		</length>
		<getNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr`, corresponding to the given name.</haxe_doc>
		</getNamedItem>
		<setNamedItem public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given name.
		@throws DOMError</haxe_doc>
		</setNamedItem>
		<removeNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given map.
		@throws DOMError</haxe_doc>
		</removeNamedItem>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns the `Attr` at the given index, or `null` if the index is higher or equal to the number of nodes.</haxe_doc>
		</item>
		<getNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr` identified by a namespace and related local name.</haxe_doc>
		</getNamedItemNS>
		<setNamedItemNS public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</setNamedItemNS>
		<removeNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</removeNamedItemNS>
		<haxe_doc><![CDATA[The `NamedNodeMap` interface represents a collection of `Attr` objects. Objects inside a `NamedNodeMap` are not in any particular order, unlike `NodeList`, although they may be accessed by an index as in an array.

	Documentation [NamedNodeMap](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap>]]></haxe_doc>
		<meta><m n=":native"><e>"NamedNodeMap"</e></m></meta>
	</class>
	<abstract path="js.html.NavigationType" params="" file="/home/vsts/work/1/s/std/js/html/NavigationType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NavigationType.NavigationType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/NavigationType.hx" private="1" module="js.html.NavigationType" extern="1" final="1">
	<NAVIGATE public="1" get="inline" set="null" expr="cast &quot;navigate&quot;" line="28" static="1">
		<x path="js.html.NavigationType"/>
		<meta>
			<m n=":value"><e>cast "navigate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NAVIGATE>
	<RELOAD public="1" get="inline" set="null" expr="cast &quot;reload&quot;" line="29" static="1">
		<x path="js.html.NavigationType"/>
		<meta>
			<m n=":value"><e>cast "reload"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RELOAD>
	<BACK_FORWARD public="1" get="inline" set="null" expr="cast &quot;back_forward&quot;" line="30" static="1">
		<x path="js.html.NavigationType"/>
		<meta>
			<m n=":value"><e>cast "back_forward"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BACK_FORWARD>
	<PRERENDER public="1" get="inline" set="null" expr="cast &quot;prerender&quot;" line="31" static="1">
		<x path="js.html.NavigationType"/>
		<meta>
			<m n=":value"><e>cast "prerender"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRERENDER>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._NavigationType.NavigationType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/NavigationType.hx" private="1" module="js.html.NavigationType" extern="1" final="1">
		<NAVIGATE public="1" get="inline" set="null" expr="cast &quot;navigate&quot;" line="28" static="1">
			<x path="js.html.NavigationType"/>
			<meta>
				<m n=":value"><e>cast "navigate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NAVIGATE>
		<RELOAD public="1" get="inline" set="null" expr="cast &quot;reload&quot;" line="29" static="1">
			<x path="js.html.NavigationType"/>
			<meta>
				<m n=":value"><e>cast "reload"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RELOAD>
		<BACK_FORWARD public="1" get="inline" set="null" expr="cast &quot;back_forward&quot;" line="30" static="1">
			<x path="js.html.NavigationType"/>
			<meta>
				<m n=":value"><e>cast "back_forward"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BACK_FORWARD>
		<PRERENDER public="1" get="inline" set="null" expr="cast &quot;prerender&quot;" line="31" static="1">
			<x path="js.html.NavigationType"/>
			<meta>
				<m n=":value"><e>cast "prerender"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRERENDER>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Navigator" params="" file="/home/vsts/work/1/s/std/js/html/Navigator.hx" extern="1">
		<permissions public="1" set="null">
			<c path="js.html.Permissions"/>
			<haxe_doc>Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.</haxe_doc>
		</permissions>
		<mimeTypes public="1" set="null"><c path="js.html.MimeTypeArray"/></mimeTypes>
		<plugins public="1" set="null"><c path="js.html.PluginArray"/></plugins>
		<doNotTrack public="1" set="null">
			<c path="String"/>
			<haxe_doc>Reports the value of the user's do-not-track preference. When this value is "yes", your web site or application should not track the user.</haxe_doc>
		</doNotTrack>
		<maxTouchPoints public="1" set="null"><x path="Int"/></maxTouchPoints>
		<oscpu public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string that represents the current operating system.</haxe_doc>
		</oscpu>
		<vendor public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor name of the current browser (e.g., "Netscape6").</haxe_doc>
		</vendor>
		<vendorSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor version number (e.g. "6.1").</haxe_doc>
		</vendorSub>
		<productSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build number of the current browser (e.g., "20060909").</haxe_doc>
		</productSub>
		<cookieEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if setting a cookie will be ignored and true otherwise.</haxe_doc>
		</cookieEnabled>
		<buildID public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build identifier of the browser (e.g., "2006090803").</haxe_doc>
		</buildID>
		<mediaDevices public="1" set="null">
			<c path="js.html.MediaDevices"/>
			<haxe_doc>Returns a reference to a `MediaDevices` object which can then be used to get information about available media devices (`MediaDevices.enumerateDevices()`), find out what constrainable properties are supported for media on the user's computer and user agent (`MediaDevices.getSupportedConstraints()`), and to request access to media using `MediaDevices.getUserMedia()`.</haxe_doc>
		</mediaDevices>
		<serviceWorker public="1" set="null">
			<c path="js.html.ServiceWorkerContainer"/>
			<haxe_doc>Returns a `ServiceWorkerContainer` object, which provides access to registration, removal, upgrade, and communication with the `ServiceWorker` objects for the associated document.</haxe_doc>
		</serviceWorker>
		<clipboard public="1" set="null"><c path="js.html.Clipboard"/></clipboard>
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<geolocation public="1" set="null">
			<t path="js.html.Geolocation"/>
			<haxe_doc>Returns a `Geolocation` object allowing accessing the location of the device.</haxe_doc>
		</geolocation>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<vibrate public="1" set="method">
			<f a="pattern">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<overloads><vibrate public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Bool"/>
</f></vibrate></overloads>
		</vibrate>
		<javaEnabled public="1" set="method"><f a=""><x path="Bool"/></f></javaEnabled>
		<getGamepads public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Gamepad"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getGamepads>
		<requestMIDIAccess public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.midi.MIDIOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.midi.MIDIAccess"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestMIDIAccess>
		<sendBeacon public="1" set="method">
			<f a="url:?data">
				<c path="String"/>
				<c path="js.html.Blob"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.FormData"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
			</overloads>
		</sendBeacon>
		<requestMediaKeySystemAccess public="1" set="method"><f a="keySystem:supportedConfigurations">
	<c path="String"/>
	<c path="Array"><t path="js.html.eme.MediaKeySystemConfiguration"/></c>
	<c path="js.lib.Promise"><c path="js.html.eme.MediaKeySystemAccess"/></c>
</f></requestMediaKeySystemAccess>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `Navigator` interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.

	Documentation [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Navigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Navigator>]]></haxe_doc>
		<meta><m n=":native"><e>"Navigator"</e></m></meta>
	</class>
	<class path="js.html.NodeFilter" params="" file="/home/vsts/work/1/s/std/js/html/NodeFilter.hx" extern="1">
		<FILTER_ACCEPT public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FILTER_ACCEPT>
		<FILTER_REJECT public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</FILTER_REJECT>
		<FILTER_SKIP public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</FILTER_SKIP>
		<SHOW_ALL public="1" get="inline" set="null" expr="cast 4294967295" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</SHOW_ALL>
		<SHOW_ELEMENT public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SHOW_ELEMENT>
		<SHOW_ATTRIBUTE public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SHOW_ATTRIBUTE>
		<SHOW_TEXT public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHOW_TEXT>
		<SHOW_CDATA_SECTION public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SHOW_CDATA_SECTION>
		<SHOW_ENTITY_REFERENCE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SHOW_ENTITY_REFERENCE>
		<SHOW_ENTITY public="1" get="inline" set="null" expr="32" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</SHOW_ENTITY>
		<SHOW_PROCESSING_INSTRUCTION public="1" get="inline" set="null" expr="64" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</SHOW_PROCESSING_INSTRUCTION>
		<SHOW_COMMENT public="1" get="inline" set="null" expr="128" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" get="inline" set="null" expr="256" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</SHOW_DOCUMENT>
		<SHOW_DOCUMENT_TYPE public="1" get="inline" set="null" expr="512" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</SHOW_DOCUMENT_TYPE>
		<SHOW_DOCUMENT_FRAGMENT public="1" get="inline" set="null" expr="1024" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</SHOW_DOCUMENT_FRAGMENT>
		<SHOW_NOTATION public="1" get="inline" set="null" expr="2048" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2048</e></m></meta>
		</SHOW_NOTATION>
		<acceptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> that will be used to tell if a given <code>Node</code> must be accepted or not by the <code>NodeIterator</code> or <code>TreeWalker</code> iteration algorithm. This method is expected to be written by the user of a <code>NodeFilter</code>. Possible return values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>FILTER_ACCEPT</code></td>
						<td>Value returned by the <code>NodeFilter.acceptNode()</code> method when a node should be accepted.</td>
					</tr>
					<tr>
						<td><code>FILTER_REJECT</code></td>
						<td>Value to be returned by the <code>NodeFilter.acceptNode()</code> method when a node should be rejected. For <code>TreeWalker</code>, child nodes are also rejected. For <code>NodeIterator</code>, this flag is synonymous with FILTER_SKIP.</td>
					</tr>
					<tr>
						<td><code>FILTER_SKIP</code></td>
						<td>Value to be returned by <code>NodeFilter.acceptNode()</code> for nodes to be skipped by the <code>NodeIterator</code> or <code>TreeWalker</code> object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".</td>
					</tr>
				
			</table>]]></haxe_doc>
		</acceptNode>
		<haxe_doc><![CDATA[A `NodeFilter` interface represents an object used to filter the nodes in a `NodeIterator` or `TreeWalker`. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.

	Documentation [NodeFilter](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeFilter"</e></m></meta>
	</class>
	<class path="js.html.NodeIterator" params="" file="/home/vsts/work/1/s/std/js/html/NodeIterator.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `NodeIterator` was created.</haxe_doc>
		</root>
		<referenceNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` to which the iterator is anchored.</haxe_doc>
		</referenceNode>
		<pointerBeforeReferenceNode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` flag that indicates whether the `NodeIterator` is anchored before, the flag being `true`, or after, the flag being `false`, the anchor node.</haxe_doc>
		</pointerBeforeReferenceNode>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Numerical value</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ALL</code></td>
						<td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
						<td>Shows all nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ATTRIBUTE</code> <em>(deprecated)</em></td>
						<td><code>2</code></td>
						<td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Attr</code> node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_CDATA_SECTION</code> <em>(deprecated)</em></td>
						<td><code>8</code></td>
						<td>Shows <code>CDATASection</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_COMMENT</code></td>
						<td><code>128</code></td>
						<td>Shows <code>Comment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT</code></td>
						<td><code>256</code></td>
						<td>Shows <code>Document</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
						<td><code>1024</code></td>
						<td>Shows <code>DocumentFragment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
						<td><code>512</code></td>
						<td>Shows <code>DocumentType</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ELEMENT</code></td>
						<td><code>1</code></td>
						<td>Shows <code>Element</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY</code> <em>(deprecated)</em></td>
						<td><code>32</code></td>
						<td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> <em>(deprecated)</em></td>
						<td><code>16</code></td>
						<td>Shows <code>EntityReference</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_NOTATION</code> <em>(deprecated)</em></td>
						<td><code>2048</code></td>
						<td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
						<td><code>64</code></td>
						<td>Shows <code>ProcessingInstruction</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_TEXT</code></td>
						<td><code>4</code></td>
						<td>Shows <code>Text</code> nodes.</td>
					</tr>
				
			</table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the next `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</nextNode>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the previous `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</previousNode>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the `NodeIterator` was no more used, but this is now useless.</haxe_doc>
		</detach>
		<haxe_doc><![CDATA[The `NodeIterator` interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.

	Documentation [NodeIterator](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeIterator"</e></m></meta>
	</class>
	<class path="js.html.NodeList" params="" file="/home/vsts/work/1/s/std/js/html/NodeList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of nodes in the `NodeList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns an item in the list by its index, or `null` if the index is out-of-bounds; can be used as an alternative to simply accessing `nodeList[idx]` (which instead returns  `undefined` when `idx` is out-of-bounds).</haxe_doc>
		</item>
		<haxe_doc><![CDATA[`NodeList` objects are collections of nodes such as those returned by properties such as `Node.childNodes` and the `document.querySelectorAll()` method.

	Documentation [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeList"</e></m></meta>
	</class>
	<class path="js.html.Notification" params="" file="/home/vsts/work/1/s/std/js/html/Notification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<permission public="1" set="null" static="1">
			<x path="js.html.NotificationPermission"/>
			<haxe_doc>A string representing the current permission to display notifications. Possible values are:
		 
		  `denied` — The user refuses to have notifications displayed.
		  `granted` — The user accepts having notifications displayed.
		  `default` — The user choice is unknown and therefore the browser will act as if the value were denied.</haxe_doc>
		</permission>
		<onclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `click` event. It is triggered each time the user clicks on the notification.</haxe_doc>
		</onclick>
		<onshow public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `show` event. It is triggered when the notification is displayed.</haxe_doc>
		</onshow>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. It is triggered each time the notification encounters an error.</haxe_doc>
		</onerror>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `close` event. It is triggered when the user closes the notification.</haxe_doc>
		</onclose>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>The title of the notification as specified in the first parameter of the constructor.</haxe_doc>
		</title>
		<dir public="1" set="null">
			<x path="js.html.NotificationDirection"/>
			<haxe_doc>The text direction of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</dir>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>The language code of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</lang>
		<body public="1" set="null">
			<c path="String"/>
			<haxe_doc>The body string of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</body>
		<tag public="1" set="null">
			<c path="String"/>
			<haxe_doc>The ID of the notification (if any) as specified in the constructor's `options` parameter.</haxe_doc>
		</tag>
		<icon public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the image used as an icon of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</icon>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns a structured clone of the notification’s data.</haxe_doc>
		</data>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Programmatically closes a notification.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Notification` interface of the Notifications API is used to configure and display desktop notifications to the user.

	Documentation [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Notification$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Notification>]]></haxe_doc>
		<meta><m n=":native"><e>"Notification"</e></m></meta>
	</class>
	<abstract path="js.html.NotificationDirection" params="" file="/home/vsts/work/1/s/std/js/html/NotificationDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" extern="1" final="1">
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
		<x path="js.html.NotificationDirection"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<LTR public="1" get="inline" set="null" expr="cast &quot;ltr&quot;" line="29" static="1">
		<x path="js.html.NotificationDirection"/>
		<meta>
			<m n=":value"><e>cast "ltr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LTR>
	<RTL public="1" get="inline" set="null" expr="cast &quot;rtl&quot;" line="30" static="1">
		<x path="js.html.NotificationDirection"/>
		<meta>
			<m n=":value"><e>cast "rtl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RTL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" extern="1" final="1">
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
			<x path="js.html.NotificationDirection"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<LTR public="1" get="inline" set="null" expr="cast &quot;ltr&quot;" line="29" static="1">
			<x path="js.html.NotificationDirection"/>
			<meta>
				<m n=":value"><e>cast "ltr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LTR>
		<RTL public="1" get="inline" set="null" expr="cast &quot;rtl&quot;" line="30" static="1">
			<x path="js.html.NotificationDirection"/>
			<meta>
				<m n=":value"><e>cast "rtl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RTL>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.NotificationEvent" params="" file="/home/vsts/work/1/s/std/js/html/NotificationEvent.hx" extern="1">
		<extends path="js.html.ExtendableEvent"/>
		<notification public="1" set="null">
			<c path="js.html.Notification"/>
			<haxe_doc>Returns a `Notification` object representing the notification that was clicked to fire the event.</haxe_doc>
		</notification>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.NotificationEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The parameter passed into the `onnotificationclick` handler, the `NotificationEvent` interface represents a notification click event that is dispatched on the `ServiceWorkerGlobalScope` of a `ServiceWorker`.

	Documentation [NotificationEvent](https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"NotificationEvent"</e></m></meta>
	</class>
	<typedef path="js.html.NotificationEventInit" params="" file="/home/vsts/work/1/s/std/js/html/NotificationEventInit.hx"><a>
	<notification><c path="js.html.Notification"/></notification>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.NotificationOptions" params="" file="/home/vsts/work/1/s/std/js/html/NotificationOptions.hx"><a>
	<tag>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</tag>
	<requireInteraction>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</requireInteraction>
	<lang>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</lang>
	<icon>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</icon>
	<dir>
		<x path="Null"><x path="js.html.NotificationDirection"/></x>
		<meta><m n=":optional"/></meta>
	</dir>
	<data>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<body>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.NotificationPermission" params="" file="/home/vsts/work/1/s/std/js/html/NotificationPermission.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="28" static="1">
		<x path="js.html.NotificationPermission"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT>
	<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="29" static="1">
		<x path="js.html.NotificationPermission"/>
		<meta>
			<m n=":value"><e>cast "denied"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DENIED>
	<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="30" static="1">
		<x path="js.html.NotificationPermission"/>
		<meta>
			<m n=":value"><e>cast "granted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRANTED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="28" static="1">
			<x path="js.html.NotificationPermission"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT>
		<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="29" static="1">
			<x path="js.html.NotificationPermission"/>
			<meta>
				<m n=":value"><e>cast "denied"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DENIED>
		<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="30" static="1">
			<x path="js.html.NotificationPermission"/>
			<meta>
				<m n=":value"><e>cast "granted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRANTED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.OListElement" params="" file="/home/vsts/work/1/s/std/js/html/OListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value reflecting the `reversed` and defining if the numbering is descending, that is its value is `true`, or ascending (`false`).</haxe_doc>
		</reversed>
		<start public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the `start` and defining the value of the first number of the first element of the list.</haxe_doc>
		</start>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. It can have the following values:
		 
		  `'1'` meaning that decimal numbers are used: `1`, `2`, `3`, `4`, `5`, …
		  `'a'` meaning that the lowercase latin alphabet is used:  `a`, `b`, `c`, `d`, `e`, …
		  `'A'` meaning that the uppercase latin alphabet is used: `A`, `B`, `C`, `D`, `E`, …
		  `'i'` meaning that the lowercase latin numerals are used: `i`, `ii`, `iii`, `iv`, `v`, …
		  `'I'` meaning that the uppercase latin numerals are used: `I`, `II`, `III`, `IV`, `V`, …</haxe_doc>
		</type>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLOListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating ordered list elements.

	Documentation [HTMLOListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOListElement"</e></m></meta>
	</class>
	<class path="js.html.ObjectElement" params="" file="/home/vsts/work/1/s/std/js/html/ObjectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `data` HTML attribute, specifying the address of a resource's data.</haxe_doc>
		</data>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, specifying the MIME type of the resource.</haxe_doc>
		</type>
		<typeMustMatch public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `typeMustMatch` HTML attribute, indicating if the resource specified by `data` must only be played if it matches the `type` attribute.</haxe_doc>
		</typeMustMatch>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, specifying the name of the browsing context.</haxe_doc>
		</name>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, specifying a `map` element to use.</haxe_doc>
		</useMap>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Retuns a `HTMLFormElement` representing the object element's form owner, or null if there isn't one.</haxe_doc>
		</form>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.</haxe_doc>
		</height>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` representing the active document of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` representing the window proxy of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentWindow>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the element is a candidate for constraint validation. Always `false` for `HTMLObjectElement` objects.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Returns a `ValidityState` with the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<archive public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `archive` HTML attribute, containing a list of archives for resources for this object.</haxe_doc>
		</archive>
		<code public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.</haxe_doc>
		</code>
		<declare public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `declare` HTML attribute, indicating that this is a declaration, not an instantiation, of the object.</haxe_doc>
		</declare>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</hspace>
		<standby public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `standby` HTML attribute, specifying a message to display while the object loads.</haxe_doc>
		</standby>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</vspace>
		<codeBase public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codebase` HTML attribute, specifying the base path to use to resolve relative URIs.</haxe_doc>
		</codeBase>
		<codeType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codetype` HTML attribute, specifying the content type of the data.</haxe_doc>
		</codeType>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `border` HTML attribute, specifying the width of a border around the object.</haxe_doc>
		</border>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Retuns a `Boolean` that always is `true`, because `object` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLObjectElement` interface provides special properties and methods (beyond those on the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `object` element, representing external resources.

	Documentation [HTMLObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLObjectElement"</e></m></meta>
	</class>
	<typedef path="js.html.ObserverCallback" params="" file="/home/vsts/work/1/s/std/js/html/ObserverCallback.hx"><a><handleEvent set="method"><f a="observer">
	<c path="js.html.FetchObserver"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<typedef path="js.html.OfflineAudioCompletionEventInit" params="" file="/home/vsts/work/1/s/std/js/html/OfflineAudioCompletionEventInit.hx"><a>
	<renderedBuffer><c path="js.html.audio.AudioBuffer"/></renderedBuffer>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.OptGroupElement" params="" file="/home/vsts/work/1/s/std/js/html/OptGroupElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` representing whether or not the whole list of children `option` is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the label for the group.</haxe_doc>
		</label>
		<haxe_doc><![CDATA[The `HTMLOptGroupElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `optgroup` elements.

	Documentation [HTMLOptGroupElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptGroupElement"</e></m></meta>
	</class>
	<class path="js.html.OptionElement" params="" file="/home/vsts/work/1/s/std/js/html/OptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<label public="1"><c path="String"/></label>
		<defaultSelected public="1"><x path="Bool"/></defaultSelected>
		<selected public="1"><x path="Bool"/></selected>
		<value public="1"><c path="String"/></value>
		<text public="1"><c path="String"/></text>
		<index public="1" set="null"><x path="Int"/></index>
		<haxe_doc><![CDATA[The `HTMLOptionElement` interface represents `option` elements and inherits all classes and methods of the `HTMLElement` interface.

	Documentation [HTMLOptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionElement"</e></m></meta>
	</class>
	<class path="js.html.Option" params="" file="/home/vsts/work/1/s/std/js/html/Option.hx" extern="1">
		<extends path="js.html.OptionElement"/>
		<new public="1" set="method">
			<f a="?text:?value:?defaultSelected:?selected" v="&quot;&quot;::false:false">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selected : false, defaultSelected : false, text : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Option"</e></m></meta>
	</class>
	<typedef path="js.html.OptionalEffectTiming" params="" file="/home/vsts/work/1/s/std/js/html/OptionalEffectTiming.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</delay>
</a></typedef>
	<abstract path="js.html.OrientationLockType" params="" file="/home/vsts/work/1/s/std/js/html/OrientationLockType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" extern="1" final="1">
	<ANY public="1" get="inline" set="null" expr="cast &quot;any&quot;" line="28" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "any"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANY>
	<NATURAL public="1" get="inline" set="null" expr="cast &quot;natural&quot;" line="29" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "natural"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NATURAL>
	<LANDSCAPE public="1" get="inline" set="null" expr="cast &quot;landscape&quot;" line="30" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "landscape"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE>
	<PORTRAIT public="1" get="inline" set="null" expr="cast &quot;portrait&quot;" line="31" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "portrait"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT>
	<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="32" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "portrait-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_PRIMARY>
	<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="33" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "portrait-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_SECONDARY>
	<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="34" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "landscape-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_PRIMARY>
	<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="35" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "landscape-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_SECONDARY>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" extern="1" final="1">
		<ANY public="1" get="inline" set="null" expr="cast &quot;any&quot;" line="28" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "any"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANY>
		<NATURAL public="1" get="inline" set="null" expr="cast &quot;natural&quot;" line="29" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "natural"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NATURAL>
		<LANDSCAPE public="1" get="inline" set="null" expr="cast &quot;landscape&quot;" line="30" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "landscape"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE>
		<PORTRAIT public="1" get="inline" set="null" expr="cast &quot;portrait&quot;" line="31" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "portrait"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT>
		<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="32" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "portrait-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_PRIMARY>
		<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="33" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "portrait-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_SECONDARY>
		<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="34" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "landscape-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_PRIMARY>
		<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="35" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "landscape-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_SECONDARY>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.OrientationType" params="" file="/home/vsts/work/1/s/std/js/html/OrientationType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" extern="1" final="1">
	<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="28" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "portrait-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_PRIMARY>
	<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="29" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "portrait-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_SECONDARY>
	<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="30" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "landscape-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_PRIMARY>
	<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="31" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "landscape-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_SECONDARY>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" extern="1" final="1">
		<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="28" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "portrait-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_PRIMARY>
		<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="29" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "portrait-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_SECONDARY>
		<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="30" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "landscape-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_PRIMARY>
		<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="31" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "landscape-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_SECONDARY>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.OutputElement" params="" file="/home/vsts/work/1/s/std/js/html/OutputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<htmlFor public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>A `DOMTokenList` reflecting the `for` HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated `value`.</haxe_doc>
		</htmlFor>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` indicating the form associated with the control, reflecting the `form` HTML attribute if it is defined.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name for the control that is submitted with form data.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"output"`.</haxe_doc>
		</type>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the default value of the element, initially the empty string.</haxe_doc>
		</defaultValue>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the value of the contents of the elements. Behaves like the `Node.textContent` property.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the element is a candidate for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks the validity of the element and returns a `Boolean` holding the check result.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Triggers an `invalid` event and evaluates its result. if the result is `true`, then the problems with the constraints of this element are reported to the user. When the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user.</haxe_doc>
		</reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLOutputElement` interface provides properties and methods (beyond those inherited from `HTMLElement`) for manipulating the layout and presentation of `output` elements.

	Documentation [HTMLOutputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOutputElement"</e></m></meta>
	</class>
	<class path="js.html.PageTransitionEvent" params="" file="/home/vsts/work/1/s/std/js/html/PageTransitionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<persisted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if the document is loading from a cache.</haxe_doc>
		</persisted>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.PageTransitionEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PageTransitionEvent` is fired when a document is being loaded or unloaded.

	Documentation [PageTransitionEvent](https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PageTransitionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PageTransitionEventInit" params="" file="/home/vsts/work/1/s/std/js/html/PageTransitionEventInit.hx"><a>
	<persisted>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</persisted>
	<inFrameSwap>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</inFrameSwap>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.PaintRequest" params="" file="/home/vsts/work/1/s/std/js/html/PaintRequest.hx" extern="1">
		<clientRect public="1" set="null"><c path="js.html.DOMRect"/></clientRect>
		<reason public="1" set="null"><c path="String"/></reason>
		<meta><m n=":native"><e>"PaintRequest"</e></m></meta>
	</class>
	<class path="js.html.PaintRequestList" params="" file="/home/vsts/work/1/s/std/js/html/PaintRequestList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.PaintRequest"/>
</f></item>
		<meta><m n=":native"><e>"PaintRequestList"</e></m></meta>
	</class>
	<class path="js.html.WorkletGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/WorkletGlobalScope.hx" extern="1">
		<dump public="1" set="method"><f a="?str">
	<c path="String"/>
	<x path="Void"/>
</f></dump>
		<meta><m n=":native"><e>"WorkletGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.PaintWorkletGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/PaintWorkletGlobalScope.hx" extern="1">
		<extends path="js.html.WorkletGlobalScope"/>
		<registerPaint public="1" set="method"><f a="name:paintCtor">
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></registerPaint>
		<meta><m n=":native"><e>"PaintWorkletGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.ParagraphElement" params="" file="/home/vsts/work/1/s/std/js/html/ParagraphElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLParagraphElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `p` elements.

	Documentation [HTMLParagraphElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParagraphElement"</e></m></meta>
	</class>
	<class path="js.html.ParamElement" params="" file="/home/vsts/work/1/s/std/js/html/ParamElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the parameter. It reflects the `name` attribute.</haxe_doc>
		</name>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the value associated to the parameter. It reflects the `value` attribute.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the parameter when `valueType` has the `"ref"` value. It reflects the `type` attribute.</haxe_doc>
		</type>
		<valueType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the `value`. It reflects the ``valuetype`` attribute and has one of the values: `"data"`, `"ref"`, or `"object"`.</haxe_doc>
		</valueType>
		<haxe_doc><![CDATA[The `HTMLParamElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `param` elements, representing a pair of a key and a value that acts as a parameter for an `object` element.

	Documentation [HTMLParamElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParamElement"</e></m></meta>
	</class>
	<class path="js.html.Path2D" params="" file="/home/vsts/work/1/s/std/js/html/Path2D.hx" extern="1">
		<addPath public="1" set="method">
			<f a="path:?transformation">
				<c path="js.html.Path2D"/>
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a path to the current path.</haxe_doc>
		</addPath>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<new public="1" set="method">
			<f a="pathString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.Path2D"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Path2D` interface of the Canvas 2D API is used to declare paths that are then later used on `CanvasRenderingContext2D` objects. The path methods of the `CanvasRenderingContext2D` interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.

	Documentation [Path2D](https://developer.mozilla.org/en-US/docs/Web/API/Path2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Path2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Path2D>]]></haxe_doc>
		<meta><m n=":native"><e>"Path2D"</e></m></meta>
	</class>
	<class path="js.html.Performance" params="" file="/home/vsts/work/1/s/std/js/html/Performance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<timeOrigin public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the high resolution timestamp of the start time of the performance measurement.</haxe_doc>
		</timeOrigin>
		<timing public="1" set="null">
			<c path="js.html.PerformanceTiming"/>
			<haxe_doc>A `PerformanceTiming` object containing latency-related performance information</haxe_doc>
		</timing>
		<navigation public="1" set="null">
			<c path="js.html.PerformanceNavigation"/>
			<haxe_doc>A `PerformanceNavigation` object that provides useful context about the operations included in the times listed in `timing`, including whether the page was a load or a refresh, how many redirections occurred, and so forth.</haxe_doc>
		</navigation>
		<onresourcetimingbufferfull public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventTarget` which is a callback that will be called when the `resourcetimingbufferfull` event is fired.</haxe_doc>
		</onresourcetimingbufferfull>
		<now public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a `DOMHighResTimeStamp` representing the number of milliseconds elapsed since a reference instant.</haxe_doc>
		</now>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `Performance` object.</haxe_doc>
		</toJSON>
		<getEntries public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.PerformanceEntry"/></c></f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given filter.</haxe_doc>
		</getEntries>
		<getEntriesByType public="1" set="method">
			<f a="entryType">
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects of the given entry type.</haxe_doc>
		</getEntriesByType>
		<getEntriesByName public="1" set="method">
			<f a="name:?entryType">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given name and entry type.</haxe_doc>
		</getEntriesByName>
		<clearResourceTimings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all `PerformanceEntry` with a `PerformanceEntry.entryType` of "`resource`" from the browser's performance data buffer.</haxe_doc>
		</clearResourceTimings>
		<setResourceTimingBufferSize public="1" set="method">
			<f a="maxSize">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the browser's resource timing buffer size to the specified number of "`resource`" `PerformanceEntry.entryType` `PerformanceEntry` objects.</haxe_doc>
		</setResourceTimingBufferSize>
		<mark public="1" set="method">
			<f a="markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a `DOMHighResTimeStamp` in the browser's performance entry buffer with the given name.
		@throws DOMError</haxe_doc>
		</mark>
		<clearMarks public="1" set="method">
			<f a="?markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given mark from the browser's performance entry buffer.</haxe_doc>
		</clearMarks>
		<measure public="1" set="method">
			<f a="measureName:?startMark:?endMark">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a named `DOMHighResTimeStamp` in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively).
		@throws DOMError</haxe_doc>
		</measure>
		<clearMeasures public="1" set="method">
			<f a="?measureName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given measure from the browser's performance entry buffer.</haxe_doc>
		</clearMeasures>
		<haxe_doc><![CDATA[The `Performance` interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.

	Documentation [Performance](https://developer.mozilla.org/en-US/docs/Web/API/Performance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Performance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Performance>]]></haxe_doc>
		<meta><m n=":native"><e>"Performance"</e></m></meta>
	</class>
	<class path="js.html.PerformanceEntry" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceEntry.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A value that further specifies the value returned by the `PerformanceEntry.entryType` property. The value of both depends on the subtype. See property page for valid values.</haxe_doc>
		</name>
		<entryType public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the type of performance metric such as, for example, "`mark`". See property page for valid values.</haxe_doc>
		</entryType>
		<startTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the starting time for the performance metric.</haxe_doc>
		</startTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value of the duration of the performance event.</haxe_doc>
		</duration>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `PerformanceEntry` object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance `mark` or `measure` (for example by calling the `mark()` method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).

	Documentation [PerformanceEntry](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceEntry"</e></m></meta>
	</class>
	<typedef path="js.html.PerformanceEntryFilterOptions" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceEntryFilterOptions.hx"><a>
	<name>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</name>
	<initiatorType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</initiatorType>
	<entryType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</entryType>
</a></typedef>
	<class path="js.html.PerformanceMark" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceMark.hx" extern="1">
		<extends path="js.html.PerformanceEntry"/>
		<haxe_doc><![CDATA[`PerformanceMark` is an abstract interface for `PerformanceEntry` objects with an `entryType` of "`mark`". Entries of this type are created by calling `performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the browser's performance timeline.

	Documentation [PerformanceMark](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceMark"</e></m></meta>
	</class>
	<class path="js.html.PerformanceMeasure" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceMeasure.hx" extern="1">
		<extends path="js.html.PerformanceEntry"/>
		<haxe_doc><![CDATA[`PerformanceMeasure` is an abstract interface for `PerformanceEntry` objects with an `entryType` of "`measure`". Entries of this type are created by calling `performance.measure()` to add a named `DOMHighResTimeStamp` (the measure) between two marks to the browser's performance timeline.

	Documentation [PerformanceMeasure](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceMeasure"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigation" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceNavigation.hx" extern="1">
		<TYPE_NAVIGATE public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TYPE_NAVIGATE>
		<TYPE_RELOAD public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TYPE_RELOAD>
		<TYPE_BACK_FORWARD public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TYPE_BACK_FORWARD>
		<TYPE_RESERVED public="1" get="inline" set="null" expr="255" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
		</TYPE_RESERVED>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc></haxe_doc>
		</type>
		<redirectCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned short` representing the number of REDIRECTs done before reaching the page.</haxe_doc>
		</redirectCount>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `PerformanceNavigation` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The legacy `PerformanceNavigation` interface represents information about how the navigation to the current document was done.

	Documentation [PerformanceNavigation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceNavigation"</e></m></meta>
	</class>
	<class path="js.html.PerformanceResourceTiming" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceResourceTiming.hx" extern="1">
		<extends path="js.html.PerformanceEntry"/>
		<initiatorType public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the type of resource that initiated the performance entry, as specified in `PerformanceResourceTiming.initiatorType`.</haxe_doc>
		</initiatorType>
		<nextHopProtocol public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).</haxe_doc>
		</nextHopProtocol>
		<workerStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `DOMHighResTimeStamp` immediately before dispatching the `FetchEvent` if a Service Worker thread is already running, or immediately before starting the Service Worker thread if it is not already running. If the resource is not intercepted by a Service Worker the property will always return 0.</haxe_doc>
		</workerStart>
		<redirectStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` that represents the start time of the fetch which initiates the redirect.</haxe_doc>
		</redirectStart>
		<redirectEnd public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately after receiving the last byte of the response of the last redirect.</haxe_doc>
		</redirectEnd>
		<fetchStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately before the browser starts to fetch the resource.</haxe_doc>
		</fetchStart>
		<domainLookupStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately before the browser starts the domain name lookup for the resource.</haxe_doc>
		</domainLookupStart>
		<domainLookupEnd public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time immediately after the browser finishes the domain name lookup for the resource.</haxe_doc>
		</domainLookupEnd>
		<connectStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately before the browser starts to establish the connection to the server to retrieve the resource.</haxe_doc>
		</connectStart>
		<connectEnd public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately after the browser finishes establishing the connection to the server to retrieve the resource.</haxe_doc>
		</connectEnd>
		<secureConnectionStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately before the browser starts the handshake process to secure the current connection.</haxe_doc>
		</secureConnectionStart>
		<requestStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately before the browser starts requesting the resource from the server.</haxe_doc>
		</requestStart>
		<responseStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately after the browser receives the first byte of the response from the server.</haxe_doc>
		</responseStart>
		<responseEnd public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.</haxe_doc>
		</responseEnd>
		<transferSize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `number` representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body.</haxe_doc>
		</transferSize>
		<encodedBodySize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `number` representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.</haxe_doc>
		</encodedBodySize>
		<decodedBodySize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `number` that is the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings.</haxe_doc>
		</decodedBodySize>
		<serverTiming public="1" set="null">
			<c path="Array"><c path="js.html.PerformanceServerTiming"/></c>
			<haxe_doc>An array of `PerformanceServerTiming` entries containing server timing metrics.</haxe_doc>
		</serverTiming>
		<toJSON public="1" set="method" override="1">
			<f a=""><d/></f>
			<haxe_doc>Returns a `DOMString` that is the JSON representation of the `PerformanceResourceTiming` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The `PerformanceResourceTiming` interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an `XMLHttpRequest`, `SVG`, image, or script.

	Documentation [PerformanceResourceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceResourceTiming"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigationTiming" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceNavigationTiming.hx" extern="1">
		<extends path="js.html.PerformanceResourceTiming"/>
		<unloadEventStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.</haxe_doc>
		</unloadEventStart>
		<unloadEventEnd public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document.</haxe_doc>
		</unloadEventEnd>
		<domInteractive public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing a `DOMHighResTimeStamp` representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.</haxe_doc>
		</domInteractive>
		<domContentLoadedEventStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.</haxe_doc>
		</domContentLoadedEventStart>
		<domContentLoadedEventEnd public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.</haxe_doc>
		</domContentLoadedEventEnd>
		<domComplete public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing a time value equal to the time immediately before the browser sets the current document readiness of the current document to complete.</haxe_doc>
		</domComplete>
		<loadEventStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value equal to the time immediately before the load event of the current document is fired.</haxe_doc>
		</loadEventStart>
		<loadEventEnd public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time when the load event of the current document is completed.</haxe_doc>
		</loadEventEnd>
		<type public="1" set="null">
			<x path="js.html.NavigationType"/>
			<haxe_doc>A `DOMString` representing the navigation type. Must be: "`navigate`", "`reload`", "`back_forward`" or "`prerender`".</haxe_doc>
		</type>
		<redirectCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number representing the number of redirects since the last non-redirect navigation under the current browsing context.</haxe_doc>
		</redirectCount>
		<toJSON public="1" set="method" override="1">
			<f a=""><d/></f>
			<haxe_doc>Returns a `DOMString` that is the JSON representation of the `PerformanceNavigationTiming` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The `PerformanceNavigationTiming` interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.

	Documentation [PerformanceNavigationTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceNavigationTiming"</e></m></meta>
	</class>
	<class path="js.html.PerformanceObserver" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceObserver.hx" extern="1">
		<observe public="1" set="method"><f a="options">
	<t path="js.html.PerformanceObserverInit"/>
	<x path="Void"/>
</f></observe>
		<disconnect public="1" set="method"><f a=""><x path="Void"/></f></disconnect>
		<takeRecords public="1" set="method"><f a=""><c path="Array"><c path="js.html.PerformanceEntry"/></c></f></takeRecords>
		<new public="1" set="method">
			<f a="callback">
				<f a=":">
					<c path="js.html.PerformanceObserverEntryList"/>
					<c path="js.html.PerformanceObserver"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PerformanceObserver` interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.

	Documentation [PerformanceObserver](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceObserver"</e></m></meta>
	</class>
	<class path="js.html.PerformanceObserverEntryList" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceObserverEntryList.hx" extern="1">
		<getEntries public="1" set="method"><f a="?filter">
	<x path="Null"><t path="js.html.PerformanceEntryFilterOptions"/></x>
	<c path="Array"><c path="js.html.PerformanceEntry"/></c>
</f></getEntries>
		<getEntriesByType public="1" set="method"><f a="entryType">
	<c path="String"/>
	<c path="Array"><c path="js.html.PerformanceEntry"/></c>
</f></getEntriesByType>
		<getEntriesByName public="1" set="method"><f a="name:?entryType">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="js.html.PerformanceEntry"/></c>
</f></getEntriesByName>
		<haxe_doc><![CDATA[The `PerformanceObserverEntryList` interface is a list of peformance events that were explicitly observed via the `observe()` method.

	Documentation [PerformanceObserverEntryList](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceObserverEntryList"</e></m></meta>
	</class>
	<typedef path="js.html.PerformanceObserverInit" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceObserverInit.hx"><a>
	<entryTypes><c path="Array"><c path="String"/></c></entryTypes>
	<buffered>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</buffered>
</a></typedef>
	<class path="js.html.PerformanceServerTiming" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceServerTiming.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` value of the server-specified metric name.</haxe_doc>
		</name>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A double that contains the server-specified metric duration, or value `0.0`.</haxe_doc>
		</duration>
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` value of the server-specified metric description, or an empty string.</haxe_doc>
		</description>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `PerformanceServerTiming` interface surfaces server metrics that are sent with the response in the `Server-Timing` HTTP header.

	Documentation [PerformanceServerTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceServerTiming>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceServerTiming"</e></m></meta>
	</class>
	<class path="js.html.PerformanceTiming" params="" file="/home/vsts/work/1/s/std/js/html/PerformanceTiming.hx" extern="1">
		<navigationStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</navigationStart>
		<unloadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventStart>
		<unloadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventEnd>
		<redirectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectStart>
		<redirectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectEnd>
		<fetchStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.</haxe_doc>
		</fetchStart>
		<domainLookupStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupStart>
		<domainLookupEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupEnd>
		<connectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</connectStart>
		<connectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.</haxe_doc>
		</connectEnd>
		<secureConnectionStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the secure connection handshake starts. If no such connection is requested, it returns `0`.</haxe_doc>
		</secureConnectionStart>
		<requestStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.</haxe_doc>
		</requestStart>
		<responseStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the first byte of the response, from the server from a cache, or from a local resource.</haxe_doc>
		</responseStart>
		<responseEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.</haxe_doc>
		</responseEnd>
		<domLoading public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser started its work, that is when its `Document.readyState` changes to `'loading'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domLoading>
		<domInteractive public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'interactive'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domInteractive>
		<domContentLoadedEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right before the parser sent the `DOMContentLoaded` event, that is right after all the scripts that need to be executed right after parsing have been executed.</haxe_doc>
		</domContentLoadedEventStart>
		<domContentLoadedEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.</haxe_doc>
		</domContentLoadedEventEnd>
		<domComplete public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'complete'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domComplete>
		<loadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event was sent for the current document. If this event has not yet been sent, it returns `0.`</haxe_doc>
		</loadEventStart>
		<loadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns `0.`</haxe_doc>
		</loadEventEnd>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON object representing this `PerformanceTiming` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The `PerformanceTiming` interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a `PerformanceTiming` object describing your page using the `window.performance.timing` property.

	Documentation [PerformanceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming>]]></haxe_doc>
		<meta>
			<m n=":deprecated"><e>"PerformanceTiming is deprecated, use the PerformanceNavigationTiming interface instead"</e></m>
			<m n=":native"><e>"PerformanceTiming"</e></m>
		</meta>
	</class>
	<abstract path="js.html.PermissionState" params="" file="/home/vsts/work/1/s/std/js/html/PermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" extern="1" final="1">
	<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="28" static="1">
		<x path="js.html.PermissionState"/>
		<meta>
			<m n=":value"><e>cast "granted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRANTED>
	<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="29" static="1">
		<x path="js.html.PermissionState"/>
		<meta>
			<m n=":value"><e>cast "denied"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DENIED>
	<PROMPT public="1" get="inline" set="null" expr="cast &quot;prompt&quot;" line="30" static="1">
		<x path="js.html.PermissionState"/>
		<meta>
			<m n=":value"><e>cast "prompt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PROMPT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" extern="1" final="1">
		<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="28" static="1">
			<x path="js.html.PermissionState"/>
			<meta>
				<m n=":value"><e>cast "granted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRANTED>
		<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="29" static="1">
			<x path="js.html.PermissionState"/>
			<meta>
				<m n=":value"><e>cast "denied"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DENIED>
		<PROMPT public="1" get="inline" set="null" expr="cast &quot;prompt&quot;" line="30" static="1">
			<x path="js.html.PermissionState"/>
			<meta>
				<m n=":value"><e>cast "prompt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PROMPT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.PermissionStatus" params="" file="/home/vsts/work/1/s/std/js/html/PermissionStatus.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null">
			<x path="js.html.PermissionState"/>
			<haxe_doc>Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`.</haxe_doc>
		</state>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event called whenever `PermissionStatus.status` changes.</haxe_doc>
		</onchange>
		<haxe_doc><![CDATA[The `PermissionStatus` interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.

	Documentation [PermissionStatus](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus>]]></haxe_doc>
		<meta><m n=":native"><e>"PermissionStatus"</e></m></meta>
	</class>
	<class path="js.html.Permissions" params="" file="/home/vsts/work/1/s/std/js/html/Permissions.hx" extern="1">
		<query public="1" set="method">
			<f a="permission">
				<d/>
				<c path="js.lib.Promise"><c path="js.html.PermissionStatus"/></c>
			</f>
			<haxe_doc>Returns the user permission status for a given API.
		@throws DOMError</haxe_doc>
		</query>
		<haxe_doc><![CDATA[Documentation [Permissions](https://developer.mozilla.org/en-US/docs/Web/API/Permissions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Permissions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Permissions>]]></haxe_doc>
		<meta><m n=":native"><e>"Permissions"</e></m></meta>
	</class>
	<class path="js.html.PictureElement" params="" file="/home/vsts/work/1/s/std/js/html/PictureElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLPictureElement` interface represents a `picture` HTML element. It doesn't implement specific properties or methods.

	Documentation [HTMLPictureElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPictureElement"</e></m></meta>
	</class>
	<abstract path="js.html.PlaybackDirection" params="" file="/home/vsts/work/1/s/std/js/html/PlaybackDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" extern="1" final="1">
	<NORMAL public="1" get="inline" set="null" expr="cast &quot;normal&quot;" line="28" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "normal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<REVERSE public="1" get="inline" set="null" expr="cast &quot;reverse&quot;" line="29" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "reverse"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REVERSE>
	<ALTERNATE public="1" get="inline" set="null" expr="cast &quot;alternate&quot;" line="30" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "alternate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALTERNATE>
	<ALTERNATE_REVERSE public="1" get="inline" set="null" expr="cast &quot;alternate-reverse&quot;" line="31" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "alternate-reverse"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALTERNATE_REVERSE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" extern="1" final="1">
		<NORMAL public="1" get="inline" set="null" expr="cast &quot;normal&quot;" line="28" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "normal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<REVERSE public="1" get="inline" set="null" expr="cast &quot;reverse&quot;" line="29" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "reverse"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REVERSE>
		<ALTERNATE public="1" get="inline" set="null" expr="cast &quot;alternate&quot;" line="30" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "alternate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALTERNATE>
		<ALTERNATE_REVERSE public="1" get="inline" set="null" expr="cast &quot;alternate-reverse&quot;" line="31" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "alternate-reverse"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALTERNATE_REVERSE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Plugin" params="" file="/home/vsts/work/1/s/std/js/html/Plugin.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human readable description of the plugin.</haxe_doc>
		</description>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>The filename of the plugin file.</haxe_doc>
		</filename>
		<version public="1" set="null">
			<c path="String"/>
			<haxe_doc>The plugin's version number string.</haxe_doc>
		</version>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the plugin.</haxe_doc>
		</name>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.MimeType"/>
</f></namedItem>
		<haxe_doc><![CDATA[The `Plugin` interface provides information about a browser plugin.

	Documentation [Plugin](https://developer.mozilla.org/en-US/docs/Web/API/Plugin) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Plugin$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Plugin>]]></haxe_doc>
		<meta><m n=":native"><e>"Plugin"</e></m></meta>
	</class>
	<class path="js.html.PluginArray" params="" file="/home/vsts/work/1/s/std/js/html/PluginArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of plugins in the array.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Plugin"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Plugin"/>
</f></namedItem>
		<refresh public="1" set="method">
			<f a="?reloadDocuments" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reloadDocuments : false }</e></m></meta>
		</refresh>
		<haxe_doc><![CDATA[The `PluginArray` interface is used to store a list of `Plugin` objects describing the available plugins; it's returned by the `window.navigator.plugins` property. The `PluginArray` is not a JavaScript array, but has the `length` property and supports accessing individual items using bracket notation (`plugins[2]`), as well as via `item(index)` and `namedItem("name")` methods.

	Documentation [PluginArray](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PluginArray>]]></haxe_doc>
		<meta><m n=":native"><e>"PluginArray"</e></m></meta>
	</class>
	<class path="js.html.PointerEvent" params="" file="/home/vsts/work/1/s/std/js/html/PointerEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<pointerId public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A unique identifier for the pointer causing the event.</haxe_doc>
		</pointerId>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.</haxe_doc>
		</height>
		<pressure public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The normalized pressure of the pointer input in the range 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively.</haxe_doc>
		</pressure>
		<tangentialPressure public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control.</haxe_doc>
		</tangentialPressure>
		<tiltX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis.</haxe_doc>
		</tiltX>
		<tiltY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis.</haxe_doc>
		</tiltY>
		<twist public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The clockwise rotation of the transducer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359.</haxe_doc>
		</twist>
		<pointerType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates the device type that caused the event (mouse, pen, touch, etc.)</haxe_doc>
		</pointerType>
		<isPrimary public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if the pointer represents the primary pointer of this pointer type.</haxe_doc>
		</isPrimary>
		<getCoalescedEvents public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.PointerEvent"/></c></f>
			<haxe_doc>Returns a sequence of all `PointerEvent` instances that were coalesced into the dispatched `pointermove` event.</haxe_doc>
		</getCoalescedEvents>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.PointerEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PointerEvent` interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.

	Documentation [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PointerEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PointerEventInit" params="" file="/home/vsts/work/1/s/std/js/html/PointerEventInit.hx"><a>
	<width>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</width>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<twist>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</twist>
	<tiltY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</tiltY>
	<tiltX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</tiltX>
	<tangentialPressure>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</tangentialPressure>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<pressure>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</pressure>
	<pointerType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</pointerType>
	<pointerId>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pointerId>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<isPrimary>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isPrimary>
	<height>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</height>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<coalescedEvents>
		<x path="Null"><c path="Array"><c path="js.html.PointerEvent"/></c></x>
		<meta><m n=":optional"/></meta>
	</coalescedEvents>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.PopStateEvent" params="" file="/home/vsts/work/1/s/std/js/html/PopStateEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<state public="1" set="null"><d/></state>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.PopStateEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[An event handler for the `popstate` event on the window.

	Documentation [PopStateEvent](https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PopStateEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PopStateEventInit" params="" file="/home/vsts/work/1/s/std/js/html/PopStateEventInit.hx"><a>
	<state>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</state>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.PopupBlockedEvent" params="" file="/home/vsts/work/1/s/std/js/html/PopupBlockedEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<requestingWindow public="1" set="null"><c path="js.html.Window"/></requestingWindow>
		<popupWindowURI public="1" set="null"><d/></popupWindowURI>
		<popupWindowName public="1" set="null"><c path="String"/></popupWindowName>
		<popupWindowFeatures public="1" set="null"><c path="String"/></popupWindowFeatures>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.PopupBlockedEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PopupBlockedEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PopupBlockedEventInit" params="" file="/home/vsts/work/1/s/std/js/html/PopupBlockedEventInit.hx"><a>
	<requestingWindow>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</requestingWindow>
	<popupWindowURI>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</popupWindowURI>
	<popupWindowName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</popupWindowName>
	<popupWindowFeatures>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</popupWindowFeatures>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.Position" params="" file="/home/vsts/work/1/s/std/js/html/Position.hx">
		<a>
			<timestamp set="null">
				<x path="Int"/>
				<haxe_doc>Returns a `DOMTimeStamp` representing the time at which the location was retrieved.</haxe_doc>
			</timestamp>
			<coords set="null">
				<t path="js.html.Coordinates"/>
				<haxe_doc>Returns a `Coordinates` object defining the current location.</haxe_doc>
			</coords>
		</a>
		<haxe_doc><![CDATA[The `Position` interface represents the position of the concerned device at a given time. The position, represented by a `Coordinates` object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.

	Documentation [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Position$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Position>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.PositionAlignSetting" params="" file="/home/vsts/work/1/s/std/js/html/PositionAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PositionAlignSetting.PositionAlignSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/PositionAlignSetting.hx" private="1" module="js.html.PositionAlignSetting" extern="1" final="1">
	<LINE_LEFT public="1" get="inline" set="null" expr="cast &quot;line-left&quot;" line="28" static="1">
		<x path="js.html.PositionAlignSetting"/>
		<meta>
			<m n=":value"><e>cast "line-left"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINE_LEFT>
	<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
		<x path="js.html.PositionAlignSetting"/>
		<meta>
			<m n=":value"><e>cast "center"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CENTER>
	<LINE_RIGHT public="1" get="inline" set="null" expr="cast &quot;line-right&quot;" line="30" static="1">
		<x path="js.html.PositionAlignSetting"/>
		<meta>
			<m n=":value"><e>cast "line-right"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINE_RIGHT>
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="31" static="1">
		<x path="js.html.PositionAlignSetting"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._PositionAlignSetting.PositionAlignSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/PositionAlignSetting.hx" private="1" module="js.html.PositionAlignSetting" extern="1" final="1">
		<LINE_LEFT public="1" get="inline" set="null" expr="cast &quot;line-left&quot;" line="28" static="1">
			<x path="js.html.PositionAlignSetting"/>
			<meta>
				<m n=":value"><e>cast "line-left"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINE_LEFT>
		<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
			<x path="js.html.PositionAlignSetting"/>
			<meta>
				<m n=":value"><e>cast "center"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CENTER>
		<LINE_RIGHT public="1" get="inline" set="null" expr="cast &quot;line-right&quot;" line="30" static="1">
			<x path="js.html.PositionAlignSetting"/>
			<meta>
				<m n=":value"><e>cast "line-right"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINE_RIGHT>
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="31" static="1">
			<x path="js.html.PositionAlignSetting"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.PositionError" params="" file="/home/vsts/work/1/s/std/js/html/PositionError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PERMISSION_DENIED>
		<POSITION_UNAVAILABLE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</POSITION_UNAVAILABLE>
		<TIMEOUT public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TIMEOUT>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the error code. The following values are possible:
		 <table class="standard-table">
		  
		   <tr>
		    Value
		    Associated constant
		    Description
		   </tr>
		   <tr>
		    <td><code>1</code></td>
		    <td><code>PERMISSION_DENIED</code></td>
		    <td>The acquisition of the geolocation information failed because the page didn't have the permission to do it.</td>
		   </tr>
		   <tr>
		    <td><code>2</code></td>
		    <td><code>POSITION_UNAVAILABLE</code></td>
		    <td>The acquisition of the geolocation failed because at least one internal source of position returned an internal error.</td>
		   </tr>
		   <tr>
		    <td><code>3</code></td>
		    <td><code>TIMEOUT</code></td>
		    <td>The time allowed to acquire the geolocation, defined by <code>PositionOptions.timeout</code> information was reached before the information was obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable `DOMString` describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `PositionError` interface represents the reason of an error occurring when using the geolocating device.

	Documentation [PositionError](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionError>]]></haxe_doc>
		<meta><m n=":native"><e>"PositionError"</e></m></meta>
	</class>
	<typedef path="js.html.PositionOptions" params="" file="/home/vsts/work/1/s/std/js/html/PositionOptions.hx">
		<a>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is `Infinity`, meaning that `getCurrentPosition()` won't return until the position is available.</haxe_doc>
			</timeout>
			<maximumAge>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to `0`, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to `Infinity` the device must return a cached position regardless of its age. Default: 0.</haxe_doc>
			</maximumAge>
			<enableHighAccuracy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a `Boolean` that indicates the application would like to receive the best possible results. If `true` and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if `false`, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: `false`.</haxe_doc>
			</enableHighAccuracy>
		</a>
		<haxe_doc><![CDATA[The `PositionOptions` interface describes an object containing option properties to pass as a parameter of `Geolocation.getCurrentPosition()` and `Geolocation.watchPosition()`.

	Documentation [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.PreElement" params="" file="/home/vsts/work/1/s/std/js/html/PreElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the obsolete `width` attribute, containing a fixed-size length for the `pre` element.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `HTMLPreElement` interface expose specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating block of preformatted text.

	Documentation [HTMLPreElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPreElement"</e></m></meta>
	</class>
	<class path="js.html.ProcessingInstruction" params="" file="/home/vsts/work/1/s/std/js/html/ProcessingInstruction.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<target public="1" set="null"><c path="String"/></target>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.

	Documentation [ProcessingInstruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction>]]></haxe_doc>
		<meta><m n=":native"><e>"ProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.ProgressElement" params="" file="/home/vsts/work/1/s/std/js/html/ProgressElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns `0`.</haxe_doc>
		</value>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is `1.0`.</haxe_doc>
		</max>
		<position public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` value returning the result of dividing the current value (`value`) by the maximum value (`max`); if the progress bar is an indeterminate progress bar, it returns `-1`.</haxe_doc>
		</position>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns `NodeList` containing the list of `label` elements that are labels for this element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The `HTMLProgressElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `progress` elements.

	Documentation [HTMLProgressElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLProgressElement"</e></m></meta>
	</class>
	<class path="js.html.ProgressEvent" params="" file="/home/vsts/work/1/s/std/js/html/ProgressEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<lengthComputable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not.</haxe_doc>
		</lengthComputable>
		<loaded public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and `ProgressEvent.total`. When downloading a resource using HTTP, this only represent the part of the content itself, not headers and other overhead.</haxe_doc>
		</loaded>
		<total public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this only represent the content itself, not headers and other overhead.</haxe_doc>
		</total>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.ProgressEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ProgressEvent` interface represents events measuring progress of an underlying process, like an HTTP request (for an `XMLHttpRequest`, or the loading of the underlying resource of an `img`, `audio`, `video`, `style` or `link`).

	Documentation [ProgressEvent](https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ProgressEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ProgressEventInit" params="" file="/home/vsts/work/1/s/std/js/html/ProgressEventInit.hx"><a>
	<total>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</total>
	<loaded>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</loaded>
	<lengthComputable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</lengthComputable>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.PromiseNativeHandler" params="" file="/home/vsts/work/1/s/std/js/html/PromiseNativeHandler.hx"><a/></typedef>
	<class path="js.html.PropertyNodeList" params="" file="/home/vsts/work/1/s/std/js/html/PropertyNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<getValues public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getValues>
		<meta><m n=":native"><e>"PropertyNodeList"</e></m></meta>
	</class>
	<class path="js.html.QuoteElement" params="" file="/home/vsts/work/1/s/std/js/html/QuoteElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URL for the source of the quotation.</haxe_doc>
		</cite>
		<haxe_doc><![CDATA[The `HTMLQuoteElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating quoting elements, like `blockquote` and `q`, but not the `cite` element.

	Documentation [HTMLQuoteElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLQuoteElement"</e></m></meta>
	</class>
	<class path="js.html.RadioNodeList" params="" file="/home/vsts/work/1/s/std/js/html/RadioNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<value public="1">
			<c path="String"/>
			<haxe_doc>If the underlying element collection contains radio buttons, the `value` property represents the checked radio button. On retrieving the `value` property, the `value` of the currently `checked` radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in `checked` state, the empty string is returned. On setting the `value` property, the first radio button input element whose `value` property is equal to the new value will be set to `checked`.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `RadioNodeList` interface represents a collection of elements in a `form` or a `fieldset` element.

	Documentation [RadioNodeList](https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"RadioNodeList"</e></m></meta>
	</class>
	<class path="js.html.Range" params="" file="/home/vsts/work/1/s/std/js/html/Range.hx" extern="1">
		<START_TO_START public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</START_TO_START>
		<START_TO_END public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</START_TO_END>
		<END_TO_END public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</END_TO_END>
		<END_TO_START public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</END_TO_START>
		<startContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` starts.</haxe_doc>
		</startContainer>
		<startOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `startContainer` the `Range` starts.</haxe_doc>
		</startOffset>
		<endContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` ends.</haxe_doc>
		</endContainer>
		<endOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `endContainer` the `Range` ends.</haxe_doc>
		</endOffset>
		<collapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating whether the range's start and end points are at the same position.</haxe_doc>
		</collapsed>
		<commonAncestorContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the deepest `Node` that contains the `startContainer` and `endContainer` nodes.</haxe_doc>
		</commonAncestorContainer>
		<setStart public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range`.
		@throws DOMError</haxe_doc>
		</setStart>
		<setEnd public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range`.
		@throws DOMError</haxe_doc>
		</setEnd>
		<setStartBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartBefore>
		<setStartAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartAfter>
		<setEndBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndBefore>
		<setEndAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndAfter>
		<collapse public="1" set="method">
			<f a="?toStart" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ toStart : false }</e></m></meta>
			<haxe_doc>Collapses the `Range` to one of its boundary points.</haxe_doc>
		</collapse>
		<selectNode public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the `Node` and its contents.
		@throws DOMError</haxe_doc>
		</selectNode>
		<selectNodeContents public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the contents of a `Node`.
		@throws DOMError</haxe_doc>
		</selectNodeContents>
		<compareBoundaryPoints public="1" set="method">
			<f a="how:sourceRange">
				<x path="Int"/>
				<c path="js.html.Range"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the boundary points of the `Range` with another `Range`.
		@throws DOMError</haxe_doc>
		</compareBoundaryPoints>
		<deleteContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the contents of a `Range` from the `Document`.
		@throws DOMError</haxe_doc>
		</deleteContents>
		<extractContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Moves contents of a `Range` from the document tree into a `DocumentFragment`.
		@throws DOMError</haxe_doc>
		</extractContents>
		<cloneContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Returns a `DocumentFragment` copying the nodes of a `Range`.
		@throws DOMError</haxe_doc>
		</cloneContents>
		<insertNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a `Node` at the start of a `Range`.
		@throws DOMError</haxe_doc>
		</insertNode>
		<surroundContents public="1" set="method">
			<f a="newParent">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves content of a `Range` into a new `Node`.
		@throws DOMError</haxe_doc>
		</surroundContents>
		<cloneRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Returns a `Range` object with boundary points identical to the cloned `Range`.</haxe_doc>
		</cloneRange>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the `Range` from use to improve performance.</haxe_doc>
		</detach>
		<isPointInRange public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given point is in the `Range`.
		@throws DOMError</haxe_doc>
		</isPointInRange>
		<comparePoint public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the `Range`.
		@throws DOMError</haxe_doc>
		</comparePoint>
		<intersectsNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given node intersects the `Range`.
		@throws DOMError</haxe_doc>
		</intersectsNode>
		<createContextualFragment public="1" set="method">
			<f a="fragment">
				<c path="String"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>Returns a `DocumentFragment` created from a given string of code.
		@throws DOMError</haxe_doc>
		</createContextualFragment>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a list of `DOMRect` objects that aggregates the results of `Element.getClientRects()` for all the elements in the `Range`.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns a `DOMRect` object which bounds the entire contents of the `Range`; this would be the union of all the rectangles returned by `range.getClientRects()`.</haxe_doc>
		</getBoundingClientRect>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Range` interface represents a fragment of a document that can contain nodes and parts of text nodes.

	Documentation [Range](https://developer.mozilla.org/en-US/docs/Web/API/Range) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Range$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Range>]]></haxe_doc>
		<meta><m n=":native"><e>"Range"</e></m></meta>
	</class>
	<abstract path="js.html.RecordingState" params="" file="/home/vsts/work/1/s/std/js/html/RecordingState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RecordingState.RecordingState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RecordingState.hx" private="1" module="js.html.RecordingState" extern="1" final="1">
	<INACTIVE public="1" get="inline" set="null" expr="cast &quot;inactive&quot;" line="28" static="1">
		<x path="js.html.RecordingState"/>
		<meta>
			<m n=":value"><e>cast "inactive"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INACTIVE>
	<RECORDING public="1" get="inline" set="null" expr="cast &quot;recording&quot;" line="29" static="1">
		<x path="js.html.RecordingState"/>
		<meta>
			<m n=":value"><e>cast "recording"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RECORDING>
	<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="30" static="1">
		<x path="js.html.RecordingState"/>
		<meta>
			<m n=":value"><e>cast "paused"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAUSED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._RecordingState.RecordingState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RecordingState.hx" private="1" module="js.html.RecordingState" extern="1" final="1">
		<INACTIVE public="1" get="inline" set="null" expr="cast &quot;inactive&quot;" line="28" static="1">
			<x path="js.html.RecordingState"/>
			<meta>
				<m n=":value"><e>cast "inactive"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INACTIVE>
		<RECORDING public="1" get="inline" set="null" expr="cast &quot;recording&quot;" line="29" static="1">
			<x path="js.html.RecordingState"/>
			<meta>
				<m n=":value"><e>cast "recording"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RECORDING>
		<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="30" static="1">
			<x path="js.html.RecordingState"/>
			<meta>
				<m n=":value"><e>cast "paused"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAUSED>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.ReferrerPolicy" params="" file="/home/vsts/work/1/s/std/js/html/ReferrerPolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<NO_REFERRER public="1" get="inline" set="null" expr="cast &quot;no-referrer&quot;" line="29" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "no-referrer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_REFERRER>
	<NO_REFERRER_WHEN_DOWNGRADE public="1" get="inline" set="null" expr="cast &quot;no-referrer-when-downgrade&quot;" line="30" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "no-referrer-when-downgrade"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_REFERRER_WHEN_DOWNGRADE>
	<ORIGIN public="1" get="inline" set="null" expr="cast &quot;origin&quot;" line="31" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORIGIN>
	<ORIGIN_WHEN_CROSS_ORIGIN public="1" get="inline" set="null" expr="cast &quot;origin-when-cross-origin&quot;" line="32" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "origin-when-cross-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORIGIN_WHEN_CROSS_ORIGIN>
	<UNSAFE_URL public="1" get="inline" set="null" expr="cast &quot;unsafe-url&quot;" line="33" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "unsafe-url"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UNSAFE_URL>
	<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="34" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "same-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAME_ORIGIN>
	<STRICT_ORIGIN public="1" get="inline" set="null" expr="cast &quot;strict-origin&quot;" line="35" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "strict-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STRICT_ORIGIN>
	<STRICT_ORIGIN_WHEN_CROSS_ORIGIN public="1" get="inline" set="null" expr="cast &quot;strict-origin-when-cross-origin&quot;" line="36" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "strict-origin-when-cross-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STRICT_ORIGIN_WHEN_CROSS_ORIGIN>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<NO_REFERRER public="1" get="inline" set="null" expr="cast &quot;no-referrer&quot;" line="29" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "no-referrer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_REFERRER>
		<NO_REFERRER_WHEN_DOWNGRADE public="1" get="inline" set="null" expr="cast &quot;no-referrer-when-downgrade&quot;" line="30" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "no-referrer-when-downgrade"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_REFERRER_WHEN_DOWNGRADE>
		<ORIGIN public="1" get="inline" set="null" expr="cast &quot;origin&quot;" line="31" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORIGIN>
		<ORIGIN_WHEN_CROSS_ORIGIN public="1" get="inline" set="null" expr="cast &quot;origin-when-cross-origin&quot;" line="32" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "origin-when-cross-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORIGIN_WHEN_CROSS_ORIGIN>
		<UNSAFE_URL public="1" get="inline" set="null" expr="cast &quot;unsafe-url&quot;" line="33" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "unsafe-url"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UNSAFE_URL>
		<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="34" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "same-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAME_ORIGIN>
		<STRICT_ORIGIN public="1" get="inline" set="null" expr="cast &quot;strict-origin&quot;" line="35" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "strict-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STRICT_ORIGIN>
		<STRICT_ORIGIN_WHEN_CROSS_ORIGIN public="1" get="inline" set="null" expr="cast &quot;strict-origin-when-cross-origin&quot;" line="36" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "strict-origin-when-cross-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STRICT_ORIGIN_WHEN_CROSS_ORIGIN>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.RegistrationOptions" params="" file="/home/vsts/work/1/s/std/js/html/RegistrationOptions.hx"><a>
	<updateViaCache>
		<x path="Null"><x path="js.html.ServiceWorkerUpdateViaCache"/></x>
		<meta><m n=":optional"/></meta>
	</updateViaCache>
	<scope>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</scope>
</a></typedef>
	<class path="js.html.Request" params="" file="/home/vsts/work/1/s/std/js/html/Request.hx" extern="1">
		<method public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the request's method (`GET`, `POST`, etc.)</haxe_doc>
		</method>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the request.</haxe_doc>
		</url>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the associated `Headers` object of the request.</haxe_doc>
		</headers>
		<destination public="1" set="null">
			<x path="js.html.RequestDestination"/>
			<haxe_doc>Returns a string from the `RequestDestination` enum describing the request's destination. This is a string indicating the type of content being requested.</haxe_doc>
		</destination>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the referrer of the request (e.g., `client`).</haxe_doc>
		</referrer>
		<referrerPolicy public="1" set="null">
			<x path="js.html.ReferrerPolicy"/>
			<haxe_doc>Contains the referrer policy of the request (e.g., `no-referrer`).</haxe_doc>
		</referrerPolicy>
		<mode public="1" set="null">
			<x path="js.html.RequestMode"/>
			<haxe_doc>Contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, `navigate`.)</haxe_doc>
		</mode>
		<credentials public="1" set="null">
			<x path="js.html.RequestCredentials"/>
			<haxe_doc>Contains the credentials of the request (e.g., `"omit"`, `"same-origin"`, `"include"`). The default is `"same-origin"`.</haxe_doc>
		</credentials>
		<cache public="1" set="null">
			<x path="js.html.RequestCache"/>
			<haxe_doc>Contains the cache mode of the request (e.g., `default`, `reload`, `no-cache`).</haxe_doc>
		</cache>
		<redirect public="1" set="null">
			<x path="js.html.RequestRedirect"/>
			<haxe_doc>Contains the mode for how redirects are handled. It may be one of `follow`, `error`, or `manual`.</haxe_doc>
		</redirect>
		<integrity public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the subresource integrity value of the request (e.g., `sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=`).</haxe_doc>
		</integrity>
		<signal public="1" set="null"><c path="js.html.AbortSignal"/></signal>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Request"/></f>
			<haxe_doc>Creates a copy of the current `Request` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="input:?init">
		<c path="String"/>
		<x path="Null"><t path="js.html.RequestInit"/></x>
		<c path="js.html.Request"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `Request` interface of the Fetch API represents a resource request.

	Documentation [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Request$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Request>]]></haxe_doc>
		<meta><m n=":native"><e>"Request"</e></m></meta>
	</class>
	<abstract path="js.html.RequestCache" params="" file="/home/vsts/work/1/s/std/js/html/RequestCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="28" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT>
	<NO_STORE public="1" get="inline" set="null" expr="cast &quot;no-store&quot;" line="29" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "no-store"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_STORE>
	<RELOAD public="1" get="inline" set="null" expr="cast &quot;reload&quot;" line="30" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "reload"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RELOAD>
	<NO_CACHE public="1" get="inline" set="null" expr="cast &quot;no-cache&quot;" line="31" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "no-cache"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_CACHE>
	<FORCE_CACHE public="1" get="inline" set="null" expr="cast &quot;force-cache&quot;" line="32" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "force-cache"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FORCE_CACHE>
	<ONLY_IF_CACHED public="1" get="inline" set="null" expr="cast &quot;only-if-cached&quot;" line="33" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "only-if-cached"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ONLY_IF_CACHED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="28" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT>
		<NO_STORE public="1" get="inline" set="null" expr="cast &quot;no-store&quot;" line="29" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "no-store"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_STORE>
		<RELOAD public="1" get="inline" set="null" expr="cast &quot;reload&quot;" line="30" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "reload"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RELOAD>
		<NO_CACHE public="1" get="inline" set="null" expr="cast &quot;no-cache&quot;" line="31" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "no-cache"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_CACHE>
		<FORCE_CACHE public="1" get="inline" set="null" expr="cast &quot;force-cache&quot;" line="32" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "force-cache"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FORCE_CACHE>
		<ONLY_IF_CACHED public="1" get="inline" set="null" expr="cast &quot;only-if-cached&quot;" line="33" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "only-if-cached"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ONLY_IF_CACHED>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.RequestCredentials" params="" file="/home/vsts/work/1/s/std/js/html/RequestCredentials.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" extern="1" final="1">
	<OMIT public="1" get="inline" set="null" expr="cast &quot;omit&quot;" line="28" static="1">
		<x path="js.html.RequestCredentials"/>
		<meta>
			<m n=":value"><e>cast "omit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OMIT>
	<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="29" static="1">
		<x path="js.html.RequestCredentials"/>
		<meta>
			<m n=":value"><e>cast "same-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAME_ORIGIN>
	<INCLUDE public="1" get="inline" set="null" expr="cast &quot;include&quot;" line="30" static="1">
		<x path="js.html.RequestCredentials"/>
		<meta>
			<m n=":value"><e>cast "include"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INCLUDE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" extern="1" final="1">
		<OMIT public="1" get="inline" set="null" expr="cast &quot;omit&quot;" line="28" static="1">
			<x path="js.html.RequestCredentials"/>
			<meta>
				<m n=":value"><e>cast "omit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OMIT>
		<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="29" static="1">
			<x path="js.html.RequestCredentials"/>
			<meta>
				<m n=":value"><e>cast "same-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAME_ORIGIN>
		<INCLUDE public="1" get="inline" set="null" expr="cast &quot;include&quot;" line="30" static="1">
			<x path="js.html.RequestCredentials"/>
			<meta>
				<m n=":value"><e>cast "include"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INCLUDE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.RequestDestination" params="" file="/home/vsts/work/1/s/std/js/html/RequestDestination.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `RequestDestination` enumerated type contains the permitted values for a request's `destination`. These string values indicate potential types of content that a request may try to retrieve.

	Documentation [RequestDestination](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestDestination.RequestDestination_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestDestination.hx" private="1" module="js.html.RequestDestination" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="35" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<AUDIO public="1" get="inline" set="null" expr="cast &quot;audio&quot;" line="36" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "audio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIO>
	<AUDIOWORKLET public="1" get="inline" set="null" expr="cast &quot;audioworklet&quot;" line="37" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "audioworklet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIOWORKLET>
	<DOCUMENT public="1" get="inline" set="null" expr="cast &quot;document&quot;" line="38" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "document"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOCUMENT>
	<EMBED public="1" get="inline" set="null" expr="cast &quot;embed&quot;" line="39" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "embed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EMBED>
	<FONT public="1" get="inline" set="null" expr="cast &quot;font&quot;" line="40" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "font"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FONT>
	<IMAGE public="1" get="inline" set="null" expr="cast &quot;image&quot;" line="41" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "image"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IMAGE>
	<MANIFEST public="1" get="inline" set="null" expr="cast &quot;manifest&quot;" line="42" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "manifest"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MANIFEST>
	<OBJECT public="1" get="inline" set="null" expr="cast &quot;object&quot;" line="43" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "object"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OBJECT>
	<PAINTWORKLET public="1" get="inline" set="null" expr="cast &quot;paintworklet&quot;" line="44" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "paintworklet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAINTWORKLET>
	<REPORT public="1" get="inline" set="null" expr="cast &quot;report&quot;" line="45" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "report"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPORT>
	<SCRIPT public="1" get="inline" set="null" expr="cast &quot;script&quot;" line="46" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "script"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SCRIPT>
	<SHAREDWORKER public="1" get="inline" set="null" expr="cast &quot;sharedworker&quot;" line="47" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "sharedworker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHAREDWORKER>
	<STYLE public="1" get="inline" set="null" expr="cast &quot;style&quot;" line="48" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "style"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STYLE>
	<TRACK public="1" get="inline" set="null" expr="cast &quot;track&quot;" line="49" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "track"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TRACK>
	<VIDEO public="1" get="inline" set="null" expr="cast &quot;video&quot;" line="50" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "video"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VIDEO>
	<WORKER public="1" get="inline" set="null" expr="cast &quot;worker&quot;" line="51" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "worker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WORKER>
	<XSLT public="1" get="inline" set="null" expr="cast &quot;xslt&quot;" line="52" static="1">
		<x path="js.html.RequestDestination"/>
		<meta>
			<m n=":value"><e>cast "xslt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XSLT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestDestination.RequestDestination_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestDestination.hx" private="1" module="js.html.RequestDestination" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="35" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<AUDIO public="1" get="inline" set="null" expr="cast &quot;audio&quot;" line="36" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "audio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIO>
		<AUDIOWORKLET public="1" get="inline" set="null" expr="cast &quot;audioworklet&quot;" line="37" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "audioworklet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIOWORKLET>
		<DOCUMENT public="1" get="inline" set="null" expr="cast &quot;document&quot;" line="38" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "document"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOCUMENT>
		<EMBED public="1" get="inline" set="null" expr="cast &quot;embed&quot;" line="39" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "embed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EMBED>
		<FONT public="1" get="inline" set="null" expr="cast &quot;font&quot;" line="40" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "font"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FONT>
		<IMAGE public="1" get="inline" set="null" expr="cast &quot;image&quot;" line="41" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "image"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IMAGE>
		<MANIFEST public="1" get="inline" set="null" expr="cast &quot;manifest&quot;" line="42" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "manifest"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MANIFEST>
		<OBJECT public="1" get="inline" set="null" expr="cast &quot;object&quot;" line="43" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "object"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OBJECT>
		<PAINTWORKLET public="1" get="inline" set="null" expr="cast &quot;paintworklet&quot;" line="44" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "paintworklet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAINTWORKLET>
		<REPORT public="1" get="inline" set="null" expr="cast &quot;report&quot;" line="45" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "report"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPORT>
		<SCRIPT public="1" get="inline" set="null" expr="cast &quot;script&quot;" line="46" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "script"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SCRIPT>
		<SHAREDWORKER public="1" get="inline" set="null" expr="cast &quot;sharedworker&quot;" line="47" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "sharedworker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHAREDWORKER>
		<STYLE public="1" get="inline" set="null" expr="cast &quot;style&quot;" line="48" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "style"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STYLE>
		<TRACK public="1" get="inline" set="null" expr="cast &quot;track&quot;" line="49" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "track"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TRACK>
		<VIDEO public="1" get="inline" set="null" expr="cast &quot;video&quot;" line="50" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "video"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VIDEO>
		<WORKER public="1" get="inline" set="null" expr="cast &quot;worker&quot;" line="51" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "worker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WORKER>
		<XSLT public="1" get="inline" set="null" expr="cast &quot;xslt&quot;" line="52" static="1">
			<x path="js.html.RequestDestination"/>
			<meta>
				<m n=":value"><e>cast "xslt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XSLT>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.RequestInit" params="" file="/home/vsts/work/1/s/std/js/html/RequestInit.hx"><a>
	<signal>
		<x path="Null"><c path="js.html.AbortSignal"/></x>
		<meta><m n=":optional"/></meta>
	</signal>
	<referrerPolicy>
		<x path="Null"><x path="js.html.ReferrerPolicy"/></x>
		<meta><m n=":optional"/></meta>
	</referrerPolicy>
	<referrer>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</referrer>
	<redirect>
		<x path="Null"><x path="js.html.RequestRedirect"/></x>
		<meta><m n=":optional"/></meta>
	</redirect>
	<observe>
		<x path="Null"><x path="haxe.extern.EitherType">
	<f a="">
		<c path="js.html.FetchObserver"/>
		<x path="Void"/>
	</f>
	<t path="js.html.ObserverCallback"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</observe>
	<mode>
		<x path="Null"><x path="js.html.RequestMode"/></x>
		<meta><m n=":optional"/></meta>
	</mode>
	<method>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</method>
	<integrity>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</integrity>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
	<credentials>
		<x path="Null"><x path="js.html.RequestCredentials"/></x>
		<meta><m n=":optional"/></meta>
	</credentials>
	<cache>
		<x path="Null"><x path="js.html.RequestCache"/></x>
		<meta><m n=":optional"/></meta>
	</cache>
	<body>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<x path="haxe.extern.EitherType">
			<c path="js.lib.ArrayBufferView"/>
			<c path="js.lib.ArrayBuffer"/>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="js.html.FormData"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.URLSearchParams"/>
				<c path="String"/>
			</x>
		</x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.RequestMode" params="" file="/home/vsts/work/1/s/std/js/html/RequestMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" extern="1" final="1">
	<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="28" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "same-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAME_ORIGIN>
	<NO_CORS public="1" get="inline" set="null" expr="cast &quot;no-cors&quot;" line="29" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "no-cors"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_CORS>
	<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="30" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "cors"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CORS>
	<NAVIGATE public="1" get="inline" set="null" expr="cast &quot;navigate&quot;" line="31" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "navigate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NAVIGATE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" extern="1" final="1">
		<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="28" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "same-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAME_ORIGIN>
		<NO_CORS public="1" get="inline" set="null" expr="cast &quot;no-cors&quot;" line="29" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "no-cors"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_CORS>
		<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="30" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "cors"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CORS>
		<NAVIGATE public="1" get="inline" set="null" expr="cast &quot;navigate&quot;" line="31" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "navigate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NAVIGATE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.RequestRedirect" params="" file="/home/vsts/work/1/s/std/js/html/RequestRedirect.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" extern="1" final="1">
	<FOLLOW public="1" get="inline" set="null" expr="cast &quot;follow&quot;" line="28" static="1">
		<x path="js.html.RequestRedirect"/>
		<meta>
			<m n=":value"><e>cast "follow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FOLLOW>
	<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="29" static="1">
		<x path="js.html.RequestRedirect"/>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERROR>
	<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="30" static="1">
		<x path="js.html.RequestRedirect"/>
		<meta>
			<m n=":value"><e>cast "manual"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MANUAL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" extern="1" final="1">
		<FOLLOW public="1" get="inline" set="null" expr="cast &quot;follow&quot;" line="28" static="1">
			<x path="js.html.RequestRedirect"/>
			<meta>
				<m n=":value"><e>cast "follow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FOLLOW>
		<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="29" static="1">
			<x path="js.html.RequestRedirect"/>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERROR>
		<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="30" static="1">
			<x path="js.html.RequestRedirect"/>
			<meta>
				<m n=":value"><e>cast "manual"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MANUAL>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Response" params="" file="/home/vsts/work/1/s/std/js/html/Response.hx" extern="1">
		<error public="1" set="method" static="1">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Returns a new `Response` object associated with a network error.</haxe_doc>
		</error>
		<redirect public="1" set="method" static="1">
			<f a="url:?status" v=":302">
				<c path="String"/>
				<x path="Int"/>
				<c path="js.html.Response"/>
			</f>
			<meta><m n=":value"><e>{ status : 302 }</e></m></meta>
			<haxe_doc>Creates a new response with a different URL.
		@throws DOMError</haxe_doc>
		</redirect>
		<type public="1" set="null">
			<x path="js.html.ResponseType"/>
			<haxe_doc>Contains the type of the response (e.g., `basic`, `cors`).</haxe_doc>
		</type>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the response.</haxe_doc>
		</url>
		<redirected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the response is the result of a redirect; that is, its URL list has more than one entry.</haxe_doc>
		</redirected>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Contains the status code of the response (e.g., `200` for a success).</haxe_doc>
		</status>
		<ok public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Contains a boolean stating whether the response was successful (status in the range 200-299) or not.</haxe_doc>
		</ok>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the status message corresponding to the status code (e.g., `OK` for `200`).</haxe_doc>
		</statusText>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the `Headers` object associated with the response.</haxe_doc>
		</headers>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Creates a clone of a `Response` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="?body:?init">
				<c path="js.html.Blob"/>
				<x path="Null"><t path="js.html.ResponseInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.FormData"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.URLSearchParams"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<d/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="String"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Response` interface of the Fetch API represents the response to a request.

	Documentation [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Response$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Response>]]></haxe_doc>
		<meta><m n=":native"><e>"Response"</e></m></meta>
	</class>
	<typedef path="js.html.ResponseInit" params="" file="/home/vsts/work/1/s/std/js/html/ResponseInit.hx"><a>
	<statusText>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</statusText>
	<status>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</status>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
</a></typedef>
	<abstract path="js.html.ResponseType" params="" file="/home/vsts/work/1/s/std/js/html/ResponseType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" extern="1" final="1">
	<BASIC public="1" get="inline" set="null" expr="cast &quot;basic&quot;" line="28" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "basic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BASIC>
	<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="29" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "cors"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CORS>
	<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="30" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT>
	<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="31" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERROR>
	<OPAQUE public="1" get="inline" set="null" expr="cast &quot;opaque&quot;" line="32" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "opaque"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPAQUE>
	<OPAQUEREDIRECT public="1" get="inline" set="null" expr="cast &quot;opaqueredirect&quot;" line="33" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "opaqueredirect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPAQUEREDIRECT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" extern="1" final="1">
		<BASIC public="1" get="inline" set="null" expr="cast &quot;basic&quot;" line="28" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "basic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BASIC>
		<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="29" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "cors"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CORS>
		<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="30" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT>
		<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="31" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERROR>
		<OPAQUE public="1" get="inline" set="null" expr="cast &quot;opaque&quot;" line="32" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "opaque"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPAQUE>
		<OPAQUEREDIRECT public="1" get="inline" set="null" expr="cast &quot;opaqueredirect&quot;" line="33" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "opaqueredirect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPAQUEREDIRECT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.Screen" params="" file="/home/vsts/work/1/s/std/js/html/Screen.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<availWidth public="1" set="null"><x path="Int"/></availWidth>
		<availHeight public="1" set="null"><x path="Int"/></availHeight>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<colorDepth public="1" set="null"><x path="Int"/></colorDepth>
		<pixelDepth public="1" set="null"><x path="Int"/></pixelDepth>
		<top public="1" set="null"><x path="Int"/></top>
		<left public="1" set="null"><x path="Int"/></left>
		<availTop public="1" set="null"><x path="Int"/></availTop>
		<availLeft public="1" set="null"><x path="Int"/></availLeft>
		<orientation public="1" set="null"><c path="js.html.ScreenOrientation"/></orientation>
		<haxe_doc><![CDATA[The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using `window.screen`.

	Documentation [Screen](https://developer.mozilla.org/en-US/docs/Web/API/Screen) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Screen$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Screen>]]></haxe_doc>
		<meta><m n=":native"><e>"Screen"</e></m></meta>
	</class>
	<class path="js.html.ScreenOrientation" params="" file="/home/vsts/work/1/s/std/js/html/ScreenOrientation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<type public="1" set="null">
			<x path="js.html.OrientationType"/>
			<haxe_doc>Returns the document's current orientation type, one of "portrait-primary", "portrait-secondary", "landscape-primary", or "landscape-secondary".</haxe_doc>
		</type>
		<angle public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the document's current orientation angle.</haxe_doc>
		</angle>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever is the `EventHandler` called when the screen changes orientation.</haxe_doc>
		</onchange>
		<lock public="1" set="method">
			<f a="orientation">
				<x path="js.html.OrientationLockType"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Locks the orientation of the containing document to its default orientation and returns a `Promise`. 
		@throws DOMError</haxe_doc>
		</lock>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unlocks the orientation of the containing document from its default orientation.
		@throws DOMError</haxe_doc>
		</unlock>
		<haxe_doc><![CDATA[The `ScreenOrientation` interface of the the Screen Orientation API provides information about the current orientation of the document.

	Documentation [ScreenOrientation](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation>]]></haxe_doc>
		<meta><m n=":native"><e>"ScreenOrientation"</e></m></meta>
	</class>
	<class path="js.html.ScriptElement" params="" file="/home/vsts/work/1/s/std/js/html/ScriptElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1"><c path="String"/></src>
		<type public="1"><c path="String"/></type>
		<charset public="1"><c path="String"/></charset>
		<async public="1"><x path="Bool"/></async>
		<defer public="1"><x path="Bool"/></defer>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<text public="1"><c path="String"/></text>
		<event public="1"><c path="String"/></event>
		<htmlFor public="1"><c path="String"/></htmlFor>
		<integrity public="1"><c path="String"/></integrity>
		<haxe_doc><![CDATA[HTML `script` elements expose the `HTMLScriptElement` interface, which provides special properties and methods for manipulating the behavior and execution of `script` elements (beyond the inherited `HTMLElement` interface).

	Documentation [HTMLScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLScriptElement"</e></m></meta>
	</class>
	<class path="js.html.ScrollAreaEvent" params="" file="/home/vsts/work/1/s/std/js/html/ScrollAreaEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<x public="1" set="null"><x path="Float"/></x>
		<y public="1" set="null"><x path="Float"/></y>
		<width public="1" set="null"><x path="Float"/></width>
		<height public="1" set="null"><x path="Float"/></height>
		<initScrollAreaEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?detail:?x:?y:?width:?height" v=":false:false::0:0.0:0.0:0.0:0.0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0, detail : 0, cancelable : false, canBubble : false }</e></m></meta>
		</initScrollAreaEvent>
		<meta><m n=":native"><e>"ScrollAreaEvent"</e></m></meta>
	</class>
	<abstract path="js.html.ScrollBehavior" params="" file="/home/vsts/work/1/s/std/js/html/ScrollBehavior.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollBehavior.ScrollBehavior_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollBehavior.hx" private="1" module="js.html.ScrollBehavior" extern="1" final="1">
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
		<x path="js.html.ScrollBehavior"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<INSTANT public="1" get="inline" set="null" expr="cast &quot;instant&quot;" line="29" static="1">
		<x path="js.html.ScrollBehavior"/>
		<meta>
			<m n=":value"><e>cast "instant"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INSTANT>
	<SMOOTH public="1" get="inline" set="null" expr="cast &quot;smooth&quot;" line="30" static="1">
		<x path="js.html.ScrollBehavior"/>
		<meta>
			<m n=":value"><e>cast "smooth"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SMOOTH>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ScrollBehavior.ScrollBehavior_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollBehavior.hx" private="1" module="js.html.ScrollBehavior" extern="1" final="1">
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
			<x path="js.html.ScrollBehavior"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<INSTANT public="1" get="inline" set="null" expr="cast &quot;instant&quot;" line="29" static="1">
			<x path="js.html.ScrollBehavior"/>
			<meta>
				<m n=":value"><e>cast "instant"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INSTANT>
		<SMOOTH public="1" get="inline" set="null" expr="cast &quot;smooth&quot;" line="30" static="1">
			<x path="js.html.ScrollBehavior"/>
			<meta>
				<m n=":value"><e>cast "smooth"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SMOOTH>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.ScrollIntoViewOptions" params="" file="/home/vsts/work/1/s/std/js/html/ScrollIntoViewOptions.hx"><a>
	<inline_>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"inline"</e></m>
		</meta>
	</inline_>
	<block>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta><m n=":optional"/></meta>
	</block>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<abstract path="js.html.ScrollLogicalPosition" params="" file="/home/vsts/work/1/s/std/js/html/ScrollLogicalPosition.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollLogicalPosition.ScrollLogicalPosition_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollLogicalPosition.hx" private="1" module="js.html.ScrollLogicalPosition" extern="1" final="1">
	<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="28" static="1">
		<x path="js.html.ScrollLogicalPosition"/>
		<meta>
			<m n=":value"><e>cast "start"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</START>
	<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
		<x path="js.html.ScrollLogicalPosition"/>
		<meta>
			<m n=":value"><e>cast "center"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CENTER>
	<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
		<x path="js.html.ScrollLogicalPosition"/>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</END>
	<NEAREST public="1" get="inline" set="null" expr="cast &quot;nearest&quot;" line="31" static="1">
		<x path="js.html.ScrollLogicalPosition"/>
		<meta>
			<m n=":value"><e>cast "nearest"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEAREST>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ScrollLogicalPosition.ScrollLogicalPosition_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollLogicalPosition.hx" private="1" module="js.html.ScrollLogicalPosition" extern="1" final="1">
		<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="28" static="1">
			<x path="js.html.ScrollLogicalPosition"/>
			<meta>
				<m n=":value"><e>cast "start"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</START>
		<CENTER public="1" get="inline" set="null" expr="cast &quot;center&quot;" line="29" static="1">
			<x path="js.html.ScrollLogicalPosition"/>
			<meta>
				<m n=":value"><e>cast "center"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CENTER>
		<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
			<x path="js.html.ScrollLogicalPosition"/>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</END>
		<NEAREST public="1" get="inline" set="null" expr="cast &quot;nearest&quot;" line="31" static="1">
			<x path="js.html.ScrollLogicalPosition"/>
			<meta>
				<m n=":value"><e>cast "nearest"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEAREST>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.ScrollOptions" params="" file="/home/vsts/work/1/s/std/js/html/ScrollOptions.hx"><a><behavior>
	<x path="Null"><x path="js.html.ScrollBehavior"/></x>
	<meta><m n=":optional"/></meta>
</behavior></a></typedef>
	<abstract path="js.html.ScrollRestoration" params="" file="/home/vsts/work/1/s/std/js/html/ScrollRestoration.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" extern="1" final="1">
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
		<x path="js.html.ScrollRestoration"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="29" static="1">
		<x path="js.html.ScrollRestoration"/>
		<meta>
			<m n=":value"><e>cast "manual"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MANUAL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" extern="1" final="1">
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="28" static="1">
			<x path="js.html.ScrollRestoration"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="29" static="1">
			<x path="js.html.ScrollRestoration"/>
			<meta>
				<m n=":value"><e>cast "manual"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MANUAL>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.ScrollSetting" params="" file="/home/vsts/work/1/s/std/js/html/ScrollSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollSetting.ScrollSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollSetting.hx" private="1" module="js.html.ScrollSetting" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
		<x path="js.html.ScrollSetting"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<UP public="1" get="inline" set="null" expr="cast &quot;up&quot;" line="29" static="1">
		<x path="js.html.ScrollSetting"/>
		<meta>
			<m n=":value"><e>cast "up"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UP>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ScrollSetting.ScrollSetting_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ScrollSetting.hx" private="1" module="js.html.ScrollSetting" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="28" static="1">
			<x path="js.html.ScrollSetting"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<UP public="1" get="inline" set="null" expr="cast &quot;up&quot;" line="29" static="1">
			<x path="js.html.ScrollSetting"/>
			<meta>
				<m n=":value"><e>cast "up"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UP>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.ScrollToOptions" params="" file="/home/vsts/work/1/s/std/js/html/ScrollToOptions.hx"><a>
	<top>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</top>
	<left>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</left>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<class path="js.html.SecurityPolicyViolationEvent" params="" file="/home/vsts/work/1/s/std/js/html/SecurityPolicyViolationEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` representing the URI of the document or worker in which the violation was found.</haxe_doc>
		</documentURI>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` representing the referrer of the resources whose policy was violated. This will be a URL or `null`.</haxe_doc>
		</referrer>
		<blockedURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` representing the URI of the resource that was blocked because it violates a policy.</haxe_doc>
		</blockedURI>
		<violatedDirective public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the directive whose enforcement uncovered the violation.</haxe_doc>
		</violatedDirective>
		<effectiveDirective public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the directive whose enforcement uncovered the violation.</haxe_doc>
		</effectiveDirective>
		<originalPolicy public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing the policy whose enforcement uncovered the violation.</haxe_doc>
		</originalPolicy>
		<sourceFile public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` representing the URI of the document or worker in which the violation was found.</haxe_doc>
		</sourceFile>
		<sample public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style — external resources causing a violation will not generate a sample.</haxe_doc>
		</sample>
		<disposition public="1" set="null">
			<x path="js.html.SecurityPolicyViolationEventDisposition"/>
			<haxe_doc>Indicates how the violated policy is configured to be treated by the user agent. This will be `"enforce"` or `"report"`.</haxe_doc>
		</disposition>
		<statusCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number representing the HTTP status code of the document or worker in which the violation occurred.</haxe_doc>
		</statusCode>
		<lineNumber public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The line number in the document or worker at which the violation occurred.</haxe_doc>
		</lineNumber>
		<columnNumber public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The column number in the document or worker at which the violation occurred.</haxe_doc>
		</columnNumber>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.SecurityPolicyViolationEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SecurityPolicyViolationEvent` interface inherits from `Event`, and represents the event object of an event sent on a document or worker when its content security policy is violated.

	Documentation [SecurityPolicyViolationEvent](https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"SecurityPolicyViolationEvent"</e></m></meta>
	</class>
	<abstract path="js.html.SecurityPolicyViolationEventDisposition" params="" file="/home/vsts/work/1/s/std/js/html/SecurityPolicyViolationEventDisposition.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SecurityPolicyViolationEventDisposition.SecurityPolicyViolationEventDisposition_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SecurityPolicyViolationEventDisposition.hx" private="1" module="js.html.SecurityPolicyViolationEventDisposition" extern="1" final="1">
	<ENFORCE public="1" get="inline" set="null" expr="cast &quot;enforce&quot;" line="28" static="1">
		<x path="js.html.SecurityPolicyViolationEventDisposition"/>
		<meta>
			<m n=":value"><e>cast "enforce"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ENFORCE>
	<REPORT public="1" get="inline" set="null" expr="cast &quot;report&quot;" line="29" static="1">
		<x path="js.html.SecurityPolicyViolationEventDisposition"/>
		<meta>
			<m n=":value"><e>cast "report"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPORT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._SecurityPolicyViolationEventDisposition.SecurityPolicyViolationEventDisposition_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SecurityPolicyViolationEventDisposition.hx" private="1" module="js.html.SecurityPolicyViolationEventDisposition" extern="1" final="1">
		<ENFORCE public="1" get="inline" set="null" expr="cast &quot;enforce&quot;" line="28" static="1">
			<x path="js.html.SecurityPolicyViolationEventDisposition"/>
			<meta>
				<m n=":value"><e>cast "enforce"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ENFORCE>
		<REPORT public="1" get="inline" set="null" expr="cast &quot;report&quot;" line="29" static="1">
			<x path="js.html.SecurityPolicyViolationEventDisposition"/>
			<meta>
				<m n=":value"><e>cast "report"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPORT>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.SecurityPolicyViolationEventInit" params="" file="/home/vsts/work/1/s/std/js/html/SecurityPolicyViolationEventInit.hx"><a>
	<violatedDirective>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</violatedDirective>
	<statusCode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</statusCode>
	<sourceFile>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</sourceFile>
	<sample>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</sample>
	<referrer>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</referrer>
	<originalPolicy>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</originalPolicy>
	<lineNumber>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</lineNumber>
	<effectiveDirective>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</effectiveDirective>
	<documentURI>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</documentURI>
	<disposition>
		<x path="Null"><x path="js.html.SecurityPolicyViolationEventDisposition"/></x>
		<meta><m n=":optional"/></meta>
	</disposition>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<columnNumber>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</columnNumber>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<blockedURI>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</blockedURI>
</a></typedef>
	<class path="js.html.SelectElement" params="" file="/home/vsts/work/1/s/std/js/html/SelectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `autofocus` HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. `2.0`</haxe_doc>
		</autofocus>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` referencing the form that this element is associated with. If the element is not associated with of a `form` element, then it returns `null`.</haxe_doc>
		</form>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `multiple` HTML attribute, which indicates whether multiple items can be selected.</haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of this control used by servers and DOM search functions.</haxe_doc>
		</name>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `required` HTML attribute, which indicates whether the user is required to select a value before submitting the form. `2.0`</haxe_doc>
		</required>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the `size` HTML attribute, which contains the number of visible items in the control. The default is 1, unless `multiple` is true, in which case it is 4.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` represeting the form control's type. When `multiple` is `true`, it returns `"select-multiple"`; otherwise, it returns `"select-one"`.</haxe_doc>
		</type>
		<options public="1" set="null">
			<c path="js.html.HTMLOptionsCollection"/>
			<haxe_doc>An `HTMLOptionsCollection` representing the set of `option` elements contained by this element.</haxe_doc>
		</options>
		<length public="1">
			<x path="Int"/>
			<haxe_doc>An `unsigned long `The number of `option` elements in this `select` element.</haxe_doc>
		</length>
		<selectedOptions public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>An `HTMLCollection` representing the set of `option` elements that are selected.</haxe_doc>
		</selectedOptions>
		<selectedIndex public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the index of the first selected `option` element. The value `-1` indicates no element is selected.</haxe_doc>
		</selectedIndex>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form control (the first selected option). Returns the value attribute of the option element or if it is missing, the text attribute.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` reflecting the validity state that this control is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is false), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Gets an item from the options collection for this `select` element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.OptionElement"/>
			</f>
			<haxe_doc>Gets the item in the options collection with the specified name. The name string can match either the `id` or the `name` attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</namedItem>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element to the collection of `option` elements for this `select` element.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
			<overloads><remove public="1" set="method">
	<f a="index">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
</remove></overloads>
		</remove>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable `invalid` event at the element (and returns `false`).</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLSelectElement` interface represents a `select` HTML Element. These elements also share all of the properties and methods of other HTML elements via the `HTMLElement` interface.

	Documentation [HTMLSelectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSelectElement"</e></m></meta>
	</class>
	<class path="js.html.Selection" params="" file="/home/vsts/work/1/s/std/js/html/Selection.hx" extern="1">
		<anchorNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection begins.</haxe_doc>
		</anchorNode>
		<anchorOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor.</haxe_doc>
		</anchorOffset>
		<focusNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection ends.</haxe_doc>
		</focusNode>
		<focusOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus.</haxe_doc>
		</focusOffset>
		<isCollapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean indicating whether the selection's start and end points are at the same position.</haxe_doc>
		</isCollapsed>
		<rangeCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of ranges in the selection.</haxe_doc>
		</rangeCount>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` describing the type of the current selection.</haxe_doc>
		</type>
		<caretBidiLevel public="1"><x path="Int"/></caretBidiLevel>
		<getRangeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Range"/>
			</f>
			<haxe_doc>Returns a `Range` object representing one of the ranges currently selected.
		@throws DOMError</haxe_doc>
		</getRangeAt>
		<addRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A `Range` object that will be added to the selection.
		@throws DOMError</haxe_doc>
		</addRange>
		<removeRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a range from the selection.
		@throws DOMError</haxe_doc>
		</removeRange>
		<removeAllRanges public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all ranges from the selection.
		@throws DOMError</haxe_doc>
		</removeAllRanges>
		<empty public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</empty>
		<collapse public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Collapses the current selection to a single point.
		@throws DOMError</haxe_doc>
		</collapse>
		<setPosition public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setPosition>
		<collapseToStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the start of the first range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToStart>
		<collapseToEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the end of the last range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToEnd>
		<extend public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Moves the focus of the selection to a specified point.
		@throws DOMError</haxe_doc>
		</extend>
		<setBaseAndExtent public="1" set="method">
			<f a="anchorNode:anchorOffset:focusNode:focusOffset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.
		@throws DOMError</haxe_doc>
		</setBaseAndExtent>
		<selectAllChildren public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds all the children of the specified node to the selection.
		@throws DOMError</haxe_doc>
		</selectAllChildren>
		<deleteFromDocument public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deletes the selection's content from the document.
		@throws DOMError</haxe_doc>
		</deleteFromDocument>
		<containsNode public="1" set="method">
			<f a="node:?allowPartialContainment" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allowPartialContainment : false }</e></m></meta>
			<haxe_doc>Indicates if a certain node is part of the selection.
		@throws DOMError</haxe_doc>
		</containsNode>
		<modify public="1" set="method">
			<f a="alter:direction:granularity">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current selection.
		@throws DOMError</haxe_doc>
		</modify>
		<haxe_doc><![CDATA[A `Selection` object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call `window.getSelection()`.

	Documentation [Selection](https://developer.mozilla.org/en-US/docs/Web/API/Selection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Selection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Selection>]]></haxe_doc>
		<meta><m n=":native"><e>"Selection"</e></m></meta>
	</class>
	<abstract path="js.html.SelectionMode" params="" file="/home/vsts/work/1/s/std/js/html/SelectionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" extern="1" final="1">
	<SELECT public="1" get="inline" set="null" expr="cast &quot;select&quot;" line="28" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "select"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SELECT>
	<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="29" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "start"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</START>
	<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</END>
	<PRESERVE public="1" get="inline" set="null" expr="cast &quot;preserve&quot;" line="31" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "preserve"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRESERVE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" extern="1" final="1">
		<SELECT public="1" get="inline" set="null" expr="cast &quot;select&quot;" line="28" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "select"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SELECT>
		<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="29" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "start"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</START>
		<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="30" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</END>
		<PRESERVE public="1" get="inline" set="null" expr="cast &quot;preserve&quot;" line="31" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "preserve"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRESERVE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.ServiceWorker" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<scriptURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`. The URL must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scriptURL>
		<state public="1" set="null">
			<x path="js.html.ServiceWorkerState"/>
			<haxe_doc>Returns the state of the service worker. It returns one of the following values: `installing`, `installed,` `activating`, `activated`, or `redundant`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `statechange` is fired; it is basically fired anytime the `ServiceWorker.state` changes.</haxe_doc>
		</onstatechange>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `ServiceWorker` interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique `ServiceWorker` object.

	Documentation [ServiceWorker](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorker"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerContainer" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerContainer.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<controller public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a `ServiceWorker` object if its state is `activated` (the same object returned by `ServiceWorkerRegistration.active`). This property returns `null` during a force-refresh request (Shift + refresh) or if there is no active worker.</haxe_doc>
		</controller>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
			<haxe_doc>Provides a way of delaying code execution until a service worker is active. It returns a `Promise` that will never reject, and which waits indefinitely until the `ServiceWorkerRegistration` associated with the current page has an `ServiceWorkerRegistration.active` worker. Once that condition is met, it resolves with the `ServiceWorkerRegistration`.</haxe_doc>
		</ready>
		<oncontrollerchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `controllerchange` event occurs — when the document's associated `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.active` worker.</haxe_doc>
		</oncontrollerchange>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever an `error` event occurs in the associated service workers.</haxe_doc>
		</onerror>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `message` event occurs — when incoming messages are received to the `ServiceWorkerContainer` object (e.g. via a `MessagePort.postMessage()` call.)</haxe_doc>
		</onmessage>
		<register public="1" set="method"><f a="scriptURL:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.RegistrationOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
</f></register>
		<getRegistration public="1" set="method">
			<f a="?documentURL" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<meta><m n=":value"><e>{ documentURL : "" }</e></m></meta>
			<haxe_doc>Gets a `ServiceWorkerRegistration` object whose scope matches the provided document URL.  If the method can't return a `ServiceWorkerRegistration`, it returns a `Promise`. </haxe_doc>
		</getRegistration>
		<getRegistrations public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.ServiceWorkerRegistration"/></c></c></f>
			<haxe_doc>Returns all `ServiceWorkerRegistration` objects associated with a `ServiceWorkerContainer` in an array.  If the method can't return `ServiceWorkerRegistration` objects, it returns a `Promise`. </haxe_doc>
		</getRegistrations>
		<haxe_doc><![CDATA[The `ServiceWorkerContainer` interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.

	Documentation [ServiceWorkerContainer](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerContainer"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerGlobalScope.hx" extern="1">
		<extends path="js.html.WorkerGlobalScope"/>
		<clients public="1" set="null">
			<c path="js.html.Clients"/>
			<haxe_doc>Contains the `Clients` object associated with the service worker.</haxe_doc>
		</clients>
		<registration public="1" set="null">
			<c path="js.html.ServiceWorkerRegistration"/>
			<haxe_doc>Contains the `ServiceWorkerRegistration` object that represents the service worker's registration.</haxe_doc>
		</registration>
		<oninstall public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever an `install` event occurs — when a `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.installing` worker.</haxe_doc>
		</oninstall>
		<onactivate public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever an `activate` event occurs — when a `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.active` worker.</haxe_doc>
		</onactivate>
		<onfetch public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `fetch` event occurs — when a `GlobalFetch.fetch` is called.</haxe_doc>
		</onfetch>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `message` event occurs — when incoming messages are received. Controlled pages can use the `MessagePort.postMessage()` method to send messages to service workers. The service worker can optionally send a response back via the `MessagePort` exposed in `event.data.port`, corresponding to the controlled page.</haxe_doc>
		</onmessage>
		<onpush public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `push` event occurs — when a server push notification is received.</haxe_doc>
		</onpush>
		<onpushsubscriptionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `pushsubscriptionchange` event occurs — when a push subscription has been invalidated, or is about to be invalidated (e.g. when a push service sets an expiration time.)</haxe_doc>
		</onpushsubscriptionchange>
		<onnotificationclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `notificationclick` event occurs — when a user clicks on a displayed notification.</haxe_doc>
		</onnotificationclick>
		<onnotificationclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `notificationclose` event occurs — when a user closes a displayed notification.</haxe_doc>
		</onnotificationclose>
		<skipWaiting public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Allows the current service worker registration to progress from waiting to active state while service worker clients are using it.
		@throws DOMError</haxe_doc>
		</skipWaiting>
		<haxe_doc><![CDATA[The `ServiceWorkerGlobalScope` interface of the ServiceWorker API represents the global execution context of a service worker.

	Documentation [ServiceWorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerRegistration" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerRegistration.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<installing public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `installing`. This is initially set to `null`.</haxe_doc>
		</installing>
		<waiting public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `waiting`. This is initially set to `null`.</haxe_doc>
		</waiting>
		<active public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is either `activating` or `activated`. This is initially set to `null`. An active worker will control a `ServiceWorkerClient` if the client's URL falls within the scope of the registration (the `scope` option set when `ServiceWorkerContainer.register` is first called.)</haxe_doc>
		</active>
		<scope public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scope>
		<updateViaCache public="1" set="null"><x path="js.html.ServiceWorkerUpdateViaCache"/></updateViaCache>
		<onupdatefound public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `updatefound` is fired; it is fired any time the `ServiceWorkerRegistration.installing` property acquires a new service worker.</haxe_doc>
		</onupdatefound>
		<pushManager public="1" set="null">
			<c path="js.html.push.PushManager"/>
			<haxe_doc>Returns a reference to the `PushManager` interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.</haxe_doc>
		</pushManager>
		<update public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Checks the server for an updated version of the service worker without consulting caches.
		@throws DOMError</haxe_doc>
		</update>
		<unregister public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Unregisters the service worker registration and returns a `Promise`. The service worker will finish any ongoing operations before it is unregistered.
		@throws DOMError</haxe_doc>
		</unregister>
		<showNotification public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Displays the notification with the requested title.
		@throws DOMError</haxe_doc>
		</showNotification>
		<getNotifications public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.GetNotificationOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Notification"/></c></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to an array of `Notification` objects.
		@throws DOMError</haxe_doc>
		</getNotifications>
		<haxe_doc><![CDATA[The `ServiceWorkerRegistration` interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.

	Documentation [ServiceWorkerRegistration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerRegistration"</e></m></meta>
	</class>
	<abstract path="js.html.ServiceWorkerState" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerState.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `ServiceWorkerState` is associated with its `ServiceWorker`'s state.

	Documentation [ServiceWorkerState](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" extern="1" final="1">
	<PARSED public="1" get="inline" set="null" expr="cast &quot;parsed&quot;" line="35" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "parsed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PARSED>
	<INSTALLING public="1" get="inline" set="null" expr="cast &quot;installing&quot;" line="36" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "installing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INSTALLING>
	<INSTALLED public="1" get="inline" set="null" expr="cast &quot;installed&quot;" line="37" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "installed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INSTALLED>
	<ACTIVATING public="1" get="inline" set="null" expr="cast &quot;activating&quot;" line="38" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "activating"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACTIVATING>
	<ACTIVATED public="1" get="inline" set="null" expr="cast &quot;activated&quot;" line="39" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "activated"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACTIVATED>
	<REDUNDANT public="1" get="inline" set="null" expr="cast &quot;redundant&quot;" line="40" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "redundant"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REDUNDANT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" extern="1" final="1">
		<PARSED public="1" get="inline" set="null" expr="cast &quot;parsed&quot;" line="35" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "parsed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PARSED>
		<INSTALLING public="1" get="inline" set="null" expr="cast &quot;installing&quot;" line="36" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "installing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INSTALLING>
		<INSTALLED public="1" get="inline" set="null" expr="cast &quot;installed&quot;" line="37" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "installed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INSTALLED>
		<ACTIVATING public="1" get="inline" set="null" expr="cast &quot;activating&quot;" line="38" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "activating"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACTIVATING>
		<ACTIVATED public="1" get="inline" set="null" expr="cast &quot;activated&quot;" line="39" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "activated"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACTIVATED>
		<REDUNDANT public="1" get="inline" set="null" expr="cast &quot;redundant&quot;" line="40" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "redundant"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REDUNDANT>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.ServiceWorkerUpdateViaCache" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerUpdateViaCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerUpdateViaCache.ServiceWorkerUpdateViaCache_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerUpdateViaCache.hx" private="1" module="js.html.ServiceWorkerUpdateViaCache" extern="1" final="1">
	<IMPORTS public="1" get="inline" set="null" expr="cast &quot;imports&quot;" line="28" static="1">
		<x path="js.html.ServiceWorkerUpdateViaCache"/>
		<meta>
			<m n=":value"><e>cast "imports"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IMPORTS>
	<ALL public="1" get="inline" set="null" expr="cast &quot;all&quot;" line="29" static="1">
		<x path="js.html.ServiceWorkerUpdateViaCache"/>
		<meta>
			<m n=":value"><e>cast "all"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALL>
	<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="30" static="1">
		<x path="js.html.ServiceWorkerUpdateViaCache"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ServiceWorkerUpdateViaCache.ServiceWorkerUpdateViaCache_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ServiceWorkerUpdateViaCache.hx" private="1" module="js.html.ServiceWorkerUpdateViaCache" extern="1" final="1">
		<IMPORTS public="1" get="inline" set="null" expr="cast &quot;imports&quot;" line="28" static="1">
			<x path="js.html.ServiceWorkerUpdateViaCache"/>
			<meta>
				<m n=":value"><e>cast "imports"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IMPORTS>
		<ALL public="1" get="inline" set="null" expr="cast &quot;all&quot;" line="29" static="1">
			<x path="js.html.ServiceWorkerUpdateViaCache"/>
			<meta>
				<m n=":value"><e>cast "all"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALL>
		<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="30" static="1">
			<x path="js.html.ServiceWorkerUpdateViaCache"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.ShadowRoot" params="" file="/home/vsts/work/1/s/std/js/html/ShadowRoot.hx" extern="1">
		<extends path="js.html.DocumentFragment"/>
		<mode public="1" set="null">
			<x path="js.html.ShadowRootMode"/>
			<haxe_doc>The mode of the `ShadowRoot` — either `open` or `closed`. This defines whether or not the shadow root's internal features are accessible from JavaScript.</haxe_doc>
		</mode>
		<host public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the DOM element the `ShadowRoot` is attached to.</haxe_doc>
		</host>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Sets or returns a reference to the DOM tree inside the `ShadowRoot`.</haxe_doc>
		</innerHTML>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null"><c path="js.html.Element"/></fullscreenElement>
		<getElementById public="1" set="method" override="1"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<getElementsByTagName public="1" set="method"><f a="localName">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="namespace:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method"><f a="classNames">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByClassName>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<haxe_doc><![CDATA[The `ShadowRoot` interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.

	Documentation [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot>]]></haxe_doc>
		<meta><m n=":native"><e>"ShadowRoot"</e></m></meta>
	</class>
	<typedef path="js.html.ShadowRootInit" params="" file="/home/vsts/work/1/s/std/js/html/ShadowRootInit.hx"><a><mode><x path="js.html.ShadowRootMode"/></mode></a></typedef>
	<abstract path="js.html.ShadowRootMode" params="" file="/home/vsts/work/1/s/std/js/html/ShadowRootMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ShadowRootMode.ShadowRootMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ShadowRootMode.hx" private="1" module="js.html.ShadowRootMode" extern="1" final="1">
	<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="28" static="1">
		<x path="js.html.ShadowRootMode"/>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="29" static="1">
		<x path="js.html.ShadowRootMode"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._ShadowRootMode.ShadowRootMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/ShadowRootMode.hx" private="1" module="js.html.ShadowRootMode" extern="1" final="1">
		<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="28" static="1">
			<x path="js.html.ShadowRootMode"/>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="29" static="1">
			<x path="js.html.ShadowRootMode"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.SharedWorker" params="" file="/home/vsts/work/1/s/std/js/html/SharedWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<port public="1" set="null">
			<c path="js.html.MessagePort"/>
			<haxe_doc>Returns a `MessagePort` object used to communicate and control the shared worker.</haxe_doc>
		</port>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<new public="1" set="method">
			<f a="scriptURL:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="scriptURL:?options">
		<c path="String"/>
		<x path="Null"><t path="js.html.WorkerOptions"/></x>
		<c path="js.html.SharedWorker"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SharedWorker` interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, `SharedWorkerGlobalScope`.

	Documentation [SharedWorker](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"SharedWorker"</e></m></meta>
	</class>
	<class path="js.html.SharedWorkerGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/SharedWorkerGlobalScope.hx" extern="1">
		<extends path="js.html.WorkerGlobalScope"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name that the `SharedWorker` was (optionally) given when it was created using the `SharedWorker.SharedWorker` constructor. This is mainly useful for debugging purposes.</haxe_doc>
		</name>
		<onconnect public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `connect` event is raised — that is, when a `MessagePort` connection is opened between the associated `SharedWorker` and the main thread.</haxe_doc>
		</onconnect>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Discards any tasks queued in the `SharedWorkerGlobalScope`'s event loop, effectively closing this particular scope.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `SharedWorkerGlobalScope` object (the `SharedWorker` global scope) is accessible through the `self` keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.

	Documentation [SharedWorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"SharedWorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.SlotElement" params="" file="/home/vsts/work/1/s/std/js/html/SlotElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>`DOMString`: Can be used to get and set the slot's name.</haxe_doc>
		</name>
		<assignedNodes public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.AssignedNodesOptions"/></x>
				<c path="Array"><c path="js.html.Node"/></c>
			</f>
			<haxe_doc>Returns the sequence of elements assigned to this slot, or alternatively the slot's fallback content.</haxe_doc>
		</assignedNodes>
		<haxe_doc><![CDATA[The `HTMLSlotElement` interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML `slot` element.

	Documentation [HTMLSlotElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSlotElement"</e></m></meta>
	</class>
	<class path="js.html.SourceBuffer" params="" file="/home/vsts/work/1/s/std/js/html/SourceBuffer.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1">
			<x path="js.html.SourceBufferAppendMode"/>
			<haxe_doc>Controls how the order of media segments in the `SourceBuffer` is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence.</haxe_doc>
		</mode>
		<updating public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the `SourceBuffer` is currently being updated — i.e. whether an `SourceBuffer.appendBuffer()`, `SourceBuffer.appendStream()`, or `SourceBuffer.remove()` operation is currently in progress.</haxe_doc>
		</updating>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns the time ranges that are currently buffered in the `SourceBuffer`.</haxe_doc>
		</buffered>
		<timestampOffset public="1">
			<x path="Float"/>
			<haxe_doc>Controls the offset applied to timestamps inside media segments that are subsequently appended to the `SourceBuffer`.</haxe_doc>
		</timestampOffset>
		<appendWindowStart public="1">
			<x path="Float"/>
			<haxe_doc>Controls the timestamp for the start of the append window. This is a timestamp range that can be used to filter what media data is appended to the `SourceBuffer`. Coded media frames with timestamps within this range will be appended, whereas those outside the range will be filtered out.</haxe_doc>
		</appendWindowStart>
		<appendWindowEnd public="1">
			<x path="Float"/>
			<haxe_doc>Controls the timestamp for the end of the append window.</haxe_doc>
		</appendWindowEnd>
		<onupdatestart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever the value of `SourceBuffer.updating` transitions from `false` to `true`.</haxe_doc>
		</onupdatestart>
		<onupdate public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever `SourceBuffer.appendBuffer()` method or the `SourceBuffer.remove()` completes. `SourceBuffer.updating` changes from `true` to `false`. This event is fired before `onupdateend`.</haxe_doc>
		</onupdate>
		<onupdateend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever `SourceBuffer.appendBuffer()` method or the `SourceBuffer.remove()` has ended. This event is fired after `onupdate`.</haxe_doc>
		</onupdateend>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever an error occurs during `SourceBuffer.appendBuffer()` or `SourceBuffer.appendStream()`. `SourceBuffer.updating` changes from `true` to `false`.</haxe_doc>
		</onerror>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever `SourceBuffer.appendBuffer()` or `SourceBuffer.appendStream()` is ended by a call to `SourceBuffer.abort()`. `SourceBuffer.updating` changes from `true` to `false`.</haxe_doc>
		</onabort>
		<appendBuffer public="1" set="method">
			<f a="data">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends media segment data from an `ArrayBuffer` or `ArrayBufferView` object to the `SourceBuffer`.
		@throws DOMError</haxe_doc>
			<overloads><appendBuffer public="1" set="method">
	<f a="data">
		<c path="js.lib.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Appends media segment data from an `ArrayBuffer` or `ArrayBufferView` object to the `SourceBuffer`.
		@throws DOMError</haxe_doc>
</appendBuffer></overloads>
		</appendBuffer>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Aborts the current segment and resets the segment parser.
		@throws DOMError</haxe_doc>
		</abort>
		<remove public="1" set="method">
			<f a="start:end">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes media segments within a specific time range from the `SourceBuffer`.
		@throws DOMError</haxe_doc>
		</remove>
		<changeType public="1" set="method">
			<f a="type">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the `MIME type` that future calls to `SourceBuffer.appendBuffer` will expect the new data to conform to.
		@throws DOMError</haxe_doc>
		</changeType>
		<haxe_doc><![CDATA[The `SourceBuffer` interface represents a chunk of media to be passed into an `HTMLMediaElement` and played, via a `MediaSource` object. This can be made up of one or several media segments.

	Documentation [SourceBuffer](https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"SourceBuffer"</e></m></meta>
	</class>
	<abstract path="js.html.SourceBufferAppendMode" params="" file="/home/vsts/work/1/s/std/js/html/SourceBufferAppendMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SourceBufferAppendMode.SourceBufferAppendMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SourceBufferAppendMode.hx" private="1" module="js.html.SourceBufferAppendMode" extern="1" final="1">
	<SEGMENTS public="1" get="inline" set="null" expr="cast &quot;segments&quot;" line="28" static="1">
		<x path="js.html.SourceBufferAppendMode"/>
		<meta>
			<m n=":value"><e>cast "segments"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEGMENTS>
	<SEQUENCE public="1" get="inline" set="null" expr="cast &quot;sequence&quot;" line="29" static="1">
		<x path="js.html.SourceBufferAppendMode"/>
		<meta>
			<m n=":value"><e>cast "sequence"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEQUENCE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._SourceBufferAppendMode.SourceBufferAppendMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SourceBufferAppendMode.hx" private="1" module="js.html.SourceBufferAppendMode" extern="1" final="1">
		<SEGMENTS public="1" get="inline" set="null" expr="cast &quot;segments&quot;" line="28" static="1">
			<x path="js.html.SourceBufferAppendMode"/>
			<meta>
				<m n=":value"><e>cast "segments"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEGMENTS>
		<SEQUENCE public="1" get="inline" set="null" expr="cast &quot;sequence&quot;" line="29" static="1">
			<x path="js.html.SourceBufferAppendMode"/>
			<meta>
				<m n=":value"><e>cast "sequence"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEQUENCE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.SourceBufferList" params="" file="/home/vsts/work/1/s/std/js/html/SourceBufferList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of `SourceBuffer` objects in the list.</haxe_doc>
		</length>
		<onaddsourcebuffer public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `addsourcebuffer` event.</haxe_doc>
		</onaddsourcebuffer>
		<onremovesourcebuffer public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `removesourcebuffer` event.</haxe_doc>
		</onremovesourcebuffer>
		<haxe_doc><![CDATA[The `SourceBufferList` interface represents a simple container list for multiple `SourceBuffer` objects.

	Documentation [SourceBufferList](https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList>]]></haxe_doc>
		<meta><m n=":native"><e>"SourceBufferList"</e></m></meta>
	</class>
	<class path="js.html.SourceElement" params="" file="/home/vsts/work/1/s/std/js/html/SourceElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `src` HTML attribute, containing the URL for the media resource. The `HTMLSourceElement.src` property has a meaning only when the associated `source` element is nested in a media element that is a `video` or an `audio` element. It has no meaning and is ignored when it is nested in a `picture` element. 
		 Note: If the `src` property is updated (along with any siblings), the parent `HTMLMediaElement`'s `load` method should be called when done, since `source` elements are not re-scanned automatically.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `type` HTML attribute, containing the type of the media resource.</haxe_doc>
		</type>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing image sizes between breakpoints</haxe_doc>
		</sizes>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `media` HTML attribute, containing the intended type of the media resource.</haxe_doc>
		</media>
		<haxe_doc><![CDATA[The `HTMLSourceElement` interface provides special properties (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating `source` elements.

	Documentation [HTMLSourceElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSourceElement"</e></m></meta>
	</class>
	<class path="js.html.SpanElement" params="" file="/home/vsts/work/1/s/std/js/html/SpanElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLSpanElement` interface represents a `span` element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSpanElement"</e></m></meta>
	</class>
	<class path="js.html.SpeechGrammar" params="" file="/home/vsts/work/1/s/std/js/html/SpeechGrammar.hx" extern="1">
		<src public="1">
			<c path="String"/>
			<haxe_doc>Sets and returns a string containing the grammar from within in the `SpeechGrammar` object instance.</haxe_doc>
		</src>
		<weight public="1">
			<x path="Float"/>
			<haxe_doc>Sets and returns the weight of the `SpeechGrammar` object.</haxe_doc>
		</weight>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechGrammar` interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.

	Documentation [SpeechGrammar](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechGrammar"</e></m></meta>
	</class>
	<class path="js.html.SpeechGrammarList" params="" file="/home/vsts/work/1/s/std/js/html/SpeechGrammarList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of `SpeechGrammar` objects contained in the `SpeechGrammarList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.SpeechGrammar"/>
			</f>
			<haxe_doc>Standard getter — allows individual `SpeechGrammar` objects to be retrieved from the `SpeechGrammarList` using array syntax.
		@throws DOMError</haxe_doc>
		</item>
		<addFromURI public="1" set="method">
			<f a="src:?weight">
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Takes a grammar present at a specific URI and adds it to the `SpeechGrammarList` as a new `SpeechGrammar` object.
		@throws DOMError</haxe_doc>
		</addFromURI>
		<addFromString public="1" set="method">
			<f a="string:?weight">
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Takes a grammar present in a specific `DOMString` within the code base (e.g. stored in a variable) and adds it to the `SpeechGrammarList` as a new `SpeechGrammar` object.
		@throws DOMError</haxe_doc>
		</addFromString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechGrammarList` interface of the Web Speech API represents a list of `SpeechGrammar` objects containing words or patterns of words that we want the recognition service to recognize.

	Documentation [SpeechGrammarList](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechGrammarList"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognition" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognition.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<grammars public="1">
			<c path="js.html.SpeechGrammarList"/>
			<haxe_doc>Returns and sets a collection of `SpeechGrammar` objects that represent the grammars that will be understood by the current `SpeechRecognition`.</haxe_doc>
		</grammars>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Returns and sets the language of the current `SpeechRecognition`. If not specified, this defaults to the HTML `lang` attribute value, or the user agent's language setting if that isn't set either.</haxe_doc>
		</lang>
		<continuous public="1">
			<x path="Bool"/>
			<haxe_doc>Controls whether continuous results are returned for each recognition, or only a single result. Defaults to single (`false`.)</haxe_doc>
		</continuous>
		<interimResults public="1">
			<x path="Bool"/>
			<haxe_doc>Controls whether interim results should be returned (`true`) or not (`false`.) Interim results are results that are not yet final (e.g. the `SpeechRecognitionResult.isFinal` property is `false`.)</haxe_doc>
		</interimResults>
		<maxAlternatives public="1">
			<x path="Int"/>
			<haxe_doc>Sets the maximum number of `SpeechRecognitionAlternative`s provided per result. The default value is 1.</haxe_doc>
		</maxAlternatives>
		<serviceURI public="1">
			<c path="String"/>
			<haxe_doc>Specifies the location of the speech recognition service used by the current `SpeechRecognition` to handle the actual recognition. The default is the user agent's default speech service.</haxe_doc>
		</serviceURI>
		<onaudiostart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the user agent has started to capture audio.</haxe_doc>
		</onaudiostart>
		<onsoundstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when any sound — recognisable speech or not — has been detected.</haxe_doc>
		</onsoundstart>
		<onspeechstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when sound that is recognised by the speech recognition service as speech has been detected.</haxe_doc>
		</onspeechstart>
		<onspeechend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when speech recognised by the speech recognition service has stopped being detected.</haxe_doc>
		</onspeechend>
		<onsoundend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when any sound — recognisable speech or not — has stopped being detected.</haxe_doc>
		</onsoundend>
		<onaudioend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the user agent has finished capturing audio.</haxe_doc>
		</onaudioend>
		<onresult public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app.</haxe_doc>
		</onresult>
		<onnomatch public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the `SpeechRecognitionAlternative.confidence` threshold.</haxe_doc>
		</onnomatch>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a speech recognition error occurs.</haxe_doc>
		</onerror>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current `SpeechRecognition`.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service has disconnected.</haxe_doc>
		</onend>
		<start public="1" set="method">
			<f a="?stream">
				<c path="js.html.MediaStream"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current `SpeechRecognition`.
		@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the speech recognition service from listening to incoming audio, and attempts to return a `SpeechRecognitionResult` using the audio captured so far.</haxe_doc>
		</stop>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a `SpeechRecognitionResult`.</haxe_doc>
		</abort>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechRecognition` interface of the Web Speech API is the controller interface for the recognition service; this also handles the `SpeechRecognitionEvent` sent from the recognition service.

	Documentation [SpeechRecognition](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognition"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognitionAlternative" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionAlternative.hx" extern="1">
		<transcript public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string containing the transcript of the recognised word.</haxe_doc>
		</transcript>
		<confidence public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.</haxe_doc>
		</confidence>
		<haxe_doc><![CDATA[The `SpeechRecognitionAlternative` interface of the Web Speech API represents a single word that has been recognised by the speech recognition service.

	Documentation [SpeechRecognitionAlternative](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionAlternative"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognitionError" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionError.hx" extern="1">
		<extends path="js.html.Event"/>
		<error public="1" set="null">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<haxe_doc>Returns the type of error raised.</haxe_doc>
		</error>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a message describing the error in more detail.</haxe_doc>
		</message>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.SpeechRecognitionErrorInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechRecognitionError` interface of the Web Speech API represents error messages from the recognition service.

	Documentation [SpeechRecognitionError](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionError"</e></m></meta>
	</class>
	<abstract path="js.html.SpeechRecognitionErrorCode" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionErrorCode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SpeechRecognitionErrorCode.SpeechRecognitionErrorCode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionErrorCode.hx" private="1" module="js.html.SpeechRecognitionErrorCode" extern="1" final="1">
	<NO_SPEECH public="1" get="inline" set="null" expr="cast &quot;no-speech&quot;" line="28" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "no-speech"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_SPEECH>
	<ABORTED public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="29" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "aborted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ABORTED>
	<AUDIO_CAPTURE public="1" get="inline" set="null" expr="cast &quot;audio-capture&quot;" line="30" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "audio-capture"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIO_CAPTURE>
	<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="31" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "network"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NETWORK>
	<NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;not-allowed&quot;" line="32" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "not-allowed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOT_ALLOWED>
	<SERVICE_NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;service-not-allowed&quot;" line="33" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "service-not-allowed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SERVICE_NOT_ALLOWED>
	<BAD_GRAMMAR public="1" get="inline" set="null" expr="cast &quot;bad-grammar&quot;" line="34" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "bad-grammar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BAD_GRAMMAR>
	<LANGUAGE_NOT_SUPPORTED public="1" get="inline" set="null" expr="cast &quot;language-not-supported&quot;" line="35" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "language-not-supported"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANGUAGE_NOT_SUPPORTED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._SpeechRecognitionErrorCode.SpeechRecognitionErrorCode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionErrorCode.hx" private="1" module="js.html.SpeechRecognitionErrorCode" extern="1" final="1">
		<NO_SPEECH public="1" get="inline" set="null" expr="cast &quot;no-speech&quot;" line="28" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "no-speech"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_SPEECH>
		<ABORTED public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="29" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "aborted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ABORTED>
		<AUDIO_CAPTURE public="1" get="inline" set="null" expr="cast &quot;audio-capture&quot;" line="30" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "audio-capture"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIO_CAPTURE>
		<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="31" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "network"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NETWORK>
		<NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;not-allowed&quot;" line="32" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "not-allowed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOT_ALLOWED>
		<SERVICE_NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;service-not-allowed&quot;" line="33" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "service-not-allowed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SERVICE_NOT_ALLOWED>
		<BAD_GRAMMAR public="1" get="inline" set="null" expr="cast &quot;bad-grammar&quot;" line="34" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "bad-grammar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BAD_GRAMMAR>
		<LANGUAGE_NOT_SUPPORTED public="1" get="inline" set="null" expr="cast &quot;language-not-supported&quot;" line="35" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "language-not-supported"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANGUAGE_NOT_SUPPORTED>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.SpeechRecognitionErrorInit" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionErrorInit.hx"><a>
	<message>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<error>
		<x path="Null"><x path="js.html.SpeechRecognitionErrorCode"/></x>
		<meta><m n=":optional"/></meta>
	</error>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.SpeechRecognitionEvent" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<resultIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the lowest index value result in the `SpeechRecognitionResultList` "array" that has actually changed.</haxe_doc>
		</resultIndex>
		<results public="1" set="null">
			<c path="js.html.SpeechRecognitionResultList"/>
			<haxe_doc>Returns a `SpeechRecognitionResultList` object representing all the speech recognition results for the current session.</haxe_doc>
		</results>
		<interpretation public="1" set="null">
			<d/>
			<haxe_doc>Returns the semantic meaning of what the user said.</haxe_doc>
		</interpretation>
		<emma public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns an Extensible MultiModal Annotation markup language (EMMA) — XML — representation of the result.</haxe_doc>
		</emma>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.SpeechRecognitionEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechRecognitionEvent` interface of the Web Speech API represents the event object for the `result` and `nomatch` events, and contains all the data associated with an interim or final speech recognition result.

	Documentation [SpeechRecognitionEvent](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.SpeechRecognitionEventInit" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionEventInit.hx"><a>
	<results>
		<x path="Null"><c path="js.html.SpeechRecognitionResultList"/></x>
		<meta><m n=":optional"/></meta>
	</results>
	<resultIndex>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</resultIndex>
	<interpretation>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</interpretation>
	<emma>
		<x path="Null"><c path="js.html.HTMLDocument"/></x>
		<meta><m n=":optional"/></meta>
	</emma>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.SpeechRecognitionResult" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionResult.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the "array" — the number of `SpeechRecognitionAlternative` objects contained in the result (also referred to as "n-best alternatives".)</haxe_doc>
		</length>
		<isFinal public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.</haxe_doc>
		</isFinal>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.SpeechRecognitionAlternative"/>
</f></item>
		<haxe_doc><![CDATA[The `SpeechRecognitionResult` interface of the Web Speech API represents a single recognition match, which may contain multiple `SpeechRecognitionAlternative` objects.

	Documentation [SpeechRecognitionResult](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionResult"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognitionResultList" params="" file="/home/vsts/work/1/s/std/js/html/SpeechRecognitionResultList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the "array" — the number of `SpeechRecognitionResult` objects in the list.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.SpeechRecognitionResult"/>
</f></item>
		<haxe_doc><![CDATA[The `SpeechRecognitionResultList` interface of the Web Speech API represents a list of `SpeechRecognitionResult` objects, or a single one if results are being captured in `continuous` mode.

	Documentation [SpeechRecognitionResultList](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionResultList"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesis" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesis.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the utterance queue contains as-yet-unspoken utterances.</haxe_doc>
		</pending>
		<speaking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a paused state.</haxe_doc>
		</speaking>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the `SpeechSynthesis` object is in a paused state.</haxe_doc>
		</paused>
		<onvoiceschanged public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the list of `SpeechSynthesisVoice` objects that would be returned by the `SpeechSynthesis.getVoices()` method has changed.</haxe_doc>
		</onvoiceschanged>
		<speak public="1" set="method">
			<f a="utterance">
				<c path="js.html.SpeechSynthesisUtterance"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an `SpeechSynthesisUtterance` to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.</haxe_doc>
		</speak>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all utterances from the utterance queue.</haxe_doc>
		</cancel>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a paused state.</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a non-paused state: resumes it if it was already paused.</haxe_doc>
		</resume>
		<getVoices public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.SpeechSynthesisVoice"/></c></f>
			<haxe_doc>Returns a list of `SpeechSynthesisVoice` objects representing all the available voices on the current device.</haxe_doc>
		</getVoices>
		<haxe_doc><![CDATA[The `SpeechSynthesis` interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.

	Documentation [SpeechSynthesis](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesis"</e></m></meta>
	</class>
	<abstract path="js.html.SpeechSynthesisErrorCode" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisErrorCode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SpeechSynthesisErrorCode.SpeechSynthesisErrorCode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisErrorCode.hx" private="1" module="js.html.SpeechSynthesisErrorCode" extern="1" final="1">
	<CANCELED public="1" get="inline" set="null" expr="cast &quot;canceled&quot;" line="28" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "canceled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CANCELED>
	<INTERRUPTED public="1" get="inline" set="null" expr="cast &quot;interrupted&quot;" line="29" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "interrupted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INTERRUPTED>
	<AUDIO_BUSY public="1" get="inline" set="null" expr="cast &quot;audio-busy&quot;" line="30" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "audio-busy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIO_BUSY>
	<AUDIO_HARDWARE public="1" get="inline" set="null" expr="cast &quot;audio-hardware&quot;" line="31" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "audio-hardware"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIO_HARDWARE>
	<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="32" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "network"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NETWORK>
	<SYNTHESIS_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;synthesis-unavailable&quot;" line="33" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "synthesis-unavailable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SYNTHESIS_UNAVAILABLE>
	<SYNTHESIS_FAILED public="1" get="inline" set="null" expr="cast &quot;synthesis-failed&quot;" line="34" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "synthesis-failed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SYNTHESIS_FAILED>
	<LANGUAGE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;language-unavailable&quot;" line="35" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "language-unavailable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANGUAGE_UNAVAILABLE>
	<VOICE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;voice-unavailable&quot;" line="36" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "voice-unavailable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VOICE_UNAVAILABLE>
	<TEXT_TOO_LONG public="1" get="inline" set="null" expr="cast &quot;text-too-long&quot;" line="37" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "text-too-long"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT_TOO_LONG>
	<INVALID_ARGUMENT public="1" get="inline" set="null" expr="cast &quot;invalid-argument&quot;" line="38" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "invalid-argument"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INVALID_ARGUMENT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._SpeechSynthesisErrorCode.SpeechSynthesisErrorCode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisErrorCode.hx" private="1" module="js.html.SpeechSynthesisErrorCode" extern="1" final="1">
		<CANCELED public="1" get="inline" set="null" expr="cast &quot;canceled&quot;" line="28" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "canceled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CANCELED>
		<INTERRUPTED public="1" get="inline" set="null" expr="cast &quot;interrupted&quot;" line="29" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "interrupted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INTERRUPTED>
		<AUDIO_BUSY public="1" get="inline" set="null" expr="cast &quot;audio-busy&quot;" line="30" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "audio-busy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIO_BUSY>
		<AUDIO_HARDWARE public="1" get="inline" set="null" expr="cast &quot;audio-hardware&quot;" line="31" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "audio-hardware"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIO_HARDWARE>
		<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="32" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "network"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NETWORK>
		<SYNTHESIS_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;synthesis-unavailable&quot;" line="33" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "synthesis-unavailable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SYNTHESIS_UNAVAILABLE>
		<SYNTHESIS_FAILED public="1" get="inline" set="null" expr="cast &quot;synthesis-failed&quot;" line="34" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "synthesis-failed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SYNTHESIS_FAILED>
		<LANGUAGE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;language-unavailable&quot;" line="35" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "language-unavailable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANGUAGE_UNAVAILABLE>
		<VOICE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;voice-unavailable&quot;" line="36" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "voice-unavailable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VOICE_UNAVAILABLE>
		<TEXT_TOO_LONG public="1" get="inline" set="null" expr="cast &quot;text-too-long&quot;" line="37" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "text-too-long"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT_TOO_LONG>
		<INVALID_ARGUMENT public="1" get="inline" set="null" expr="cast &quot;invalid-argument&quot;" line="38" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "invalid-argument"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INVALID_ARGUMENT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.SpeechSynthesisEvent" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<utterance public="1" set="null">
			<c path="js.html.SpeechSynthesisUtterance"/>
			<haxe_doc>Returns the `SpeechSynthesisUtterance` instance that the event was triggered on.</haxe_doc>
		</utterance>
		<charIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the index position of the character in the `SpeechSynthesisUtterance.text` that was being spoken when the event was triggered.</haxe_doc>
		</charIndex>
		<charLength public="1" set="null"><x path="Int"/></charLength>
		<elapsedTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the elapsed time in milliseconds after the `SpeechSynthesisUtterance.text` started being spoken that the event was triggered at.</haxe_doc>
		</elapsedTime>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name associated with certain types of events occuring as the `SpeechSynthesisUtterance.text` is being spoken: the name of the SSML marker reached in the case of a `mark` event, or the type of boundary reached in the case of a `boundary` event.</haxe_doc>
		</name>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.SpeechSynthesisEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisEvent` interface of the Web Speech API contains information about the current state of `SpeechSynthesisUtterance` objects that have been processed in the speech service.

	Documentation [SpeechSynthesisEvent](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisEvent"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisErrorEvent" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisErrorEvent.hx" extern="1">
		<extends path="js.html.SpeechSynthesisEvent"/>
		<error public="1" set="null">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<haxe_doc>Returns an error code indicating what has gone wrong with a speech synthesis attempt.</haxe_doc>
		</error>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.SpeechSynthesisErrorEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisErrorEvent` interface of the Web Speech API contains information about any errors that occur while processing `SpeechSynthesisUtterance` objects in the speech service.

	Documentation [SpeechSynthesisErrorEvent](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisErrorEvent"</e></m></meta>
	</class>
	<typedef path="js.html.SpeechSynthesisErrorEventInit" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisErrorEventInit.hx"><a>
	<utterance><c path="js.html.SpeechSynthesisUtterance"/></utterance>
	<name>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</name>
	<error><x path="js.html.SpeechSynthesisErrorCode"/></error>
	<elapsedTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<charLength>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</charLength>
	<charIndex>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</charIndex>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.SpeechSynthesisEventInit" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisEventInit.hx"><a>
	<utterance><c path="js.html.SpeechSynthesisUtterance"/></utterance>
	<name>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</name>
	<elapsedTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<charLength>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</charLength>
	<charIndex>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</charIndex>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.SpeechSynthesisUtterance" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisUtterance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the text that will be synthesised when the utterance is spoken.</haxe_doc>
		</text>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the language of the utterance.</haxe_doc>
		</lang>
		<voice public="1">
			<c path="js.html.SpeechSynthesisVoice"/>
			<haxe_doc>Gets and sets the voice that will be used to speak the utterance.</haxe_doc>
		</voice>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the volume that the utterance will be spoken at.</haxe_doc>
		</volume>
		<rate public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the speed at which the utterance will be spoken at.</haxe_doc>
		</rate>
		<pitch public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the pitch at which the utterance will be spoken at.</haxe_doc>
		</pitch>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has begun to be spoken.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has finished being spoken.</haxe_doc>
		</onend>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when an error occurs that prevents the utterance from being succesfully spoken.</haxe_doc>
		</onerror>
		<onpause public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance is paused part way through.</haxe_doc>
		</onpause>
		<onresume public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a paused utterance is resumed.</haxe_doc>
		</onresume>
		<onmark public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a named SSML "mark" tag.</haxe_doc>
		</onmark>
		<onboundary public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a word or sentence boundary.</haxe_doc>
		</onboundary>
		<new public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisUtterance` interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)

	Documentation [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisUtterance"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisVoice" params="" file="/home/vsts/work/1/s/std/js/html/SpeechSynthesisVoice.hx" extern="1">
		<voiceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the type of URI and location of the speech synthesis service for this voice.</haxe_doc>
		</voiceURI>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable name that represents the voice.</haxe_doc>
		</name>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a BCP 47 language tag indicating the language of the voice.</haxe_doc>
		</lang>
		<localService public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.)</haxe_doc>
		</localService>
		<default_ public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>A `Boolean` indicating whether the voice is the default voice for the current app language (`true`), or not (`false`.)</haxe_doc>
		</default_>
		<haxe_doc><![CDATA[The `SpeechSynthesisVoice` interface of the Web Speech API represents a voice that the system supports. Every `SpeechSynthesisVoice` has its own relative speech service including information about language, name and URI.

	Documentation [SpeechSynthesisVoice](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisVoice"</e></m></meta>
	</class>
	<class path="js.html.Storage" params="" file="/home/vsts/work/1/s/std/js/html/Storage.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of data items stored in the `Storage` object.</haxe_doc>
		</length>
		<key public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a number n, this method will return the name of the nth key in the storage.
		@throws DOMError</haxe_doc>
		</key>
		<getItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a key name, will return that key's value.
		@throws DOMError</haxe_doc>
		</getItem>
		<setItem public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
		@throws DOMError</haxe_doc>
		</setItem>
		<removeItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name, will remove that key from the storage.
		@throws DOMError</haxe_doc>
		</removeItem>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>When invoked, will empty all keys out of the storage.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `Storage` interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.

	Documentation [Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Storage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Storage>]]></haxe_doc>
		<meta><m n=":native"><e>"Storage"</e></m></meta>
	</class>
	<typedef path="js.html.StorageEstimate" params="" file="/home/vsts/work/1/s/std/js/html/StorageEstimate.hx">
		<a>
			<usage>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value approximating the amount of storage space currently being used by the site or Web app, out of the available space as indicated by `quota`.</haxe_doc>
			</usage>
			<quota>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value which provides a conservative approximation of the total storage the user's device or computer has available for the site origin or Web app. It's possible that there's more than this amount of space available though you can't rely on that being the case.</haxe_doc>
			</quota>
		</a>
		<haxe_doc><![CDATA[The `StorageEstimate` dictionary is used by the `StorageManager` to provide estimates of the size of a site's or application's data store and how much of it is in use. The `estimate()` method returns an object that conforms to this dictionary when its `Promise` resolves.

	Documentation [StorageEstimate](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate>]]></haxe_doc>
	</typedef>
	<class path="js.html.StorageEvent" params="" file="/home/vsts/work/1/s/std/js/html/StorageEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<key public="1" set="null"><c path="String"/></key>
		<oldValue public="1" set="null"><c path="String"/></oldValue>
		<newValue public="1" set="null"><c path="String"/></newValue>
		<url public="1" set="null"><c path="String"/></url>
		<storageArea public="1" set="null"><c path="js.html.Storage"/></storageArea>
		<initStorageEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?key:?oldValue:?newValue:?url:?storageArea" v=":false:false:::::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Storage"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, canBubble : false }</e></m></meta>
		</initStorageEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.StorageEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `StorageEvent` is sent to a window when a storage area it has access to is changed within the context of another document.

	Documentation [StorageEvent](https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"StorageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.StorageEventInit" params="" file="/home/vsts/work/1/s/std/js/html/StorageEventInit.hx"><a>
	<url>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</url>
	<storageArea>
		<x path="Null"><c path="js.html.Storage"/></x>
		<meta><m n=":optional"/></meta>
	</storageArea>
	<oldValue>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</oldValue>
	<newValue>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</newValue>
	<key>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</key>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.StorageManager" params="" file="/home/vsts/work/1/s/std/js/html/StorageManager.hx" extern="1">
		<persisted public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if persistence has already been granted for your site's storage.
		@throws DOMError</haxe_doc>
		</persisted>
		<persist public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if the user agent is able to persist your site's storage.
		@throws DOMError</haxe_doc>
		</persist>
		<estimate public="1" set="method">
			<f a=""><c path="js.lib.Promise"><t path="js.html.StorageEstimate"/></c></f>
			<haxe_doc>Returns a `StorageEstimate` object containing usage and quota numbers for your origin.
		@throws DOMError</haxe_doc>
		</estimate>
		<haxe_doc><![CDATA[The `StorageManager` interface of the the Storage API provides an interface for managing persistance permissions and estimating available storage. You can get a reference to this interface using either `navigator.storage` or `WorkerNavigator.storage`.

	Documentation [StorageManager](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageManager>]]></haxe_doc>
		<meta><m n=":native"><e>"StorageManager"</e></m></meta>
	</class>
	<abstract path="js.html.StorageType" params="" file="/home/vsts/work/1/s/std/js/html/StorageType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._StorageType.StorageType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/StorageType.hx" private="1" module="js.html.StorageType" extern="1" final="1">
	<PERSISTENT public="1" get="inline" set="null" expr="cast &quot;persistent&quot;" line="28" static="1">
		<x path="js.html.StorageType"/>
		<meta>
			<m n=":value"><e>cast "persistent"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PERSISTENT>
	<TEMPORARY public="1" get="inline" set="null" expr="cast &quot;temporary&quot;" line="29" static="1">
		<x path="js.html.StorageType"/>
		<meta>
			<m n=":value"><e>cast "temporary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEMPORARY>
	<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="30" static="1">
		<x path="js.html.StorageType"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._StorageType.StorageType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/StorageType.hx" private="1" module="js.html.StorageType" extern="1" final="1">
		<PERSISTENT public="1" get="inline" set="null" expr="cast &quot;persistent&quot;" line="28" static="1">
			<x path="js.html.StorageType"/>
			<meta>
				<m n=":value"><e>cast "persistent"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PERSISTENT>
		<TEMPORARY public="1" get="inline" set="null" expr="cast &quot;temporary&quot;" line="29" static="1">
			<x path="js.html.StorageType"/>
			<meta>
				<m n=":value"><e>cast "temporary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEMPORARY>
		<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="30" static="1">
			<x path="js.html.StorageType"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.StyleElement" params="" file="/home/vsts/work/1/s/std/js/html/StyleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value representing whether or not the stylesheet is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of style being applied by this statement.</haxe_doc>
		</type>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLStyleElement` interface represents a `style` element. It inherits properties and methods from its parent, `HTMLElement`, and from `LinkStyle`.

	Documentation [HTMLStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLStyleElement"</e></m></meta>
	</class>
	<class path="js.html.StyleSheetList" params="" file="/home/vsts/work/1/s/std/js/html/StyleSheetList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.StyleSheet"/>
</f></item>
		<haxe_doc><![CDATA[The `StyleSheetList` interface represents a list of `StyleSheet`.

	Documentation [StyleSheetList](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheetList"</e></m></meta>
	</class>
	<class path="js.html.SubtleCrypto" params="" file="/home/vsts/work/1/s/std/js/html/SubtleCrypto.hx" extern="1">
		<encrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the encrypted data corresponding to the clear text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</encrypt>
		<decrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the clear data corresponding to the encrypted text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</decrypt>
		<sign public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the signature corresponding to the text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</sign>
		<verify public="1" set="method">
			<f a="algorithm:key:signature:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `Boolean` value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.
		@throws DOMError</haxe_doc>
		</verify>
		<digest public="1" set="method">
			<f a="algorithm:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a digest generated from the algorithm and text given as parameters.
		@throws DOMError</haxe_doc>
		</digest>
		<generateKey public="1" set="method">
			<f a="algorithm:extractable:keyUsages">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><generateKey public="1" set="method">
	<f a="algorithm:extractable:keyUsages">
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</generateKey></overloads>
		</generateKey>
		<deriveKey public="1" set="method">
			<f a="algorithm:baseKey:derivedKeyType:extractable:keyUsages">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey` derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
		</deriveKey>
		<deriveBits public="1" set="method">
			<f a="algorithm:baseKey:length">
				<d/>
				<c path="js.html.CryptoKey"/>
				<x path="Int"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><deriveBits public="1" set="method">
	<f a="algorithm:baseKey:length">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<x path="Int"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
</deriveBits></overloads>
		</deriveBits>
		<importKey public="1" set="method">
			<f a="format:keyData:algorithm:extractable:keyUsages">
				<c path="String"/>
				<d/>
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><importKey public="1" set="method">
	<f a="format:keyData:algorithm:extractable:keyUsages">
		<c path="String"/>
		<d/>
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</importKey></overloads>
		</importKey>
		<exportKey public="1" set="method">
			<f a="format:key">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a buffer containing the key in the format requested.
		@throws DOMError</haxe_doc>
		</exportKey>
		<wrapKey public="1" set="method">
			<f a="format:key:wrappingKey:wrapAlgorithm">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.html.CryptoKey"/>
				<d/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
			<overloads><wrapKey public="1" set="method">
	<f a="format:key:wrappingKey:wrapAlgorithm">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<c path="js.html.CryptoKey"/>
		<c path="String"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
</wrapKey></overloads>
		</wrapKey>
		<unwrapKey public="1" set="method">
			<f a="format:wrappedKey:unwrappingKey:unwrapAlgorithm:unwrappedKeyAlgorithm:extractable:keyUsages">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the wrapped key given in parameter.
		@throws DOMError</haxe_doc>
		</unwrapKey>
		<haxe_doc><![CDATA[The `SubtleCrypto` interface represents a set of cryptographic primitives. It is available via the `Crypto.subtle` properties available in a window context (via `Window.crypto`).

	Documentation [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto>]]></haxe_doc>
		<meta><m n=":native"><e>"SubtleCrypto"</e></m></meta>
	</class>
	<abstract path="js.html.SupportedType" params="" file="/home/vsts/work/1/s/std/js/html/SupportedType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SupportedType.SupportedType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SupportedType.hx" private="1" module="js.html.SupportedType" extern="1" final="1">
	<TEXT_HTML public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="28" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT_HTML>
	<TEXT_XML public="1" get="inline" set="null" expr="cast &quot;text/xml&quot;" line="29" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "text/xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT_XML>
	<APPLICATION_XML public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="30" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APPLICATION_XML>
	<APPLICATION_XHTML_XML public="1" get="inline" set="null" expr="cast &quot;application/xhtml+xml&quot;" line="31" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "application/xhtml+xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APPLICATION_XHTML_XML>
	<IMAGE_SVG_XML public="1" get="inline" set="null" expr="cast &quot;image/svg+xml&quot;" line="32" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "image/svg+xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IMAGE_SVG_XML>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._SupportedType.SupportedType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/SupportedType.hx" private="1" module="js.html.SupportedType" extern="1" final="1">
		<TEXT_HTML public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="28" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT_HTML>
		<TEXT_XML public="1" get="inline" set="null" expr="cast &quot;text/xml&quot;" line="29" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "text/xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT_XML>
		<APPLICATION_XML public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="30" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APPLICATION_XML>
		<APPLICATION_XHTML_XML public="1" get="inline" set="null" expr="cast &quot;application/xhtml+xml&quot;" line="31" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "application/xhtml+xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APPLICATION_XHTML_XML>
		<IMAGE_SVG_XML public="1" get="inline" set="null" expr="cast &quot;image/svg+xml&quot;" line="32" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "image/svg+xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IMAGE_SVG_XML>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.TableCaptionElement" params="" file="/home/vsts/work/1/s/std/js/html/TableCaptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` which represents an enumerated attribute indicating alignment of the caption with respect to the table.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLTableCaptionElement` interface special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating table caption elements.

	Documentation [HTMLTableCaptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCaptionElement"</e></m></meta>
	</class>
	<class path="js.html.TableCellElement" params="" file="/home/vsts/work/1/s/std/js/html/TableCellElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<colSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the `colspan` attribute.</haxe_doc>
		</colSpan>
		<rowSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the `rowspan` attribute.</haxe_doc>
		</rowSpan>
		<headers public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMSettableTokenList` describing a list of `id` of `th` elements that represents headers associated with the cell. It reflects the `headers` attribute.</haxe_doc>
		</headers>
		<cellIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A long integer representing the cell's position in the `HTMLTableRowElement.cells` collection of the `tr` the cell is contained within. If the cell doesn't belong to a `tr`, it returns `-1`.</haxe_doc>
		</cellIndex>
		<abbr public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` which can be used on `th` elements (not on `td`), specifying an alternative label for the header cell.. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of `abbr` is an abbreviation or acronym, but can be any text that's appropriate contextually.</haxe_doc>
		</abbr>
		<scope public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</scope>
		<align public="1"><c path="String"/></align>
		<axis public="1"><c path="String"/></axis>
		<height public="1"><c path="String"/></height>
		<width public="1"><c path="String"/></width>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<noWrap public="1"><x path="Bool"/></noWrap>
		<vAlign public="1"><c path="String"/></vAlign>
		<bgColor public="1"><c path="String"/></bgColor>
		<haxe_doc><![CDATA[The `HTMLTableCellElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.

	Documentation [HTMLTableCellElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCellElement"</e></m></meta>
	</class>
	<class path="js.html.TableColElement" params="" file="/home/vsts/work/1/s/std/js/html/TableColElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<span public="1"><x path="Int"/></span>
		<align public="1"><c path="String"/></align>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<vAlign public="1"><c path="String"/></vAlign>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLTableColElement` interface provides special properties (beyond the `HTMLElement` interface it also has available to it inheritance) for manipulating single or grouped table column elements.

	Documentation [HTMLTableColElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableColElement"</e></m></meta>
	</class>
	<class path="js.html.TableElement" params="" file="/home/vsts/work/1/s/std/js/html/TableElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<caption public="1">
			<c path="js.html.TableCaptionElement"/>
			<haxe_doc>Is a `HTMLTableCaptionElement` representing the first `caption` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `caption`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first `caption` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</caption>
		<tHead public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `thead` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `thead`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element, and the first `thead` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tHead>
		<tFoot public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `tfoot` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `tfoot`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element, and the first `tfoot` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tFoot>
		<tBodies public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the `tbody` of the element. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</tBodies>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the rows of the element, that is all `tr` that are a child of the element, or a child or one of its `thead`, `tbody` and `tfoot` children. The rows members of a `thead` appear first, in tree order, and those members of a `tbody` last, also in tree order. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the border of the table. It reflects the obsolete `border` attribute.</haxe_doc>
		</border>
		<frame public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the external borders of the table. It reflects the obsolete `frame` attribute and can take one of the following values: `"void"`, `"above"`, `"below"`, `"hsides"`, `"vsides"`, `"lhs"`, `"rhs"`, `"box"`, or `"border"`.</haxe_doc>
		</frame>
		<rules public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the internal borders of the table. It reflects the obsolete `rules` attribute and can take one of the following values: `"none"`, `"groups"`, `"rows"`, `"cols"`, or `"all"`.</haxe_doc>
		</rules>
		<summary public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a description of the purpose or the structure of the table. It reflects the obsolete `summary` attribute.</haxe_doc>
		</summary>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete `width` attribute.</haxe_doc>
		</width>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<cellPadding public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete `cellpadding` attribute.</haxe_doc>
		</cellPadding>
		<cellSpacing public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete `cellspacing` attribute.</haxe_doc>
		</cellSpacing>
		<createCaption public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `caption` that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the `table` element.</haxe_doc>
		</createCaption>
		<deleteCaption public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `caption` that is a child of the element.</haxe_doc>
		</deleteCaption>
		<createTHead public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `thead` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element.</haxe_doc>
		</createTHead>
		<deleteTHead public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `thead` that is a child of the element.</haxe_doc>
		</deleteTHead>
		<createTFoot public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `tfoot` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element.</haxe_doc>
		</createTFoot>
		<deleteTFoot public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `tfoot` that is a child of the element.</haxe_doc>
		</deleteTFoot>
		<createTBody public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTBody>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Returns an `HTMLTableRowElement` representing a new row of the table. It inserts it in the rows collection immediately before the `tr` element at the given `index` position. If necessary a `tbody` is created. If the `index` is `-1`, the new row is appended to the collection. If the `index` is smaller than `-1` or greater than the number of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the row corresponding to the `index` given in parameter. If the `index` value is `-1` the last row is removed; if it smaller than `-1` or greater than the amount of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.

	Documentation [HTMLTableElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableElement"</e></m></meta>
	</class>
	<class path="js.html.TableRowElement" params="" file="/home/vsts/work/1/s/std/js/html/TableRowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the entire table. If the row is not part of a table, returns `-1`.</haxe_doc>
		</rowIndex>
		<sectionRowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns `-1`.</haxe_doc>
		</sectionRowIndex>
		<cells public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the cells in the row. The `HTMLCollection` is live and is automatically updated when cells are added or removed.</haxe_doc>
		</cells>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<insertCell public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new cell just before the given position in the row. If the given position is not given or is `-1`, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value. Returns a reference to a HTMLTableCellElement [en-US].
		@throws DOMError</haxe_doc>
		</insertCell>
		<deleteCell public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteCell>
		<haxe_doc><![CDATA[The `HTMLTableRowElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.

	Documentation [HTMLTableRowElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableRowElement"</e></m></meta>
	</class>
	<class path="js.html.TableSectionElement" params="" file="/home/vsts/work/1/s/std/js/html/TableSectionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the rows in the section. The `HTMLCollection` is live and is automatically updated when rows are added or removed.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new row just before the given position in the section. If the given position is not given or is `-1`, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableSectionElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.

	Documentation [HTMLTableSectionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableSectionElement"</e></m></meta>
	</class>
	<class path="js.html.TemplateElement" params="" file="/home/vsts/work/1/s/std/js/html/TemplateElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<content public="1" set="null">
			<c path="js.html.DocumentFragment"/>
			<haxe_doc>`DocumentFragment`: Returns the `template` element's template contents.</haxe_doc>
		</content>
		<haxe_doc><![CDATA[The `HTMLTemplateElement` interface enables access to the contents of an HTML `template` element.

	Documentation [HTMLTemplateElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTemplateElement"</e></m></meta>
	</class>
	<class path="js.html.TextAreaElement" params="" file="/home/vsts/work/1/s/std/js/html/TextAreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<cols public="1"><x path="Int"/></cols>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<maxLength public="1"><x path="Int"/></maxLength>
		<minLength public="1"><x path="Int"/></minLength>
		<name public="1"><c path="String"/></name>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<rows public="1"><x path="Int"/></rows>
		<wrap public="1"><c path="String"/></wrap>
		<type public="1" set="null"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLTextAreaElement` interface provides special properties and methods for manipulating the layout and presentation of `textarea` elements.

	Documentation [HTMLTextAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTextAreaElement"</e></m></meta>
	</class>
	<typedef path="js.html.TextDecodeOptions" params="" file="/home/vsts/work/1/s/std/js/html/TextDecodeOptions.hx"><a><stream>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</stream></a></typedef>
	<class path="js.html.TextDecoder" params="" file="/home/vsts/work/1/s/std/js/html/TextDecoder.hx" extern="1">
		<encoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name of the decoder, that is a string describing the method the `TextDecoder` will use.</haxe_doc>
		</encoding>
		<fatal public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the error mode is fatal.</haxe_doc>
		</fatal>
		<ignoreBOM public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the byte order marker is ignored.</haxe_doc>
		</ignoreBOM>
		<decode public="1" set="method">
			<f a="?input:?options">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Null"><t path="js.html.TextDecodeOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the text decoded with the method of the specific `TextDecoder` object.
		@throws DOMError</haxe_doc>
			<overloads><decode public="1" set="method">
	<f a="?input:?options">
		<c path="js.lib.ArrayBuffer"/>
		<x path="Null"><t path="js.html.TextDecodeOptions"/></x>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a `DOMString` containing the text decoded with the method of the specific `TextDecoder` object.
		@throws DOMError</haxe_doc>
</decode></overloads>
		</decode>
		<new public="1" set="method">
			<f a="?label:?options" v="&quot;utf-8&quot;:">
				<c path="String"/>
				<x path="Null"><t path="js.html.TextDecoderOptions"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "utf-8" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `TextDecoder` interface represents a decoder for a specific method, that is a specific character encoding, like `utf-8`, `iso-8859-2`, `koi8`, `cp1261`, `gbk`, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see `StringView` – a C-like representation of strings based on typed arrays.

	Documentation [TextDecoder](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder>]]></haxe_doc>
		<meta><m n=":native"><e>"TextDecoder"</e></m></meta>
	</class>
	<typedef path="js.html.TextDecoderOptions" params="" file="/home/vsts/work/1/s/std/js/html/TextDecoderOptions.hx"><a>
	<ignoreBOM>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreBOM>
	<fatal>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</fatal>
</a></typedef>
	<class path="js.html.TextEncoder" params="" file="/home/vsts/work/1/s/std/js/html/TextEncoder.hx" extern="1">
		<encoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name of the encoder, that is a string describing the method the `TextEncoder` will use.</haxe_doc>
		</encoding>
		<encode public="1" set="method">
			<f a="?input" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<meta><m n=":value"><e>{ input : "" }</e></m></meta>
			<haxe_doc>Returns a `Uint8Array` containing utf-8 encoded text.</haxe_doc>
		</encode>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see `StringView` – a C-like representation of strings based on typed arrays.

	Documentation [TextEncoder](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder>]]></haxe_doc>
		<meta><m n=":native"><e>"TextEncoder"</e></m></meta>
	</class>
	<class path="js.html.TextMetrics" params="" file="/home/vsts/work/1/s/std/js/html/TextMetrics.hx" extern="1">
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `double` giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `TextMetrics` interface represents the dimension of a text in the canvas, as created by the `CanvasRenderingContext2D.measureText()` method.

	Documentation [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics>]]></haxe_doc>
		<meta><m n=":native"><e>"TextMetrics"</e></m></meta>
	</class>
	<class path="js.html.TextTrack" params="" file="/home/vsts/work/1/s/std/js/html/TextTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<x path="js.html.TextTrackKind"/>
			<haxe_doc>Returns a `DOMString` indicating what kind of text track the `TextTrack` describes. The value must be one of those in the TextTrackKind enum.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human-readable `DOMString` which contains the text track's label, if one is present; otherwise, this is an empty string (`""`), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML `lang` attribute. For example, this can be `"en-US"` for United States English or `"pt-BR"` for Brazilian Portuguese.</haxe_doc>
		</language>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (`""`). If the `TextTrack` is associated with a `track` element, then the track's ID matches the element's ID.</haxe_doc>
		</id>
		<inBandMetadataTrackDispatchType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` which indicates the track's in-band metadata track dispatch type. needs details</haxe_doc>
		</inBandMetadataTrackDispatchType>
		<mode public="1">
			<x path="js.html.TextTrackMode"/>
			<haxe_doc>A `DOMString` specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants.</haxe_doc>
		</mode>
		<cues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` which contains all of the track's cues.</haxe_doc>
		</cues>
		<activeCues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times.</haxe_doc>
		</activeCues>
		<oncuechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A `EventHandler` specifying a function to be called when a `cuechange` event occurs. Handling these events lets you know when cues are entered and exited. A given text cue appears when the cue is entered and disappears when the cue is exited.</haxe_doc>
		</oncuechange>
		<addCue public="1" set="method"><f a="cue">
	<c path="js.html.VTTCue"/>
	<x path="Void"/>
</f></addCue>
		<removeCue public="1" set="method">
			<f a="cue">
				<c path="js.html.VTTCue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeCue>
		<haxe_doc><![CDATA[This interface also inherits properties from `EventTarget`.

	Documentation [TextTrack](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"TextTrack"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCue" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackCue.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<id public="1"><c path="String"/></id>
		<startTime public="1"><x path="Float"/></startTime>
		<endTime public="1"><x path="Float"/></endTime>
		<pauseOnExit public="1"><x path="Bool"/></pauseOnExit>
		<onenter public="1"><x path="haxe.Function"/></onenter>
		<onexit public="1"><x path="haxe.Function"/></onexit>
		<meta><m n=":native"><e>"TextTrackCue"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCueList" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackCueList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getCueById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VTTCue"/>
</f></getCueById>
		<meta><m n=":native"><e>"TextTrackCueList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackKind" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" extern="1" final="1">
	<SUBTITLES public="1" get="inline" set="null" expr="cast &quot;subtitles&quot;" line="28" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "subtitles"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SUBTITLES>
	<CAPTIONS public="1" get="inline" set="null" expr="cast &quot;captions&quot;" line="29" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "captions"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CAPTIONS>
	<DESCRIPTIONS public="1" get="inline" set="null" expr="cast &quot;descriptions&quot;" line="30" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "descriptions"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DESCRIPTIONS>
	<CHAPTERS public="1" get="inline" set="null" expr="cast &quot;chapters&quot;" line="31" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "chapters"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHAPTERS>
	<METADATA public="1" get="inline" set="null" expr="cast &quot;metadata&quot;" line="32" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "metadata"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</METADATA>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" extern="1" final="1">
		<SUBTITLES public="1" get="inline" set="null" expr="cast &quot;subtitles&quot;" line="28" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "subtitles"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SUBTITLES>
		<CAPTIONS public="1" get="inline" set="null" expr="cast &quot;captions&quot;" line="29" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "captions"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CAPTIONS>
		<DESCRIPTIONS public="1" get="inline" set="null" expr="cast &quot;descriptions&quot;" line="30" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "descriptions"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DESCRIPTIONS>
		<CHAPTERS public="1" get="inline" set="null" expr="cast &quot;chapters&quot;" line="31" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "chapters"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHAPTERS>
		<METADATA public="1" get="inline" set="null" expr="cast &quot;metadata&quot;" line="32" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "metadata"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</METADATA>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.TextTrackList" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.TextTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"TextTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackMode" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" extern="1" final="1">
	<DISABLED public="1" get="inline" set="null" expr="cast &quot;disabled&quot;" line="28" static="1">
		<x path="js.html.TextTrackMode"/>
		<meta>
			<m n=":value"><e>cast "disabled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISABLED>
	<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="29" static="1">
		<x path="js.html.TextTrackMode"/>
		<meta>
			<m n=":value"><e>cast "hidden"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIDDEN>
	<SHOWING public="1" get="inline" set="null" expr="cast &quot;showing&quot;" line="30" static="1">
		<x path="js.html.TextTrackMode"/>
		<meta>
			<m n=":value"><e>cast "showing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHOWING>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" extern="1" final="1">
		<DISABLED public="1" get="inline" set="null" expr="cast &quot;disabled&quot;" line="28" static="1">
			<x path="js.html.TextTrackMode"/>
			<meta>
				<m n=":value"><e>cast "disabled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISABLED>
		<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="29" static="1">
			<x path="js.html.TextTrackMode"/>
			<meta>
				<m n=":value"><e>cast "hidden"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIDDEN>
		<SHOWING public="1" get="inline" set="null" expr="cast &quot;showing&quot;" line="30" static="1">
			<x path="js.html.TextTrackMode"/>
			<meta>
				<m n=":value"><e>cast "showing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHOWING>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.TimeElement" params="" file="/home/vsts/work/1/s/std/js/html/TimeElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<dateTime public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `datetime` HTML attribute, containing a machine-readable form of the element's date and time value.</haxe_doc>
		</dateTime>
		<haxe_doc><![CDATA[The `HTMLTimeElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `time` elements.

	Documentation [HTMLTimeElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTimeElement"</e></m></meta>
	</class>
	<class path="js.html.TimeEvent" params="" file="/home/vsts/work/1/s/std/js/html/TimeEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<detail public="1" set="null"><x path="Int"/></detail>
		<view public="1" set="null"><c path="js.html.Window"/></view>
		<initTimeEvent public="1" set="method">
			<f a="aType:?aView:?aDetail" v="::0">
				<c path="String"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ aDetail : 0 }</e></m></meta>
		</initTimeEvent>
		<haxe_doc><![CDATA[Extends Event.

	Documentation [TimeEvent](https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeEvent"</e></m></meta>
	</class>
	<class path="js.html.TimeRanges" params="" file="/home/vsts/work/1/s/std/js/html/TimeRanges.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the number of time ranges represented by the time range object.</haxe_doc>
		</length>
		<start public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the start of the range with the specified index.
		@throws DOMError</haxe_doc>
		</start>
		<end public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the end of the specified range.
		@throws DOMError</haxe_doc>
		</end>
		<haxe_doc><![CDATA[The `TimeRanges` interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the `audio` and `video` elements.

	Documentation [TimeRanges](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeRanges"</e></m></meta>
	</class>
	<class path="js.html.TitleElement" params="" file="/home/vsts/work/1/s/std/js/html/TitleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the text of the document's title.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The `HTMLTitleElement` interface contains the title for a document. This element inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTitleElement"</e></m></meta>
	</class>
	<class path="js.html.Touch" params="" file="/home/vsts/work/1/s/std/js/html/Touch.hx" extern="1">
		<identifier public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a unique identifier for this `Touch` object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time.</haxe_doc>
		</identifier>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>Returns the `Element` on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.</haxe_doc>
		</target>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the screen.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the screen.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the document. Unlike `clientX`, this value includes the horizontal scroll offset, if any.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top of the document. Unlike `clientY,` this value includes the vertical scroll offset, if any.</haxe_doc>
		</pageY>
		<radiusX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenX`.</haxe_doc>
		</radiusX>
		<radiusY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenY`.</haxe_doc>
		</radiusY>
		<rotationAngle public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.</haxe_doc>
		</rotationAngle>
		<force public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the amount of pressure being applied to the surface by the user, as a `float` between `0.0` (no pressure) and `1.0` (maximum pressure).</haxe_doc>
		</force>
		<new public="1" set="method">
			<f a="touchInitDict">
				<t path="js.html.TouchInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Touch` interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.

	Documentation [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Touch$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Touch>]]></haxe_doc>
		<meta><m n=":native"><e>"Touch"</e></m></meta>
	</class>
	<class path="js.html.TouchEvent" params="" file="/home/vsts/work/1/s/std/js/html/TouchEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<touches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects representing all current points of contact with the surface, regardless of target or changed status.</haxe_doc>
		</touches>
		<targetTouches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event.</haxe_doc>
		</targetTouches>
		<changedTouches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects representing individual points of contact whose states changed between the previous touch event and this one.</haxe_doc>
		</changedTouches>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the alt key was down when the touch event was fired.</haxe_doc>
		</altKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the meta key was down when the touch event was fired.</haxe_doc>
		</metaKey>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the control key was down when the touch event was fired.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the shift key was down when the touch event was fired.</haxe_doc>
		</shiftKey>
		<initTouchEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?detail:?ctrlKey:?altKey:?shiftKey:?metaKey:?touches:?targetTouches:?changedTouches" v=":false:false::0:false:false:false:false:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.TouchList"/>
				<c path="js.html.TouchList"/>
				<c path="js.html.TouchList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, detail : 0, cancelable : false, canBubble : false }</e></m></meta>
		</initTouchEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.TouchEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `TouchEvent` interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.

	Documentation [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TouchEventInit" params="" file="/home/vsts/work/1/s/std/js/html/TouchEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<touches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</touches>
	<targetTouches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</targetTouches>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<changedTouches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</changedTouches>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.TouchInit" params="" file="/home/vsts/work/1/s/std/js/html/TouchInit.hx"><a>
	<target><c path="js.html.EventTarget"/></target>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<rotationAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</rotationAngle>
	<radiusY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusY>
	<radiusX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusX>
	<pageY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageY>
	<pageX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageX>
	<identifier><x path="Int"/></identifier>
	<force>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</force>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
</a></typedef>
	<class path="js.html.TouchList" params="" file="/home/vsts/work/1/s/std/js/html/TouchList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of `Touch` objects in the `TouchList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Touch"/>
			</f>
			<haxe_doc>Returns the `Touch` object at the specified index in the list.</haxe_doc>
		</item>
		<haxe_doc><![CDATA[The `TouchList` interface represents a list of contact points with a touch surface; for example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding `TouchList` object would have one `Touch` object for each finger, for a total of three entries.

	Documentation [TouchList](https://developer.mozilla.org/en-US/docs/Web/API/TouchList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchList>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchList"</e></m></meta>
	</class>
	<class path="js.html.TrackElement" params="" file="/home/vsts/work/1/s/std/js/html/TrackElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<LOADING public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ERROR>
		<kind public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `kind` HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, metadata.</haxe_doc>
		</kind>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, indicating the address of the text track data.</haxe_doc>
		</src>
		<srclang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `srclang` HTML attribute, indicating the language of the text track data.</haxe_doc>
		</srclang>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `label` HTML attribute, indicating a user-readable title for the track.</haxe_doc>
		</label>
		<default_ public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>Is a `Boolean` reflects the `default` HTML attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.</haxe_doc>
		</default_>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns  an <code>unsigned short</code> that show the readiness state of the track:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NONE</code></td>
		    <td>0</td>
		    <td>Indicates that the text track's cues have not been obtained.</td>
		   </tr>
		   <tr>
		    <td><code>LOADING</code></td>
		    <td>1</td>
		    <td>Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.</td>
		   </tr>
		   <tr>
		    <td><code>LOADED</code></td>
		    <td>2</td>
		    <td>Indicates that the text track has been loaded with no fatal errors.</td>
		   </tr>
		   <tr>
		    <td><code>ERROR</code></td>
		    <td>3</td>
		    <td>Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<track public="1" set="null">
			<c path="js.html.TextTrack"/>
			<haxe_doc>Returns `TextTrack` is the track element's text track data.</haxe_doc>
		</track>
		<haxe_doc><![CDATA[The `HTMLTrackElement`

	Documentation [HTMLTrackElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTrackElement"</e></m></meta>
	</class>
	<class path="js.html.TrackEvent" params="" file="/home/vsts/work/1/s/std/js/html/TrackEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<track public="1" set="null"><x path="haxe.extern.EitherType">
	<c path="js.html.VideoTrack"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.AudioTrack"/>
		<c path="js.html.TextTrack"/>
	</x>
</x></track>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.TrackEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"TrackEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TrackEventInit" params="" file="/home/vsts/work/1/s/std/js/html/TrackEventInit.hx"><a>
	<track>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.VideoTrack"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.AudioTrack"/>
		<c path="js.html.TextTrack"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</track>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.TransitionEvent" params="" file="/home/vsts/work/1/s/std/js/html/TransitionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<propertyName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name CSS property associated with the transition.</haxe_doc>
		</propertyName>
		<elapsedTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `float` giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the `transition-delay` property.</haxe_doc>
		</elapsedTime>
		<pseudoElement public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString`, starting with `'::'`, containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: `''``.`</haxe_doc>
		</pseudoElement>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.TransitionEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Transition``Event` interface represents events providing information related to transitions.

	Documentation [TransitionEvent](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TransitionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TransitionEventInit" params="" file="/home/vsts/work/1/s/std/js/html/TransitionEventInit.hx"><a>
	<pseudoElement>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</pseudoElement>
	<propertyName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</propertyName>
	<elapsedTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.TreeWalker" params="" file="/home/vsts/work/1/s/std/js/html/TreeWalker.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `TreeWalker` was created.</haxe_doc>
		</root>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Numerical value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ALL</code></td>
		    <td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
		    <td>Shows all nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ATTRIBUTE</code> {{deprecated_inline}}</td>
		    <td><code>2</code></td>
		    <td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Attr</code> node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_CDATA_SECTION</code> {{deprecated_inline}}</td>
		    <td><code>8</code></td>
		    <td>Shows <code>CDATASection</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_COMMENT</code></td>
		    <td><code>128</code></td>
		    <td>Shows <code>Comment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
		    <td><code>256</code></td>
		    <td>Shows <code>Document</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
		    <td><code>1024</code></td>
		    <td>Shows <code>DocumentFragment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
		    <td><code>512</code></td>
		    <td>Shows <code>DocumentType</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ELEMENT</code></td>
		    <td><code>1</code></td>
		    <td>Shows <code>Element</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY</code> {{deprecated_inline}}</td>
		    <td><code>32</code></td>
		    <td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> {{deprecated_inline}}</td>
		    <td><code>16</code></td>
		    <td>Shows <code>EntityReference</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_NOTATION</code> {{deprecated_inline}}</td>
		    <td><code>2048</code></td>
		    <td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
		    <td><code>64</code></td>
		    <td>Shows <code>ProcessingInstruction</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_TEXT</code></td>
		    <td><code>4</code></td>
		    <td>Shows <code>Text</code> nodes.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<currentNode public="1">
			<c path="js.html.Node"/>
			<haxe_doc>Is the `Node` on which the `TreeWalker` is currently pointing at.</haxe_doc>
		</currentNode>
		<parentNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</parentNode>
		<firstChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</firstChild>
		<lastChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its previous sibling, if any, and returns the found sibling. If there is no such node, return `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its next sibling, if any, and returns the found sibling. If there is no such node, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextSibling>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousNode>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextNode>
		<haxe_doc><![CDATA[The `TreeWalker` object represents the nodes of a document subtree and a position within them.

	Documentation [TreeWalker](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker>]]></haxe_doc>
		<meta><m n=":native"><e>"TreeWalker"</e></m></meta>
	</class>
	<typedef path="js.html.UIEventInit" params="" file="/home/vsts/work/1/s/std/js/html/UIEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.UListElement" params="" file="/home/vsts/work/1/s/std/js/html/UListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLUListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating unordered list elements.

	Documentation [HTMLUListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUListElement"</e></m></meta>
	</class>
	<class path="js.html.URL" params="" file="/home/vsts/work/1/s/std/js/html/URL.hx" extern="1">
		<createObjectURL public="1" set="method" static="1">
			<f a="source">
				<c path="js.html.MediaSource"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createObjectURL public="1" set="method">
	<f a="blob">
		<c path="js.html.Blob"/>
		<c path="String"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createObjectURL></overloads>
		</createObjectURL>
		<revokeObjectURL public="1" set="method" static="1">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</revokeObjectURL>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the whole URL.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the origin of the URL, that is its scheme, its domain and its port.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<username public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the username specified before the domain name.</haxe_doc>
		</username>
		<password public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the password specified before the domain name.</haxe_doc>
		</password>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain (that is the hostname) followed by (if a port was specified) a `':'` and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters of the URL.</haxe_doc>
		</search>
		<searchParams public="1" set="null">
			<c path="js.html.URLSearchParams"/>
			<haxe_doc>Returns a `URLSearchParams` object allowing to access the GET query arguments contained in the URL.</haxe_doc>
		</searchParams>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<toJSON public="1" set="method"><f a=""><c path="String"/></f></toJSON>
		<new public="1" set="method">
			<f a="url:?base">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The URL interface represents an object providing static methods used for creating object URLs.

	Documentation [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URL$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URL>]]></haxe_doc>
		<meta><m n=":native"><e>"URL"</e></m></meta>
	</class>
	<class path="js.html.URLSearchParams" params="" file="/home/vsts/work/1/s/std/js/html/URLSearchParams.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a specified key/value pair as a new search parameter.</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the given search parameter, and its associated value, from the list of all search parameters.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the first value associated to the given search parameter.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the values associated with a given search parameter.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if such a search parameter exists.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.</haxe_doc>
		</set>
		<sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sorts all key/value pairs, if any, by their keys.
		@throws DOMError</haxe_doc>
		</sort>
		<entries public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="Array"><c path="Array"><c path="String"/></c></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.URLSearchParams"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init" v="&quot;&quot;">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
					</f>
					<meta><m n=":value"><e>{ init : "" }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `URLSearchParams` interface defines utility methods to work with the query string of a URL.

	Documentation [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams>]]></haxe_doc>
		<meta><m n=":native"><e>"URLSearchParams"</e></m></meta>
	</class>
	<typedef path="js.html.URLSearchParamsIterator" params="" file="/home/vsts/work/1/s/std/js/html/URLSearchParamsIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<typedef path="js.html.Uint16Array" params="" file="/home/vsts/work/1/s/std/js/html/Uint16Array.hx">
		<c path="js.lib.Uint16Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.Uint32Array" params="" file="/home/vsts/work/1/s/std/js/html/Uint32Array.hx">
		<c path="js.lib.Uint32Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.Uint8Array" params="" file="/home/vsts/work/1/s/std/js/html/Uint8Array.hx">
		<c path="js.lib.Uint8Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="js.html.Uint8ClampedArray" params="" file="/home/vsts/work/1/s/std/js/html/Uint8ClampedArray.hx">
		<c path="js.lib.Uint8ClampedArray"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.html.UnknownElement" params="" file="/home/vsts/work/1/s/std/js/html/UnknownElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLUnknownElement` interface represents an invalid HTML element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLUnknownElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUnknownElement"</e></m></meta>
	</class>
	<class path="js.html.VTTCue" params="" file="/home/vsts/work/1/s/std/js/html/VTTCue.hx" extern="1">
		<extends path="js.html.TextTrackCue"/>
		<region public="1"><c path="js.html.VTTRegion"/></region>
		<vertical public="1"><x path="js.html.DirectionSetting"/></vertical>
		<snapToLines public="1"><x path="Bool"/></snapToLines>
		<line public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></line>
		<lineAlign public="1"><x path="js.html.LineAlignSetting"/></lineAlign>
		<position public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></position>
		<positionAlign public="1"><x path="js.html.PositionAlignSetting"/></positionAlign>
		<size public="1"><x path="Float"/></size>
		<align public="1"><x path="js.html.AlignSetting"/></align>
		<text public="1"><c path="String"/></text>
		<getCueAsHTML public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></getCueAsHTML>
		<new public="1" set="method">
			<f a="startTime:endTime:text">
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[VTTCues represent a cue in a text track.

	Documentation [VTTCue](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VTTCue>]]></haxe_doc>
		<meta><m n=":native"><e>"VTTCue"</e></m></meta>
	</class>
	<class path="js.html.VTTRegion" params="" file="/home/vsts/work/1/s/std/js/html/VTTRegion.hx" extern="1">
		<id public="1"><c path="String"/></id>
		<width public="1"><x path="Float"/></width>
		<lines public="1"><x path="Int"/></lines>
		<regionAnchorX public="1"><x path="Float"/></regionAnchorX>
		<regionAnchorY public="1"><x path="Float"/></regionAnchorY>
		<viewportAnchorX public="1"><x path="Float"/></viewportAnchorX>
		<viewportAnchorY public="1"><x path="Float"/></viewportAnchorY>
		<scroll public="1"><x path="js.html.ScrollSetting"/></scroll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"VTTRegion"</e></m></meta>
	</class>
	<class path="js.html.ValidityState" params="" file="/home/vsts/work/1/s/std/js/html/ValidityState.hx" extern="1">
		<valueMissing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element has a `required` attribute, but no value.</haxe_doc>
		</valueMissing>
		<typeMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is not in the required syntax (when `type` is `email` or `url`).</haxe_doc>
		</typeMismatch>
		<patternMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not match the specified `pattern`.</haxe_doc>
		</patternMismatch>
		<tooLong public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value exceeds the specified `maxlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects. Note: This will never be `true` in Gecko, because elements' values are prevented from being longer than `maxlength`.</haxe_doc>
		</tooLong>
		<tooShort public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value fails to meet the specified `minlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects.</haxe_doc>
		</tooShort>
		<rangeUnderflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is less than the minimum specified by the `min` attribute.</haxe_doc>
		</rangeUnderflow>
		<rangeOverflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is greater than the maximum specified by the `max` attribute.</haxe_doc>
		</rangeOverflow>
		<stepMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not fit the rules determined by the `step` attribute (that is, it's not evenly divisible by the step value).</haxe_doc>
		</stepMismatch>
		<badInput public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the user has provided input that the browser is unable to convert.</haxe_doc>
		</badInput>
		<customError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element's custom validity message has been set to a non-empty string by calling the element's `setCustomValidity()` method.</haxe_doc>
		</customError>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element meets all constraint validations, and is therefore considered to be valid.</haxe_doc>
		</valid>
		<haxe_doc><![CDATA[The `ValidityState` interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.

	Documentation [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ValidityState>]]></haxe_doc>
		<meta><m n=":native"><e>"ValidityState"</e></m></meta>
	</class>
	<class path="js.html.VideoElement" params="" file="/home/vsts/work/1/s/std/js/html/VideoElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, which specifies the width of the display area, in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, which specifies the height of the display area, in CSS pixels.</haxe_doc>
		</height>
		<videoWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic width of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoWidth>
		<videoHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic height of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoHeight>
		<poster public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `poster` HTML attribute, which specifies an image to show while no video data is available.</haxe_doc>
		</poster>
		<getVideoPlaybackQuality public="1" set="method">
			<f a=""><c path="js.html.VideoPlaybackQuality"/></f>
			<haxe_doc>Returns a `VideoPlaybackQuality` objects that contains the current playback metrics.</haxe_doc>
		</getVideoPlaybackQuality>
		<haxe_doc><![CDATA[The `HTMLVideoElement` interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of `HTMLMediaElement` and `HTMLElement`.

	Documentation [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLVideoElement"</e></m></meta>
	</class>
	<class path="js.html.VideoPlaybackQuality" params="" file="/home/vsts/work/1/s/std/js/html/VideoPlaybackQuality.hx" extern="1">
		<creationTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` containing the time in miliseconds since the start of the navigation and the creation of the object.</haxe_doc>
		</creationTime>
		<totalVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames created and dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</totalVideoFrames>
		<droppedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</droppedVideoFrames>
		<corruptedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames corrupted since the creation of the associated `HTMLVideoElement`. A corrupted frame may be created or dropped.</haxe_doc>
		</corruptedVideoFrames>
		<haxe_doc><![CDATA[The `VideoPlaybackQuality` interface represents the set of metrics describing the playback quality of a video.

	Documentation [VideoPlaybackQuality](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality>]]></haxe_doc>
		<meta><m n=":native"><e>"VideoPlaybackQuality"</e></m></meta>
	</class>
	<class path="js.html.VideoStreamTrack" params="" file="/home/vsts/work/1/s/std/js/html/VideoStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"VideoStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrack" params="" file="/home/vsts/work/1/s/std/js/html/VideoTrack.hx" extern="1">
		<id public="1" set="null"><c path="String"/></id>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<selected public="1"><x path="Bool"/></selected>
		<meta><m n=":native"><e>"VideoTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrackList" params="" file="/home/vsts/work/1/s/std/js/html/VideoTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<selectedIndex public="1" set="null"><x path="Int"/></selectedIndex>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VideoTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"VideoTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.VisibilityState" params="" file="/home/vsts/work/1/s/std/js/html/VisibilityState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" extern="1" final="1">
	<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="28" static="1">
		<x path="js.html.VisibilityState"/>
		<meta>
			<m n=":value"><e>cast "hidden"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIDDEN>
	<VISIBLE public="1" get="inline" set="null" expr="cast &quot;visible&quot;" line="29" static="1">
		<x path="js.html.VisibilityState"/>
		<meta>
			<m n=":value"><e>cast "visible"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VISIBLE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" extern="1" final="1">
		<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="28" static="1">
			<x path="js.html.VisibilityState"/>
			<meta>
				<m n=":value"><e>cast "hidden"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIDDEN>
		<VISIBLE public="1" get="inline" set="null" expr="cast &quot;visible&quot;" line="29" static="1">
			<x path="js.html.VisibilityState"/>
			<meta>
				<m n=":value"><e>cast "visible"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VISIBLE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.VisualViewport" params="" file="/home/vsts/work/1/s/std/js/html/VisualViewport.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<offsetLeft public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels.</haxe_doc>
		</offsetLeft>
		<offsetTop public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels.</haxe_doc>
		</offsetTop>
		<pageLeft public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the x coordinate relative to the initial containing block origin of the top edge of the visual viewport in CSS pixels.</haxe_doc>
		</pageLeft>
		<pageTop public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the y coordinate relative to the initial containing block origin of the top edge of the visual viewport in CSS pixels.</haxe_doc>
		</pageTop>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the width of the visual viewport in CSS pixels.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the height of the visual viewport in CSS pixels.</haxe_doc>
		</height>
		<scale public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the pinch-zoom scaling factor applied to the visual viewport.</haxe_doc>
		</scale>
		<haxe_doc><![CDATA[The `VisualViewport` interface of the the Visual Viewport API represents the visual viewport for a given window. For a page containing iframes, each iframe, as well as the containing page, will have a unique window object. Each window on a page will have a unique `VisualViewport` representing the properties associated with that window.

	Documentation [VisualViewport](https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport>]]></haxe_doc>
		<meta><m n=":native"><e>"VisualViewport"</e></m></meta>
	</class>
	<class path="js.html.WebSocket" params="" file="/home/vsts/work/1/s/std/js/html/WebSocket.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<CONNECTING public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CONNECTING>
		<OPEN public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPEN>
		<CLOSING public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CLOSING>
		<CLOSED public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CLOSED>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>The absolute URL of the WebSocket.</haxe_doc>
		</url>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The current state of the connection.</haxe_doc>
		</readyState>
		<bufferedAmount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of bytes of queued data.</haxe_doc>
		</bufferedAmount>
		<onopen public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event listener to be called when the connection is opened.</haxe_doc>
		</onopen>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event listener to be called when an error occurs.</haxe_doc>
		</onerror>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event listener to be called when the connection is closed.</haxe_doc>
		</onclose>
		<extensions public="1" set="null">
			<c path="String"/>
			<haxe_doc>The extensions selected by the server.</haxe_doc>
		</extensions>
		<protocol public="1" set="null">
			<c path="String"/>
			<haxe_doc>The sub-protocol selected by the server.</haxe_doc>
		</protocol>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event listener to be called when a message is received from the server.</haxe_doc>
		</onmessage>
		<binaryType public="1">
			<x path="js.html.BinaryType"/>
			<haxe_doc>The binary data type used by the connection.</haxe_doc>
		</binaryType>
		<close public="1" set="method">
			<f a="?code:?reason">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<send public="1" set="method">
			<f a="data">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="data">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<new public="1" set="method">
			<f a="url:protocols">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="url">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="url:protocols">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `WebSocket` object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.

	Documentation [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebSocket>]]></haxe_doc>
		<meta><m n=":native"><e>"WebSocket"</e></m></meta>
	</class>
	<class path="js.html.WheelEvent" params="" file="/home/vsts/work/1/s/std/js/html/WheelEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<DOM_DELTA_PIXEL public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_DELTA_PIXEL>
		<DOM_DELTA_LINE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_DELTA_LINE>
		<DOM_DELTA_PAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_DELTA_PAGE>
		<deltaX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the horizontal scroll amount.</haxe_doc>
		</deltaX>
		<deltaY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the vertical scroll amount.</haxe_doc>
		</deltaY>
		<deltaZ public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the scroll amount for the z-axis.</haxe_doc>
		</deltaZ>
		<deltaMode public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> representing the unit of the delta values scroll amount. Permitted values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PIXEL</code></td>
		    <td><code>0x00</code></td>
		    <td>The delta values are specified in pixels.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_LINE</code></td>
		    <td><code>0x01</code></td>
		    <td>The delta values are specified in lines.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PAGE</code></td>
		    <td><code>0x02</code></td>
		    <td>The delta values are specified in pages.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</deltaMode>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.WheelEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `WheelEvent` interface represents events that occur due to the user moving a mouse wheel or similar input device.

	Documentation [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"WheelEvent"</e></m></meta>
	</class>
	<typedef path="js.html.WheelEventInit" params="" file="/home/vsts/work/1/s/std/js/html/WheelEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<deltaZ>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaZ>
	<deltaY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaY>
	<deltaX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaX>
	<deltaMode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</deltaMode>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.Window" params="" file="/home/vsts/work/1/s/std/js/html/Window.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<window public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the current window.</haxe_doc>
		</window>
		<self public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an object reference to the window object itself.</haxe_doc>
		</self>
		<document public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a reference to the document that the window contains.</haxe_doc>
		</document>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the name of the window.</haxe_doc>
		</name>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Gets/sets the location, or current URL, of the window object.</haxe_doc>
		</location>
		<history public="1" set="null">
			<c path="js.html.History"/>
			<haxe_doc>Returns a reference to the history object.</haxe_doc>
		</history>
		<locationbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the locationbar object, whose visibility can be toggled in the window.</haxe_doc>
		</locationbar>
		<menubar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the menubar object, whose visibility can be toggled in the window.</haxe_doc>
		</menubar>
		<personalbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the personalbar object, whose visibility can be toggled in the window.</haxe_doc>
		</personalbar>
		<scrollbars public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the scrollbars object, whose visibility can be toggled in the window.</haxe_doc>
		</scrollbars>
		<statusbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the statusbar object, whose visibility can be toggled in the window.</haxe_doc>
		</statusbar>
		<toolbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the toolbar object, whose visibility can be toggled in the window.</haxe_doc>
		</toolbar>
		<status public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the text in the statusbar at the bottom of the browser.</haxe_doc>
		</status>
		<closed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the current window is closed or not.</haxe_doc>
		</closed>
		<event public="1" set="null">
			<d/>
			<haxe_doc>Returns the current event, which is the event currently being handled by the JavaScript code's context, or `undefined` if no event is currently being handled. The `Event` object passed directly to event handlers should be used instead whenever possible.</haxe_doc>
		</event>
		<frames public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an array of the subframes in the current window.</haxe_doc>
		</frames>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of frames in the window. See also `window.frames`.</haxe_doc>
		</length>
		<top public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the topmost window in the window hierarchy. This property is read only.</haxe_doc>
		</top>
		<opener public="1">
			<d/>
			<haxe_doc>Returns a reference to the window that opened this current window.</haxe_doc>
		</opener>
		<parent public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the parent of the current window or subframe.</haxe_doc>
		</parent>
		<frameElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element in which the window is embedded, or null if the window is not embedded.</haxe_doc>
		</frameElement>
		<navigator public="1" set="null">
			<c path="js.html.Navigator"/>
			<haxe_doc>Returns a reference to the navigator object.</haxe_doc>
		</navigator>
		<console public="1" set="null">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Returns a reference to the console object which provides access to the browser's debugging console.</haxe_doc>
		</console>
		<screen public="1" set="null">
			<c path="js.html.Screen"/>
			<haxe_doc>Returns a reference to the screen object associated with the window.</haxe_doc>
		</screen>
		<innerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.</haxe_doc>
		</innerWidth>
		<innerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.</haxe_doc>
		</innerHeight>
		<scrollX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled horizontally.</haxe_doc>
		</scrollX>
		<pageXOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollX`.</haxe_doc>
		</pageXOffset>
		<scrollY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled vertically.</haxe_doc>
		</scrollY>
		<pageYOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollY`</haxe_doc>
		</pageYOffset>
		<screenX public="1">
			<d/>
			<haxe_doc>Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</haxe_doc>
		</screenX>
		<screenY public="1">
			<d/>
			<haxe_doc>Returns the vertical distance of the top border of the user's browser from the top side of the screen.</haxe_doc>
		</screenY>
		<outerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the outside of the browser window.</haxe_doc>
		</outerWidth>
		<outerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the outside of the browser window.</haxe_doc>
		</outerHeight>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns a `Performance` object, which includes the `Performance.timing` and `Performance.navigation` attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.</haxe_doc>
		</performance>
		<devicePixelRatio public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the ratio between physical pixels and device independent pixels in the current display.</haxe_doc>
		</devicePixelRatio>
		<scrollMaxX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.</haxe_doc>
		</scrollMaxX>
		<scrollMaxY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).</haxe_doc>
		</scrollMaxY>
		<fullScreen public="1">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the window is displayed in full screen or not.</haxe_doc>
		</fullScreen>
		<ondevicemotion public="1"><x path="haxe.Function"/></ondevicemotion>
		<ondeviceorientation public="1"><x path="haxe.Function"/></ondeviceorientation>
		<onabsolutedeviceorientation public="1"><x path="haxe.Function"/></onabsolutedeviceorientation>
		<ondeviceproximity public="1"><x path="haxe.Function"/></ondeviceproximity>
		<onuserproximity public="1"><x path="haxe.Function"/></onuserproximity>
		<ondevicelight public="1"><x path="haxe.Function"/></ondevicelight>
		<content public="1" set="null">
			<d/>
			<haxe_doc>Returns a reference to the content element in the current window. Since Firefox 57 (initially Nightly-only), both versions are only available from chrome (privileged) code, and not available to the web anymore.</haxe_doc>
		</content>
		<orientation public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.</haxe_doc>
		</orientation>
		<onorientationchange public="1"><x path="haxe.Function"/></onorientationchange>
		<crypto public="1" set="null">
			<c path="js.html.Crypto"/>
			<haxe_doc>Returns the browser crypto object.</haxe_doc>
		</crypto>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1"><x path="haxe.Function"/></onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><f a="::::">
	<x path="haxe.extern.EitherType">
		<c path="js.html.Event"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<d/>
</f></onerror>
		<speechSynthesis public="1" set="null">
			<c path="js.html.SpeechSynthesis"/>
			<haxe_doc>Returns a `SpeechSynthesis` object, which is the entry point into using Web Speech API speech synthesis functionality.</haxe_doc>
		</speechSynthesis>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<localStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</localStorage>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether a context is capable of using features that require secure contexts.</haxe_doc>
		</isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<sessionStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</sessionStorage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the current window.
		@throws DOMError</haxe_doc>
		</close>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method stops window loading.
		@throws DOMError</haxe_doc>
		</stop>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus on the current window.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus away from the window.
		@throws DOMError</haxe_doc>
		</blur>
		<open public="1" set="method">
			<f a="?url:?target:?features" v="&quot;&quot;:&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ features : "", target : "", url : "" }</e></m></meta>
			<haxe_doc>Opens a new window.
		@throws DOMError</haxe_doc>
		</open>
		<alert public="1" set="method">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
			<overloads><alert public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
</alert></overloads>
		</alert>
		<confirm public="1" set="method">
			<f a="?message" v="&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>Displays a dialog with a message that the user needs to respond to.
		@throws DOMError</haxe_doc>
		</confirm>
		<prompt public="1" set="method">
			<f a="?message:?default_" v="&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ default_ : "", message : "" }</e></m></meta>
			<haxe_doc>Returns the text entered by the user in a prompt dialog.
		@throws DOMError</haxe_doc>
		</prompt>
		<print public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Opens the Print Dialog to print the current document.
		@throws DOMError</haxe_doc>
		</print>
		<postMessage public="1" set="method">
			<f a="message:targetOrigin:?transfer">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.
		@throws DOMError</haxe_doc>
		</postMessage>
		<captureEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Registers the window to capture all events of the specified type.</haxe_doc>
		</captureEvents>
		<releaseEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the window from trapping events of a specific type.</haxe_doc>
		</releaseEvents>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>Returns the selection object representing the selected item(s).
		@throws DOMError</haxe_doc>
		</getSelection>
		<getComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.
		@throws DOMError</haxe_doc>
		</getComputedStyle>
		<matchMedia public="1" set="method">
			<f a="query">
				<c path="String"/>
				<c path="js.html.MediaQueryList"/>
			</f>
			<haxe_doc>Returns a `MediaQueryList` object representing the specified media query string.
		@throws DOMError</haxe_doc>
		</matchMedia>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the window to the specified coordinates.
		@throws DOMError</haxe_doc>
		</moveTo>
		<moveBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the current window by a specified amount.
		@throws DOMError</haxe_doc>
		</moveBy>
		<resizeTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Dynamically resizes window.
		@throws DOMError</haxe_doc>
		</resizeTo>
		<resizeBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resizes the current window by a certain amount.
		@throws DOMError</haxe_doc>
		</resizeBy>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
			<overloads><scroll public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
</scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
			<overloads><scrollTo public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
</scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
			<overloads><scrollBy public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
</scrollBy></overloads>
		</scrollBy>
		<requestAnimationFrame public="1" set="method">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.
		@throws DOMError</haxe_doc>
		</requestAnimationFrame>
		<cancelAnimationFrame public="1" set="method">
			<f a="handle">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables you to cancel a callback previously scheduled with `Window.requestAnimationFrame`.
		@throws DOMError</haxe_doc>
		</cancelAnimationFrame>
		<getDefaultComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets default computed style for the specified element, ignoring author stylesheets.
		@throws DOMError</haxe_doc>
		</getDefaultComputedStyle>
		<scrollByLines public="1" set="method">
			<f a="numLines:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document by the given number of lines.</haxe_doc>
		</scrollByLines>
		<scrollByPages public="1" set="method">
			<f a="numPages:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the current document by the specified number of pages.</haxe_doc>
		</scrollByPages>
		<sizeToContent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sizes the window according to its content.
		@throws DOMError</haxe_doc>
		</sizeToContent>
		<updateCommands public="1" set="method">
			<f a="action:?sel:?reason" v="::0">
				<c path="String"/>
				<c path="js.html.Selection"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reason : 0 }</e></m></meta>
			<haxe_doc>Updates the state of commands of the current chrome window (UI).</haxe_doc>
		</updateCommands>
		<find public="1" set="method">
			<f a="?str:?caseSensitive:?backwards:?wrapAround:?wholeWord:?searchInFrames:?showDialog" v="&quot;&quot;:false:false:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ showDialog : false, searchInFrames : false, wholeWord : false, wrapAround : false, backwards : false, caseSensitive : false, str : "" }</e></m></meta>
			<haxe_doc>Searches for a given string in a window.
		@throws DOMError</haxe_doc>
		</find>
		<dump public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes a message to the console.</haxe_doc>
		</dump>
		<setResizable public="1" set="method">
			<f a="resizable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggles a user's ability to resize a window.</haxe_doc>
		</setResizable>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `Window` interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.

	Documentation [Window](https://developer.mozilla.org/en-US/docs/Web/API/Window) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Window$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Window>]]></haxe_doc>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="js.html.WindowClient" params="" file="/home/vsts/work/1/s/std/js/html/WindowClient.hx" extern="1">
		<extends path="js.html.Client"/>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Indicates the visibility of the current client. This value can be one of `hidden`, `visible`, `prerender`, or `unloaded`.</haxe_doc>
		</visibilityState>
		<focused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean that indicates whether the current client has focus.</haxe_doc>
		</focused>
		<focus public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.WindowClient"/></c></f>
			<haxe_doc>Gives user input focus to the current client. 
		@throws DOMError</haxe_doc>
		</focus>
		<navigate public="1" set="method">
			<f a="url">
				<c path="String"/>
				<c path="js.lib.Promise"><c path="js.html.WindowClient"/></c>
			</f>
			<haxe_doc>Loads a specified URL into a controlled client page.
		@throws DOMError</haxe_doc>
		</navigate>
		<haxe_doc><![CDATA[The `WindowClient` interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.

	Documentation [WindowClient](https://developer.mozilla.org/en-US/docs/Web/API/WindowClient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WindowClient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WindowClient>]]></haxe_doc>
		<meta><m n=":native"><e>"WindowClient"</e></m></meta>
	</class>
	<class path="js.html.Worker" params="" file="/home/vsts/work/1/s/std/js/html/Worker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever a `MessageEvent` of type `message` bubbles through the worker — i.e. when a message is sent to the parent document from the worker via `DedicatedWorkerGlobalScope.postMessage`. The message is stored in the event's `MessageEvent.data` property.</haxe_doc>
		</onmessage>
		<onmessageerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `messageerror` event is raised.</haxe_doc>
		</onmessageerror>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<terminate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Immediately terminates the worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once. ServiceWorker instances do not support this method.</haxe_doc>
		</terminate>
		<postMessage public="1" set="method">
			<f a="message:?transfer">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends a message — which can consist of `any` JavaScript object — to the worker's inner scope.
		@throws DOMError</haxe_doc>
		</postMessage>
		<new public="1" set="method">
			<f a="scriptURL:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.WorkerOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Worker` interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the `Worker()` constructor and specifying a script to be run in the worker thread.

	Documentation [Worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Worker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Worker>]]></haxe_doc>
		<meta><m n=":native"><e>"Worker"</e></m></meta>
	</class>
	<class path="js.html.WorkerDebuggerGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/WorkerDebuggerGlobalScope.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<global public="1" set="null"><d/></global>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<createSandbox public="1" set="method">
			<f a="name:prototype">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createSandbox>
		<loadSubScript public="1" set="method">
			<f a="url:?sandbox">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</loadSubScript>
		<enterEventLoop public="1" set="method"><f a=""><x path="Void"/></f></enterEventLoop>
		<leaveEventLoop public="1" set="method"><f a=""><x path="Void"/></f></leaveEventLoop>
		<postMessage public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></postMessage>
		<setImmediate public="1" set="method">
			<f a="handler">
				<x path="haxe.Function"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setImmediate>
		<reportError public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></reportError>
		<retrieveConsoleEvents public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</retrieveConsoleEvents>
		<setConsoleEventHandler public="1" set="method">
			<f a="handler">
				<x path="haxe.Function"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setConsoleEventHandler>
		<dump public="1" set="method"><f a="?string">
	<c path="String"/>
	<x path="Void"/>
</f></dump>
		<meta><m n=":native"><e>"WorkerDebuggerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.WorkerLocation" params="" file="/home/vsts/work/1/s/std/js/html/WorkerLocation.hx" extern="1">
		<href public="1" set="null"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<host public="1" set="null"><c path="String"/></host>
		<hostname public="1" set="null"><c path="String"/></hostname>
		<port public="1" set="null"><c path="String"/></port>
		<pathname public="1" set="null"><c path="String"/></pathname>
		<search public="1" set="null"><c path="String"/></search>
		<hash public="1" set="null"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `WorkerLocation` interface defines the absolute location of the script executed by the `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.location` property obtained by calling `self.location`.

	Documentation [WorkerLocation](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerLocation"</e></m></meta>
	</class>
	<class path="js.html.WorkerNavigator" params="" file="/home/vsts/work/1/s/std/js/html/WorkerNavigator.hx" extern="1">
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `WorkerNavigator` interface represents a subset of the `Navigator` interface allowed to be accessed from a `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.navigator` property obtained by calling `window.self.navigator`.

	Documentation [WorkerNavigator](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerNavigator"</e></m></meta>
	</class>
	<typedef path="js.html.WorkerOptions" params="" file="/home/vsts/work/1/s/std/js/html/WorkerOptions.hx"><a><name>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</name></a></typedef>
	<class path="js.html.XMLDocument" params="" file="/home/vsts/work/1/s/std/js/html/XMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<async public="1"><x path="Bool"/></async>
		<load public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Loads an XML document.
		@throws DOMError</haxe_doc>
		</load>
		<haxe_doc><![CDATA[The XMLDocument interface represent an XML document. It inherits from the generic `Document` and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.

	Documentation [XMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLDocument"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequestEventTarget" params="" file="/home/vsts/work/1/s/std/js/html/XMLHttpRequestEventTarget.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onload public="1"><x path="haxe.Function"/></onload>
		<ontimeout public="1"><x path="haxe.Function"/></ontimeout>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<meta><m n=":native"><e>"XMLHttpRequestEventTarget"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequest" params="" file="/home/vsts/work/1/s/std/js/html/XMLHttpRequest.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<UNSENT public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UNSENT>
		<OPENED public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPENED>
		<HEADERS_RECEIVED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HEADERS_RECEIVED>
		<LOADING public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LOADING>
		<DONE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DONE>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` that is called whenever the `readyState` attribute changes.</haxe_doc>
		</onreadystatechange>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short`, the state of the request.</haxe_doc>
		</readyState>
		<timeout public="1">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long` representing the number of milliseconds a request can take before automatically being terminated.</haxe_doc>
		</timeout>
		<withCredentials public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that indicates whether or not cross-site `Access-Control` requests should be made using credentials such as cookies or authorization headers.</haxe_doc>
		</withCredentials>
		<upload public="1" set="null">
			<c path="js.html.XMLHttpRequestUpload"/>
			<haxe_doc>Is an `XMLHttpRequestUpload`, representing the upload process.</haxe_doc>
		</upload>
		<responseURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the serialized URL of the response or the empty string if the URL is null.</haxe_doc>
		</responseURL>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short` with the status of the response of the request.</haxe_doc>
		</status>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the response string returned by the HTTP server. Unlike `XMLHTTPRequest.status`, this includes the entire text of the response message ("`200 OK`", for example).</haxe_doc>
		</statusText>
		<responseType public="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<haxe_doc>Is an enumerated value that defines the response type.</haxe_doc>
		</responseType>
		<response public="1" set="null">
			<d/>
			<haxe_doc>Returns an `ArrayBuffer`, `Blob`, `Document`, JavaScript object, or a `DOMString`, depending on the value of `XMLHttpRequest.responseType`. that contains the response entity body.</haxe_doc>
		</response>
		<responseText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains the response to the request as text, or `null` if the request was unsuccessful or has not yet been sent.</haxe_doc>
		</responseText>
		<responseXML public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` containing the response to the request, or `null` if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML.</haxe_doc>
		</responseXML>
		<open public="1" set="method">
			<f a="method:url:async:?user:?password">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="method:url">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<setRequestHeader public="1" set="method">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of an HTTP request header. You must call `setRequestHeader()`after `open()`, but before `send()`.
		@throws DOMError</haxe_doc>
		</setRequestHeader>
		<send public="1" set="method">
			<f a="?body">
				<c path="js.html.HTMLDocument"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.FormData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.URLSearchParams"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Aborts the request if it has already been sent.
		@throws DOMError</haxe_doc>
		</abort>
		<getResponseHeader public="1" set="method">
			<f a="header">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the string containing the text of the specified header, or `null` if either the response has not yet been received or the header doesn't exist in the response.
		@throws DOMError</haxe_doc>
		</getResponseHeader>
		<getAllResponseHeaders public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns all the response headers, separated by CRLF, as a string, or `null` if no response has been received.
		@throws DOMError</haxe_doc>
		</getAllResponseHeaders>
		<overrideMimeType public="1" set="method">
			<f a="mime">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Overrides the MIME type returned by the server.
		@throws DOMError</haxe_doc>
		</overrideMimeType>
		<new public="1" set="method">
			<f a="ignored">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?params">
		<d/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[Use `XMLHttpRequest` (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.

	Documentation [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLHttpRequest"</e></m></meta>
	</class>
	<abstract path="js.html.XMLHttpRequestResponseType" params="" file="/home/vsts/work/1/s/std/js/html/XMLHttpRequestResponseType.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `XMLHttpRequestResponseType` type is an enumerated set of strings which are used to specify the type of data contained in the `response` of an `XMLHttpRequest`.

	Documentation [XMLHttpRequestResponseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._XMLHttpRequestResponseType.XMLHttpRequestResponseType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/XMLHttpRequestResponseType.hx" private="1" module="js.html.XMLHttpRequestResponseType" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="35" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="36" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "arraybuffer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARRAYBUFFER>
	<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="37" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "blob"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLOB>
	<DOCUMENT public="1" get="inline" set="null" expr="cast &quot;document&quot;" line="38" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "document"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOCUMENT>
	<JSON public="1" get="inline" set="null" expr="cast &quot;json&quot;" line="39" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "json"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JSON>
	<TEXT public="1" get="inline" set="null" expr="cast &quot;text&quot;" line="40" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "text"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html._XMLHttpRequestResponseType.XMLHttpRequestResponseType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/XMLHttpRequestResponseType.hx" private="1" module="js.html.XMLHttpRequestResponseType" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="35" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="36" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "arraybuffer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARRAYBUFFER>
		<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="37" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "blob"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLOB>
		<DOCUMENT public="1" get="inline" set="null" expr="cast &quot;document&quot;" line="38" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "document"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOCUMENT>
		<JSON public="1" get="inline" set="null" expr="cast &quot;json&quot;" line="39" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "json"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JSON>
		<TEXT public="1" get="inline" set="null" expr="cast &quot;text&quot;" line="40" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "text"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.XMLHttpRequestUpload" params="" file="/home/vsts/work/1/s/std/js/html/XMLHttpRequestUpload.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<meta><m n=":native"><e>"XMLHttpRequestUpload"</e></m></meta>
	</class>
	<class path="js.html.XMLSerializer" params="" file="/home/vsts/work/1/s/std/js/html/XMLSerializer.hx" extern="1">
		<serializeToString public="1" set="method">
			<f a="root">
				<c path="js.html.Node"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</serializeToString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `XMLSerializer` interface provides the `serializeToString()` method to construct an XML string representing a DOM tree.

	Documentation [XMLSerializer](https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLSerializer"</e></m></meta>
	</class>
	<class path="js.html.XPathEvaluator" params="" file="/home/vsts/work/1/s/std/js/html/XPathEvaluator.hx" extern="1">
		<createExpression public="1" set="method">
			<f a="expression:?resolver">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
			</overloads>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
				<c path="String"/>
				<c path="js.html.Node"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="haxe.Function"/>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
			</overloads>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"XPathEvaluator"</e></m></meta>
	</class>
	<class path="js.html.XPathExpression" params="" file="/home/vsts/work/1/s/std/js/html/XPathExpression.hx" extern="1">
		<evaluate public="1" set="method">
			<f a="contextNode:?type:?result" v=":0:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>provide a context node/document, `XPathResult` constant, and `XPathResult` to store the query or null to return a new XPathResult.
		@throws DOMError</haxe_doc>
		</evaluate>
		<haxe_doc><![CDATA[An `XPathExpression` is a compiled XPath query returned from `document.createExpression()`. It has a method `evaluate()` which can be used to execute the compiled XPath.

	Documentation [XPathExpression](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathExpression"</e></m></meta>
	</class>
	<typedef path="js.html.XPathNSResolver" params="" file="/home/vsts/work/1/s/std/js/html/XPathNSResolver.hx"><a><lookupNamespaceURI set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI></a></typedef>
	<class path="js.html.XPathResult" params="" file="/home/vsts/work/1/s/std/js/html/XPathResult.hx" extern="1">
		<ANY_TYPE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ANY_TYPE>
		<NUMBER_TYPE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NUMBER_TYPE>
		<STRING_TYPE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STRING_TYPE>
		<BOOLEAN_TYPE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BOOLEAN_TYPE>
		<UNORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</UNORDERED_NODE_ITERATOR_TYPE>
		<ORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ORDERED_NODE_ITERATOR_TYPE>
		<UNORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</UNORDERED_NODE_SNAPSHOT_TYPE>
		<ORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ORDERED_NODE_SNAPSHOT_TYPE>
		<ANY_UNORDERED_NODE_TYPE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ANY_UNORDERED_NODE_TYPE>
		<FIRST_ORDERED_NODE_TYPE public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</FIRST_ORDERED_NODE_TYPE>
		<resultType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>integer (short)</haxe_doc>
		</resultType>
		<numberValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>float</haxe_doc>
		</numberValue>
		<stringValue public="1" set="null">
			<c path="String"/>
			<haxe_doc>String</haxe_doc>
		</stringValue>
		<booleanValue public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</booleanValue>
		<singleNodeValue public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Node</haxe_doc>
		</singleNodeValue>
		<invalidIteratorState public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</invalidIteratorState>
		<snapshotLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Integer</haxe_doc>
		</snapshotLength>
		<iterateNext public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</iterateNext>
		<snapshotItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</snapshotItem>
		<haxe_doc><![CDATA[The `XPathResult` interface represents the results generated by evaluating an XPath 1.0 expression within the context of a given node.

	Documentation [XPathResult](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathResult>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathResult"</e></m></meta>
	</class>
	<class path="js.html.XSLTProcessor" params="" file="/home/vsts/work/1/s/std/js/html/XSLTProcessor.hx" extern="1">
		<importStylesheet public="1" set="method">
			<f a="style">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</importStylesheet>
		<transformToFragment public="1" set="method">
			<f a="source:output">
				<c path="js.html.Node"/>
				<c path="js.html.HTMLDocument"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transformToFragment>
		<transformToDocument public="1" set="method">
			<f a="source">
				<c path="js.html.Node"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transformToDocument>
		<setParameter public="1" set="method">
			<f a="namespaceURI:localName:value">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setParameter>
		<getParameter public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<removeParameter public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeParameter>
		<clearParameters public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all set parameters from the `XSLTProcessor`. The `XSLTProcessor` will then use the defaults specified in the XSLT stylesheet.</haxe_doc>
		</clearParameters>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all parameters and stylesheets from the `XSLTProcessor`.</haxe_doc>
		</reset>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[An `XSLTProcessor` applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate `xsl:param` parameter values, and to apply the transformation to documents.

	Documentation [XSLTProcessor](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor>]]></haxe_doc>
		<meta><m n=":native"><e>"XSLTProcessor"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioNode.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<context public="1" set="null">
			<c path="js.html.audio.BaseAudioContext"/>
			<haxe_doc>Returns the associated `BaseAudioContext`, that is the object representing the processing graph the node is participating in.</haxe_doc>
		</context>
		<numberOfInputs public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of inputs feeding the node. Source nodes are defined as nodes having a `numberOfInputs` property with a value of `0`.</haxe_doc>
		</numberOfInputs>
		<numberOfOutputs public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of outputs coming out of the node. Destination nodes — like `AudioDestinationNode` — have a value of `0` for this attribute.</haxe_doc>
		</numberOfOutputs>
		<channelCount public="1">
			<x path="Int"/>
			<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of `AudioNode.channelCountMode`.</haxe_doc>
		</channelCount>
		<channelCountMode public="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.</haxe_doc>
		</channelCountMode>
		<channelInterpretation public="1">
			<x path="js.html.audio.ChannelInterpretation"/>
			<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
		 The possible values are `"speakers"` or `"discrete"`.</haxe_doc>
		</channelInterpretation>
		<connect public="1" set="method">
			<f a="destination:?output" v=":0">
				<c path="js.html.audio.AudioParam"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ output : 0 }</e></m></meta>
			<haxe_doc>Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an `AudioParam`.
		@throws DOMError</haxe_doc>
			<overloads><connect public="1" set="method">
	<f a="destination:?output:?input" v=":0:0">
		<c path="js.html.audio.AudioNode"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.html.audio.AudioNode"/>
	</f>
	<meta><m n=":value"><e>{ input : 0, output : 0 }</e></m></meta>
	<haxe_doc>Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an `AudioParam`.
		@throws DOMError</haxe_doc>
</connect></overloads>
		</connect>
		<disconnect public="1" set="method">
			<f a="destination:output">
				<c path="js.html.audio.AudioParam"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
			<overloads>
				<disconnect public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="output">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination">
						<c path="js.html.audio.AudioNode"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination:output">
						<c path="js.html.audio.AudioNode"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination:output:input">
						<c path="js.html.audio.AudioNode"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination">
						<c path="js.html.audio.AudioParam"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
			</overloads>
		</disconnect>
		<haxe_doc><![CDATA[The `AudioNode` interface is a generic interface for representing an audio processing module. Examples include:

	Documentation [AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AnalyserNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/AnalyserNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<fftSize public="1">
			<x path="Int"/>
			<haxe_doc>Is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain.</haxe_doc>
		</fftSize>
		<frequencyBinCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.</haxe_doc>
		</frequencyBinCount>
		<minDecibels public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using `getByteFrequencyData()`.</haxe_doc>
		</minDecibels>
		<maxDecibels public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using `getByteFrequencyData()`.</haxe_doc>
		</maxDecibels>
		<smoothingTimeConstant public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the averaging constant with the last analysis frame — basically, it makes the transition between values over time smoother.</haxe_doc>
		</smoothingTimeConstant>
		<getFloatFrequencyData public="1" set="method">
			<f a="array">
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current frequency data into a `Float32Array` array passed into it.</haxe_doc>
		</getFloatFrequencyData>
		<getByteFrequencyData public="1" set="method">
			<f a="array">
				<c path="js.lib.Uint8Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current frequency data into a `Uint8Array` (unsigned byte array) passed into it.</haxe_doc>
		</getByteFrequencyData>
		<getFloatTimeDomainData public="1" set="method">
			<f a="array">
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current waveform, or time-domain, data into a `Float32Array` array passed into it.</haxe_doc>
		</getFloatTimeDomainData>
		<getByteTimeDomainData public="1" set="method">
			<f a="array">
				<c path="js.lib.Uint8Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current waveform, or time-domain, data into a `Uint8Array` (unsigned byte array) passed into it.</haxe_doc>
		</getByteTimeDomainData>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.AnalyserOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AnalyserNode` interface represents a node able to provide real-time frequency and time-domain analysis information. It is an `AudioNode` that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.

	Documentation [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AnalyserNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AnalyserOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/AnalyserOptions.hx"><a>
	<smoothingTimeConstant>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</smoothingTimeConstant>
	<minDecibels>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</minDecibels>
	<maxDecibels>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</maxDecibels>
	<fftSize>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</fftSize>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.AudioBuffer" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioBuffer.hx" extern="1">
		<sampleRate public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.</haxe_doc>
		</sampleRate>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.</haxe_doc>
		</length>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.</haxe_doc>
		</duration>
		<numberOfChannels public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.</haxe_doc>
		</numberOfChannels>
		<getChannelData public="1" set="method">
			<f a="channel">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a `Float32Array` containing the PCM data associated with the channel, defined by the `channel` parameter (with `0` representing the first channel).
		@throws DOMError</haxe_doc>
		</getChannelData>
		<copyFromChannel public="1" set="method">
			<f a="destination:channelNumber:?startInChannel" v="::0">
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startInChannel : 0 }</e></m></meta>
			<haxe_doc>Copies the samples from the specified channel of the `AudioBuffer` to the `destination` array.
		@throws DOMError</haxe_doc>
		</copyFromChannel>
		<copyToChannel public="1" set="method">
			<f a="source:channelNumber:?startInChannel" v="::0">
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startInChannel : 0 }</e></m></meta>
			<haxe_doc>Copies the samples to the specified channel of the `AudioBuffer`, from the `source` array.
		@throws DOMError</haxe_doc>
		</copyToChannel>
		<new public="1" set="method">
			<f a="options">
				<t path="js.html.audio.AudioBufferOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Objects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the `MediaElementAudioSourceNode` are more suitable. The buffer contains data in the following format:  non-interleaved IEEE754 32-bit linear PCM with a nominal range between `-1` and `+1`, that is, 32bits floating point buffer, with each samples between -1.0 and 1.0. If the `AudioBuffer` has multiple channels, they are stored in separate buffer.

	Documentation [AudioBuffer](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioBufferOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioBufferOptions.hx"><a>
	<sampleRate><x path="Float"/></sampleRate>
	<numberOfChannels>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfChannels>
	<length><x path="Int"/></length>
</a></typedef>
	<class path="js.html.audio.AudioScheduledSourceNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioScheduledSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A function to be called when the `ended` event is fired, indicating that the node has finished playing.</haxe_doc>
		</onended>
		<start public="1" set="method">
			<f a="?when" v="0.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a="?when" v="0.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stop>
		<haxe_doc><![CDATA[The `AudioScheduledSourceNode` interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the `start()` and `stop()` methods, as well as the `onended` event handler.

	Documentation [AudioScheduledSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioScheduledSourceNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioBufferSourceNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioBufferSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioScheduledSourceNode"/>
		<buffer public="1">
			<c path="js.html.audio.AudioBuffer"/>
			<haxe_doc>An `AudioBuffer` that defines the audio asset to be played, or when set to the value `null`, defines a single channel of silence (in which every sample is 0.0).</haxe_doc>
		</buffer>
		<playbackRate public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` that defines the speed factor at which the audio asset will be played, where a value of 1.0 is the sound's natural sampling rate. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample. This value is compounded with `detune` to determine the final playback rate.</haxe_doc>
		</playbackRate>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing detuning of playback in cents. This value is compounded with `playbackRate` to determine the speed at which the sound is played. Its default value is `0` (meaning no detuning), and its nominal range is -∞ to ∞.</haxe_doc>
		</detune>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean attribute indicating if the audio asset must be replayed when the end of the `AudioBuffer` is reached. Its default value is `false`.</haxe_doc>
		</loop>
		<loopStart public="1">
			<x path="Float"/>
			<haxe_doc>A floating-point value indicating the time, in seconds, at which playback of the `AudioBuffer` must begin when `loop` is `true`. Its default value is `0` (meaning that at the beginning of each loop, playback begins at the start of the audio buffer).</haxe_doc>
		</loopStart>
		<loopEnd public="1">
			<x path="Float"/>
			<haxe_doc>A floating-point number indicating the time, in seconds, at which playback of the `AudioBuffer` stops and loops back to the time indicated by `loopStart`, if `loop` is `true`. The default value is `0`.</haxe_doc>
		</loopEnd>
		<start public="1" set="method" override="1">
			<f a="?when:?grainOffset:?grainDuration" v="0.0:0.0:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grainOffset : 0.0, when : 0.0 }</e></m></meta>
			<haxe_doc>Used to schedule playback of the audio data contained in the buffer, or to begin playback immediately.
		@throws DOMError</haxe_doc>
		</start>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.AudioBufferSourceOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AudioBufferSourceNode` interface is an `AudioScheduledSourceNode` which represents an audio source consisting of in-memory audio data, stored in an `AudioBuffer`. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.

	Documentation [AudioBufferSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioBufferSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioBufferSourceOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioBufferSourceOptions.hx"><a>
	<playbackRate>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</playbackRate>
	<loopStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</loopStart>
	<loopEnd>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</loopEnd>
	<loop>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</loop>
	<detune>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</detune>
	<buffer>
		<x path="Null"><c path="js.html.audio.AudioBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</buffer>
</a></typedef>
	<class path="js.html.audio.BaseAudioContext" params="" file="/home/vsts/work/1/s/std/js/html/audio/BaseAudioContext.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<destination public="1" set="null">
			<c path="js.html.audio.AudioDestinationNode"/>
			<haxe_doc>Returns an `AudioDestinationNode` representing the final destination of all audio in the context. It can be thought of as the audio-rendering device.</haxe_doc>
		</destination>
		<sampleRate public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an `AudioContext` cannot be changed.</haxe_doc>
		</sampleRate>
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at `0`.</haxe_doc>
		</currentTime>
		<listener public="1" set="null">
			<c path="js.html.audio.AudioListener"/>
			<haxe_doc>Returns the `AudioListener` object, used for 3D spatialization.</haxe_doc>
		</listener>
		<state public="1" set="null">
			<x path="js.html.audio.AudioContextState"/>
			<haxe_doc>Returns the current state of the `AudioContext`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler that runs when an event of type `statechange` has fired. This occurs when the `AudioContext`'s state changes, due to the calling of one of the state change methods (`AudioContext.suspend`, `AudioContext.resume`, or `AudioContext.close`).</haxe_doc>
		</onstatechange>
		<resume public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Resumes the progression of time in an audio context that has previously been suspended/paused.
		@throws DOMError</haxe_doc>
		</resume>
		<createBuffer public="1" set="method">
			<f a="numberOfChannels:length:sampleRate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioBuffer"/>
			</f>
			<haxe_doc>Creates a new, empty `AudioBuffer` object, which can then be populated by data and played via an `AudioBufferSourceNode`.
		@throws DOMError</haxe_doc>
		</createBuffer>
		<decodeAudioData public="1" set="method">
			<f a="audioData:?successCallback:?errorCallback">
				<c path="js.lib.ArrayBuffer"/>
				<f a="">
					<c path="js.html.audio.AudioBuffer"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<c path="js.lib.Promise"><c path="js.html.audio.AudioBuffer"/></c>
			</f>
			<haxe_doc>Asynchronously decodes audio file data contained in an `ArrayBuffer`. In this case, the ArrayBuffer is usually loaded from an `XMLHttpRequest`'s `response` attribute after setting the `responseType` to `arraybuffer`. This method only works on complete files, not fragments of audio files.
		@throws DOMError</haxe_doc>
			<overloads><decodeAudioData public="1" set="method">
	<f a="audioData:?successCallback:?errorCallback">
		<c path="js.lib.ArrayBuffer"/>
		<f a="">
			<c path="js.html.audio.AudioBuffer"/>
			<x path="Void"/>
		</f>
		<f a=""><x path="Void"/></f>
		<c path="js.lib.Promise"><c path="js.html.audio.AudioBuffer"/></c>
	</f>
	<haxe_doc>Asynchronously decodes audio file data contained in an `ArrayBuffer`. In this case, the ArrayBuffer is usually loaded from an `XMLHttpRequest`'s `response` attribute after setting the `responseType` to `arraybuffer`. This method only works on complete files, not fragments of audio files.
		@throws DOMError</haxe_doc>
</decodeAudioData></overloads>
		</decodeAudioData>
		<createBufferSource public="1" set="method">
			<f a=""><c path="js.html.audio.AudioBufferSourceNode"/></f>
			<haxe_doc>Creates an `AudioBufferSourceNode`, which can be used to play and manipulate audio data contained within an `AudioBuffer` object. `AudioBuffer`s are created using `AudioContext.createBuffer` or returned by `AudioContext.decodeAudioData` when it successfully decodes an audio track.
		@throws DOMError</haxe_doc>
		</createBufferSource>
		<createConstantSource public="1" set="method">
			<f a=""><c path="js.html.audio.ConstantSourceNode"/></f>
			<haxe_doc>Creates a `ConstantSourceNode` object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value.
		@throws DOMError</haxe_doc>
		</createConstantSource>
		<createScriptProcessor public="1" set="method">
			<f a="?bufferSize:?numberOfInputChannels:?numberOfOutputChannels" v="0:2:2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.audio.ScriptProcessorNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfOutputChannels : 2, numberOfInputChannels : 2, bufferSize : 0 }</e></m></meta>
			<haxe_doc>Creates a `ScriptProcessorNode`, which can be used for direct audio processing via JavaScript.
		@throws DOMError</haxe_doc>
		</createScriptProcessor>
		<createAnalyser public="1" set="method">
			<f a=""><c path="js.html.audio.AnalyserNode"/></f>
			<haxe_doc>Creates an `AnalyserNode`, which can be used to expose audio time and frequency data and for example to create data visualisations.
		@throws DOMError</haxe_doc>
		</createAnalyser>
		<createGain public="1" set="method">
			<f a=""><c path="js.html.audio.GainNode"/></f>
			<haxe_doc>Creates a `GainNode`, which can be used to control the overall volume of the audio graph.
		@throws DOMError</haxe_doc>
		</createGain>
		<createDelay public="1" set="method">
			<f a="?maxDelayTime" v="1.0">
				<x path="Float"/>
				<c path="js.html.audio.DelayNode"/>
			</f>
			<meta><m n=":value"><e>{ maxDelayTime : 1.0 }</e></m></meta>
			<haxe_doc>Creates a `DelayNode`, which is used to delay the incoming audio signal by a certain amount. This node is also useful to create feedback loops in a Web Audio API graph.
		@throws DOMError</haxe_doc>
		</createDelay>
		<createBiquadFilter public="1" set="method">
			<f a=""><c path="js.html.audio.BiquadFilterNode"/></f>
			<haxe_doc>Creates a `BiquadFilterNode`, which represents a second order filter configurable as several different common filter types: high-pass, low-pass, band-pass, etc
		@throws DOMError</haxe_doc>
		</createBiquadFilter>
		<createIIRFilter public="1" set="method">
			<f a="feedforward:feedback">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="js.html.audio.IIRFilterNode"/>
			</f>
			<haxe_doc>Creates an `IIRFilterNode`, which represents a second order filter configurable as several different common filter types.
		@throws DOMError</haxe_doc>
		</createIIRFilter>
		<createWaveShaper public="1" set="method">
			<f a=""><c path="js.html.audio.WaveShaperNode"/></f>
			<haxe_doc>Creates a `WaveShaperNode`, which is used to implement non-linear distortion effects.
		@throws DOMError</haxe_doc>
		</createWaveShaper>
		<createPanner public="1" set="method">
			<f a=""><c path="js.html.audio.PannerNode"/></f>
			<haxe_doc>Creates a `PannerNode`, which is used to spatialise an incoming audio stream in 3D space.
		@throws DOMError</haxe_doc>
		</createPanner>
		<createStereoPanner public="1" set="method">
			<f a=""><c path="js.html.audio.StereoPannerNode"/></f>
			<haxe_doc>Creates a `StereoPannerNode`, which can be used to apply stereo panning to an audio source.
		@throws DOMError</haxe_doc>
		</createStereoPanner>
		<createConvolver public="1" set="method">
			<f a=""><c path="js.html.audio.ConvolverNode"/></f>
			<haxe_doc>Creates a `ConvolverNode`, which can be used to apply convolution effects to your audio graph, for example a reverberation effect.
		@throws DOMError</haxe_doc>
		</createConvolver>
		<createChannelSplitter public="1" set="method">
			<f a="?numberOfOutputs" v="6">
				<x path="Int"/>
				<c path="js.html.audio.ChannelSplitterNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfOutputs : 6 }</e></m></meta>
			<haxe_doc>Creates a `ChannelSplitterNode`, which is used to access the individual channels of an audio stream and process them separately.
		@throws DOMError</haxe_doc>
		</createChannelSplitter>
		<createChannelMerger public="1" set="method">
			<f a="?numberOfInputs" v="6">
				<x path="Int"/>
				<c path="js.html.audio.ChannelMergerNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfInputs : 6 }</e></m></meta>
			<haxe_doc>Creates a `ChannelMergerNode`, which is used to combine channels from multiple audio streams into a single audio stream.
		@throws DOMError</haxe_doc>
		</createChannelMerger>
		<createDynamicsCompressor public="1" set="method">
			<f a=""><c path="js.html.audio.DynamicsCompressorNode"/></f>
			<haxe_doc>Creates a `DynamicsCompressorNode`, which can be used to apply acoustic compression to an audio signal.
		@throws DOMError</haxe_doc>
		</createDynamicsCompressor>
		<createOscillator public="1" set="method">
			<f a=""><c path="js.html.audio.OscillatorNode"/></f>
			<haxe_doc>Creates an `OscillatorNode`, a source representing a periodic waveform. It basically generates a tone.
		@throws DOMError</haxe_doc>
		</createOscillator>
		<createPeriodicWave public="1" set="method">
			<f a="real:imag:?constraints">
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
				<x path="Null"><t path="js.html.audio.PeriodicWaveConstraints"/></x>
				<c path="js.html.audio.PeriodicWave"/>
			</f>
			<haxe_doc>Creates a `PeriodicWave`, used to define a periodic waveform that can be used to determine the output of an `OscillatorNode`.
		@throws DOMError</haxe_doc>
		</createPeriodicWave>
		<haxe_doc><![CDATA[The `BaseAudioContext` interface acts as a base definition for online and offline audio-processing graphs, as represented by `AudioContext` and `OfflineAudioContext` respectively.

	Documentation [BaseAudioContext](https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext>]]></haxe_doc>
		<meta><m n=":native"><e>"BaseAudioContext"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioContext" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioContext.hx" extern="1">
		<extends path="js.html.audio.BaseAudioContext"/>
		<suspend public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process.
		@throws DOMError</haxe_doc>
		</suspend>
		<close public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Closes the audio context, releasing any system audio resources that it uses.
		@throws DOMError</haxe_doc>
		</close>
		<createMediaElementSource public="1" set="method">
			<f a="mediaElement">
				<c path="js.html.MediaElement"/>
				<c path="js.html.audio.MediaElementAudioSourceNode"/>
			</f>
			<haxe_doc>Creates a `MediaElementAudioSourceNode` associated with an `HTMLMediaElement`. This can be used to play and manipulate audio from `video` or `audio` elements.
		@throws DOMError</haxe_doc>
		</createMediaElementSource>
		<createMediaStreamSource public="1" set="method">
			<f a="mediaStream">
				<c path="js.html.MediaStream"/>
				<c path="js.html.audio.MediaStreamAudioSourceNode"/>
			</f>
			<haxe_doc>Creates a `MediaStreamAudioSourceNode` associated with a `MediaStream` representing an audio stream which may come from the local computer microphone or other sources.
		@throws DOMError</haxe_doc>
		</createMediaStreamSource>
		<createMediaStreamDestination public="1" set="method">
			<f a=""><c path="js.html.audio.MediaStreamAudioDestinationNode"/></f>
			<haxe_doc>Creates a `MediaStreamAudioDestinationNode` associated with a `MediaStream` representing an audio stream which may be stored in a local file or sent to another computer.
		@throws DOMError</haxe_doc>
		</createMediaStreamDestination>
		<new public="1" set="method">
			<f a="?contextOptions">
				<x path="Null"><t path="js.html.audio.AudioContextOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AudioContext` interface represents an audio-processing graph built from audio modules linked together, each represented by an `AudioNode`.

	Documentation [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioContext>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioContext"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioContextOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioContextOptions.hx">
		<a><sampleRate>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The `BaseAudioContext.sampleRate` to be used by the `AudioContext`, specified in samples per second. The value may be any value supported by `AudioBuffer`. If not specified, the preferred sample rate for the context's output device is used by default.</haxe_doc>
</sampleRate></a>
		<haxe_doc><![CDATA[The `AudioContextOptions` dictionary is used to specify configuration options when constructing a new `AudioContext` object to represent a graph of web audio nodes.

	Documentation [AudioContextOptions](https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.audio.AudioContextState" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioContextState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._AudioContextState.AudioContextState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioContextState.hx" private="1" module="js.html.audio.AudioContextState" extern="1" final="1">
	<SUSPENDED public="1" get="inline" set="null" expr="cast &quot;suspended&quot;" line="28" static="1">
		<x path="js.html.audio.AudioContextState"/>
		<meta>
			<m n=":value"><e>cast "suspended"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SUSPENDED>
	<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="29" static="1">
		<x path="js.html.audio.AudioContextState"/>
		<meta>
			<m n=":value"><e>cast "running"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RUNNING>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="30" static="1">
		<x path="js.html.audio.AudioContextState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._AudioContextState.AudioContextState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioContextState.hx" private="1" module="js.html.audio.AudioContextState" extern="1" final="1">
		<SUSPENDED public="1" get="inline" set="null" expr="cast &quot;suspended&quot;" line="28" static="1">
			<x path="js.html.audio.AudioContextState"/>
			<meta>
				<m n=":value"><e>cast "suspended"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SUSPENDED>
		<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="29" static="1">
			<x path="js.html.audio.AudioContextState"/>
			<meta>
				<m n=":value"><e>cast "running"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RUNNING>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="30" static="1">
			<x path="js.html.audio.AudioContextState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.audio.AudioDestinationNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioDestinationNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<maxChannelCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long` defining the maximum number of channels that the physical device can handle.</haxe_doc>
		</maxChannelCount>
		<haxe_doc><![CDATA[`AudioDestinationNode` has no output (as it is the output, no more `AudioNode` can be linked after it in the audio graph) and one input. The number of channels in the input must be between `0` and the `maxChannelCount` value or an exception is raised.

	Documentation [AudioDestinationNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioDestinationNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioListener" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioListener.hx" extern="1">
		<setPosition public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPosition>
		<setOrientation public="1" set="method"><f a="x:y:z:xUp:yUp:zUp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setOrientation>
		<haxe_doc><![CDATA[It is important to note that there is only one listener per context and that it isn't an `AudioNode`.

	Documentation [AudioListener](https://developer.mozilla.org/en-US/docs/Web/API/AudioListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioListener>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioListener"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioNodeOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioNodeOptions.hx">
		<a>
			<channelInterpretation>
				<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
			</channelInterpretation>
			<channelCountMode>
				<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
			</channelCountMode>
			<channelCount>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
			</channelCount>
		</a>
		<haxe_doc><![CDATA[The `AudioNodeOptions` dictionary of the Web Audio API specifies options that can be used when creating new `AudioNode` objects.

	Documentation [AudioNodeOptions](https://developer.mozilla.org/en-US/docs/Web/API/AudioNodeOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioNodeOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioNodeOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.audio.AudioParam" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioParam.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Represents the parameter's current volume as a floating point value; initially set to the value of `AudioParam.defaultValue`. Though it can be set, any modifications happening while there are automation events scheduled — that is events scheduled using the methods of the `AudioParam` — are ignored, without raising any exception.</haxe_doc>
		</value>
		<defaultValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Represents the initial volume of the attribute as defined by the specific `AudioNode` creating the `AudioParam`.</haxe_doc>
		</defaultValue>
		<minValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Represents the minimum possible value for the parameter's nominal (effective) range. </haxe_doc>
		</minValue>
		<maxValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Represents the maximum possible value for the parameter's nominal (effective) range. </haxe_doc>
		</maxValue>
		<setValueAtTime public="1" set="method">
			<f a="value:startTime">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules an instant change to the value of the `AudioParam` at a precise time, as measured against `AudioContext.currentTime`. The new value is given by the `value` parameter.
		@throws DOMError</haxe_doc>
		</setValueAtTime>
		<linearRampToValueAtTime public="1" set="method">
			<f a="value:endTime">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules a gradual linear change in the value of the `AudioParam`. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the `value` parameter, and reaches the new value at the time given in the `endTime` parameter.
		@throws DOMError</haxe_doc>
		</linearRampToValueAtTime>
		<exponentialRampToValueAtTime public="1" set="method">
			<f a="value:endTime">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules a gradual exponential change in the value of the `AudioParam`. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the `value` parameter, and reaches the new value at the time given in the `endTime` parameter.
		@throws DOMError</haxe_doc>
		</exponentialRampToValueAtTime>
		<setTargetAtTime public="1" set="method">
			<f a="target:startTime:timeConstant">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules the start of a change to the value of the `AudioParam`. The change starts at the time specified in `startTime` and exponentially moves towards the value given by the `target` parameter. The exponential decay rate is defined by the `timeConstant` parameter, which is a time measured in seconds.
		@throws DOMError</haxe_doc>
		</setTargetAtTime>
		<setValueCurveAtTime public="1" set="method">
			<f a="values:startTime:duration">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules the values of the `AudioParam` to follow a set of values, defined by an array of floating-point numbers scaled to fit into the given interval, starting at a given start time and spanning a given duration of time.
		@throws DOMError</haxe_doc>
		</setValueCurveAtTime>
		<cancelScheduledValues public="1" set="method">
			<f a="startTime">
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Cancels all scheduled future changes to the `AudioParam`.
		@throws DOMError</haxe_doc>
		</cancelScheduledValues>
		<haxe_doc><![CDATA[The Web Audio API's `AudioParam` interface represents an audio-related parameter, usually a parameter of an `AudioNode` (such as `GainNode.gain`).

	Documentation [AudioParam](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioParam>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioParam"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioProcessingEvent" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioProcessingEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<playbackTime public="1" set="null"><x path="Float"/></playbackTime>
		<inputBuffer public="1" set="null"><c path="js.html.audio.AudioBuffer"/></inputBuffer>
		<outputBuffer public="1" set="null"><c path="js.html.audio.AudioBuffer"/></outputBuffer>
		<haxe_doc><![CDATA[The Web Audio API `AudioProcessingEvent` represents events that occur when a `ScriptProcessorNode` input buffer is ready to be processed.

	Documentation [AudioProcessingEvent](https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioProcessingEvent"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioWorkletGlobalScope" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioWorkletGlobalScope.hx" extern="1">
		<extends path="js.html.WorkletGlobalScope"/>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<sampleRate public="1" set="null"><x path="Float"/></sampleRate>
		<registerProcessor public="1" set="method"><f a="name:processorCtor">
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></registerProcessor>
		<meta><m n=":native"><e>"AudioWorkletGlobalScope"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioWorkletNodeOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioWorkletNodeOptions.hx"><a>
	<processorOptions>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</processorOptions>
	<parameterData>
		<x path="Null"><x path="haxe.DynamicAccess"><x path="Float"/></x></x>
		<meta><m n=":optional"/></meta>
	</parameterData>
	<outputChannelCount>
		<x path="Null"><c path="Array"><x path="Int"/></c></x>
		<meta><m n=":optional"/></meta>
	</outputChannelCount>
	<numberOfOutputs>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfOutputs>
	<numberOfInputs>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfInputs>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.AudioWorkletProcessor" params="" file="/home/vsts/work/1/s/std/js/html/audio/AudioWorkletProcessor.hx" extern="1">
		<port public="1" set="null"><c path="js.html.MessagePort"/></port>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.audio.AudioWorkletNodeOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"AudioWorkletProcessor"</e></m></meta>
	</class>
	<class path="js.html.audio.BiquadFilterNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/BiquadFilterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<type public="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<haxe_doc><![CDATA[Is a string value defining the kind of filtering algorithm the node is implementing.<br>
			 
			<table class="standard-table">
				The meaning of the different parameters depending of the type of the filter (detune has the same meaning regardless, so isn't listed below)
				
					<tr>
						<code>type</code>
						Description
						<code>frequency</code>
						<code>Q</code>
						<code>gain</code>
					</tr>
				
				
					<tr>
						<code>lowpass</code>
						<td>Standard second-order resonant lowpass filter with 12dB/octave rolloff. Frequencies below the cutoff pass through; frequencies above it are attenuated.</td>
						<td>The cutoff frequency.</td>
						<td>Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>highpass</code>
						<td>Standard second-order resonant highpass filter with 12dB/octave rolloff. Frequencies below the cutoff are attenuated; frequencies above it pass through.</td>
						<td>The cutoff frequency.</td>
						<td>Indicates how peaked the frequency is around the cutoff. The greater the value, the greater the peak.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>bandpass</code>
						<td>Standard second-order bandpass filter. Frequencies outside the given range of frequencies are attenuated; the frequencies inside it pass through.</td>
						<td>The center of the range of frequencies.</td>
						<td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>lowshelf</code>
						<td>Standard second-order lowshelf filter. Frequencies lower than the frequency get a boost, or an attenuation; frequencies over it are unchanged.</td>
						<td>The upper limit of the frequencies getting a boost or an attenuation.</td>
						<td>Not used</td>
						<td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
					</tr>
					<tr>
						<code>highshelf</code>
						<td>Standard second-order highshelf filter. Frequencies higher than the frequency get a boost or an attenuation; frequencies lower than it are unchanged.</td>
						<td>The lower limit of the frequencies getting a boost or an attenuation.</td>
						<td>Not used</td>
						<td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
					</tr>
					<tr>
						<code>peaking</code>
						<td>Frequencies inside the range get a boost or an attenuation; frequencies outside it are unchanged.</td>
						<td>The middle of the frequency range getting a boost or an attenuation.</td>
						<td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
						<td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
					</tr>
					<tr>
						<code>notch</code>
						<td>Standard notch filter, also called a band-stop or band-rejection filter. It is the opposite of a bandpass filter: frequencies outside the give range of frequencies pass through; frequencies inside it are attenuated.</td>
						<td>The center of the range of frequencies.</td>
						<td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>allpass</code>
						<td>Standard second-order allpass filter. It lets all frequencies through, but changes the phase-relationship between the various frequencies.</td>
						<td>The frequency with the maximal group delay, that is, the frequency where the center of the phase transition occurs.</td>
						<td>Controls how sharp the transition is at the medium frequency. The larger this parameter is, the sharper and larger the transition will be.</td>
						<td>Not used</td>
					</tr>
				
			</table>]]></haxe_doc>
		</type>
		<frequency public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).</haxe_doc>
		</frequency>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing detuning of the frequency in cents.</haxe_doc>
		</detune>
		<Q public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing a Q factor, or quality factor.</haxe_doc>
		</Q>
		<gain public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing the gain used in the current filtering algorithm.</haxe_doc>
		</gain>
		<getFrequencyResponse public="1" set="method">
			<f a="frequencyHz:magResponse:phaseResponse">
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies.</haxe_doc>
		</getFrequencyResponse>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.BiquadFilterOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `BiquadFilterNode` interface represents a simple low-order filter, and is created using the `AudioContext.createBiquadFilter()` method. It is an `AudioNode` that can represent different kinds of filters, tone control devices, and graphic equalizers.

	Documentation [BiquadFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode>]]></haxe_doc>
		<meta><m n=":native"><e>"BiquadFilterNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.BiquadFilterOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/BiquadFilterOptions.hx"><a>
	<type>
		<x path="Null"><x path="js.html.audio.BiquadFilterType"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<gain>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</gain>
	<frequency>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</frequency>
	<detune>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</detune>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
	<Q>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</Q>
</a></typedef>
	<abstract path="js.html.audio.BiquadFilterType" params="" file="/home/vsts/work/1/s/std/js/html/audio/BiquadFilterType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._BiquadFilterType.BiquadFilterType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/BiquadFilterType.hx" private="1" module="js.html.audio.BiquadFilterType" extern="1" final="1">
	<LOWPASS public="1" get="inline" set="null" expr="cast &quot;lowpass&quot;" line="28" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "lowpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOWPASS>
	<HIGHPASS public="1" get="inline" set="null" expr="cast &quot;highpass&quot;" line="29" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "highpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGHPASS>
	<BANDPASS public="1" get="inline" set="null" expr="cast &quot;bandpass&quot;" line="30" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "bandpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BANDPASS>
	<LOWSHELF public="1" get="inline" set="null" expr="cast &quot;lowshelf&quot;" line="31" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "lowshelf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOWSHELF>
	<HIGHSHELF public="1" get="inline" set="null" expr="cast &quot;highshelf&quot;" line="32" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "highshelf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGHSHELF>
	<PEAKING public="1" get="inline" set="null" expr="cast &quot;peaking&quot;" line="33" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "peaking"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PEAKING>
	<NOTCH public="1" get="inline" set="null" expr="cast &quot;notch&quot;" line="34" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "notch"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOTCH>
	<ALLPASS public="1" get="inline" set="null" expr="cast &quot;allpass&quot;" line="35" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "allpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALLPASS>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._BiquadFilterType.BiquadFilterType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/BiquadFilterType.hx" private="1" module="js.html.audio.BiquadFilterType" extern="1" final="1">
		<LOWPASS public="1" get="inline" set="null" expr="cast &quot;lowpass&quot;" line="28" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "lowpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOWPASS>
		<HIGHPASS public="1" get="inline" set="null" expr="cast &quot;highpass&quot;" line="29" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "highpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGHPASS>
		<BANDPASS public="1" get="inline" set="null" expr="cast &quot;bandpass&quot;" line="30" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "bandpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BANDPASS>
		<LOWSHELF public="1" get="inline" set="null" expr="cast &quot;lowshelf&quot;" line="31" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "lowshelf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOWSHELF>
		<HIGHSHELF public="1" get="inline" set="null" expr="cast &quot;highshelf&quot;" line="32" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "highshelf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGHSHELF>
		<PEAKING public="1" get="inline" set="null" expr="cast &quot;peaking&quot;" line="33" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "peaking"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PEAKING>
		<NOTCH public="1" get="inline" set="null" expr="cast &quot;notch&quot;" line="34" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "notch"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOTCH>
		<ALLPASS public="1" get="inline" set="null" expr="cast &quot;allpass&quot;" line="35" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "allpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALLPASS>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.audio.ChannelCountMode" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelCountMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._ChannelCountMode.ChannelCountMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelCountMode.hx" private="1" module="js.html.audio.ChannelCountMode" extern="1" final="1">
	<MAX public="1" get="inline" set="null" expr="cast &quot;max&quot;" line="28" static="1">
		<x path="js.html.audio.ChannelCountMode"/>
		<meta>
			<m n=":value"><e>cast "max"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MAX>
	<CLAMPED_MAX public="1" get="inline" set="null" expr="cast &quot;clamped-max&quot;" line="29" static="1">
		<x path="js.html.audio.ChannelCountMode"/>
		<meta>
			<m n=":value"><e>cast "clamped-max"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLAMPED_MAX>
	<EXPLICIT public="1" get="inline" set="null" expr="cast &quot;explicit&quot;" line="30" static="1">
		<x path="js.html.audio.ChannelCountMode"/>
		<meta>
			<m n=":value"><e>cast "explicit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXPLICIT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._ChannelCountMode.ChannelCountMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelCountMode.hx" private="1" module="js.html.audio.ChannelCountMode" extern="1" final="1">
		<MAX public="1" get="inline" set="null" expr="cast &quot;max&quot;" line="28" static="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<meta>
				<m n=":value"><e>cast "max"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MAX>
		<CLAMPED_MAX public="1" get="inline" set="null" expr="cast &quot;clamped-max&quot;" line="29" static="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<meta>
				<m n=":value"><e>cast "clamped-max"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLAMPED_MAX>
		<EXPLICIT public="1" get="inline" set="null" expr="cast &quot;explicit&quot;" line="30" static="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<meta>
				<m n=":value"><e>cast "explicit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXPLICIT>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.audio.ChannelInterpretation" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelInterpretation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._ChannelInterpretation.ChannelInterpretation_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelInterpretation.hx" private="1" module="js.html.audio.ChannelInterpretation" extern="1" final="1">
	<SPEAKERS public="1" get="inline" set="null" expr="cast &quot;speakers&quot;" line="28" static="1">
		<x path="js.html.audio.ChannelInterpretation"/>
		<meta>
			<m n=":value"><e>cast "speakers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SPEAKERS>
	<DISCRETE public="1" get="inline" set="null" expr="cast &quot;discrete&quot;" line="29" static="1">
		<x path="js.html.audio.ChannelInterpretation"/>
		<meta>
			<m n=":value"><e>cast "discrete"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISCRETE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._ChannelInterpretation.ChannelInterpretation_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelInterpretation.hx" private="1" module="js.html.audio.ChannelInterpretation" extern="1" final="1">
		<SPEAKERS public="1" get="inline" set="null" expr="cast &quot;speakers&quot;" line="28" static="1">
			<x path="js.html.audio.ChannelInterpretation"/>
			<meta>
				<m n=":value"><e>cast "speakers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SPEAKERS>
		<DISCRETE public="1" get="inline" set="null" expr="cast &quot;discrete&quot;" line="29" static="1">
			<x path="js.html.audio.ChannelInterpretation"/>
			<meta>
				<m n=":value"><e>cast "discrete"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISCRETE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.audio.ChannelMergerNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelMergerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ChannelMergerOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ChannelMergerNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ChannelMergerOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelMergerOptions.hx"><a>
	<numberOfInputs>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfInputs>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.ChannelSplitterNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelSplitterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ChannelSplitterOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ChannelSplitterNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ChannelSplitterOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/ChannelSplitterOptions.hx"><a>
	<numberOfOutputs>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfOutputs>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.ConstantSourceNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/ConstantSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioScheduledSourceNode"/>
		<offset public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An `AudioParam` which specifies the value that this source continuously outputs. The default value is 1.0.</haxe_doc>
		</offset>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ConstantSourceOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ConstantSourceNode` interface—part of the Web Audio API—represents an audio source (based upon `AudioScheduledSourceNode`) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible `AudioParam` by automating the value of its `offset` or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.

	Documentation [ConstantSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ConstantSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ConstantSourceOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/ConstantSourceOptions.hx"><a><offset>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
</offset></a></typedef>
	<class path="js.html.audio.ConvolverNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/ConvolverNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<buffer public="1">
			<c path="js.html.audio.AudioBuffer"/>
			<haxe_doc>A mono, stereo, or 4-channel `AudioBuffer` containing the (possibly multichannel) impulse response used by the `ConvolverNode` to create the reverb effect.</haxe_doc>
		</buffer>
		<normalize public="1">
			<x path="Bool"/>
			<haxe_doc>A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the `buffer` attribute is set, or not.</haxe_doc>
		</normalize>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ConvolverOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ConvolverNode` interface is an `AudioNode` that performs a Linear Convolution on a given `AudioBuffer`, often used to achieve a reverb effect. A `ConvolverNode` always has exactly one input and one output.

	Documentation [ConvolverNode](https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ConvolverNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ConvolverOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/ConvolverOptions.hx"><a>
	<disableNormalization>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</disableNormalization>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
	<buffer>
		<x path="Null"><c path="js.html.audio.AudioBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</buffer>
</a></typedef>
	<class path="js.html.audio.DelayNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/DelayNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<delayTime public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of delay to apply.</haxe_doc>
		</delayTime>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.DelayOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DelayNode` interface represents a delay-line; an `AudioNode` audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.

	Documentation [DelayNode](https://developer.mozilla.org/en-US/docs/Web/API/DelayNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DelayNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DelayNode>]]></haxe_doc>
		<meta><m n=":native"><e>"DelayNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.DelayOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/DelayOptions.hx"><a>
	<maxDelayTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</maxDelayTime>
	<delayTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</delayTime>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<abstract path="js.html.audio.DistanceModelType" params="" file="/home/vsts/work/1/s/std/js/html/audio/DistanceModelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._DistanceModelType.DistanceModelType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/DistanceModelType.hx" private="1" module="js.html.audio.DistanceModelType" extern="1" final="1">
	<LINEAR public="1" get="inline" set="null" expr="cast &quot;linear&quot;" line="28" static="1">
		<x path="js.html.audio.DistanceModelType"/>
		<meta>
			<m n=":value"><e>cast "linear"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEAR>
	<INVERSE public="1" get="inline" set="null" expr="cast &quot;inverse&quot;" line="29" static="1">
		<x path="js.html.audio.DistanceModelType"/>
		<meta>
			<m n=":value"><e>cast "inverse"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INVERSE>
	<EXPONENTIAL public="1" get="inline" set="null" expr="cast &quot;exponential&quot;" line="30" static="1">
		<x path="js.html.audio.DistanceModelType"/>
		<meta>
			<m n=":value"><e>cast "exponential"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXPONENTIAL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._DistanceModelType.DistanceModelType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/DistanceModelType.hx" private="1" module="js.html.audio.DistanceModelType" extern="1" final="1">
		<LINEAR public="1" get="inline" set="null" expr="cast &quot;linear&quot;" line="28" static="1">
			<x path="js.html.audio.DistanceModelType"/>
			<meta>
				<m n=":value"><e>cast "linear"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEAR>
		<INVERSE public="1" get="inline" set="null" expr="cast &quot;inverse&quot;" line="29" static="1">
			<x path="js.html.audio.DistanceModelType"/>
			<meta>
				<m n=":value"><e>cast "inverse"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INVERSE>
		<EXPONENTIAL public="1" get="inline" set="null" expr="cast &quot;exponential&quot;" line="30" static="1">
			<x path="js.html.audio.DistanceModelType"/>
			<meta>
				<m n=":value"><e>cast "exponential"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXPONENTIAL>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.audio.DynamicsCompressorNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/DynamicsCompressorNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<threshold public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the decibel value above which the compression will start taking effect.</haxe_doc>
		</threshold>
		<knee public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.</haxe_doc>
		</knee>
		<ratio public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the amount of change, in dB, needed in the input for a 1 dB change in the output.</haxe_doc>
		</ratio>
		<reduction public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `float` representing the amount of gain reduction currently applied by the compressor to the signal.</haxe_doc>
		</reduction>
		<attack public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the amount of time, in seconds, required to reduce the gain by 10 dB.</haxe_doc>
		</attack>
		<release public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the amount of time, in seconds, required to increase the gain by 10 dB.</haxe_doc>
		</release>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.DynamicsCompressorOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Inherits properties from its parent, `AudioNode`.

	Documentation [DynamicsCompressorNode](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"DynamicsCompressorNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.DynamicsCompressorOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/DynamicsCompressorOptions.hx"><a>
	<threshold>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</threshold>
	<release>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</release>
	<ratio>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</ratio>
	<knee>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</knee>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
	<attack>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</attack>
</a></typedef>
	<class path="js.html.audio.GainNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/GainNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<gain public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of gain to apply. You have to set `AudioParam.value` or use the methods of `AudioParam` to change the effect of gain.</haxe_doc>
		</gain>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.GainOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `GainNode` interface represents a change in volume. It is an `AudioNode` audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A `GainNode` always has exactly one input and one output, both with the same number of channels.

	Documentation [GainNode](https://developer.mozilla.org/en-US/docs/Web/API/GainNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GainNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GainNode>]]></haxe_doc>
		<meta><m n=":native"><e>"GainNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.GainOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/GainOptions.hx"><a>
	<gain>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</gain>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.IIRFilterNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/IIRFilterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<getFrequencyResponse public="1" set="method"><f a="frequencyHz:magResponse:phaseResponse">
	<c path="js.lib.Float32Array"/>
	<c path="js.lib.Float32Array"/>
	<c path="js.lib.Float32Array"/>
	<x path="Void"/>
</f></getFrequencyResponse>
		<new public="1" set="method">
			<f a="context:options">
				<c path="js.html.audio.BaseAudioContext"/>
				<t path="js.html.audio.IIRFilterOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `IIRFilterNode` interface of the Web Audio API is a `AudioNode` processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.

	Documentation [IIRFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode>]]></haxe_doc>
		<meta><m n=":native"><e>"IIRFilterNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.IIRFilterOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/IIRFilterOptions.hx"><a>
	<feedforward><c path="Array"><x path="Float"/></c></feedforward>
	<feedback><c path="Array"><x path="Float"/></c></feedback>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.MediaElementAudioSourceNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/MediaElementAudioSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:options">
				<c path="js.html.audio.AudioContext"/>
				<t path="js.html.audio.MediaElementAudioSourceOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `MediaElementSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaElementSource` method. The amount of channels in the output equals the number of channels of the audio referenced by the `HTMLMediaElement` used in the creation of the node, or is 1 if the `HTMLMediaElement` has no audio.

	Documentation [MediaElementAudioSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaElementAudioSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.MediaElementAudioSourceOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/MediaElementAudioSourceOptions.hx"><a><mediaElement><c path="js.html.MediaElement"/></mediaElement></a></typedef>
	<class path="js.html.audio.MediaStreamAudioDestinationNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/MediaStreamAudioDestinationNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<stream public="1" set="null">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` containing a single `AudioMediaStreamTrack` with the same number of channels as the node itself. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder.</haxe_doc>
		</stream>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.AudioContext"/>
				<x path="Null"><t path="js.html.audio.AudioNodeOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Inherits properties from its parent, `AudioNode`.

	Documentation [MediaStreamAudioDestinationNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamAudioDestinationNode"</e></m></meta>
	</class>
	<class path="js.html.audio.MediaStreamAudioSourceNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/MediaStreamAudioSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:options">
				<c path="js.html.audio.AudioContext"/>
				<t path="js.html.audio.MediaStreamAudioSourceOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `MediaStreamAudioSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaStreamSource` method. The number of channels in the output equals the number of channels in `AudioMediaStreamTrack`. If there is no valid media stream, then the number of output channels will be one silent channel.

	Documentation [MediaStreamAudioSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamAudioSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.MediaStreamAudioSourceOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/MediaStreamAudioSourceOptions.hx"><a><mediaStream><c path="js.html.MediaStream"/></mediaStream></a></typedef>
	<class path="js.html.audio.OfflineAudioCompletionEvent" params="" file="/home/vsts/work/1/s/std/js/html/audio/OfflineAudioCompletionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<renderedBuffer public="1" set="null">
			<c path="js.html.audio.AudioBuffer"/>
			<haxe_doc>An `AudioBuffer` containing the result of processing an `OfflineAudioContext`.</haxe_doc>
		</renderedBuffer>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.OfflineAudioCompletionEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Web Audio API `OfflineAudioCompletionEvent` interface represents events that occur when the processing of an `OfflineAudioContext` is terminated. The `complete` event implements this interface.

	Documentation [OfflineAudioCompletionEvent](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent>]]></haxe_doc>
		<meta>
			<m n=":deprecated"><e>"OfflineAudioCompletionEvent is deprecated"</e></m>
			<m n=":native"><e>"OfflineAudioCompletionEvent"</e></m>
		</meta>
	</class>
	<class path="js.html.audio.OfflineAudioContext" params="" file="/home/vsts/work/1/s/std/js/html/audio/OfflineAudioContext.hx" extern="1">
		<extends path="js.html.audio.BaseAudioContext"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An integer representing the size of the buffer in sample-frames.</haxe_doc>
		</length>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` called when processing is terminated, that is when the `complete` event (of type `OfflineAudioCompletionEvent`) is raised, after the event-based version of `OfflineAudioContext.startRendering()` is used.</haxe_doc>
		</oncomplete>
		<startRendering public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.audio.AudioBuffer"/></c></f>
			<haxe_doc>Starts rendering the audio, taking into account the current connections and the current scheduled changes. This page covers both the event-based version and the promise-based version.
		@throws DOMError</haxe_doc>
		</startRendering>
		<new public="1" set="method">
			<f a="numberOfChannels:length:sampleRate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="contextOptions">
		<t path="js.html.audio.OfflineAudioContextOptions"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `OfflineAudioContext` interface is an `AudioContext` interface representing an audio-processing graph built from linked together `AudioNode`s. In contrast with a standard `AudioContext`, an `OfflineAudioContext` doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an `AudioBuffer`.

	Documentation [OfflineAudioContext](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext>]]></haxe_doc>
		<meta><m n=":native"><e>"OfflineAudioContext"</e></m></meta>
	</class>
	<typedef path="js.html.audio.OfflineAudioContextOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/OfflineAudioContextOptions.hx"><a>
	<sampleRate><x path="Float"/></sampleRate>
	<numberOfChannels>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfChannels>
	<length><x path="Int"/></length>
</a></typedef>
	<class path="js.html.audio.OscillatorNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/OscillatorNode.hx" extern="1">
		<extends path="js.html.audio.AudioScheduledSourceNode"/>
		<type public="1">
			<x path="js.html.audio.OscillatorType"/>
			<haxe_doc>A string which specifies the shape of waveform to play; this can be one of a number of standard values, or `custom` to use a `PeriodicWave` to describe a custom waveform. Different waves will produce different tones. Standard values are `"sine"`, `"square"`, `"sawtooth"`, `"triangle"` and `"custom"`. The default is `"sine"`.</haxe_doc>
		</type>
		<frequency public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` representing the frequency of oscillation in hertz (though the AudioParam` returned is read-only, the value it represents is not). The default value is 440 Hz (a standard middle-A note).</haxe_doc>
		</frequency>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` representing detuning of oscillation in cents (though the AudioParam` returned is read-only, the value it represents is not). The default value is 0.</haxe_doc>
		</detune>
		<setPeriodicWave public="1" set="method">
			<f a="periodicWave">
				<c path="js.html.audio.PeriodicWave"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a `PeriodicWave` which describes a periodic waveform to be used instead of one of the standard waveforms; calling this sets the `type` to `custom`. This replaces the now-obsolete `OscillatorNode.setWaveTable()` method.</haxe_doc>
		</setPeriodicWave>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.OscillatorOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `OscillatorNode` interface represents a periodic waveform, such as a sine wave. It is an `AudioScheduledSourceNode` audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.

	Documentation [OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"OscillatorNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.OscillatorOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/OscillatorOptions.hx"><a>
	<type>
		<x path="Null"><x path="js.html.audio.OscillatorType"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<periodicWave>
		<x path="Null"><c path="js.html.audio.PeriodicWave"/></x>
		<meta><m n=":optional"/></meta>
	</periodicWave>
	<frequency>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</frequency>
	<detune>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</detune>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<abstract path="js.html.audio.OscillatorType" params="" file="/home/vsts/work/1/s/std/js/html/audio/OscillatorType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._OscillatorType.OscillatorType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/OscillatorType.hx" private="1" module="js.html.audio.OscillatorType" extern="1" final="1">
	<SINE public="1" get="inline" set="null" expr="cast &quot;sine&quot;" line="28" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "sine"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SINE>
	<SQUARE public="1" get="inline" set="null" expr="cast &quot;square&quot;" line="29" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "square"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SQUARE>
	<SAWTOOTH public="1" get="inline" set="null" expr="cast &quot;sawtooth&quot;" line="30" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "sawtooth"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAWTOOTH>
	<TRIANGLE public="1" get="inline" set="null" expr="cast &quot;triangle&quot;" line="31" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "triangle"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TRIANGLE>
	<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="32" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "custom"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUSTOM>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._OscillatorType.OscillatorType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/OscillatorType.hx" private="1" module="js.html.audio.OscillatorType" extern="1" final="1">
		<SINE public="1" get="inline" set="null" expr="cast &quot;sine&quot;" line="28" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "sine"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SINE>
		<SQUARE public="1" get="inline" set="null" expr="cast &quot;square&quot;" line="29" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "square"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SQUARE>
		<SAWTOOTH public="1" get="inline" set="null" expr="cast &quot;sawtooth&quot;" line="30" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "sawtooth"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAWTOOTH>
		<TRIANGLE public="1" get="inline" set="null" expr="cast &quot;triangle&quot;" line="31" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "triangle"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TRIANGLE>
		<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="32" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "custom"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUSTOM>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.audio.OverSampleType" params="" file="/home/vsts/work/1/s/std/js/html/audio/OverSampleType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._OverSampleType.OverSampleType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/OverSampleType.hx" private="1" module="js.html.audio.OverSampleType" extern="1" final="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="28" static="1">
		<x path="js.html.audio.OverSampleType"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<_2X public="1" get="inline" set="null" expr="cast &quot;2x&quot;" line="29" static="1">
		<x path="js.html.audio.OverSampleType"/>
		<meta>
			<m n=":value"><e>cast "2x"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</_2X>
	<_4X public="1" get="inline" set="null" expr="cast &quot;4x&quot;" line="30" static="1">
		<x path="js.html.audio.OverSampleType"/>
		<meta>
			<m n=":value"><e>cast "4x"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</_4X>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._OverSampleType.OverSampleType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/OverSampleType.hx" private="1" module="js.html.audio.OverSampleType" extern="1" final="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="28" static="1">
			<x path="js.html.audio.OverSampleType"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<_2X public="1" get="inline" set="null" expr="cast &quot;2x&quot;" line="29" static="1">
			<x path="js.html.audio.OverSampleType"/>
			<meta>
				<m n=":value"><e>cast "2x"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</_2X>
		<_4X public="1" get="inline" set="null" expr="cast &quot;4x&quot;" line="30" static="1">
			<x path="js.html.audio.OverSampleType"/>
			<meta>
				<m n=":value"><e>cast "4x"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</_4X>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.audio.PannerNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/PannerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<panningModel public="1">
			<x path="js.html.audio.PanningModelType"/>
			<haxe_doc>An enumerated value determining which spatialisation algorithm to use to position the audio in 3D space.</haxe_doc>
		</panningModel>
		<positionX public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the horizontal position of the audio in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</positionX>
		<positionY public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the vertical position of the audio in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</positionY>
		<positionZ public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the longitudinal (back and forth) position of the audio in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</positionZ>
		<orientationX public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the horizontal position of the audio source's vector in a right-hand cartesian coordinate sytem. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 1.</haxe_doc>
		</orientationX>
		<orientationY public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the vertical position of the audio source's vector in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</orientationY>
		<orientationZ public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</orientationZ>
		<distanceModel public="1">
			<x path="js.html.audio.DistanceModelType"/>
			<haxe_doc>An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.</haxe_doc>
		</distanceModel>
		<refDistance public="1">
			<x path="Float"/>
			<haxe_doc>A double value representing the reference distance for reducing volume as the audio source moves further from the listener.</haxe_doc>
		</refDistance>
		<maxDistance public="1">
			<x path="Float"/>
			<haxe_doc>A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.</haxe_doc>
		</maxDistance>
		<rolloffFactor public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.</haxe_doc>
		</rolloffFactor>
		<coneInnerAngle public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.</haxe_doc>
		</coneInnerAngle>
		<coneOuterAngle public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` attribute.</haxe_doc>
		</coneOuterAngle>
		<coneOuterGain public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing the amount of volume reduction outside the cone defined by the `coneOuterAngle` attribute. Its default value is `0`, meaning that no sound can be heard.</haxe_doc>
		</coneOuterGain>
		<setPosition public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the position of the audio source relative to the listener (represented by an `AudioListener` object stored in the `AudioContext.listener` attribute.)</haxe_doc>
		</setPosition>
		<setOrientation public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the direction the audio source is playing in.</haxe_doc>
		</setOrientation>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.PannerOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `PannerNode` always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!

	Documentation [PannerNode](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PannerNode>]]></haxe_doc>
		<meta><m n=":native"><e>"PannerNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.PannerOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/PannerOptions.hx"><a>
	<rolloffFactor>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</rolloffFactor>
	<refDistance>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</refDistance>
	<positionZ>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</positionZ>
	<positionY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</positionY>
	<positionX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</positionX>
	<panningModel>
		<x path="Null"><x path="js.html.audio.PanningModelType"/></x>
		<meta><m n=":optional"/></meta>
	</panningModel>
	<orientationZ>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</orientationZ>
	<orientationY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</orientationY>
	<orientationX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</orientationX>
	<maxDistance>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</maxDistance>
	<distanceModel>
		<x path="Null"><x path="js.html.audio.DistanceModelType"/></x>
		<meta><m n=":optional"/></meta>
	</distanceModel>
	<coneOuterGain>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</coneOuterGain>
	<coneOuterAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</coneOuterAngle>
	<coneInnerAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</coneInnerAngle>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<abstract path="js.html.audio.PanningModelType" params="" file="/home/vsts/work/1/s/std/js/html/audio/PanningModelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._PanningModelType.PanningModelType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/PanningModelType.hx" private="1" module="js.html.audio.PanningModelType" extern="1" final="1">
	<EQUALPOWER public="1" get="inline" set="null" expr="cast &quot;equalpower&quot;" line="28" static="1">
		<x path="js.html.audio.PanningModelType"/>
		<meta>
			<m n=":value"><e>cast "equalpower"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EQUALPOWER>
	<HRTF public="1" get="inline" set="null" expr="cast &quot;HRTF&quot;" line="29" static="1">
		<x path="js.html.audio.PanningModelType"/>
		<meta>
			<m n=":value"><e>cast "HRTF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HRTF>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._PanningModelType.PanningModelType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/audio/PanningModelType.hx" private="1" module="js.html.audio.PanningModelType" extern="1" final="1">
		<EQUALPOWER public="1" get="inline" set="null" expr="cast &quot;equalpower&quot;" line="28" static="1">
			<x path="js.html.audio.PanningModelType"/>
			<meta>
				<m n=":value"><e>cast "equalpower"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EQUALPOWER>
		<HRTF public="1" get="inline" set="null" expr="cast &quot;HRTF&quot;" line="29" static="1">
			<x path="js.html.audio.PanningModelType"/>
			<meta>
				<m n=":value"><e>cast "HRTF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HRTF>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.audio.PeriodicWave" params="" file="/home/vsts/work/1/s/std/js/html/audio/PeriodicWave.hx" extern="1">
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.PeriodicWaveOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`PeriodicWave` has no inputs or outputs; it is used to define custom oscillators when calling `OscillatorNode.setPeriodicWave()`. The `PeriodicWave` itself is created/returned by `AudioContext.createPeriodicWave()`.

	Documentation [PeriodicWave](https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave>]]></haxe_doc>
		<meta><m n=":native"><e>"PeriodicWave"</e></m></meta>
	</class>
	<typedef path="js.html.audio.PeriodicWaveConstraints" params="" file="/home/vsts/work/1/s/std/js/html/audio/PeriodicWaveConstraints.hx"><a><disableNormalization>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</disableNormalization></a></typedef>
	<typedef path="js.html.audio.PeriodicWaveOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/PeriodicWaveOptions.hx"><a>
	<real>
		<x path="Null"><c path="Array"><x path="Float"/></c></x>
		<meta><m n=":optional"/></meta>
	</real>
	<imag>
		<x path="Null"><c path="Array"><x path="Float"/></c></x>
		<meta><m n=":optional"/></meta>
	</imag>
	<disableNormalization>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</disableNormalization>
</a></typedef>
	<class path="js.html.audio.ScriptProcessorNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/ScriptProcessorNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<onaudioprocess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the `EventHandler` to be called.</haxe_doc>
		</onaudioprocess>
		<bufferSize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing both the input and output buffer size. Its value can be a power of 2 value in the range `256`–`16384`.</haxe_doc>
		</bufferSize>
		<haxe_doc><![CDATA[Documentation [ScriptProcessorNode](https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ScriptProcessorNode"</e></m></meta>
	</class>
	<class path="js.html.audio.StereoPannerNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/StereoPannerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<pan public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of panning to apply.</haxe_doc>
		</pan>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.StereoPannerOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `pan` property takes a unitless value between `-1` (full left pan) and `1` (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full `PannerNode`.

	Documentation [StereoPannerNode](https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode>]]></haxe_doc>
		<meta><m n=":native"><e>"StereoPannerNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.StereoPannerOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/StereoPannerOptions.hx"><a>
	<pan>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</pan>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.WaveShaperNode" params="" file="/home/vsts/work/1/s/std/js/html/audio/WaveShaperNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<curve public="1">
			<c path="js.lib.Float32Array"/>
			<haxe_doc>Is a `Float32Array` of numbers describing the distortion to apply.</haxe_doc>
		</curve>
		<oversample public="1">
			<x path="js.html.audio.OverSampleType"/>
			<haxe_doc>Is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal.</haxe_doc>
		</oversample>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.WaveShaperOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `WaveShaperNode` always has exactly one input and one output.

	Documentation [WaveShaperNode](https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode>]]></haxe_doc>
		<meta><m n=":native"><e>"WaveShaperNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.WaveShaperOptions" params="" file="/home/vsts/work/1/s/std/js/html/audio/WaveShaperOptions.hx"><a>
	<oversample>
		<x path="Null"><x path="js.html.audio.OverSampleType"/></x>
		<meta><m n=":optional"/></meta>
	</oversample>
	<curve>
		<x path="Null"><c path="Array"><x path="Float"/></c></x>
		<meta><m n=":optional"/></meta>
	</curve>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.eme.MediaEncryptedEvent" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaEncryptedEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<initDataType public="1" set="null"><c path="String"/></initDataType>
		<initData public="1" set="null"><c path="js.lib.ArrayBuffer"/></initData>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.eme.MediaKeyNeededEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"MediaEncryptedEvent"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeyError" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyError.hx" extern="1">
		<extends path="js.html.Event"/>
		<systemCode public="1" set="null"><x path="Int"/></systemCode>
		<meta><m n=":native"><e>"MediaKeyError"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeyMessageEvent" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyMessageEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<messageType public="1" set="null">
			<x path="js.html.eme.MediaKeyMessageType"/>
			<haxe_doc>Indicates the type of message. May be one of `license-request`, `license-renewal`, `license-renewal`, or `individualization-request`.</haxe_doc>
		</messageType>
		<message public="1" set="null">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns an `ArrayBuffer` with a message from the content decryption module. Messages vary by key system.</haxe_doc>
		</message>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.eme.MediaKeyMessageEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MediaKeyMessageEvent` interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session.

	Documentation [MediaKeyMessageEvent](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeyMessageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.eme.MediaKeyMessageEventInit" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyMessageEventInit.hx"><a>
	<messageType><x path="js.html.eme.MediaKeyMessageType"/></messageType>
	<message><c path="js.lib.ArrayBuffer"/></message>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.eme.MediaKeyMessageType" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyMessageType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeyMessageType.MediaKeyMessageType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyMessageType.hx" private="1" module="js.html.eme.MediaKeyMessageType" extern="1" final="1">
	<LICENSE_REQUEST public="1" get="inline" set="null" expr="cast &quot;license-request&quot;" line="28" static="1">
		<x path="js.html.eme.MediaKeyMessageType"/>
		<meta>
			<m n=":value"><e>cast "license-request"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LICENSE_REQUEST>
	<LICENSE_RENEWAL public="1" get="inline" set="null" expr="cast &quot;license-renewal&quot;" line="29" static="1">
		<x path="js.html.eme.MediaKeyMessageType"/>
		<meta>
			<m n=":value"><e>cast "license-renewal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LICENSE_RENEWAL>
	<LICENSE_RELEASE public="1" get="inline" set="null" expr="cast &quot;license-release&quot;" line="30" static="1">
		<x path="js.html.eme.MediaKeyMessageType"/>
		<meta>
			<m n=":value"><e>cast "license-release"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LICENSE_RELEASE>
	<INDIVIDUALIZATION_REQUEST public="1" get="inline" set="null" expr="cast &quot;individualization-request&quot;" line="31" static="1">
		<x path="js.html.eme.MediaKeyMessageType"/>
		<meta>
			<m n=":value"><e>cast "individualization-request"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INDIVIDUALIZATION_REQUEST>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.eme._MediaKeyMessageType.MediaKeyMessageType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyMessageType.hx" private="1" module="js.html.eme.MediaKeyMessageType" extern="1" final="1">
		<LICENSE_REQUEST public="1" get="inline" set="null" expr="cast &quot;license-request&quot;" line="28" static="1">
			<x path="js.html.eme.MediaKeyMessageType"/>
			<meta>
				<m n=":value"><e>cast "license-request"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LICENSE_REQUEST>
		<LICENSE_RENEWAL public="1" get="inline" set="null" expr="cast &quot;license-renewal&quot;" line="29" static="1">
			<x path="js.html.eme.MediaKeyMessageType"/>
			<meta>
				<m n=":value"><e>cast "license-renewal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LICENSE_RENEWAL>
		<LICENSE_RELEASE public="1" get="inline" set="null" expr="cast &quot;license-release&quot;" line="30" static="1">
			<x path="js.html.eme.MediaKeyMessageType"/>
			<meta>
				<m n=":value"><e>cast "license-release"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LICENSE_RELEASE>
		<INDIVIDUALIZATION_REQUEST public="1" get="inline" set="null" expr="cast &quot;individualization-request&quot;" line="31" static="1">
			<x path="js.html.eme.MediaKeyMessageType"/>
			<meta>
				<m n=":value"><e>cast "individualization-request"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INDIVIDUALIZATION_REQUEST>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.eme.MediaKeyNeededEventInit" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyNeededEventInit.hx"><a>
	<initDataType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</initDataType>
	<initData>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</initData>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.eme.MediaKeySession" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeySession.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<error public="1" set="null"><c path="js.html.eme.MediaKeyError"/></error>
		<sessionId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.</haxe_doc>
		</sessionId>
		<expiration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time after which the keys in the current session can no longer be used to decrypt media data, or `NaN` if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.</haxe_doc>
		</expiration>
		<closed public="1" set="null">
			<c path="js.lib.Promise"><x path="Void"/></c>
			<haxe_doc>Returns a `Promise` signaling when a `MediaKeySession` closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data. </haxe_doc>
		</closed>
		<keyStatuses public="1" set="null">
			<c path="js.html.eme.MediaKeyStatusMap"/>
			<haxe_doc>Contains a reference to a read-only `MediaKeyStatusMap` of the current session's keys and their statuses.</haxe_doc>
		</keyStatuses>
		<onkeystatuseschange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when there has been a change in the keys in a session or their statuses.</haxe_doc>
		</onkeystatuseschange>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the content decryption module has generated a message for the session.</haxe_doc>
		</onmessage>
		<generateRequest public="1" set="method">
			<f a="initDataType:initData">
				<c path="String"/>
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
			<overloads><generateRequest public="1" set="method">
	<f a="initDataType:initData">
		<c path="String"/>
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
</generateRequest></overloads>
		</generateRequest>
		<load public="1" set="method">
			<f a="sessionId">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to a boolean value after loading data for a specified session object. </haxe_doc>
		</load>
		<update public="1" set="method">
			<f a="response">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
			<overloads><update public="1" set="method">
	<f a="response">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
</update></overloads>
		</update>
		<close public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.</haxe_doc>
		</close>
		<remove public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after removing any session data associated with the current object.</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[The `MediaKeySession` interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).

	Documentation [MediaKeySession](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySession"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeySessionType" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeySessionType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeySessionType.MediaKeySessionType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeySessionType.hx" private="1" module="js.html.eme.MediaKeySessionType" extern="1" final="1">
	<TEMPORARY public="1" get="inline" set="null" expr="cast &quot;temporary&quot;" line="28" static="1">
		<x path="js.html.eme.MediaKeySessionType"/>
		<meta>
			<m n=":value"><e>cast "temporary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEMPORARY>
	<PERSISTENT_LICENSE public="1" get="inline" set="null" expr="cast &quot;persistent-license&quot;" line="29" static="1">
		<x path="js.html.eme.MediaKeySessionType"/>
		<meta>
			<m n=":value"><e>cast "persistent-license"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PERSISTENT_LICENSE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.eme._MediaKeySessionType.MediaKeySessionType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeySessionType.hx" private="1" module="js.html.eme.MediaKeySessionType" extern="1" final="1">
		<TEMPORARY public="1" get="inline" set="null" expr="cast &quot;temporary&quot;" line="28" static="1">
			<x path="js.html.eme.MediaKeySessionType"/>
			<meta>
				<m n=":value"><e>cast "temporary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEMPORARY>
		<PERSISTENT_LICENSE public="1" get="inline" set="null" expr="cast &quot;persistent-license&quot;" line="29" static="1">
			<x path="js.html.eme.MediaKeySessionType"/>
			<meta>
				<m n=":value"><e>cast "persistent-license"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PERSISTENT_LICENSE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.eme.MediaKeyStatusMap" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeyStatusMap.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of key/value pars in the status map.</haxe_doc>
		</size>
		<has public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
			<overloads><has public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
</has></overloads>
		</has>
		<get public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<d/>
			</f>
			<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
			<overloads><get public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<d/>
	</f>
	<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
</get></overloads>
		</get>
		<entries public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing an array of `[key, value]` for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing keys for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing values for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `callback` once for each key-value pair in the status map, in insertion order. If `argument` is present it will be passed to the callback.
		@throws DOMError</haxe_doc>
		</forEach>
		<haxe_doc><![CDATA[The `MediaKeyStatusMap` interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.

	Documentation [MediaKeyStatusMap](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeyStatusMap"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySystemAccess" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeySystemAccess.hx" extern="1">
		<keySystem public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` identifying the key system being used.</haxe_doc>
		</keySystem>
		<getConfiguration public="1" set="method">
			<f a=""><t path="js.html.eme.MediaKeySystemConfiguration"/></f>
			<haxe_doc>Returns a `MediaKeySystemConfiguration` object with the supported combination of configuration options.</haxe_doc>
		</getConfiguration>
		<createMediaKeys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.eme.MediaKeys"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to a new `MediaKeys` object.</haxe_doc>
		</createMediaKeys>
		<haxe_doc><![CDATA[The `MediaKeySystemAccess` interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the `Navigator.requestMediaKeySystemAccess` method.

	Documentation [MediaKeySystemAccess](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySystemAccess"</e></m></meta>
	</class>
	<typedef path="js.html.eme.MediaKeySystemConfiguration" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeySystemConfiguration.hx">
		<a>
			<videoCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported video type and capability pairs.</haxe_doc>
			</videoCapabilities>
			<sessionTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</sessionTypes>
			<persistentState>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether the ability to persist state is required.</haxe_doc>
			</persistentState>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</label>
			<initDataTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.</haxe_doc>
			</initDataTypes>
			<distinctiveIdentifier>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether a persistent distinctive identifier is required.</haxe_doc>
			</distinctiveIdentifier>
			<audioCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported audio type and capability pairs.</haxe_doc>
			</audioCapabilities>
		</a>
		<haxe_doc><![CDATA[The `MediaKeySystemConfiguration` interface Encrypted Media Extensions API provides configuration information about the media key system.

	Documentation [MediaKeySystemConfiguration](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.eme.MediaKeySystemMediaCapability" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeySystemMediaCapability.hx"><a>
	<robustness>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</robustness>
	<contentType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contentType>
</a></typedef>
	<class path="js.html.eme.MediaKeys" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeys.hx" extern="1">
		<keySystem public="1" set="null"><c path="String"/></keySystem>
		<createSession public="1" set="method">
			<f a="?sessionType" v="TEMPORARY">
				<x path="js.html.eme.MediaKeySessionType"/>
				<c path="js.html.eme.MediaKeySession"/>
			</f>
			<meta><m n=":value"><e>{ sessionType : TEMPORARY }</e></m></meta>
			<haxe_doc>Returns a new `MediaKeySession` object, which represents a context for message exchange with a content decryption module (CDM).
		@throws DOMError</haxe_doc>
		</createSession>
		<setServerCertificate public="1" set="method">
			<f a="serverCertificate">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
			<overloads><setServerCertificate public="1" set="method">
	<f a="serverCertificate">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
</setServerCertificate></overloads>
		</setServerCertificate>
		<haxe_doc><![CDATA[The `MediaKeys` interface of EncryptedMediaExtensions API the represents a set of keys that an associated `HTMLMediaElement` can use for decryption of media data during playback.

	Documentation [MediaKeys](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeys"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeysRequirement" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeysRequirement.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeysRequirement.MediaKeysRequirement_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeysRequirement.hx" private="1" module="js.html.eme.MediaKeysRequirement" extern="1" final="1">
	<REQUIRED public="1" get="inline" set="null" expr="cast &quot;required&quot;" line="28" static="1">
		<x path="js.html.eme.MediaKeysRequirement"/>
		<meta>
			<m n=":value"><e>cast "required"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REQUIRED>
	<OPTIONAL public="1" get="inline" set="null" expr="cast &quot;optional&quot;" line="29" static="1">
		<x path="js.html.eme.MediaKeysRequirement"/>
		<meta>
			<m n=":value"><e>cast "optional"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPTIONAL>
	<NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;not-allowed&quot;" line="30" static="1">
		<x path="js.html.eme.MediaKeysRequirement"/>
		<meta>
			<m n=":value"><e>cast "not-allowed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOT_ALLOWED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.eme._MediaKeysRequirement.MediaKeysRequirement_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/eme/MediaKeysRequirement.hx" private="1" module="js.html.eme.MediaKeysRequirement" extern="1" final="1">
		<REQUIRED public="1" get="inline" set="null" expr="cast &quot;required&quot;" line="28" static="1">
			<x path="js.html.eme.MediaKeysRequirement"/>
			<meta>
				<m n=":value"><e>cast "required"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REQUIRED>
		<OPTIONAL public="1" get="inline" set="null" expr="cast &quot;optional&quot;" line="29" static="1">
			<x path="js.html.eme.MediaKeysRequirement"/>
			<meta>
				<m n=":value"><e>cast "optional"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPTIONAL>
		<NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;not-allowed&quot;" line="30" static="1">
			<x path="js.html.eme.MediaKeysRequirement"/>
			<meta>
				<m n=":value"><e>cast "not-allowed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOT_ALLOWED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.idb.Cursor" params="" file="/home/vsts/work/1/s/std/js/html/idb/Cursor.hx" extern="1">
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<c path="js.html.idb.Index"/>
			</x>
			<haxe_doc>Returns the `IDBObjectStore` or `IDBIndex` that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.</haxe_doc>
		</source>
		<direction public="1" set="null">
			<x path="js.html.idb.CursorDirection"/>
			<haxe_doc>Returns the direction of traversal of the cursor. See Constants for possible values.</haxe_doc>
		</direction>
		<key public="1" set="null">
			<d/>
			<haxe_doc>Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to `undefined`. The cursor's key can be any data type.</haxe_doc>
		</key>
		<primaryKey public="1" set="null">
			<d/>
			<haxe_doc>Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to `undefined`. The cursor's primary key can be any data type.</haxe_doc>
		</primaryKey>
		<update public="1" set="method">
			<f a="value">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records.
		@throws DOMError</haxe_doc>
		</update>
		<advance public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the number times a cursor should move its position forward.
		@throws DOMError</haxe_doc>
		</advance>
		<continue_ public="1" set="method">
			<f a="?key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"continue"</e></m></meta>
			<haxe_doc>Advances the cursor to the next position along its direction, to the item whose key matches the optional `key` parameter.
		@throws DOMError</haxe_doc>
		</continue_>
		<continuePrimaryKey public="1" set="method">
			<f a="key:primaryKey">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the cursor to the given index key and primary key given as arguments.
		@throws DOMError</haxe_doc>
		</continuePrimaryKey>
		<delete public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records.
		@throws DOMError</haxe_doc>
		</delete>
		<haxe_doc><![CDATA[The `IDBCursor` interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.

	Documentation [IDBCursor](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursor"</e></m></meta>
	</class>
	<abstract path="js.html.idb.CursorDirection" params="" file="/home/vsts/work/1/s/std/js/html/idb/CursorDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" extern="1" final="1">
	<NEXT public="1" get="inline" set="null" expr="cast &quot;next&quot;" line="28" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "next"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEXT>
	<NEXTUNIQUE public="1" get="inline" set="null" expr="cast &quot;nextunique&quot;" line="29" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "nextunique"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEXTUNIQUE>
	<PREV public="1" get="inline" set="null" expr="cast &quot;prev&quot;" line="30" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "prev"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PREV>
	<PREVUNIQUE public="1" get="inline" set="null" expr="cast &quot;prevunique&quot;" line="31" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "prevunique"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PREVUNIQUE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" extern="1" final="1">
		<NEXT public="1" get="inline" set="null" expr="cast &quot;next&quot;" line="28" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "next"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEXT>
		<NEXTUNIQUE public="1" get="inline" set="null" expr="cast &quot;nextunique&quot;" line="29" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "nextunique"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEXTUNIQUE>
		<PREV public="1" get="inline" set="null" expr="cast &quot;prev&quot;" line="30" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "prev"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PREV>
		<PREVUNIQUE public="1" get="inline" set="null" expr="cast &quot;prevunique&quot;" line="31" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "prevunique"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PREVUNIQUE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.idb.CursorWithValue" params="" file="/home/vsts/work/1/s/std/js/html/idb/CursorWithValue.hx" extern="1">
		<extends path="js.html.idb.Cursor"/>
		<value public="1" set="null">
			<d/>
			<haxe_doc>Returns the value of the current cursor.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[Documentation [IDBCursorWithValue](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursorWithValue"</e></m></meta>
	</class>
	<class path="js.html.idb.Database" params="" file="/home/vsts/work/1/s/std/js/html/idb/Database.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` that contains the name of the connected database.</haxe_doc>
		</name>
		<version public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.</haxe_doc>
		</version>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A `DOMStringList` that contains a list of the names of the object stores currently in the connected database.</haxe_doc>
		</objectStoreNames>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access of the database is aborted.</haxe_doc>
		</onabort>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when the `close` event occurs; this happens when the database is unexpectedly closed, such as during application shutdown.</haxe_doc>
		</onclose>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access to the database fails.</haxe_doc>
		</onerror>
		<onversionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when a database structure change (`IDBOpenDBRequest.onupgradeneeded` event or` ``IDBFactory.deleteDatabase()` was requested elsewhere (most probably in another window/tab on the same computer). This is different from the version change transaction (see `IDBVersionChangeEvent`), but it is related.</haxe_doc>
		</onversionchange>
		<createObjectStore public="1" set="method">
			<f a="name:?optionalParameters">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.ObjectStoreParameters"/></x>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>Creates and returns a new object store or index.
		@throws DOMError</haxe_doc>
		</createObjectStore>
		<deleteObjectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the object store with the given name in the connected database, along with any indexes that reference it.
		@throws DOMError</haxe_doc>
		</deleteObjectStore>
		<transaction public="1" set="method">
			<f a="storeNames:?mode" v=":READONLY">
				<c path="String"/>
				<x path="js.html.idb.TransactionMode"/>
				<c path="js.html.idb.Transaction"/>
			</f>
			<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
			<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
			<overloads><transaction public="1" set="method">
	<f a="storeNames:?mode" v=":READONLY">
		<c path="Array"><c path="String"/></c>
		<x path="js.html.idb.TransactionMode"/>
		<c path="js.html.idb.Transaction"/>
	</f>
	<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
	<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
</transaction></overloads>
		</transaction>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Returns immediately and closes the connection to a database in a separate thread.</haxe_doc>
		</close>
		<createMutableFile public="1" set="method">
			<f a="name:?type">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMutableFile>
		<haxe_doc><![CDATA[The `IDBDatabase` interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.

	Documentation [IDBDatabase](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBDatabase"</e></m></meta>
	</class>
	<class path="js.html.idb.Factory" params="" file="/home/vsts/work/1/s/std/js/html/idb/Factory.hx" extern="1">
		<open public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="name:version">
		<c path="String"/>
		<x path="Int"/>
		<c path="js.html.idb.OpenDBRequest"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<deleteDatabase public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteDatabase>
		<cmp public="1" set="method">
			<f a="first:second">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cmp>
		<haxe_doc><![CDATA[In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBFactory](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBFactory"</e></m></meta>
	</class>
	<class path="js.html.idb.FileHandle" params="" file="/home/vsts/work/1/s/std/js/html/idb/FileHandle.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mutableFile public="1" set="null"><c path="js.html.idb.MutableFile"/></mutableFile>
		<fileHandle public="1" set="null"><c path="js.html.idb.MutableFile"/></fileHandle>
		<mode public="1" set="null"><x path="js.html.FileMode"/></mode>
		<active public="1" set="null"><x path="Bool"/></active>
		<location public="1"><x path="Int"/></location>
		<oncomplete public="1"><x path="haxe.Function"/></oncomplete>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<getMetadata public="1" set="method">
			<f a="?parameters">
				<x path="Null"><t path="js.html.idb.FileMetadataParameters"/></x>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getMetadata>
		<readAsArrayBuffer public="1" set="method">
			<f a="size">
				<x path="Int"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsArrayBuffer>
		<readAsText public="1" set="method">
			<f a="size:?encoding">
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsText>
		<write public="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<write public="1" set="method">
					<f a="value">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.html.idb.FileRequest"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="value">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.html.idb.FileRequest"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</write>
				<write public="1" set="method">
					<f a="value">
						<c path="js.html.Blob"/>
						<c path="js.html.idb.FileRequest"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</write>
			</overloads>
		</write>
		<append public="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<append public="1" set="method">
					<f a="value">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.html.idb.FileRequest"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</append>
				<append public="1" set="method">
					<f a="value">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.html.idb.FileRequest"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</append>
				<append public="1" set="method">
					<f a="value">
						<c path="js.html.Blob"/>
						<c path="js.html.idb.FileRequest"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</append>
			</overloads>
		</append>
		<truncate public="1" set="method">
			<f a="?size">
				<x path="Int"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</truncate>
		<flush public="1" set="method">
			<f a=""><c path="js.html.idb.FileRequest"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</flush>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<meta><m n=":native"><e>"IDBFileHandle"</e></m></meta>
	</class>
	<typedef path="js.html.idb.FileMetadataParameters" params="" file="/home/vsts/work/1/s/std/js/html/idb/FileMetadataParameters.hx"><a>
	<size>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</size>
	<lastModified>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<class path="js.html.idb.FileRequest" params="" file="/home/vsts/work/1/s/std/js/html/idb/FileRequest.hx" extern="1">
		<extends path="js.html.DOMRequest"/>
		<fileHandle public="1" set="null"><c path="js.html.idb.FileHandle"/></fileHandle>
		<lockedFile public="1" set="null"><c path="js.html.idb.FileHandle"/></lockedFile>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<meta><m n=":native"><e>"IDBFileRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.Index" params="" file="/home/vsts/work/1/s/std/js/html/idb/Index.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this index.</haxe_doc>
		</name>
		<objectStore public="1" set="null">
			<c path="js.html.idb.ObjectStore"/>
			<haxe_doc>The name of the object store referenced by this index.</haxe_doc>
		</objectStore>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this index. If null, this index is not auto-populated.</haxe_doc>
		</keyPath>
		<multiEntry public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Affects how the index behaves when the result of evaluating the index's key path yields an array. If `true`, there is one record in the index for each item in an array of keys. If `false`, then there is one record for each key that is an array.</haxe_doc>
		</multiEntry>
		<unique public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>If `true`, this index does not allow duplicate values for a key.</haxe_doc>
		</unique>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range.
		@throws DOMError</haxe_doc>
		</openCursor>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the given key or the primary key, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getKey>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and in a separate thread, returns the number of records within a key range.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<haxe_doc><![CDATA[`IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.

	Documentation [IDBIndex](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBIndex"</e></m></meta>
	</class>
	<typedef path="js.html.idb.IndexParameters" params="" file="/home/vsts/work/1/s/std/js/html/idb/IndexParameters.hx"><a>
	<unique>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unique>
	<multiEntry>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</multiEntry>
	<locale>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</locale>
</a></typedef>
	<class path="js.html.idb.KeyRange" params="" file="/home/vsts/work/1/s/std/js/html/idb/KeyRange.hx" extern="1">
		<only public="1" set="method" static="1">
			<f a="value">
				<d/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<haxe_doc>Creates a new key range containing a single value.
		@throws DOMError</haxe_doc>
		</only>
		<lowerBound public="1" set="method" static="1">
			<f a="lower:?open" v=":false">
				<d/>
				<x path="Bool"/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<meta><m n=":value"><e>{ open : false }</e></m></meta>
			<haxe_doc>Creates a new key range with only a lower bound.
		@throws DOMError</haxe_doc>
		</lowerBound>
		<upperBound public="1" set="method" static="1">
			<f a="upper:?open" v=":false">
				<d/>
				<x path="Bool"/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<meta><m n=":value"><e>{ open : false }</e></m></meta>
			<haxe_doc>Creates a new upper-bound key range.
		@throws DOMError</haxe_doc>
		</upperBound>
		<bound public="1" set="method" static="1">
			<f a="lower:upper:?lowerOpen:?upperOpen" v="::false:false">
				<d/>
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<meta><m n=":value"><e>{ upperOpen : false, lowerOpen : false }</e></m></meta>
			<haxe_doc>Creates a new key range with upper and lower bounds.
		@throws DOMError</haxe_doc>
		</bound>
		<lower public="1" set="null">
			<d/>
			<haxe_doc>Lower bound of the key range.</haxe_doc>
		</lower>
		<upper public="1" set="null">
			<d/>
			<haxe_doc>Upper bound of the key range.</haxe_doc>
		</upper>
		<lowerOpen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if the lower-bound value is included in the key range.</haxe_doc>
		</lowerOpen>
		<upperOpen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if the upper-bound value is included in the key range.</haxe_doc>
		</upperOpen>
		<includes public="1" set="method">
			<f a="key">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean indicating whether a specified key is inside the key range.
		@throws DOMError</haxe_doc>
		</includes>
		<haxe_doc><![CDATA[A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:

	Documentation [IDBKeyRange](https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBKeyRange"</e></m></meta>
	</class>
	<class path="js.html.idb.MutableFile" params="" file="/home/vsts/work/1/s/std/js/html/idb/MutableFile.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null"><c path="String"/></name>
		<type public="1" set="null"><c path="String"/></type>
		<database public="1" set="null"><c path="js.html.idb.Database"/></database>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<open public="1" set="method">
			<f a="?mode" v="READONLY">
				<x path="js.html.FileMode"/>
				<c path="js.html.idb.FileHandle"/>
			</f>
			<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</open>
		<getFile public="1" set="method">
			<f a=""><c path="js.html.DOMRequest"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFile>
		<haxe_doc><![CDATA[The `IDBMutableFile` interface provides access in read or write mode to a file, dealing with all the necessary locks.

	Documentation [IDBMutableFile](https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBMutableFile"</e></m></meta>
	</class>
	<class path="js.html.idb.ObjectStore" params="" file="/home/vsts/work/1/s/std/js/html/idb/ObjectStore.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this object store.</haxe_doc>
		</name>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this object store. If this attribute is `null`, the application must provide a key for each modification operation.</haxe_doc>
		</keyPath>
		<indexNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A list of the names of indexes on objects in this object store.</haxe_doc>
		</indexNames>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The `IDBTransaction` object to which this object store belongs.</haxe_doc>
		</transaction>
		<autoIncrement public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The value of the auto increment flag for this object store.</haxe_doc>
		</autoIncrement>
		<put public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is `readwrite`.
		@throws DOMError</haxe_doc>
		</put>
		<add public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for adding new records to an object store.
		@throws DOMError</haxe_doc>
		</add>
		<delete public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>returns an `IDBRequest` object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.
		@throws DOMError</haxe_doc>
		</getKey>
		<clear public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Creates and immediately returns an `IDBRequest` object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.
		@throws DOMError</haxe_doc>
		</clear>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursorWithValue` object. Used for iterating through an object store by primary key with a cursor.
		@throws DOMError</haxe_doc>
		</openCursor>
		<createIndex public="1" set="method">
			<f a="name:keyPath:?optionalParameters">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
			<overloads><createIndex public="1" set="method">
	<f a="name:keyPath:?optionalParameters">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
		<c path="js.html.idb.Index"/>
	</f>
	<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
</createIndex></overloads>
		</createIndex>
		<index public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.
		@throws DOMError</haxe_doc>
		</index>
		<deleteIndex public="1" set="method">
			<f a="indexName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the specified index in the connected database, used during a version upgrade.
		@throws DOMError</haxe_doc>
		</deleteIndex>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the total number of records that match the provided key or `IDBKeyRange`. If no arguments are provided, it returns the total number of records in the store.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursor`. Used for iterating through an object store with a key.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<haxe_doc><![CDATA[This example shows a variety of different uses of object stores, from updating the data structure with `IDBObjectStore.createIndex` inside an `onupgradeneeded` function, to adding a new item to our object store with `IDBObjectStore.add`. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBObjectStore](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBObjectStore"</e></m></meta>
	</class>
	<typedef path="js.html.idb.ObjectStoreParameters" params="" file="/home/vsts/work/1/s/std/js/html/idb/ObjectStoreParameters.hx"><a>
	<keyPath>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</keyPath>
	<autoIncrement>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</autoIncrement>
</a></typedef>
	<typedef path="js.html.idb.OpenDBOptions" params="" file="/home/vsts/work/1/s/std/js/html/idb/OpenDBOptions.hx"><a>
	<version>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</version>
	<storage>
		<x path="Null"><x path="js.html.StorageType"/></x>
		<meta><m n=":optional"/></meta>
	</storage>
</a></typedef>
	<class path="js.html.idb.Request" params="" file="/home/vsts/work/1/s/std/js/html/idb/Request.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<result public="1" set="null">
			<d/>
			<haxe_doc>Returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` in the event of an unsuccessful request, indicating what went wrong.</haxe_doc>
		</error>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.idb.Index"/>
					<c path="js.html.idb.Cursor"/>
				</x>
			</x>
			<haxe_doc>The source of the request, such as an `IDBIndex` or an `IDBObjectStore`. If no source exists (such as when calling `IDBFactory.open`), it returns null.</haxe_doc>
		</source>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The transaction for the request. This property can be null for certain requests, for example those returned from `IDBFactory.open` unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).</haxe_doc>
		</transaction>
		<readyState public="1" set="null">
			<x path="js.html.idb.RequestReadyState"/>
			<haxe_doc>The state of the request. Every request starts in the `pending` state. The state changes to `done` when the request completes successfully or when an error occurs.</haxe_doc>
		</readyState>
		<onsuccess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the success event.</haxe_doc>
		</onsuccess>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the error event.</haxe_doc>
		</onerror>
		<haxe_doc><![CDATA[The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the `IDBRequest` instance.

	Documentation [IDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.OpenDBRequest" params="" file="/home/vsts/work/1/s/std/js/html/idb/OpenDBRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the blocked event. This event is triggered when the `upgradeneeded` event should be triggered because of a version change but the database is still in use (i.e. not closed) somewhere, even after the `versionchange` event was sent.</haxe_doc>
		</onblocked>
		<onupgradeneeded public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `upgradeneeded` event, fired when a database of a bigger version number than the existing stored database is loaded.</haxe_doc>
		</onupgradeneeded>
		<haxe_doc><![CDATA[Also inherits methods from its parents `IDBRequest` and `EventTarget`.

	Documentation [IDBOpenDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBOpenDBRequest"</e></m></meta>
	</class>
	<abstract path="js.html.idb.RequestReadyState" params="" file="/home/vsts/work/1/s/std/js/html/idb/RequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" extern="1" final="1">
	<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="28" static="1">
		<x path="js.html.idb.RequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENDING>
	<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="29" static="1">
		<x path="js.html.idb.RequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "done"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DONE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" extern="1" final="1">
		<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="28" static="1">
			<x path="js.html.idb.RequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENDING>
		<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="29" static="1">
			<x path="js.html.idb.RequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "done"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DONE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.idb.Transaction" params="" file="/home/vsts/work/1/s/std/js/html/idb/Transaction.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1" set="null">
			<x path="js.html.idb.TransactionMode"/>
			<haxe_doc>The mode for isolating access to data in the object stores that are in the scope of the transaction. For possible values, see the Constants section below. The default value is `readonly`.</haxe_doc>
		</mode>
		<db public="1" set="null">
			<c path="js.html.idb.Database"/>
			<haxe_doc>The database connection with which this transaction is associated.</haxe_doc>
		</db>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` indicating the type of error that occured when there is an unsuccessful transaction. This property is `null` if the transaction is not finished, is finished and successfully committed, or was aborted with `IDBTransaction.abort` function.</haxe_doc>
		</error>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `abort` event, fired when the transaction is aborted. This can happen due to:
		 
		  bad requests, e.g. trying to add() the same key twice, or put() with the same index key with a uniqueness constraint and there is no error handler on the request to call preventDefault() on the event,
		  an explicit abort() call from script
		  uncaught exception in request's success/error handler,
		  an I/O error (actual failure to write to disk, e.g. disk detached, or other OS/hardware failure), or
		  quota exceeded.</haxe_doc>
		</onabort>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `complete` event, thrown when the transaction completes successfully.</haxe_doc>
		</oncomplete>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `error` event, thrown when the transaction fails to complete.</haxe_doc>
		</onerror>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a `DOMStringList` of the names of `IDBObjectStore` objects.</haxe_doc>
		</objectStoreNames>
		<objectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</objectStore>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<haxe_doc><![CDATA[Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a `readwrite` transaction `IDBTransaction.oncomplete` was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the `complete` event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The `complete` event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.

	Documentation [IDBTransaction](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBTransaction"</e></m></meta>
	</class>
	<abstract path="js.html.idb.TransactionMode" params="" file="/home/vsts/work/1/s/std/js/html/idb/TransactionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" extern="1" final="1">
	<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="28" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "readonly"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READONLY>
	<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="29" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "readwrite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READWRITE>
	<READWRITEFLUSH public="1" get="inline" set="null" expr="cast &quot;readwriteflush&quot;" line="30" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "readwriteflush"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READWRITEFLUSH>
	<CLEANUP public="1" get="inline" set="null" expr="cast &quot;cleanup&quot;" line="31" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "cleanup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLEANUP>
	<VERSIONCHANGE public="1" get="inline" set="null" expr="cast &quot;versionchange&quot;" line="32" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "versionchange"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VERSIONCHANGE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" extern="1" final="1">
		<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="28" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "readonly"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READONLY>
		<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="29" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "readwrite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READWRITE>
		<READWRITEFLUSH public="1" get="inline" set="null" expr="cast &quot;readwriteflush&quot;" line="30" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "readwriteflush"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READWRITEFLUSH>
		<CLEANUP public="1" get="inline" set="null" expr="cast &quot;cleanup&quot;" line="31" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "cleanup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLEANUP>
		<VERSIONCHANGE public="1" get="inline" set="null" expr="cast &quot;versionchange&quot;" line="32" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "versionchange"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VERSIONCHANGE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.idb.VersionChangeEvent" params="" file="/home/vsts/work/1/s/std/js/html/idb/VersionChangeEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<oldVersion public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the old version of the database.</haxe_doc>
		</oldVersion>
		<newVersion public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the new version of the database.</haxe_doc>
		</newVersion>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.VersionChangeEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `IDBVersionChangeEvent` interface of the IndexedDB API indicates that the version of the database has changed, as the result of an `IDBOpenDBRequest.onupgradeneeded` event handler function.

	Documentation [IDBVersionChangeEvent](https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBVersionChangeEvent"</e></m></meta>
	</class>
	<typedef path="js.html.idb.VersionChangeEventInit" params="" file="/home/vsts/work/1/s/std/js/html/idb/VersionChangeEventInit.hx"><a>
	<oldVersion>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</oldVersion>
	<newVersion>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</newVersion>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.midi.MIDIAccess" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIAccess.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<inputs public="1" set="null">
			<c path="js.html.midi.MIDIInputMap"/>
			<haxe_doc>Returns an instance of `MIDIInputMap` which provides access to any available MIDI input ports.</haxe_doc>
		</inputs>
		<outputs public="1" set="null">
			<c path="js.html.midi.MIDIOutputMap"/>
			<haxe_doc>Returns an instance of `MIDIOutputMap` which provides access to any available MIDI output ports.</haxe_doc>
		</outputs>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Called whenever a new MIDI port is added or an existing port changes state.</haxe_doc>
		</onstatechange>
		<sysexEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.</haxe_doc>
		</sysexEnabled>
		<haxe_doc><![CDATA[The `MIDIAccess` interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.

	Documentation [MIDIAccess](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIAccess"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIConnectionEvent" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIConnectionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<port public="1" set="null">
			<c path="js.html.midi.MIDIPort"/>
			<haxe_doc>Returns a reference to a `MIDIPort` instance for a port that has been connected or disconnected."</haxe_doc>
		</port>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.midi.MIDIConnectionEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MIDIConnectionEvent` interface of the Web MIDI API is the event passed to the `onstatechange` event of the `MIDIAccess` interface and the `onstatechange` event of the `MIDIPorts` interface. This occurs any time a new port becomes available, or when a previously available port becomes unavailable. For example, this event is fired whenever a MIDI device is either plugged in to or unplugged from a computer.

	Documentation [MIDIConnectionEvent](https://developer.mozilla.org/en-US/docs/Web/API/MIDIConnectionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIConnectionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIConnectionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIConnectionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.midi.MIDIConnectionEventInit" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIConnectionEventInit.hx"><a>
	<port>
		<x path="Null"><c path="js.html.midi.MIDIPort"/></x>
		<meta><m n=":optional"/></meta>
	</port>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.midi.MIDIPort" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPort.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1" set="null"><c path="String"/></id>
		<manufacturer public="1" set="null"><c path="String"/></manufacturer>
		<name public="1" set="null"><c path="String"/></name>
		<version public="1" set="null"><c path="String"/></version>
		<type public="1" set="null"><x path="js.html.midi.MIDIPortType"/></type>
		<state public="1" set="null"><x path="js.html.midi.MIDIPortDeviceState"/></state>
		<connection public="1" set="null"><x path="js.html.midi.MIDIPortConnectionState"/></connection>
		<onstatechange public="1"><x path="haxe.Function"/></onstatechange>
		<open public="1" set="method"><f a=""><c path="js.lib.Promise"><c path="js.html.midi.MIDIPort"/></c></f></open>
		<close public="1" set="method"><f a=""><c path="js.lib.Promise"><c path="js.html.midi.MIDIPort"/></c></f></close>
		<meta><m n=":native"><e>"MIDIPort"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIInput" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIInput.hx" extern="1">
		<extends path="js.html.midi.MIDIPort"/>
		<onmidimessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>When the current port receives a `MIDIMessage` it triggers a call to this event handler.</haxe_doc>
		</onmidimessage>
		<haxe_doc><![CDATA[Use the `MIDIInput` interface of the Web MIDI API to access and pass messages to a MIDI input port.

	Documentation [MIDIInput](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIInput"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIInputMap" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIInputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIInputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIInputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIInputMap"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIMessageEvent" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIMessageEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<data public="1" set="null"><c path="js.lib.Uint8Array"/></data>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.midi.MIDIMessageEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"MIDIMessageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.midi.MIDIMessageEventInit" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIMessageEventInit.hx"><a>
	<data>
		<x path="Null"><c path="js.lib.Uint8Array"/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.midi.MIDIOptions" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIOptions.hx"><a>
	<sysex>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</sysex>
	<software>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</software>
</a></typedef>
	<class path="js.html.midi.MIDIOutput" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIOutput.hx" extern="1">
		<extends path="js.html.midi.MIDIPort"/>
		<send public="1" set="method">
			<f a="data:?timestamp">
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</send>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<meta><m n=":native"><e>"MIDIOutput"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIOutputMap" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIOutputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIOutputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIOutputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIOutputMap"</e></m></meta>
	</class>
	<abstract path="js.html.midi.MIDIPortConnectionState" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortConnectionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.midi._MIDIPortConnectionState.MIDIPortConnectionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortConnectionState.hx" private="1" module="js.html.midi.MIDIPortConnectionState" extern="1" final="1">
	<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="28" static="1">
		<x path="js.html.midi.MIDIPortConnectionState"/>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="29" static="1">
		<x path="js.html.midi.MIDIPortConnectionState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="30" static="1">
		<x path="js.html.midi.MIDIPortConnectionState"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENDING>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.midi._MIDIPortConnectionState.MIDIPortConnectionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortConnectionState.hx" private="1" module="js.html.midi.MIDIPortConnectionState" extern="1" final="1">
		<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="28" static="1">
			<x path="js.html.midi.MIDIPortConnectionState"/>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="29" static="1">
			<x path="js.html.midi.MIDIPortConnectionState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="30" static="1">
			<x path="js.html.midi.MIDIPortConnectionState"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENDING>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.midi.MIDIPortDeviceState" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortDeviceState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.midi._MIDIPortDeviceState.MIDIPortDeviceState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortDeviceState.hx" private="1" module="js.html.midi.MIDIPortDeviceState" extern="1" final="1">
	<DISCONNECTED public="1" get="inline" set="null" expr="cast &quot;disconnected&quot;" line="28" static="1">
		<x path="js.html.midi.MIDIPortDeviceState"/>
		<meta>
			<m n=":value"><e>cast "disconnected"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISCONNECTED>
	<CONNECTED public="1" get="inline" set="null" expr="cast &quot;connected&quot;" line="29" static="1">
		<x path="js.html.midi.MIDIPortDeviceState"/>
		<meta>
			<m n=":value"><e>cast "connected"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONNECTED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.midi._MIDIPortDeviceState.MIDIPortDeviceState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortDeviceState.hx" private="1" module="js.html.midi.MIDIPortDeviceState" extern="1" final="1">
		<DISCONNECTED public="1" get="inline" set="null" expr="cast &quot;disconnected&quot;" line="28" static="1">
			<x path="js.html.midi.MIDIPortDeviceState"/>
			<meta>
				<m n=":value"><e>cast "disconnected"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISCONNECTED>
		<CONNECTED public="1" get="inline" set="null" expr="cast &quot;connected&quot;" line="29" static="1">
			<x path="js.html.midi.MIDIPortDeviceState"/>
			<meta>
				<m n=":value"><e>cast "connected"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONNECTED>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.midi.MIDIPortType" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.midi._MIDIPortType.MIDIPortType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortType.hx" private="1" module="js.html.midi.MIDIPortType" extern="1" final="1">
	<INPUT public="1" get="inline" set="null" expr="cast &quot;input&quot;" line="28" static="1">
		<x path="js.html.midi.MIDIPortType"/>
		<meta>
			<m n=":value"><e>cast "input"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INPUT>
	<OUTPUT public="1" get="inline" set="null" expr="cast &quot;output&quot;" line="29" static="1">
		<x path="js.html.midi.MIDIPortType"/>
		<meta>
			<m n=":value"><e>cast "output"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OUTPUT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.midi._MIDIPortType.MIDIPortType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/midi/MIDIPortType.hx" private="1" module="js.html.midi.MIDIPortType" extern="1" final="1">
		<INPUT public="1" get="inline" set="null" expr="cast &quot;input&quot;" line="28" static="1">
			<x path="js.html.midi.MIDIPortType"/>
			<meta>
				<m n=":value"><e>cast "input"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INPUT>
		<OUTPUT public="1" get="inline" set="null" expr="cast &quot;output&quot;" line="29" static="1">
			<x path="js.html.midi.MIDIPortType"/>
			<meta>
				<m n=":value"><e>cast "output"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OUTPUT>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.push.PushEncryptionKeyName" params="" file="/home/vsts/work/1/s/std/js/html/push/PushEncryptionKeyName.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushEncryptionKeyName.PushEncryptionKeyName_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/push/PushEncryptionKeyName.hx" private="1" module="js.html.push.PushEncryptionKeyName" extern="1" final="1">
	<P256DH public="1" get="inline" set="null" expr="cast &quot;p256dh&quot;" line="28" static="1">
		<x path="js.html.push.PushEncryptionKeyName"/>
		<meta>
			<m n=":value"><e>cast "p256dh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P256DH>
	<AUTH public="1" get="inline" set="null" expr="cast &quot;auth&quot;" line="29" static="1">
		<x path="js.html.push.PushEncryptionKeyName"/>
		<meta>
			<m n=":value"><e>cast "auth"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTH>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.push._PushEncryptionKeyName.PushEncryptionKeyName_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/push/PushEncryptionKeyName.hx" private="1" module="js.html.push.PushEncryptionKeyName" extern="1" final="1">
		<P256DH public="1" get="inline" set="null" expr="cast &quot;p256dh&quot;" line="28" static="1">
			<x path="js.html.push.PushEncryptionKeyName"/>
			<meta>
				<m n=":value"><e>cast "p256dh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P256DH>
		<AUTH public="1" get="inline" set="null" expr="cast &quot;auth&quot;" line="29" static="1">
			<x path="js.html.push.PushEncryptionKeyName"/>
			<meta>
				<m n=":value"><e>cast "auth"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTH>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.push.PushEvent" params="" file="/home/vsts/work/1/s/std/js/html/push/PushEvent.hx" extern="1">
		<extends path="js.html.ExtendableEvent"/>
		<data public="1" set="null">
			<c path="js.html.push.PushMessageData"/>
			<haxe_doc>Returns a reference to a `PushMessageData` object containing data sent to the `PushSubscription`.</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.push.PushEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushEvent` interface of the Push API represents a push message that has been received. This event is sent to the global scope of a `ServiceWorker`. It contains the information sent from an application server to a `PushSubscription`.

	Documentation [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PushEvent"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushEventInit" params="" file="/home/vsts/work/1/s/std/js/html/push/PushEventInit.hx"><a>
	<data>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</data>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.push.PushManager" params="" file="/home/vsts/work/1/s/std/js/html/push/PushManager.hx" extern="1">
		<subscribe public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c>
			</f>
			<haxe_doc>Subscribes to a push service. It returns a `Promise` that resolves to a `PushSubscription` object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.
		@throws DOMError</haxe_doc>
		</subscribe>
		<getSubscription public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c></f>
			<haxe_doc>Retrieves an existing push subscription. It returns a `Promise` that resolves to a `PushSubscription` object containing details of an existing subscription. If no existing subscription exists, this resolves to a `null` value.
		@throws DOMError</haxe_doc>
		</getSubscription>
		<permissionState public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><x path="js.html.push.PushPermissionState"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the permission state of the current `PushManager`, which will be one of `'granted'`, `'denied'`, or `'prompt'`.
		@throws DOMError</haxe_doc>
		</permissionState>
		<new public="1" set="method">
			<f a="scope">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushManager` interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.

	Documentation [PushManager](https://developer.mozilla.org/en-US/docs/Web/API/PushManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushManager>]]></haxe_doc>
		<meta><m n=":native"><e>"PushManager"</e></m></meta>
	</class>
	<class path="js.html.push.PushMessageData" params="" file="/home/vsts/work/1/s/std/js/html/push/PushMessageData.hx" extern="1">
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.ArrayBuffer"/></f>
			<haxe_doc>Extracts the data as an `ArrayBuffer` object.
		@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.html.Blob"/></f>
			<haxe_doc>Extracts the data as a `Blob` object.
		@throws DOMError</haxe_doc>
		</blob>
		<json public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Extracts the data as a JSON object.
		@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Extracts the data as a plain text string.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The `PushMessageData` interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats.

	Documentation [PushMessageData](https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData>]]></haxe_doc>
		<meta><m n=":native"><e>"PushMessageData"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushPermissionState" params="" file="/home/vsts/work/1/s/std/js/html/push/PushPermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushPermissionState.PushPermissionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/push/PushPermissionState.hx" private="1" module="js.html.push.PushPermissionState" extern="1" final="1">
	<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="28" static="1">
		<x path="js.html.push.PushPermissionState"/>
		<meta>
			<m n=":value"><e>cast "granted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRANTED>
	<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="29" static="1">
		<x path="js.html.push.PushPermissionState"/>
		<meta>
			<m n=":value"><e>cast "denied"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DENIED>
	<PROMPT public="1" get="inline" set="null" expr="cast &quot;prompt&quot;" line="30" static="1">
		<x path="js.html.push.PushPermissionState"/>
		<meta>
			<m n=":value"><e>cast "prompt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PROMPT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.push._PushPermissionState.PushPermissionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/push/PushPermissionState.hx" private="1" module="js.html.push.PushPermissionState" extern="1" final="1">
		<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="28" static="1">
			<x path="js.html.push.PushPermissionState"/>
			<meta>
				<m n=":value"><e>cast "granted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRANTED>
		<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="29" static="1">
			<x path="js.html.push.PushPermissionState"/>
			<meta>
				<m n=":value"><e>cast "denied"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DENIED>
		<PROMPT public="1" get="inline" set="null" expr="cast &quot;prompt&quot;" line="30" static="1">
			<x path="js.html.push.PushPermissionState"/>
			<meta>
				<m n=":value"><e>cast "prompt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PROMPT>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.push.PushSubscription" params="" file="/home/vsts/work/1/s/std/js/html/push/PushSubscription.hx" extern="1">
		<endpoint public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` containing the endpoint associated with the push subscription.</haxe_doc>
		</endpoint>
		<options public="1" set="null">
			<c path="js.html.push.PushSubscriptionOptions"/>
			<haxe_doc>An object containing the options used to create the subscription.</haxe_doc>
		</options>
		<getKey public="1" set="method">
			<f a="name">
				<x path="js.html.push.PushEncryptionKeyName"/>
				<c path="js.lib.ArrayBuffer"/>
			</f>
			<haxe_doc>Returns an `ArrayBuffer` which contains the client's public key, which can then be sent to a server and used in encrypting push message data.
		@throws DOMError</haxe_doc>
		</getKey>
		<unsubscribe public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Starts the asynchronous process of unsubscribing from the push service, returning a `Promise` that resolves to a `Boolean` when the current subscription is successfully unregistered.
		@throws DOMError</haxe_doc>
		</unsubscribe>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.push.PushSubscriptionJSON"/></f>
			<haxe_doc>Standard serializer — returns a JSON representation of the subscription properties.
		@throws DOMError</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="initDict">
				<t path="js.html.push.PushSubscriptionInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushSubscription` interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.

	Documentation [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription>]]></haxe_doc>
		<meta><m n=":native"><e>"PushSubscription"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionInit" params="" file="/home/vsts/work/1/s/std/js/html/push/PushSubscriptionInit.hx"><a>
	<scope><c path="String"/></scope>
	<p256dhKey>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</p256dhKey>
	<endpoint><c path="String"/></endpoint>
	<authSecret>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</authSecret>
	<appServerKey>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBufferView"/>
	<c path="js.lib.ArrayBuffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</appServerKey>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionJSON" params="" file="/home/vsts/work/1/s/std/js/html/push/PushSubscriptionJSON.hx"><a>
	<keys>
		<x path="Null"><t path="js.html.push.PushSubscriptionKeys"/></x>
		<meta><m n=":optional"/></meta>
	</keys>
	<endpoint>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</endpoint>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionKeys" params="" file="/home/vsts/work/1/s/std/js/html/push/PushSubscriptionKeys.hx"><a>
	<p256dh>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</p256dh>
	<auth>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</auth>
</a></typedef>
	<class path="js.html.push.PushSubscriptionOptions" params="" file="/home/vsts/work/1/s/std/js/html/push/PushSubscriptionOptions.hx" extern="1">
		<applicationServerKey public="1" set="null"><c path="js.lib.ArrayBuffer"/></applicationServerKey>
		<meta><m n=":native"><e>"PushSubscriptionOptions"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionOptionsInit" params="" file="/home/vsts/work/1/s/std/js/html/push/PushSubscriptionOptionsInit.hx"><a><applicationServerKey>
	<x path="Null"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<c path="String"/>
</x></x>
	<meta><m n=":optional"/></meta>
</applicationServerKey></a></typedef>
	<typedef path="js.html.rtc.AnswerOptions" params="" file="/home/vsts/work/1/s/std/js/html/rtc/AnswerOptions.hx"><a/></typedef>
	<abstract path="js.html.rtc.BundlePolicy" params="" file="/home/vsts/work/1/s/std/js/html/rtc/BundlePolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._BundlePolicy.BundlePolicy_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/BundlePolicy.hx" private="1" module="js.html.rtc.BundlePolicy" extern="1" final="1">
	<BALANCED public="1" get="inline" set="null" expr="cast &quot;balanced&quot;" line="28" static="1">
		<x path="js.html.rtc.BundlePolicy"/>
		<meta>
			<m n=":value"><e>cast "balanced"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BALANCED>
	<MAX_COMPAT public="1" get="inline" set="null" expr="cast &quot;max-compat&quot;" line="29" static="1">
		<x path="js.html.rtc.BundlePolicy"/>
		<meta>
			<m n=":value"><e>cast "max-compat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MAX_COMPAT>
	<MAX_BUNDLE public="1" get="inline" set="null" expr="cast &quot;max-bundle&quot;" line="30" static="1">
		<x path="js.html.rtc.BundlePolicy"/>
		<meta>
			<m n=":value"><e>cast "max-bundle"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MAX_BUNDLE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._BundlePolicy.BundlePolicy_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/BundlePolicy.hx" private="1" module="js.html.rtc.BundlePolicy" extern="1" final="1">
		<BALANCED public="1" get="inline" set="null" expr="cast &quot;balanced&quot;" line="28" static="1">
			<x path="js.html.rtc.BundlePolicy"/>
			<meta>
				<m n=":value"><e>cast "balanced"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BALANCED>
		<MAX_COMPAT public="1" get="inline" set="null" expr="cast &quot;max-compat&quot;" line="29" static="1">
			<x path="js.html.rtc.BundlePolicy"/>
			<meta>
				<m n=":value"><e>cast "max-compat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MAX_COMPAT>
		<MAX_BUNDLE public="1" get="inline" set="null" expr="cast &quot;max-bundle&quot;" line="30" static="1">
			<x path="js.html.rtc.BundlePolicy"/>
			<meta>
				<m n=":value"><e>cast "max-bundle"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MAX_BUNDLE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.rtc.Certificate" params="" file="/home/vsts/work/1/s/std/js/html/rtc/Certificate.hx" extern="1">
		<expires public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the expiration date of the certificate.</haxe_doc>
		</expires>
		<haxe_doc><![CDATA[The interface of the the WebRTC API provides an object represents a certificate that an `RTCPeerConnection` uses to authenticate.

	Documentation [RTCCertificate](https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCCertificate"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.Configuration" params="" file="/home/vsts/work/1/s/std/js/html/rtc/Configuration.hx"><a>
	<peerIdentity>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</peerIdentity>
	<iceTransportPolicy>
		<x path="Null"><x path="js.html.rtc.IceTransportPolicy"/></x>
		<meta><m n=":optional"/></meta>
	</iceTransportPolicy>
	<iceServers>
		<x path="Null"><c path="Array"><t path="js.html.rtc.IceServer"/></c></x>
		<meta><m n=":optional"/></meta>
	</iceServers>
	<certificates>
		<x path="Null"><c path="Array"><c path="js.html.rtc.Certificate"/></c></x>
		<meta><m n=":optional"/></meta>
	</certificates>
	<bundlePolicy>
		<x path="Null"><x path="js.html.rtc.BundlePolicy"/></x>
		<meta><m n=":optional"/></meta>
	</bundlePolicy>
</a></typedef>
	<class path="js.html.rtc.DTMFSender" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DTMFSender.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ontonechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` to handle the `tonechange` event, which is sent each time an outbound tone starts or finishes playing.</haxe_doc>
		</ontonechange>
		<toneBuffer public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which contains the list of DTMF tones currently in the queue to be transmitted (tones which have already been played are no longer included in the string). See `RTCDTMFSender.toneBuffer` for details on the format of the tone buffer.</haxe_doc>
		</toneBuffer>
		<insertDTMF public="1" set="method">
			<f a="tones:?duration:?interToneGap" v=":100:70">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ interToneGap : 70, duration : 100 }</e></m></meta>
		</insertDTMF>
		<meta><m n=":native"><e>"RTCDTMFSender"</e></m></meta>
	</class>
	<class path="js.html.rtc.DTMFToneChangeEvent" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DTMFToneChangeEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<tone public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the tone which has begun playing, or an empty string (`""`) if the previous tone has finished playing.</haxe_doc>
		</tone>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.rtc.DTMFToneChangeEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCDTMFToneChangeEvent` interface represents events sent to indicate that DTMF tones have started or finished playing. This interface is used by the `tonechange` event.

	Documentation [RTCDTMFToneChangeEvent](https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCDTMFToneChangeEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCDTMFToneChangeEvent"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.DTMFToneChangeEventInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DTMFToneChangeEventInit.hx"><a>
	<tone>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</tone>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.rtc.DataChannel" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannel.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<label public="1" set="null"><c path="String"/></label>
		<reliable public="1" set="null"><x path="Bool"/></reliable>
		<maxPacketLifeTime public="1" set="null"><x path="Int"/></maxPacketLifeTime>
		<maxRetransmits public="1" set="null"><x path="Int"/></maxRetransmits>
		<readyState public="1" set="null"><x path="js.html.rtc.DataChannelState"/></readyState>
		<bufferedAmount public="1" set="null"><x path="Int"/></bufferedAmount>
		<bufferedAmountLowThreshold public="1"><x path="Int"/></bufferedAmountLowThreshold>
		<onopen public="1"><x path="haxe.Function"/></onopen>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onbufferedamountlow public="1"><x path="haxe.Function"/></onbufferedamountlow>
		<binaryType public="1"><x path="js.html.rtc.DataChannelType"/></binaryType>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<ordered public="1" set="null"><x path="Bool"/></ordered>
		<id public="1" set="null"><x path="Int"/></id>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<send public="1" set="method">
			<f a="data">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="data">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<haxe_doc><![CDATA[The `RTCDataChannel` interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an `RTCPeerConnection`, and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).

	Documentation [RTCDataChannel](https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCDataChannel"</e></m></meta>
	</class>
	<class path="js.html.rtc.DataChannelEvent" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<channel public="1" set="null"><c path="js.html.rtc.DataChannel"/></channel>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.rtc.DataChannelEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCDataChannelEvent()` constructor returns a new `RTCDataChannelEvent` object, which represents a `datachannel` event. These events sent to an `RTCPeerConnection` when its remote peer is asking to open an `RTCDataChannel` between the two peers.

	Documentation [RTCDataChannelEvent](https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCDataChannelEvent"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.DataChannelEventInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelEventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<channel><c path="js.html.rtc.DataChannel"/></channel>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.rtc.DataChannelInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelInit.hx"><a>
	<protocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</protocol>
	<ordered>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ordered>
	<negotiated>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</negotiated>
	<maxRetransmits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</maxRetransmits>
	<maxRetransmitTime>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</maxRetransmitTime>
	<maxPacketLifeTime>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</maxPacketLifeTime>
	<id>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</id>
</a></typedef>
	<abstract path="js.html.rtc.DataChannelState" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._DataChannelState.DataChannelState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelState.hx" private="1" module="js.html.rtc.DataChannelState" extern="1" final="1">
	<CONNECTING public="1" get="inline" set="null" expr="cast &quot;connecting&quot;" line="28" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "connecting"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONNECTING>
	<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="29" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN>
	<CLOSING public="1" get="inline" set="null" expr="cast &quot;closing&quot;" line="30" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "closing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSING>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="31" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._DataChannelState.DataChannelState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelState.hx" private="1" module="js.html.rtc.DataChannelState" extern="1" final="1">
		<CONNECTING public="1" get="inline" set="null" expr="cast &quot;connecting&quot;" line="28" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "connecting"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONNECTING>
		<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="29" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN>
		<CLOSING public="1" get="inline" set="null" expr="cast &quot;closing&quot;" line="30" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "closing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSING>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="31" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.rtc.DataChannelType" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._DataChannelType.DataChannelType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelType.hx" private="1" module="js.html.rtc.DataChannelType" extern="1" final="1">
	<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="28" static="1">
		<x path="js.html.rtc.DataChannelType"/>
		<meta>
			<m n=":value"><e>cast "arraybuffer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARRAYBUFFER>
	<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="29" static="1">
		<x path="js.html.rtc.DataChannelType"/>
		<meta>
			<m n=":value"><e>cast "blob"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLOB>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._DataChannelType.DataChannelType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DataChannelType.hx" private="1" module="js.html.rtc.DataChannelType" extern="1" final="1">
		<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="28" static="1">
			<x path="js.html.rtc.DataChannelType"/>
			<meta>
				<m n=":value"><e>cast "arraybuffer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARRAYBUFFER>
		<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="29" static="1">
			<x path="js.html.rtc.DataChannelType"/>
			<meta>
				<m n=":value"><e>cast "blob"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLOB>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.rtc.DegradationPreference" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DegradationPreference.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._DegradationPreference.DegradationPreference_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DegradationPreference.hx" private="1" module="js.html.rtc.DegradationPreference" extern="1" final="1">
	<MAINTAIN_FRAMERATE public="1" get="inline" set="null" expr="cast &quot;maintain-framerate&quot;" line="28" static="1">
		<x path="js.html.rtc.DegradationPreference"/>
		<meta>
			<m n=":value"><e>cast "maintain-framerate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MAINTAIN_FRAMERATE>
	<MAINTAIN_RESOLUTION public="1" get="inline" set="null" expr="cast &quot;maintain-resolution&quot;" line="29" static="1">
		<x path="js.html.rtc.DegradationPreference"/>
		<meta>
			<m n=":value"><e>cast "maintain-resolution"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MAINTAIN_RESOLUTION>
	<BALANCED public="1" get="inline" set="null" expr="cast &quot;balanced&quot;" line="30" static="1">
		<x path="js.html.rtc.DegradationPreference"/>
		<meta>
			<m n=":value"><e>cast "balanced"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BALANCED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._DegradationPreference.DegradationPreference_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/DegradationPreference.hx" private="1" module="js.html.rtc.DegradationPreference" extern="1" final="1">
		<MAINTAIN_FRAMERATE public="1" get="inline" set="null" expr="cast &quot;maintain-framerate&quot;" line="28" static="1">
			<x path="js.html.rtc.DegradationPreference"/>
			<meta>
				<m n=":value"><e>cast "maintain-framerate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MAINTAIN_FRAMERATE>
		<MAINTAIN_RESOLUTION public="1" get="inline" set="null" expr="cast &quot;maintain-resolution&quot;" line="29" static="1">
			<x path="js.html.rtc.DegradationPreference"/>
			<meta>
				<m n=":value"><e>cast "maintain-resolution"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MAINTAIN_RESOLUTION>
		<BALANCED public="1" get="inline" set="null" expr="cast &quot;balanced&quot;" line="30" static="1">
			<x path="js.html.rtc.DegradationPreference"/>
			<meta>
				<m n=":value"><e>cast "balanced"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BALANCED>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.rtc.FecParameters" params="" file="/home/vsts/work/1/s/std/js/html/rtc/FecParameters.hx"><a><ssrc>
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
</ssrc></a></typedef>
	<class path="js.html.rtc.IceCandidate" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceCandidate.hx" extern="1">
		<candidate public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the transport address for the candidate that can be used for connectivity checks. The format of this address is a `candidate-attribute` as defined in {{RFC(5245)}}. This string is empty (`""`) if the `RTCIceCandidate` is an "end of candidates" indicator.</haxe_doc>
		</candidate>
		<sdpMid public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the candidate's media stream identification tag which uniquely identifies the media stream within the component with which the candidate is associated, or `null` if no such association exists.</haxe_doc>
		</sdpMid>
		<sdpMLineIndex public="1">
			<x path="Int"/>
			<haxe_doc>If not `null`, `sdpMLineIndex` indicates the zero-based index number of the media description (as defined in RFC 4566) in the `SDP` with which the candidate is associated.</haxe_doc>
		</sdpMLineIndex>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<new public="1" set="method">
			<f a="candidateInitDict">
				<t path="js.html.rtc.IceCandidateInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCIceCandidate` interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an `RTCPeerConnection`.

	Documentation [RTCIceCandidate](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCIceCandidate"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.IceCandidateInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceCandidateInit.hx"><a>
	<sdpMid>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</sdpMid>
	<sdpMLineIndex>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</sdpMLineIndex>
	<candidate><c path="String"/></candidate>
</a></typedef>
	<abstract path="js.html.rtc.IceConnectionState" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceConnectionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._IceConnectionState.IceConnectionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceConnectionState.hx" private="1" module="js.html.rtc.IceConnectionState" extern="1" final="1">
	<NEW public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="28" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEW>
	<CHECKING public="1" get="inline" set="null" expr="cast &quot;checking&quot;" line="29" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "checking"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHECKING>
	<CONNECTED public="1" get="inline" set="null" expr="cast &quot;connected&quot;" line="30" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "connected"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONNECTED>
	<COMPLETED public="1" get="inline" set="null" expr="cast &quot;completed&quot;" line="31" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "completed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMPLETED>
	<FAILED public="1" get="inline" set="null" expr="cast &quot;failed&quot;" line="32" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "failed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FAILED>
	<DISCONNECTED public="1" get="inline" set="null" expr="cast &quot;disconnected&quot;" line="33" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "disconnected"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISCONNECTED>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="34" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._IceConnectionState.IceConnectionState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceConnectionState.hx" private="1" module="js.html.rtc.IceConnectionState" extern="1" final="1">
		<NEW public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="28" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEW>
		<CHECKING public="1" get="inline" set="null" expr="cast &quot;checking&quot;" line="29" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "checking"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHECKING>
		<CONNECTED public="1" get="inline" set="null" expr="cast &quot;connected&quot;" line="30" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "connected"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONNECTED>
		<COMPLETED public="1" get="inline" set="null" expr="cast &quot;completed&quot;" line="31" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "completed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMPLETED>
		<FAILED public="1" get="inline" set="null" expr="cast &quot;failed&quot;" line="32" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "failed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FAILED>
		<DISCONNECTED public="1" get="inline" set="null" expr="cast &quot;disconnected&quot;" line="33" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "disconnected"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISCONNECTED>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="34" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.rtc.IceCredentialType" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceCredentialType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._IceCredentialType.IceCredentialType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceCredentialType.hx" private="1" module="js.html.rtc.IceCredentialType" extern="1" final="1">
	<PASSWORD public="1" get="inline" set="null" expr="cast &quot;password&quot;" line="28" static="1">
		<x path="js.html.rtc.IceCredentialType"/>
		<meta>
			<m n=":value"><e>cast "password"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PASSWORD>
	<TOKEN public="1" get="inline" set="null" expr="cast &quot;token&quot;" line="29" static="1">
		<x path="js.html.rtc.IceCredentialType"/>
		<meta>
			<m n=":value"><e>cast "token"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOKEN>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._IceCredentialType.IceCredentialType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceCredentialType.hx" private="1" module="js.html.rtc.IceCredentialType" extern="1" final="1">
		<PASSWORD public="1" get="inline" set="null" expr="cast &quot;password&quot;" line="28" static="1">
			<x path="js.html.rtc.IceCredentialType"/>
			<meta>
				<m n=":value"><e>cast "password"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PASSWORD>
		<TOKEN public="1" get="inline" set="null" expr="cast &quot;token&quot;" line="29" static="1">
			<x path="js.html.rtc.IceCredentialType"/>
			<meta>
				<m n=":value"><e>cast "token"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOKEN>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.html.rtc.IceGatheringState" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceGatheringState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._IceGatheringState.IceGatheringState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceGatheringState.hx" private="1" module="js.html.rtc.IceGatheringState" extern="1" final="1">
	<NEW public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="28" static="1">
		<x path="js.html.rtc.IceGatheringState"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEW>
	<GATHERING public="1" get="inline" set="null" expr="cast &quot;gathering&quot;" line="29" static="1">
		<x path="js.html.rtc.IceGatheringState"/>
		<meta>
			<m n=":value"><e>cast "gathering"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GATHERING>
	<COMPLETE public="1" get="inline" set="null" expr="cast &quot;complete&quot;" line="30" static="1">
		<x path="js.html.rtc.IceGatheringState"/>
		<meta>
			<m n=":value"><e>cast "complete"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMPLETE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._IceGatheringState.IceGatheringState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceGatheringState.hx" private="1" module="js.html.rtc.IceGatheringState" extern="1" final="1">
		<NEW public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="28" static="1">
			<x path="js.html.rtc.IceGatheringState"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEW>
		<GATHERING public="1" get="inline" set="null" expr="cast &quot;gathering&quot;" line="29" static="1">
			<x path="js.html.rtc.IceGatheringState"/>
			<meta>
				<m n=":value"><e>cast "gathering"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GATHERING>
		<COMPLETE public="1" get="inline" set="null" expr="cast &quot;complete&quot;" line="30" static="1">
			<x path="js.html.rtc.IceGatheringState"/>
			<meta>
				<m n=":value"><e>cast "complete"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMPLETE>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.rtc.IceServer" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceServer.hx"><a>
	<username>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</username>
	<urls>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</urls>
	<url>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</url>
	<credentialType>
		<x path="Null"><x path="js.html.rtc.IceCredentialType"/></x>
		<meta><m n=":optional"/></meta>
	</credentialType>
	<credential>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</credential>
</a></typedef>
	<abstract path="js.html.rtc.IceTransportPolicy" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceTransportPolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._IceTransportPolicy.IceTransportPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceTransportPolicy.hx" private="1" module="js.html.rtc.IceTransportPolicy" extern="1" final="1">
	<RELAY public="1" get="inline" set="null" expr="cast &quot;relay&quot;" line="28" static="1">
		<x path="js.html.rtc.IceTransportPolicy"/>
		<meta>
			<m n=":value"><e>cast "relay"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RELAY>
	<ALL public="1" get="inline" set="null" expr="cast &quot;all&quot;" line="29" static="1">
		<x path="js.html.rtc.IceTransportPolicy"/>
		<meta>
			<m n=":value"><e>cast "all"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALL>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._IceTransportPolicy.IceTransportPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IceTransportPolicy.hx" private="1" module="js.html.rtc.IceTransportPolicy" extern="1" final="1">
		<RELAY public="1" get="inline" set="null" expr="cast &quot;relay&quot;" line="28" static="1">
			<x path="js.html.rtc.IceTransportPolicy"/>
			<meta>
				<m n=":value"><e>cast "relay"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RELAY>
		<ALL public="1" get="inline" set="null" expr="cast &quot;all&quot;" line="29" static="1">
			<x path="js.html.rtc.IceTransportPolicy"/>
			<meta>
				<m n=":value"><e>cast "all"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALL>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.rtc.IdentityAssertion" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IdentityAssertion.hx"><a>
	<name>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</name>
	<idp>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</idp>
</a></typedef>
	<typedef path="js.html.rtc.IdentityAssertionResult" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IdentityAssertionResult.hx"><a>
	<idp><t path="js.html.rtc.IdentityProviderDetails"/></idp>
	<assertion><c path="String"/></assertion>
</a></typedef>
	<typedef path="js.html.rtc.IdentityProvider" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IdentityProvider.hx"><a>
	<validateAssertion><f a=":">
	<c path="String"/>
	<c path="String"/>
	<c path="js.lib.Promise"><t path="js.html.rtc.IdentityValidationResult"/></c>
</f></validateAssertion>
	<generateAssertion><f a="::">
	<c path="String"/>
	<c path="String"/>
	<t path="js.html.rtc.IdentityProviderOptions"/>
	<c path="js.lib.Promise"><t path="js.html.rtc.IdentityAssertionResult"/></c>
</f></generateAssertion>
</a></typedef>
	<typedef path="js.html.rtc.IdentityProviderDetails" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IdentityProviderDetails.hx"><a>
	<protocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</protocol>
	<domain><c path="String"/></domain>
</a></typedef>
	<typedef path="js.html.rtc.IdentityProviderOptions" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IdentityProviderOptions.hx"><a>
	<usernameHint>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</usernameHint>
	<protocol>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</protocol>
	<peerIdentity>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</peerIdentity>
</a></typedef>
	<typedef path="js.html.rtc.IdentityProviderRegistrar" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IdentityProviderRegistrar.hx"><a><register set="method"><f a="idp">
	<t path="js.html.rtc.IdentityProvider"/>
	<x path="Void"/>
</f></register></a></typedef>
	<typedef path="js.html.rtc.IdentityValidationResult" params="" file="/home/vsts/work/1/s/std/js/html/rtc/IdentityValidationResult.hx"><a>
	<identity><c path="String"/></identity>
	<contents><c path="String"/></contents>
</a></typedef>
	<typedef path="js.html.rtc.OfferAnswerOptions" params="" file="/home/vsts/work/1/s/std/js/html/rtc/OfferAnswerOptions.hx"><a/></typedef>
	<typedef path="js.html.rtc.OfferOptions" params="" file="/home/vsts/work/1/s/std/js/html/rtc/OfferOptions.hx"><a>
	<offerToReceiveVideo>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</offerToReceiveVideo>
	<offerToReceiveAudio>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</offerToReceiveAudio>
	<iceRestart>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</iceRestart>
</a></typedef>
	<class path="js.html.rtc.PeerConnection" params="" file="/home/vsts/work/1/s/std/js/html/rtc/PeerConnection.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<generateCertificate public="1" set="method" static="1">
			<f a="keygenAlgorithm">
				<d/>
				<c path="js.lib.Promise"><c path="js.html.rtc.Certificate"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><generateCertificate public="1" set="method">
	<f a="keygenAlgorithm">
		<c path="String"/>
		<c path="js.lib.Promise"><c path="js.html.rtc.Certificate"/></c>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</generateCertificate></overloads>
		</generateCertificate>
		<localDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></localDescription>
		<currentLocalDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></currentLocalDescription>
		<pendingLocalDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></pendingLocalDescription>
		<remoteDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></remoteDescription>
		<currentRemoteDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></currentRemoteDescription>
		<pendingRemoteDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></pendingRemoteDescription>
		<signalingState public="1" set="null"><x path="js.html.rtc.SignalingState"/></signalingState>
		<canTrickleIceCandidates public="1" set="null"><x path="Bool"/></canTrickleIceCandidates>
		<iceGatheringState public="1" set="null"><x path="js.html.rtc.IceGatheringState"/></iceGatheringState>
		<iceConnectionState public="1" set="null"><x path="js.html.rtc.IceConnectionState"/></iceConnectionState>
		<peerIdentity public="1" set="null"><c path="js.lib.Promise"><t path="js.html.rtc.IdentityAssertion"/></c></peerIdentity>
		<idpLoginUrl public="1" set="null"><c path="String"/></idpLoginUrl>
		<onnegotiationneeded public="1"><x path="haxe.Function"/></onnegotiationneeded>
		<onicecandidate public="1"><x path="haxe.Function"/></onicecandidate>
		<onsignalingstatechange public="1"><x path="haxe.Function"/></onsignalingstatechange>
		<onaddstream public="1"><x path="haxe.Function"/></onaddstream>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<ontrack public="1"><x path="haxe.Function"/></ontrack>
		<onremovestream public="1"><x path="haxe.Function"/></onremovestream>
		<oniceconnectionstatechange public="1"><x path="haxe.Function"/></oniceconnectionstatechange>
		<onicegatheringstatechange public="1"><x path="haxe.Function"/></onicegatheringstatechange>
		<ondatachannel public="1"><x path="haxe.Function"/></ondatachannel>
		<setIdentityProvider public="1" set="method"><f a="provider:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.rtc.IdentityProviderOptions"/></x>
	<x path="Void"/>
</f></setIdentityProvider>
		<getIdentityAssertion public="1" set="method"><f a=""><c path="js.lib.Promise"><c path="String"/></c></f></getIdentityAssertion>
		<createOffer public="1" set="method">
			<f a="successCallback:failureCallback:?options">
				<f a="">
					<t path="js.html.rtc.SessionDescriptionInit"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<x path="Null"><t path="js.html.rtc.OfferOptions"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><createOffer public="1" set="method"><f a="?options">
	<x path="Null"><t path="js.html.rtc.OfferOptions"/></x>
	<c path="js.lib.Promise"><t path="js.html.rtc.SessionDescriptionInit"/></c>
</f></createOffer></overloads>
		</createOffer>
		<createAnswer public="1" set="method">
			<f a="successCallback:failureCallback">
				<f a="">
					<t path="js.html.rtc.SessionDescriptionInit"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><createAnswer public="1" set="method"><f a="?options">
	<x path="Null"><t path="js.html.rtc.AnswerOptions"/></x>
	<c path="js.lib.Promise"><t path="js.html.rtc.SessionDescriptionInit"/></c>
</f></createAnswer></overloads>
		</createAnswer>
		<setLocalDescription public="1" set="method">
			<f a="description:successCallback:failureCallback">
				<t path="js.html.rtc.SessionDescriptionInit"/>
				<f a=""><x path="Void"/></f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><setLocalDescription public="1" set="method"><f a="description">
	<t path="js.html.rtc.SessionDescriptionInit"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></setLocalDescription></overloads>
		</setLocalDescription>
		<setRemoteDescription public="1" set="method">
			<f a="description:successCallback:failureCallback">
				<t path="js.html.rtc.SessionDescriptionInit"/>
				<f a=""><x path="Void"/></f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><setRemoteDescription public="1" set="method"><f a="description">
	<t path="js.html.rtc.SessionDescriptionInit"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></setRemoteDescription></overloads>
		</setRemoteDescription>
		<addIceCandidate public="1" set="method">
			<f a="candidate:successCallback:failureCallback">
				<c path="js.html.rtc.IceCandidate"/>
				<f a=""><x path="Void"/></f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads>
				<addIceCandidate public="1" set="method"><f a="candidate">
	<c path="js.html.rtc.IceCandidate"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></addIceCandidate>
				<addIceCandidate public="1" set="method"><f a="candidate">
	<t path="js.html.rtc.IceCandidateInit"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></addIceCandidate>
			</overloads>
		</addIceCandidate>
		<getConfiguration public="1" set="method"><f a=""><t path="js.html.rtc.Configuration"/></f></getConfiguration>
		<getLocalStreams public="1" set="method"><f a=""><c path="Array"><c path="js.html.MediaStream"/></c></f></getLocalStreams>
		<getRemoteStreams public="1" set="method"><f a=""><c path="Array"><c path="js.html.MediaStream"/></c></f></getRemoteStreams>
		<addStream public="1" set="method"><f a="stream">
	<c path="js.html.MediaStream"/>
	<x path="Void"/>
</f></addStream>
		<addTrack public="1" set="method"><f a="track:stream:moreStreams">
	<c path="js.html.MediaStreamTrack"/>
	<c path="js.html.MediaStream"/>
	<x path="haxe.extern.Rest"><c path="js.html.MediaStream"/></x>
	<c path="js.html.rtc.RtpSender"/>
</f></addTrack>
		<removeTrack public="1" set="method"><f a="sender">
	<c path="js.html.rtc.RtpSender"/>
	<x path="Void"/>
</f></removeTrack>
		<addTransceiver public="1" set="method">
			<f a="trackOrKind:?init">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Null"><t path="js.html.rtc.RtpTransceiverInit"/></x>
				<c path="js.html.rtc.RtpTransceiver"/>
			</f>
			<overloads><addTransceiver public="1" set="method"><f a="trackOrKind:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.rtc.RtpTransceiverInit"/></x>
	<c path="js.html.rtc.RtpTransceiver"/>
</f></addTransceiver></overloads>
		</addTransceiver>
		<getSenders public="1" set="method"><f a=""><c path="Array"><c path="js.html.rtc.RtpSender"/></c></f></getSenders>
		<getReceivers public="1" set="method"><f a=""><c path="Array"><c path="js.html.rtc.RtpReceiver"/></c></f></getReceivers>
		<getTransceivers public="1" set="method"><f a=""><c path="Array"><c path="js.html.rtc.RtpTransceiver"/></c></f></getTransceivers>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<getStats public="1" set="method">
			<f a="selector:successCallback:failureCallback">
				<c path="js.html.MediaStreamTrack"/>
				<f a="">
					<c path="js.html.rtc.StatsReport"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><getStats public="1" set="method"><f a="?selector">
	<c path="js.html.MediaStreamTrack"/>
	<c path="js.lib.Promise"><c path="js.html.rtc.StatsReport"/></c>
</f></getStats></overloads>
		</getStats>
		<createDataChannel public="1" set="method"><f a="label:?dataChannelDict">
	<c path="String"/>
	<x path="Null"><t path="js.html.rtc.DataChannelInit"/></x>
	<c path="js.html.rtc.DataChannel"/>
</f></createDataChannel>
		<new public="1" set="method">
			<f a="?configuration:?constraints">
				<x path="Null"><t path="js.html.rtc.Configuration"/></x>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCPeerConnection` interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.

	Documentation [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCPeerConnection"</e></m></meta>
	</class>
	<class path="js.html.rtc.PeerConnectionIceEvent" params="" file="/home/vsts/work/1/s/std/js/html/rtc/PeerConnectionIceEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<candidate public="1" set="null">
			<c path="js.html.rtc.IceCandidate"/>
			<haxe_doc>Contains the `RTCIceCandidate` containing the candidate associated with the event.</haxe_doc>
		</candidate>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.rtc.PeerConnectionIceEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCPeerConnectionIceEvent` interface represents events that occurs in relation to ICE candidates with the target, usually an `RTCPeerConnection`. Only one event is of this type: `icecandidate`.

	Documentation [RTCPeerConnectionIceEvent](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCPeerConnectionIceEvent"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.PeerConnectionIceEventInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/PeerConnectionIceEventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<candidate>
		<x path="Null"><c path="js.html.rtc.IceCandidate"/></x>
		<meta><m n=":optional"/></meta>
	</candidate>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.rtc.PriorityType" params="" file="/home/vsts/work/1/s/std/js/html/rtc/PriorityType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._PriorityType.PriorityType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/PriorityType.hx" private="1" module="js.html.rtc.PriorityType" extern="1" final="1">
	<VERY_LOW public="1" get="inline" set="null" expr="cast &quot;very-low&quot;" line="28" static="1">
		<x path="js.html.rtc.PriorityType"/>
		<meta>
			<m n=":value"><e>cast "very-low"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VERY_LOW>
	<LOW public="1" get="inline" set="null" expr="cast &quot;low&quot;" line="29" static="1">
		<x path="js.html.rtc.PriorityType"/>
		<meta>
			<m n=":value"><e>cast "low"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOW>
	<MEDIUM public="1" get="inline" set="null" expr="cast &quot;medium&quot;" line="30" static="1">
		<x path="js.html.rtc.PriorityType"/>
		<meta>
			<m n=":value"><e>cast "medium"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MEDIUM>
	<HIGH public="1" get="inline" set="null" expr="cast &quot;high&quot;" line="31" static="1">
		<x path="js.html.rtc.PriorityType"/>
		<meta>
			<m n=":value"><e>cast "high"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._PriorityType.PriorityType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/PriorityType.hx" private="1" module="js.html.rtc.PriorityType" extern="1" final="1">
		<VERY_LOW public="1" get="inline" set="null" expr="cast &quot;very-low&quot;" line="28" static="1">
			<x path="js.html.rtc.PriorityType"/>
			<meta>
				<m n=":value"><e>cast "very-low"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VERY_LOW>
		<LOW public="1" get="inline" set="null" expr="cast &quot;low&quot;" line="29" static="1">
			<x path="js.html.rtc.PriorityType"/>
			<meta>
				<m n=":value"><e>cast "low"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOW>
		<MEDIUM public="1" get="inline" set="null" expr="cast &quot;medium&quot;" line="30" static="1">
			<x path="js.html.rtc.PriorityType"/>
			<meta>
				<m n=":value"><e>cast "medium"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MEDIUM>
		<HIGH public="1" get="inline" set="null" expr="cast &quot;high&quot;" line="31" static="1">
			<x path="js.html.rtc.PriorityType"/>
			<meta>
				<m n=":value"><e>cast "high"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.rtc.RtcpParameters" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtcpParameters.hx"><a>
	<reducedSize>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</reducedSize>
	<cname>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</cname>
</a></typedef>
	<typedef path="js.html.rtc.RtpCodecParameters" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpCodecParameters.hx"><a>
	<sdpFmtpLine>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</sdpFmtpLine>
	<payloadType>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</payloadType>
	<mimeType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</mimeType>
	<clockRate>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clockRate>
	<channels>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</channels>
</a></typedef>
	<typedef path="js.html.rtc.RtpContributingSource" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpContributingSource.hx"><a>
	<timestamp><x path="Float"/></timestamp>
	<source><x path="Int"/></source>
	<audioLevel>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</audioLevel>
</a></typedef>
	<typedef path="js.html.rtc.RtpEncodingParameters" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpEncodingParameters.hx"><a>
	<ssrc>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</ssrc>
	<scaleResolutionDownBy>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</scaleResolutionDownBy>
	<rtx>
		<x path="Null"><t path="js.html.rtc.RtxParameters"/></x>
		<meta><m n=":optional"/></meta>
	</rtx>
	<rid>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</rid>
	<priority>
		<x path="Null"><x path="js.html.rtc.PriorityType"/></x>
		<meta><m n=":optional"/></meta>
	</priority>
	<maxBitrate>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</maxBitrate>
	<fec>
		<x path="Null"><t path="js.html.rtc.FecParameters"/></x>
		<meta><m n=":optional"/></meta>
	</fec>
	<degradationPreference>
		<x path="Null"><x path="js.html.rtc.DegradationPreference"/></x>
		<meta><m n=":optional"/></meta>
	</degradationPreference>
	<active>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</active>
</a></typedef>
	<typedef path="js.html.rtc.RtpHeaderExtensionParameters" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpHeaderExtensionParameters.hx"><a>
	<uri>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</uri>
	<id>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<encrypted>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</encrypted>
</a></typedef>
	<typedef path="js.html.rtc.RtpParameters" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpParameters.hx"><a>
	<rtcp>
		<x path="Null"><t path="js.html.rtc.RtcpParameters"/></x>
		<meta><m n=":optional"/></meta>
	</rtcp>
	<headerExtensions>
		<x path="Null"><c path="Array"><t path="js.html.rtc.RtpHeaderExtensionParameters"/></c></x>
		<meta><m n=":optional"/></meta>
	</headerExtensions>
	<encodings>
		<x path="Null"><c path="Array"><t path="js.html.rtc.RtpEncodingParameters"/></c></x>
		<meta><m n=":optional"/></meta>
	</encodings>
	<codecs>
		<x path="Null"><c path="Array"><t path="js.html.rtc.RtpCodecParameters"/></c></x>
		<meta><m n=":optional"/></meta>
	</codecs>
</a></typedef>
	<class path="js.html.rtc.RtpReceiver" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpReceiver.hx" extern="1">
		<track public="1" set="null">
			<c path="js.html.MediaStreamTrack"/>
			<haxe_doc>Returns the `MediaStreamTrack` associated with the current `RTCRtpReceiver` instance. </haxe_doc>
		</track>
		<getStats public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.rtc.StatsReport"/></c></f>
			<haxe_doc>Returns a `Promise` whose fulfillment handler receives a `RTCStatsReport` which contains statistics about the incoming streams and their dependencies.</haxe_doc>
		</getStats>
		<getContributingSources public="1" set="method">
			<f a=""><c path="Array"><t path="js.html.rtc.RtpContributingSource"/></c></f>
			<haxe_doc>Returns an array of `RTCRtpContributingSource` instances for each unique CSRC (contributing source) identifier received by the current `RTCRtpReceiver` in the last ten seconds.</haxe_doc>
		</getContributingSources>
		<getSynchronizationSources public="1" set="method">
			<f a=""><c path="Array"><t path="js.html.rtc.RtpSynchronizationSource"/></c></f>
			<haxe_doc>Returns an array including one `RTCRtpSynchronizationSource` instance for each unique SSRC (synchronization source) identifier received by the current `RTCRtpReceiver` in the last ten seconds.</haxe_doc>
		</getSynchronizationSources>
		<haxe_doc><![CDATA[The `RTCRtpReceiver` interface of the the WebRTC API manages the reception and decoding of data for a `MediaStreamTrack` on an `RTCPeerConnection`.

	Documentation [RTCRtpReceiver](https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCRtpReceiver"</e></m></meta>
	</class>
	<class path="js.html.rtc.RtpSender" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpSender.hx" extern="1">
		<track public="1" set="null">
			<c path="js.html.MediaStreamTrack"/>
			<haxe_doc>The `MediaStreamTrack` which is being handled by the `RTCRtpSender`. If `track` is `null`, the `RTCRtpSender` doesn't transmit anything.</haxe_doc>
		</track>
		<dtmf public="1" set="null">
			<c path="js.html.rtc.DTMFSender"/>
			<haxe_doc>An `RTCDTMFSender` which can be used to send `DTMF` tones using `"telephone-event"` payloads on the RTP session represented by the `RTCRtpSender` object. If `null`, the track and/or the connection doesn't support DTMF. Only audio tracks can support DTMF.</haxe_doc>
		</dtmf>
		<setParameters public="1" set="method"><f a="?parameters">
	<x path="Null"><t path="js.html.rtc.RtpParameters"/></x>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></setParameters>
		<getParameters public="1" set="method"><f a=""><t path="js.html.rtc.RtpParameters"/></f></getParameters>
		<replaceTrack public="1" set="method"><f a="withTrack">
	<c path="js.html.MediaStreamTrack"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></replaceTrack>
		<getStats public="1" set="method"><f a=""><c path="js.lib.Promise"><c path="js.html.rtc.StatsReport"/></c></f></getStats>
		<haxe_doc><![CDATA[The `RTCRtpSender` interface provides the ability to control and obtain details about how a particular `MediaStreamTrack` is encoded and sent to a remote peer.

	Documentation [RTCRtpSender](https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCRtpSender"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.RtpSynchronizationSource" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpSynchronizationSource.hx"><a>
	<voiceActivityFlag>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</voiceActivityFlag>
	<timestamp><x path="Float"/></timestamp>
	<source><x path="Int"/></source>
	<audioLevel>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</audioLevel>
</a></typedef>
	<class path="js.html.rtc.RtpTransceiver" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpTransceiver.hx" extern="1">
		<mid public="1" set="null">
			<c path="String"/>
			<haxe_doc>The media ID of the m-line associated with this transceiver. This association is established, when possible, whenever either a local or remote description is applied. This field is `null` if neither a local or remote description has been applied, or if its associated m-line is rejected by either a remote offer or any answer.</haxe_doc>
		</mid>
		<sender public="1" set="null">
			<c path="js.html.rtc.RtpSender"/>
			<haxe_doc>The `RTCRtpSender` object responsible for encoding and sending data to the remote peer.</haxe_doc>
		</sender>
		<receiver public="1" set="null">
			<c path="js.html.rtc.RtpReceiver"/>
			<haxe_doc>The `RTCRtpReceiver` object that handles receiving and decoding incoming media.</haxe_doc>
		</receiver>
		<stopped public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not sending and receiving using the paired `RTCRtpSender` and `RTCRtpReceiver` has been permanently disabled, either due to SDP offer/answer, or due to a call to `RTCRtpTransceiver.stop`.</haxe_doc>
		</stopped>
		<direction public="1">
			<x path="js.html.rtc.RtpTransceiverDirection"/>
			<haxe_doc>A string from the enum `RTCRtpTransceiverDirection` which is used to set the transceiver's desired direction.</haxe_doc>
		</direction>
		<currentDirection public="1" set="null">
			<x path="js.html.rtc.RtpTransceiverDirection"/>
			<haxe_doc>A string from the enum `RTCRtpTransceiverDirection` which indicates the transceiver's current directionality, or `null` if the transceiver is stopped or has never participated in an exchange of offers and answers.</haxe_doc>
		</currentDirection>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<getRemoteTrackId public="1" set="method"><f a=""><c path="String"/></f></getRemoteTrackId>
		<haxe_doc><![CDATA[The WebRTC interface `RTCRtpTransceiver` describes a permanent pairing of an `RTCRtpSender` and an `RTCRtpReceiver`, along with some shared state.

	Documentation [RTCRtpTransceiver](https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCRtpTransceiver"</e></m></meta>
	</class>
	<abstract path="js.html.rtc.RtpTransceiverDirection" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpTransceiverDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._RtpTransceiverDirection.RtpTransceiverDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpTransceiverDirection.hx" private="1" module="js.html.rtc.RtpTransceiverDirection" extern="1" final="1">
	<SENDRECV public="1" get="inline" set="null" expr="cast &quot;sendrecv&quot;" line="28" static="1">
		<x path="js.html.rtc.RtpTransceiverDirection"/>
		<meta>
			<m n=":value"><e>cast "sendrecv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SENDRECV>
	<SENDONLY public="1" get="inline" set="null" expr="cast &quot;sendonly&quot;" line="29" static="1">
		<x path="js.html.rtc.RtpTransceiverDirection"/>
		<meta>
			<m n=":value"><e>cast "sendonly"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SENDONLY>
	<RECVONLY public="1" get="inline" set="null" expr="cast &quot;recvonly&quot;" line="30" static="1">
		<x path="js.html.rtc.RtpTransceiverDirection"/>
		<meta>
			<m n=":value"><e>cast "recvonly"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RECVONLY>
	<INACTIVE public="1" get="inline" set="null" expr="cast &quot;inactive&quot;" line="31" static="1">
		<x path="js.html.rtc.RtpTransceiverDirection"/>
		<meta>
			<m n=":value"><e>cast "inactive"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INACTIVE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._RtpTransceiverDirection.RtpTransceiverDirection_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpTransceiverDirection.hx" private="1" module="js.html.rtc.RtpTransceiverDirection" extern="1" final="1">
		<SENDRECV public="1" get="inline" set="null" expr="cast &quot;sendrecv&quot;" line="28" static="1">
			<x path="js.html.rtc.RtpTransceiverDirection"/>
			<meta>
				<m n=":value"><e>cast "sendrecv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SENDRECV>
		<SENDONLY public="1" get="inline" set="null" expr="cast &quot;sendonly&quot;" line="29" static="1">
			<x path="js.html.rtc.RtpTransceiverDirection"/>
			<meta>
				<m n=":value"><e>cast "sendonly"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SENDONLY>
		<RECVONLY public="1" get="inline" set="null" expr="cast &quot;recvonly&quot;" line="30" static="1">
			<x path="js.html.rtc.RtpTransceiverDirection"/>
			<meta>
				<m n=":value"><e>cast "recvonly"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RECVONLY>
		<INACTIVE public="1" get="inline" set="null" expr="cast &quot;inactive&quot;" line="31" static="1">
			<x path="js.html.rtc.RtpTransceiverDirection"/>
			<meta>
				<m n=":value"><e>cast "inactive"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INACTIVE>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.html.rtc.RtpTransceiverInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtpTransceiverInit.hx"><a>
	<streams>
		<x path="Null"><c path="Array"><c path="js.html.MediaStream"/></c></x>
		<meta><m n=":optional"/></meta>
	</streams>
	<direction>
		<x path="Null"><x path="js.html.rtc.RtpTransceiverDirection"/></x>
		<meta><m n=":optional"/></meta>
	</direction>
</a></typedef>
	<typedef path="js.html.rtc.RtxParameters" params="" file="/home/vsts/work/1/s/std/js/html/rtc/RtxParameters.hx"><a><ssrc>
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
</ssrc></a></typedef>
	<abstract path="js.html.rtc.SdpType" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SdpType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._SdpType.SdpType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SdpType.hx" private="1" module="js.html.rtc.SdpType" extern="1" final="1">
	<OFFER public="1" get="inline" set="null" expr="cast &quot;offer&quot;" line="28" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "offer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OFFER>
	<PRANSWER public="1" get="inline" set="null" expr="cast &quot;pranswer&quot;" line="29" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "pranswer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRANSWER>
	<ANSWER public="1" get="inline" set="null" expr="cast &quot;answer&quot;" line="30" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "answer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANSWER>
	<ROLLBACK public="1" get="inline" set="null" expr="cast &quot;rollback&quot;" line="31" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "rollback"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROLLBACK>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._SdpType.SdpType_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SdpType.hx" private="1" module="js.html.rtc.SdpType" extern="1" final="1">
		<OFFER public="1" get="inline" set="null" expr="cast &quot;offer&quot;" line="28" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "offer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OFFER>
		<PRANSWER public="1" get="inline" set="null" expr="cast &quot;pranswer&quot;" line="29" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "pranswer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRANSWER>
		<ANSWER public="1" get="inline" set="null" expr="cast &quot;answer&quot;" line="30" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "answer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANSWER>
		<ROLLBACK public="1" get="inline" set="null" expr="cast &quot;rollback&quot;" line="31" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "rollback"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROLLBACK>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.rtc.SessionDescription" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SessionDescription.hx" extern="1">
		<type public="1">
			<x path="js.html.rtc.SdpType"/>
			<haxe_doc>An enum of type ``RTCSdpType`` describing the session description's type.</haxe_doc>
		</type>
		<sdp public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing the `SDP` describing the session.</haxe_doc>
		</sdp>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a `JSON` description of the object. The values of both properties, `RTCSessionDescription.type` and `RTCSessionDescription.sdp`, are contained in the generated JSON.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="?descriptionInitDict">
				<x path="Null"><t path="js.html.rtc.SessionDescriptionInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCSessionDescription` interface describes one end of a connection—or potential connection—and how it's configured. Each `RTCSessionDescription` consists of a description `type` indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.

	Documentation [RTCSessionDescription](https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCSessionDescription"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.SessionDescriptionInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SessionDescriptionInit.hx"><a>
	<type><x path="js.html.rtc.SdpType"/></type>
	<sdp>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</sdp>
</a></typedef>
	<abstract path="js.html.rtc.SignalingState" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SignalingState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._SignalingState.SignalingState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SignalingState.hx" private="1" module="js.html.rtc.SignalingState" extern="1" final="1">
	<STABLE public="1" get="inline" set="null" expr="cast &quot;stable&quot;" line="28" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "stable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STABLE>
	<HAVE_LOCAL_OFFER public="1" get="inline" set="null" expr="cast &quot;have-local-offer&quot;" line="29" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-local-offer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_LOCAL_OFFER>
	<HAVE_REMOTE_OFFER public="1" get="inline" set="null" expr="cast &quot;have-remote-offer&quot;" line="30" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-remote-offer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_REMOTE_OFFER>
	<HAVE_LOCAL_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-local-pranswer&quot;" line="31" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-local-pranswer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_LOCAL_PRANSWER>
	<HAVE_REMOTE_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-remote-pranswer&quot;" line="32" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-remote-pranswer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_REMOTE_PRANSWER>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="33" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._SignalingState.SignalingState_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/rtc/SignalingState.hx" private="1" module="js.html.rtc.SignalingState" extern="1" final="1">
		<STABLE public="1" get="inline" set="null" expr="cast &quot;stable&quot;" line="28" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "stable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STABLE>
		<HAVE_LOCAL_OFFER public="1" get="inline" set="null" expr="cast &quot;have-local-offer&quot;" line="29" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-local-offer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_LOCAL_OFFER>
		<HAVE_REMOTE_OFFER public="1" get="inline" set="null" expr="cast &quot;have-remote-offer&quot;" line="30" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-remote-offer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_REMOTE_OFFER>
		<HAVE_LOCAL_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-local-pranswer&quot;" line="31" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-local-pranswer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_LOCAL_PRANSWER>
		<HAVE_REMOTE_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-remote-pranswer&quot;" line="32" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-remote-pranswer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_REMOTE_PRANSWER>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="33" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.rtc.StatsReport" params="" file="/home/vsts/work/1/s/std/js/html/rtc/StatsReport.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `RTCStatsReport` interface is used to provide statistics data about WebRTC connections as returned by the `RTCPeerConnection.getStats()`, `RTCRtpReceiver.getStats()`, and `RTCRtpSender.getStats()` methods.

	Documentation [RTCStatsReport](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCStatsReport"</e></m></meta>
	</class>
	<class path="js.html.rtc.TrackEvent" params="" file="/home/vsts/work/1/s/std/js/html/rtc/TrackEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<receiver public="1" set="null">
			<c path="js.html.rtc.RtpReceiver"/>
			<haxe_doc>The `RTCRtpReceiver` used by the track that's been added to the `RTCPeerConnection`.</haxe_doc>
		</receiver>
		<track public="1" set="null">
			<c path="js.html.MediaStreamTrack"/>
			<haxe_doc>The `MediaStreamTrack` which has been added to the connection.</haxe_doc>
		</track>
		<streams public="1" set="null">
			<c path="Array"><c path="js.html.MediaStream"/></c>
			<haxe_doc>An array of `MediaStream` objects, each representing one of the media streams which comprise the `RTCTrackEvent.track` that was added to the connection. By default, the array is empty.</haxe_doc>
		</streams>
		<transceiver public="1" set="null">
			<c path="js.html.rtc.RtpTransceiver"/>
			<haxe_doc>The `RTCRtpTransceiver` being used by the new track.</haxe_doc>
		</transceiver>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.rtc.TrackEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The WebRTC API interface `RTCTrackEvent` represents the `track` event, which is sent when a new `MediaStreamTrack` is added to an `RTCRtpReceiver` which is part of the `RTCPeerConnection`.

	Documentation [RTCTrackEvent](https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCTrackEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCTrackEvent"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.TrackEventInit" params="" file="/home/vsts/work/1/s/std/js/html/rtc/TrackEventInit.hx"><a>
	<transceiver><c path="js.html.rtc.RtpTransceiver"/></transceiver>
	<track><c path="js.html.MediaStreamTrack"/></track>
	<streams>
		<x path="Null"><c path="Array"><c path="js.html.MediaStream"/></c></x>
		<meta><m n=":optional"/></meta>
	</streams>
	<receiver><c path="js.html.rtc.RtpReceiver"/></receiver>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.svg.Element" params="" file="/home/vsts/work/1/s/std/js/html/svg/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<ownerSVGElement public="1" set="null">
			<c path="js.html.svg.SVGElement"/>
			<haxe_doc>An `SVGSVGElement` referring to the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</ownerSVGElement>
		<viewportElement public="1" set="null">
			<c path="js.html.svg.Element"/>
			<haxe_doc>The `SVGElement`, which established the current viewport. Often, the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</viewportElement>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.

	Documentation [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GraphicsElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/GraphicsElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<transform public="1" set="null">
			<c path="js.html.svg.AnimatedTransformList"/>
			<haxe_doc>An `SVGAnimatedTransformList` reflecting the computed value of the `transform` property and its corresponding `transform` attribute of the given element.</haxe_doc>
		</transform>
		<nearestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></nearestViewportElement>
		<farthestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></farthestViewportElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getBBox public="1" set="method">
			<f a="?aOptions">
				<x path="Null"><t path="js.html.svg.BoundingBoxOptions"/></x>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>Returns a `DOMRect` representing the computed bounding box of the current element.
		@throws DOMError</haxe_doc>
		</getBBox>
		<getCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system.</haxe_doc>
		</getCTM>
		<getScreenCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment.</haxe_doc>
		</getScreenCTM>
		<getTransformToElement public="1" set="method">
			<f a="element">
				<c path="js.html.svg.GraphicsElement"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getTransformToElement>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGGraphicsElement` interface represents SVG elements whose primary purpose is to directly render graphics into a group.

	Documentation [SVGGraphicsElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGraphicsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/AElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<target public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>It corresponds to the `target` attribute of the given element.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>See `HTMLAnchorElement.download`.</haxe_doc>
		</download>
		<ping public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the ping attribute, containing a space-separated list of URLs to which, when the hyperlink is followed, `POST` requests with the body `PING` will be sent by the browser (in the background). Typically used for tracking.</haxe_doc>
		</ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>See `HTMLAnchorElement.rel`.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>See `HTMLAnchorElement.referrerPolicy`.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>See `HTMLAnchorElement.relList`.</haxe_doc>
		</relList>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `hreflang` attribute, indicating the language of the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` attribute, indicating the MIME type of the linked resource.</haxe_doc>
		</type>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being a synonym for the `Node.textContent` property.</haxe_doc>
		</text>
		<href public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>See `HTMLAnchorElement.href`.</haxe_doc>
		</href>
		<haxe_doc><![CDATA[The `SVGAElement` interface provides access to the properties of `a` element, as well as methods to manipulate them.

	Documentation [SVGAElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Angle" params="" file="/home/vsts/work/1/s/std/js/html/svg/Angle.hx" extern="1">
		<SVG_ANGLETYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Some unknown type of value.</haxe_doc>
		</SVG_ANGLETYPE_UNKNOWN>
		<SVG_ANGLETYPE_UNSPECIFIED public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>A unitless `number` interpreted as a value in degrees.</haxe_doc>
		</SVG_ANGLETYPE_UNSPECIFIED>
		<SVG_ANGLETYPE_DEG public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
			<haxe_doc>An `angle` with a `deg` unit.</haxe_doc>
		</SVG_ANGLETYPE_DEG>
		<SVG_ANGLETYPE_RAD public="1" get="inline" set="null" expr="3" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
			<haxe_doc>An `angle` with a `rad` unit.</haxe_doc>
		</SVG_ANGLETYPE_RAD>
		<SVG_ANGLETYPE_GRAD public="1" get="inline" set="null" expr="4" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
			<haxe_doc>An `angle` with a `grad` unit.</haxe_doc>
		</SVG_ANGLETYPE_GRAD>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the `SVG_ANGLETYPE_*` constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in user units. Setting this attribute will cause `valueInSpecifiedUnits` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</value>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in the units expressed by `unitType`. Setting this attribute will cause `value` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueInSpecifiedUnits>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc>The value as a `DOMString` value, in the units expressed by `unitType`. Setting this attribute will cause `value`, `valueInSpecifiedUnits` and `unitType` to be updated automatically to reflect this setting.
		
		 Exceptions on setting:
		 a `DOMException` with code `SYNTAX_ERR` is raised if the assigned string cannot be parsed as a valid `angle`. a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGAngle` interface is used to represent a value that can be an `angle` or `number` value. An `SVGAngle` reflected through the `animVal` attribute is always read only.

	Documentation [SVGAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimationElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimationElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<targetElement public="1" set="null">
			<c path="js.html.svg.Element"/>
			<haxe_doc>An `SVGElement` representing the element which is being animated. If no target element is being animated (for example, because the `href` specifies an unknown element) the value returned is `null`.</haxe_doc>
		</targetElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getStartTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a float representing the begin time, in seconds, for this animation element's current interval, if it exists, regardless of whether the interval has begun yet. If there is no current interval, then a `DOMException` with code `INVALID_STATE_ERR` is thrown.
		@throws DOMError</haxe_doc>
		</getStartTime>
		<getCurrentTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a float representing the current time in seconds relative to time zero for the given time container.</haxe_doc>
		</getCurrentTime>
		<getSimpleDuration public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a float representing the number of seconds for the simple duration for this animation. If the simple duration is undefined (e.g., the end time is indefinite), then a `DOMException` with code `NOT_SUPPORTED_ERR` is raised.
		@throws DOMError</haxe_doc>
		</getSimpleDuration>
		<beginElement public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a begin instance time for the current time. The new instance time is added to the begin instance times list. The behavior of this method is equivalent to `beginElementAt(0)`.
		@throws DOMError</haxe_doc>
		</beginElement>
		<beginElementAt public="1" set="method">
			<f a="offset">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a begin instance time for the current time plus the specified offset. The new instance time is added to the begin instance times list.
		 
		@throws DOMError</haxe_doc>
		</beginElementAt>
		<endElement public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates an end instance time for the current time. The new instance time is added to the end instance times list. The behavior of this method is equivalent to `endElementAt(0)`.
		 
		@throws DOMError</haxe_doc>
		</endElement>
		<endElementAt public="1" set="method">
			<f a="offset">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a end instance time for the current time plus the specified offset. The new instance time is added to the end instance times list.
		 
		@throws DOMError</haxe_doc>
		</endElementAt>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGAnimationElement` interface is the base interface for all of the animation element interfaces: `SVGAnimateElement`, `SVGSetElement`, `SVGAnimateColorElement`, `SVGAnimateMotionElement` and `SVGAnimateTransformElement`.

	Documentation [SVGAnimationElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimationElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimateElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimateElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGAnimateElement` interface corresponds to the `animate` element.

	Documentation [SVGAnimateElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimateElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimateMotionElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimateMotionElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGAnimateMotionElement` interface corresponds to the `animateMotion` element.

	Documentation [SVGAnimateMotionElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimateMotionElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimateTransformElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimateTransformElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGAnimateTransformElement` interface corresponds to the `animateTransform` element.

	Documentation [SVGAnimateTransformElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimateTransformElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedAngle" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedAngle.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Angle"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Angle"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedAngle` interface is used for attributes of basic type angle which can be animated.

	Documentation [SVGAnimatedAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedBoolean" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedBoolean.hx" extern="1">
		<baseVal public="1"><x path="Bool"/></baseVal>
		<animVal public="1" set="null"><x path="Bool"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedBoolean` interface is used for attributes of type boolean which can be animated.

	Documentation [SVGAnimatedBoolean](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedBoolean"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedEnumeration" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedEnumeration.hx" extern="1">
		<baseVal public="1"><x path="Int"/></baseVal>
		<animVal public="1" set="null"><x path="Int"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedEnumeration` interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.

	Documentation [SVGAnimatedEnumeration](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedEnumeration"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedInteger" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedInteger.hx" extern="1">
		<baseVal public="1"><x path="Int"/></baseVal>
		<animVal public="1" set="null"><x path="Int"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedInteger` interface is used for attributes of basic type integer which can be animated.

	Documentation [SVGAnimatedInteger](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedInteger"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLength" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedLength.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Length"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Length"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLength` interface is used for attributes of basic type length which can be animated.

	Documentation [SVGAnimatedLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLength"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLengthList" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedLengthList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.LengthList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.LengthList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLengthList` interface is used for attributes of type `SVGLengthList` which can be animated.

	Documentation [SVGAnimatedLengthList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLengthList"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedNumber" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedNumber.hx" extern="1">
		<baseVal public="1"><x path="Float"/></baseVal>
		<animVal public="1" set="null"><x path="Float"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedNumber` interface is used for attributes of basic type Number which can be animated.

	Documentation [SVGAnimatedNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedNumberList" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedNumberList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.NumberList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.NumberList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedNumber` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedNumberList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedNumberList"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedPreserveAspectRatio" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedPreserveAspectRatio.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedPreserveAspectRatio` interface is used for attributes of type `SVGPreserveAspectRatio` which can be animated.

	Documentation [SVGAnimatedPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedRect" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedRect.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Rect"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Rect"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedRect` interface is used for attributes of basic `SVGRect` which can be animated.

	Documentation [SVGAnimatedRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedRect"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedString" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedString.hx" extern="1">
		<baseVal public="1">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.</haxe_doc>
		</baseVal>
		<animVal public="1" set="null">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.</haxe_doc>
		</animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedString` interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.

	Documentation [SVGAnimatedString](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedString"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedTransformList" params="" file="/home/vsts/work/1/s/std/js/html/svg/AnimatedTransformList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.TransformList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.TransformList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedTransformList"</e></m></meta>
	</class>
	<typedef path="js.html.svg.BoundingBoxOptions" params="" file="/home/vsts/work/1/s/std/js/html/svg/BoundingBoxOptions.hx"><a>
	<stroke>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stroke>
	<markers>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</markers>
	<fill>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<clipped>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</clipped>
</a></typedef>
	<class path="js.html.svg.GeometryElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/GeometryElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<pathLength public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>This property reflects the `pathLength` attribute.</haxe_doc>
		</pathLength>
		<getTotalLength public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the user agent's computed value for the total length of the path in user units.</haxe_doc>
		</getTotalLength>
		<getPointAtLength public="1" set="method">
			<f a="distance">
				<x path="Float"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>Returns the point at a given distance along the path.
		@throws DOMError</haxe_doc>
		</getPointAtLength>
		<haxe_doc><![CDATA[The `SVGGeometryElement` interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked. This includes paths and the basic shapes.

	Documentation [SVGGeometryElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGeometryElement"</e></m></meta>
	</class>
	<class path="js.html.svg.CircleElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/CircleElement.hx" extern="1">
		<extends path="js.html.svg.GeometryElement"/>
		<cx public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>This property defines the x-coordinate of the center of the circle element. It is denoted by the `cx` attribute of the `circle` element. If unspecified, the value of this attribute is assumed to be `0`.
		
		 It can be animated by SVG's animation elements.</haxe_doc>
		</cx>
		<cy public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>This property defines the y-coordinate of the center of the circle element. It is denoted by the `cy` attribute of the `circle` element. If unspecified, the value of this attribute is assumed to be `0`.
		
		 It can be animated by SVG's animation elements.</haxe_doc>
		</cy>
		<r public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>This property defines the radius of the circle element. It is denoted by the `r` of the `circle` element. A negative value gives an error, while `0` disables the rendering of the element.
		
		 It can be animated by SVG's animation elements.</haxe_doc>
		</r>
		<haxe_doc><![CDATA[The `SVGCircleElement` interface is an interface for the `circle` element. The circle element is defined by the cx and cy attributes that denote the coordinates of the centre of the circle.

	Documentation [SVGCircleElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGCircleElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ClipPathElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/ClipPathElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<clipPathUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `clipPathUnits` attribute of the given `clipPath` element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</clipPathUnits>
		<transform public="1" set="null"><c path="js.html.svg.AnimatedTransformList"/></transform>
		<haxe_doc><![CDATA[The `SVGClipPathElement` interface provides access to the properties of `clipPath` elements, as well as methods to manipulate them.

	Documentation [SVGClipPathElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGClipPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ComponentTransferFunctionElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/ComponentTransferFunctionElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN>
		<SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY>
		<SVG_FECOMPONENTTRANSFER_TYPE_TABLE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_TABLE>
		<SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE>
		<SVG_FECOMPONENTTRANSFER_TYPE_LINEAR public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_LINEAR>
		<SVG_FECOMPONENTTRANSFER_TYPE_GAMMA public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_GAMMA>
		<type public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `type` attribute of the given element. It takes one of the `SVG_FECOMPONENTTRANSFER_TYPE_*` constants defined on this interface.</haxe_doc>
		</type>
		<tableValues public="1" set="null">
			<c path="js.html.svg.AnimatedNumberList"/>
			<haxe_doc>An `SVGAnimatedNumberList` corresponding to the `tableValues` attribute of the given element.</haxe_doc>
		</tableValues>
		<slope public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `slope` attribute of the given element.</haxe_doc>
		</slope>
		<intercept public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `intercept` attribute of the given element.</haxe_doc>
		</intercept>
		<amplitude public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `amplitude` attribute of the given element.</haxe_doc>
		</amplitude>
		<exponent public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `exponent` attribute of the given element.</haxe_doc>
		</exponent>
		<offset public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `offset` attribute of the given element.</haxe_doc>
		</offset>
		<haxe_doc><![CDATA[The `SVGComponentTransferFunctionElement` interface defines a base interface used by the component transfer function interfaces.

	Documentation [SVGComponentTransferFunctionElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGComponentTransferFunctionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGComponentTransferFunctionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGComponentTransferFunctionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGComponentTransferFunctionElement"</e></m></meta>
	</class>
	<class path="js.html.svg.DefsElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/DefsElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<haxe_doc><![CDATA[The `SVGDefsElement` interface corresponds to the `defs` element.

	Documentation [SVGDefsElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGDefsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.DescElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/DescElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<haxe_doc><![CDATA[The `SVGDescElement` interface corresponds to the `desc` element.

	Documentation [SVGDescElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGDescElement"</e></m></meta>
	</class>
	<class path="js.html.svg.EllipseElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/EllipseElement.hx" extern="1">
		<extends path="js.html.svg.GeometryElement"/>
		<cx public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>This property returns a `SVGAnimatedLength` reflecting the `cx` attribute of the given `ellipse` element.</haxe_doc>
		</cx>
		<cy public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>This property returns a `SVGAnimatedLength` reflecting the `cy` attribute of the given `ellipse` element.</haxe_doc>
		</cy>
		<rx public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>This property returns a `SVGAnimatedLength` reflecting the `rx` attribute of the given `ellipse` element.</haxe_doc>
		</rx>
		<ry public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>This property returns a `SVGAnimatedLength` reflecting the `ry` attribute of the given `ellipse` element.</haxe_doc>
		</ry>
		<haxe_doc><![CDATA[The `SVGEllipseElement` interface provides access to the properties of `ellipse` elements.

	Documentation [SVGEllipseElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGEllipseElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEBlendElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEBlendElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FEBLEND_MODE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FEBLEND_MODE_UNKNOWN>
		<SVG_FEBLEND_MODE_NORMAL public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FEBLEND_MODE_NORMAL>
		<SVG_FEBLEND_MODE_MULTIPLY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FEBLEND_MODE_MULTIPLY>
		<SVG_FEBLEND_MODE_SCREEN public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FEBLEND_MODE_SCREEN>
		<SVG_FEBLEND_MODE_DARKEN public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FEBLEND_MODE_DARKEN>
		<SVG_FEBLEND_MODE_LIGHTEN public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_FEBLEND_MODE_LIGHTEN>
		<SVG_FEBLEND_MODE_OVERLAY public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_FEBLEND_MODE_OVERLAY>
		<SVG_FEBLEND_MODE_COLOR_DODGE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_FEBLEND_MODE_COLOR_DODGE>
		<SVG_FEBLEND_MODE_COLOR_BURN public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_FEBLEND_MODE_COLOR_BURN>
		<SVG_FEBLEND_MODE_HARD_LIGHT public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_FEBLEND_MODE_HARD_LIGHT>
		<SVG_FEBLEND_MODE_SOFT_LIGHT public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_FEBLEND_MODE_SOFT_LIGHT>
		<SVG_FEBLEND_MODE_DIFFERENCE public="1" get="inline" set="null" expr="11" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</SVG_FEBLEND_MODE_DIFFERENCE>
		<SVG_FEBLEND_MODE_EXCLUSION public="1" get="inline" set="null" expr="12" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SVG_FEBLEND_MODE_EXCLUSION>
		<SVG_FEBLEND_MODE_HUE public="1" get="inline" set="null" expr="13" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</SVG_FEBLEND_MODE_HUE>
		<SVG_FEBLEND_MODE_SATURATION public="1" get="inline" set="null" expr="14" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</SVG_FEBLEND_MODE_SATURATION>
		<SVG_FEBLEND_MODE_COLOR public="1" get="inline" set="null" expr="15" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</SVG_FEBLEND_MODE_COLOR>
		<SVG_FEBLEND_MODE_LUMINOSITY public="1" get="inline" set="null" expr="16" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SVG_FEBLEND_MODE_LUMINOSITY>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<in2 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in2` attribute of the given element.</haxe_doc>
		</in2>
		<mode public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `mode` attribute of the given element. It takes one of the `SVG_FEBLEND_MODE_*` constants defined on this interface.</haxe_doc>
		</mode>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEBlendElement` interface corresponds to the `feBlend` element.

	Documentation [SVGFEBlendElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEBlendElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEBlendElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEBlendElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEBlendElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEColorMatrixElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEColorMatrixElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FECOLORMATRIX_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_UNKNOWN>
		<SVG_FECOLORMATRIX_TYPE_MATRIX public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_MATRIX>
		<SVG_FECOLORMATRIX_TYPE_SATURATE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_SATURATE>
		<SVG_FECOLORMATRIX_TYPE_HUEROTATE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_HUEROTATE>
		<SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<type public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `type` attribute of the given element. It takes one of the `SVG_FECOLORMATRIX_TYPE_*` constants defined on this interface.</haxe_doc>
		</type>
		<values public="1" set="null">
			<c path="js.html.svg.AnimatedNumberList"/>
			<haxe_doc>An `SVGAnimatedNumberList` corresponding to the `values` attribute of the given element.</haxe_doc>
		</values>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEColorMatrixElement` interface corresponds to the `feColorMatrix` element.

	Documentation [SVGFEColorMatrixElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEColorMatrixElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEColorMatrixElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEColorMatrixElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEColorMatrixElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEComponentTransferElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEComponentTransferElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEComponentTransferElement` interface corresponds to the `feComponentTransfer` element.

	Documentation [SVGFEComponentTransferElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEComponentTransferElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEComponentTransferElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEComponentTransferElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEComponentTransferElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FECompositeElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FECompositeElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FECOMPOSITE_OPERATOR_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_UNKNOWN>
		<SVG_FECOMPOSITE_OPERATOR_OVER public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_OVER>
		<SVG_FECOMPOSITE_OPERATOR_IN public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_IN>
		<SVG_FECOMPOSITE_OPERATOR_OUT public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_OUT>
		<SVG_FECOMPOSITE_OPERATOR_ATOP public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_ATOP>
		<SVG_FECOMPOSITE_OPERATOR_XOR public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_XOR>
		<SVG_FECOMPOSITE_OPERATOR_ARITHMETIC public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_ARITHMETIC>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<in2 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in2>
		<operator_ public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<meta><m n=":native"><e>"operator"</e></m></meta>
		</operator_>
		<k1 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k1>
		<k2 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k2>
		<k3 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k3>
		<k4 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k4>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFECompositeElement` interface corresponds to the `feComposite` element.

	Documentation [SVGFECompositeElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFECompositeElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFECompositeElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFECompositeElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFECompositeElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEConvolveMatrixElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEConvolveMatrixElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_EDGEMODE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_EDGEMODE_UNKNOWN>
		<SVG_EDGEMODE_DUPLICATE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_EDGEMODE_DUPLICATE>
		<SVG_EDGEMODE_WRAP public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_EDGEMODE_WRAP>
		<SVG_EDGEMODE_NONE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_EDGEMODE_NONE>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<orderX public="1" set="null">
			<c path="js.html.svg.AnimatedInteger"/>
			<haxe_doc>An `SVGAnimatedInteger` corresponding to the `order` attribute of the given element.</haxe_doc>
		</orderX>
		<orderY public="1" set="null">
			<c path="js.html.svg.AnimatedInteger"/>
			<haxe_doc>An `SVGAnimatedInteger` corresponding to the `order` attribute of the given element.</haxe_doc>
		</orderY>
		<kernelMatrix public="1" set="null">
			<c path="js.html.svg.AnimatedNumberList"/>
			<haxe_doc>An `SVGAnimatedNumberList` corresponding to the `kernelMatrix` attribute of the given element.</haxe_doc>
		</kernelMatrix>
		<divisor public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `divisor` attribute of the given element.</haxe_doc>
		</divisor>
		<bias public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `bias` attribute of the given element.</haxe_doc>
		</bias>
		<targetX public="1" set="null">
			<c path="js.html.svg.AnimatedInteger"/>
			<haxe_doc>An `SVGAnimatedInteger` corresponding to the `targetX` attribute of the given element.</haxe_doc>
		</targetX>
		<targetY public="1" set="null">
			<c path="js.html.svg.AnimatedInteger"/>
			<haxe_doc>An `SVGAnimatedInteger` corresponding to the `targetY` attribute of the given element.</haxe_doc>
		</targetY>
		<edgeMode public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `edgeMode` attribute of the given element. Takes one of the `SVG_EDGEMODE_*` constants defined on this interface.</haxe_doc>
		</edgeMode>
		<kernelUnitLengthX public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `kernelUnitLength` attribute of the given element.</haxe_doc>
		</kernelUnitLengthX>
		<kernelUnitLengthY public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `kernelUnitLength` attribute of the given element.</haxe_doc>
		</kernelUnitLengthY>
		<preserveAlpha public="1" set="null">
			<c path="js.html.svg.AnimatedBoolean"/>
			<haxe_doc>An `SVGAnimatedBoolean` corresponding to the `preserveAlpha` attribute of the given element.</haxe_doc>
		</preserveAlpha>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEConvolveMatrixElement` interface corresponds to the `feConvolveMatrix` element.

	Documentation [SVGFEConvolveMatrixElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEConvolveMatrixElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEConvolveMatrixElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEConvolveMatrixElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEConvolveMatrixElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDiffuseLightingElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEDiffuseLightingElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<surfaceScale public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `surfaceScale` attribute of the given element.</haxe_doc>
		</surfaceScale>
		<diffuseConstant public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `diffuseConstant` attribute of the given element.</haxe_doc>
		</diffuseConstant>
		<kernelUnitLengthX public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the X component of the `kernelUnitLength` attribute of the given element.</haxe_doc>
		</kernelUnitLengthX>
		<kernelUnitLengthY public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the Y component of the `kernelUnitLength` attribute of the given element.</haxe_doc>
		</kernelUnitLengthY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEDiffuseLightingElement` interface corresponds to the `feDiffuseLighting` element.

	Documentation [SVGFEDiffuseLightingElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDiffuseLightingElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDiffuseLightingElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDiffuseLightingElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEDiffuseLightingElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDisplacementMapElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEDisplacementMapElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_CHANNEL_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_CHANNEL_UNKNOWN>
		<SVG_CHANNEL_R public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_CHANNEL_R>
		<SVG_CHANNEL_G public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_CHANNEL_G>
		<SVG_CHANNEL_B public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_CHANNEL_B>
		<SVG_CHANNEL_A public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_CHANNEL_A>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<in2 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in2` attribute of the given element.</haxe_doc>
		</in2>
		<scale public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `scale` attribute of the given element.</haxe_doc>
		</scale>
		<xChannelSelector public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `xChannelSelect` attribute of the given element. It takes one of the `SVG_CHANNEL_*` constants defined on this interface.</haxe_doc>
		</xChannelSelector>
		<yChannelSelector public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `yChannelSelect` attribute of the given element. It takes one of the `SVG_CHANNEL_*` constants defined on this interface.</haxe_doc>
		</yChannelSelector>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEDisplacementMapElement` interface corresponds to the `feDisplacementMap` element.

	Documentation [SVGFEDisplacementMapElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDisplacementMapElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDisplacementMapElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDisplacementMapElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEDisplacementMapElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDistantLightElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEDistantLightElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<azimuth public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `azimuth` attribute of the given element.</haxe_doc>
		</azimuth>
		<elevation public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `elevation` attribute of the given element.</haxe_doc>
		</elevation>
		<haxe_doc><![CDATA[The `SVGFEDistantLightElement` interface corresponds to the `feDistantLight` element.

	Documentation [SVGFEDistantLightElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDistantLightElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDistantLightElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDistantLightElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEDistantLightElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDropShadowElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEDropShadowElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<dx public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `dx` attribute of the given element.</haxe_doc>
		</dx>
		<dy public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `dy` attribute of the given element.</haxe_doc>
		</dy>
		<stdDeviationX public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) X component of the `stdDeviationX` attribute of the given element.</haxe_doc>
		</stdDeviationX>
		<stdDeviationY public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) Y component of the `stdDeviationY` attribute of the given element.</haxe_doc>
		</stdDeviationY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<setStdDeviation public="1" set="method">
			<f a="stdDeviationX:stdDeviationY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the values for the `stdDeviation` attribute.</haxe_doc>
		</setStdDeviation>
		<haxe_doc><![CDATA[The `SVGFEDropShadowElement` interface corresponds to the `feDropShadow` element.

	Documentation [SVGFEDropShadowElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDropShadowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDropShadowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEDropShadowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEDropShadowElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFloodElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEFloodElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEFloodElement` interface corresponds to the `feFlood` element.

	Documentation [SVGFEFloodElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFloodElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFloodElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFloodElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEFloodElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncAElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEFuncAElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<haxe_doc><![CDATA[The `SVGFEFuncAElement` interface corresponds to the `feFuncA` element.

	Documentation [SVGFEFuncAElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncAElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncAElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncAElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEFuncAElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncBElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEFuncBElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<haxe_doc><![CDATA[The `SVGFEFuncBElement` interface corresponds to the `feFuncB` element.

	Documentation [SVGFEFuncBElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncBElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncBElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncBElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEFuncBElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncGElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEFuncGElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<haxe_doc><![CDATA[The `SVGFEFuncGElement` interface corresponds to the `feFuncG` element.

	Documentation [SVGFEFuncGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEFuncGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncRElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEFuncRElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<haxe_doc><![CDATA[The `SVGFEFuncRElement` interface corresponds to the `feFuncR` element.

	Documentation [SVGFEFuncRElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEFuncRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEFuncRElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEGaussianBlurElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEGaussianBlurElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<stdDeviationX public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) X component of the `stdDeviation` attribute of the given element.</haxe_doc>
		</stdDeviationX>
		<stdDeviationY public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the (possibly automatically computed) Y component of the `stdDeviation` attribute of the given element.</haxe_doc>
		</stdDeviationY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<setStdDeviation public="1" set="method">
			<f a="stdDeviationX:stdDeviationY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the values for the `stdDeviation` attribute.</haxe_doc>
		</setStdDeviation>
		<haxe_doc><![CDATA[The `SVGFEGaussianBlurElement` interface corresponds to the `feGaussianBlur` element.

	Documentation [SVGFEGaussianBlurElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEGaussianBlurElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEGaussianBlurElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEGaussianBlurElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEGaussianBlurElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEImageElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEImageElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<preserveAspectRatio public="1" set="null">
			<c path="js.html.svg.AnimatedPreserveAspectRatio"/>
			<haxe_doc>An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given element.</haxe_doc>
		</preserveAspectRatio>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGFEImageElement` interface corresponds to the `feImage` element.

	Documentation [SVGFEImageElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEMergeElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEMergeElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEMergeElement` interface corresponds to the `feMerge` element.

	Documentation [SVGFEMergeElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEMergeElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEMergeNodeElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEMergeNodeElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<haxe_doc><![CDATA[The `SVGFEMergeNodeElement` interface corresponds to the `feMergeNode` element.

	Documentation [SVGFEMergeNodeElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeNodeElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeNodeElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMergeNodeElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEMergeNodeElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEMorphologyElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEMorphologyElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_MORPHOLOGY_OPERATOR_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MORPHOLOGY_OPERATOR_UNKNOWN>
		<SVG_MORPHOLOGY_OPERATOR_ERODE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MORPHOLOGY_OPERATOR_ERODE>
		<SVG_MORPHOLOGY_OPERATOR_DILATE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MORPHOLOGY_OPERATOR_DILATE>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<operator_ public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<meta><m n=":native"><e>"operator"</e></m></meta>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `operator` attribute of the given element. It takes one of the `SVG_MORPHOLOGY_OPERATOR_*` constants defined on this interface.</haxe_doc>
		</operator_>
		<radiusX public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the X component of the `radius` attribute of the given element.</haxe_doc>
		</radiusX>
		<radiusY public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the Y component of the `radius` attribute of the given element.</haxe_doc>
		</radiusY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEMorphologyElement` interface corresponds to the `feMorphology` element.

	Documentation [SVGFEMorphologyElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMorphologyElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMorphologyElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEMorphologyElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEMorphologyElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEOffsetElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEOffsetElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<dx public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `dx` attribute of the given element.</haxe_doc>
		</dx>
		<dy public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `dy` attribute of the given element.</haxe_doc>
		</dy>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFEOffsetElement` interface corresponds to the `feOffset` element.

	Documentation [SVGFEOffsetElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEOffsetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEOffsetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEOffsetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEOffsetElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEPointLightElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FEPointLightElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `x` attribute of the given element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `y` attribute of the given element.</haxe_doc>
		</y>
		<z public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `z` attribute of the given element.</haxe_doc>
		</z>
		<haxe_doc><![CDATA[The `SVGFEPointLightElement` interface corresponds to the `fePointLight` element.

	Documentation [SVGFEPointLightElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEPointLightElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFEPointLightElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFEPointLightElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFEPointLightElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FESpecularLightingElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FESpecularLightingElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<surfaceScale public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `surfaceScale` attribute of the given element.</haxe_doc>
		</surfaceScale>
		<specularConstant public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `specularConstant` attribute of the given element.</haxe_doc>
		</specularConstant>
		<specularExponent public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `specularExponent` attribute of the given element.</haxe_doc>
		</specularExponent>
		<kernelUnitLengthX public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the X component of the `kernelUnitLength` attribute of the given element.</haxe_doc>
		</kernelUnitLengthX>
		<kernelUnitLengthY public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the Y component of the `kernelUnitLength` attribute of the given element.</haxe_doc>
		</kernelUnitLengthY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFESpecularLightingElement` interface corresponds to the `feSpecularLighting` element.

	Documentation [SVGFESpecularLightingElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpecularLightingElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFESpecularLightingElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FESpotLightElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FESpotLightElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `x` attribute of the given element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `y` attribute of the given element.</haxe_doc>
		</y>
		<z public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `z` attribute of the given element.</haxe_doc>
		</z>
		<pointsAtX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></pointsAtX>
		<pointsAtY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></pointsAtY>
		<pointsAtZ public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></pointsAtZ>
		<specularExponent public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `specularExponent` attribute of the given element.</haxe_doc>
		</specularExponent>
		<limitingConeAngle public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `limitingConeAngle` attribute of the given element.</haxe_doc>
		</limitingConeAngle>
		<haxe_doc><![CDATA[The `SVGFESpotLightElement` interface corresponds to the `feSpotLight` element.

	Documentation [SVGFESpotLightElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpotLightElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpotLightElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFESpotLightElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFESpotLightElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FETileElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FETileElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>An `SVGAnimatedString` corresponding to the `in` attribute of the given element.</haxe_doc>
		</in1>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFETileElement` interface corresponds to the `feTile` element.

	Documentation [SVGFETileElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFETileElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFETileElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFETileElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFETileElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FETurbulenceElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FETurbulenceElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_TURBULENCE_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TURBULENCE_TYPE_UNKNOWN>
		<SVG_TURBULENCE_TYPE_FRACTALNOISE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TURBULENCE_TYPE_FRACTALNOISE>
		<SVG_TURBULENCE_TYPE_TURBULENCE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TURBULENCE_TYPE_TURBULENCE>
		<SVG_STITCHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_STITCHTYPE_UNKNOWN>
		<SVG_STITCHTYPE_STITCH public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_STITCHTYPE_STITCH>
		<SVG_STITCHTYPE_NOSTITCH public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_STITCHTYPE_NOSTITCH>
		<baseFrequencyX public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the X component of the `baseFrequency` attribute of the given element.</haxe_doc>
		</baseFrequencyX>
		<baseFrequencyY public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the Y component of the `baseFrequency` attribute of the given element.</haxe_doc>
		</baseFrequencyY>
		<numOctaves public="1" set="null">
			<c path="js.html.svg.AnimatedInteger"/>
			<haxe_doc>An `SVGAnimatedInteger` corresponding to the `numOctaves` attribute of the given element.</haxe_doc>
		</numOctaves>
		<seed public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `seed` attribute of the given element.</haxe_doc>
		</seed>
		<stitchTiles public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `stitchTiles` attribute of the given element. It takes one of the `SVG_STITCHTYPE_*` constants defined on this interface.</haxe_doc>
		</stitchTiles>
		<type public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `type` attribute of the given element. It takes one of the `SVG_TURBULENCE_TYPE_*` constants defined on this interface.</haxe_doc>
		</type>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<haxe_doc><![CDATA[The `SVGFETurbulenceElement` interface corresponds to the `feTurbulence` element.

	Documentation [SVGFETurbulenceElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFETurbulenceElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFETurbulenceElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFETurbulenceElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFETurbulenceElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FilterElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/FilterElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<filterUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` that corresponds to the `filterUnits` attribute of the given `filter` element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</filterUnits>
		<primitiveUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` that corresponds to the `primitiveUnits` attribute of the given `filter` element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</primitiveUnits>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` that corresponds to the `x` attribute on the given `filter` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` that corresponds to the `y` attribute of the given `filter` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` that corresponds to the `width` attribute of the given `filter` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` that corresponds to the `height` attribute of the given `filter` element.</haxe_doc>
		</height>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGFilterElement` interface provides access to the properties of `filter` elements, as well as methods to manipulate them.

	Documentation [SVGFilterElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFilterElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ForeignObjectElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/ForeignObjectElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `foreignObject` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `foreignObject` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `foreignObject` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `foreignObject` element.</haxe_doc>
		</height>
		<haxe_doc><![CDATA[The `SVGForeignObjectElement` interface provides access to the properties of `foreignObject` elements, as well as methods to manipulate them.

	Documentation [SVGForeignObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGForeignObjectElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/GElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<haxe_doc><![CDATA[The `SVGGElement` interface corresponds to the `g` element.

	Documentation [SVGGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GradientElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/GradientElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_SPREADMETHOD_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_SPREADMETHOD_UNKNOWN>
		<SVG_SPREADMETHOD_PAD public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_SPREADMETHOD_PAD>
		<SVG_SPREADMETHOD_REFLECT public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_SPREADMETHOD_REFLECT>
		<SVG_SPREADMETHOD_REPEAT public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_SPREADMETHOD_REPEAT>
		<gradientUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>Returns an `SVGAnimatedEnumeration` corresponding to the `gradientUnits` attribute on the given element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</gradientUnits>
		<gradientTransform public="1" set="null">
			<c path="js.html.svg.AnimatedTransformList"/>
			<haxe_doc>Returns an `SVGAnimatedTransformList` corresponding to attribute `gradientTransform` on the given element.</haxe_doc>
		</gradientTransform>
		<spreadMethod public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>Returns an `SVGAnimatedEnumeration` corresponding to attribute `spreadMethod` on the given element. One of the spread method types defined on this interface.</haxe_doc>
		</spreadMethod>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGGradient` interface is a base interface used by `SVGLinearGradientElement` and `SVGRadialGradientElement`.

	Documentation [SVGGradientElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGradientElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ImageElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/ImageElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `image` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `image` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `image` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `image` element.</haxe_doc>
		</height>
		<preserveAspectRatio public="1" set="null">
			<c path="js.html.svg.AnimatedPreserveAspectRatio"/>
			<haxe_doc>An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given `image` element.</haxe_doc>
		</preserveAspectRatio>
		<decoding public="1"><c path="String"/></decoding>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGImageElement` interface corresponds to the `image` element.

	Documentation [SVGImageElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Length" params="" file="/home/vsts/work/1/s/std/js/html/svg/Length.hx" extern="1">
		<SVG_LENGTHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_LENGTHTYPE_UNKNOWN>
		<SVG_LENGTHTYPE_NUMBER public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_LENGTHTYPE_NUMBER>
		<SVG_LENGTHTYPE_PERCENTAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_LENGTHTYPE_PERCENTAGE>
		<SVG_LENGTHTYPE_EMS public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_LENGTHTYPE_EMS>
		<SVG_LENGTHTYPE_EXS public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_LENGTHTYPE_EXS>
		<SVG_LENGTHTYPE_PX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_LENGTHTYPE_PX>
		<SVG_LENGTHTYPE_CM public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_LENGTHTYPE_CM>
		<SVG_LENGTHTYPE_MM public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_LENGTHTYPE_MM>
		<SVG_LENGTHTYPE_IN public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_LENGTHTYPE_IN>
		<SVG_LENGTHTYPE_PT public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_LENGTHTYPE_PT>
		<SVG_LENGTHTYPE_PC public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_LENGTHTYPE_PC>
		<unitType public="1" set="null"><x path="Int"/></unitType>
		<value public="1"><x path="Float"/></value>
		<valueInSpecifiedUnits public="1"><x path="Float"/></valueInSpecifiedUnits>
		<valueAsString public="1"><c path="String"/></valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGLength` interface correspond to the length basic data type.

	Documentation [SVGLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLength"</e></m></meta>
	</class>
	<class path="js.html.svg.LengthList" params="" file="/home/vsts/work/1/s/std/js/html/svg/LengthList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Length"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Length"/>
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Length"/>
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Length"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGLengthList` defines a list of `SVGLength` objects.

	Documentation [SVGLengthList](https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLengthList"</e></m></meta>
	</class>
	<class path="js.html.svg.LineElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/LineElement.hx" extern="1">
		<extends path="js.html.svg.GeometryElement"/>
		<x1 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` that corresponds to attribute `x1` on the given `line` element.</haxe_doc>
		</x1>
		<y1 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` that corresponds to attribute `y1` on the given `line` element.</haxe_doc>
		</y1>
		<x2 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` that corresponds to attribute `x2` on the given `line` element.</haxe_doc>
		</x2>
		<y2 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` that corresponds to attribute `y2` on the given `line` element.</haxe_doc>
		</y2>
		<haxe_doc><![CDATA[The `SVGLineElement` interface provides access to the properties of `line` elements, as well as methods to manipulate them.

	Documentation [SVGLineElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLineElement"</e></m></meta>
	</class>
	<class path="js.html.svg.LinearGradientElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/LinearGradientElement.hx" extern="1">
		<extends path="js.html.svg.GradientElement"/>
		<x1 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x1` attribute of the given `linearGradient` element.</haxe_doc>
		</x1>
		<y1 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y1` attribute of the given `linearGradient` element.</haxe_doc>
		</y1>
		<x2 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x2` attribute of the given `linearGradient` element.</haxe_doc>
		</x2>
		<y2 public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y2` attribute of the given `linearGradient` element.</haxe_doc>
		</y2>
		<haxe_doc><![CDATA[The `SVGLinearGradientElement` interface corresponds to the `linearGradient` element.

	Documentation [SVGLinearGradientElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLinearGradientElement"</e></m></meta>
	</class>
	<class path="js.html.svg.MPathElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/MPathElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGMPathElement` interface corresponds to the `mpath` element.

	Documentation [SVGMPathElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.MarkerElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/MarkerElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_MARKERUNITS_UNKNOWN public="1" get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MARKERUNITS_UNKNOWN>
		<SVG_MARKERUNITS_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MARKERUNITS_USERSPACEONUSE>
		<SVG_MARKERUNITS_STROKEWIDTH public="1" get="inline" set="null" expr="2" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MARKERUNITS_STROKEWIDTH>
		<SVG_MARKER_ORIENT_UNKNOWN public="1" get="inline" set="null" expr="0" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MARKER_ORIENT_UNKNOWN>
		<SVG_MARKER_ORIENT_AUTO public="1" get="inline" set="null" expr="1" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MARKER_ORIENT_AUTO>
		<SVG_MARKER_ORIENT_ANGLE public="1" get="inline" set="null" expr="2" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MARKER_ORIENT_ANGLE>
		<refX public="1" set="null"><c path="js.html.svg.AnimatedLength"/></refX>
		<refY public="1" set="null"><c path="js.html.svg.AnimatedLength"/></refY>
		<markerUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></markerUnits>
		<markerWidth public="1" set="null"><c path="js.html.svg.AnimatedLength"/></markerWidth>
		<markerHeight public="1" set="null"><c path="js.html.svg.AnimatedLength"/></markerHeight>
		<orientType public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></orientType>
		<orientAngle public="1" set="null"><c path="js.html.svg.AnimatedAngle"/></orientAngle>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<setOrientToAuto public="1" set="method"><f a=""><x path="Void"/></f></setOrientToAuto>
		<setOrientToAngle public="1" set="method">
			<f a="angle">
				<c path="js.html.svg.Angle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setOrientToAngle>
		<meta><m n=":native"><e>"SVGMarkerElement"</e></m></meta>
	</class>
	<class path="js.html.svg.MaskElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/MaskElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_MASKTYPE_LUMINANCE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MASKTYPE_LUMINANCE>
		<SVG_MASKTYPE_ALPHA public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MASKTYPE_ALPHA>
		<maskUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `maskUnits` attribute of the given `mask` element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</maskUnits>
		<maskContentUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `maskContentUnits` attribute of the given `mask` element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</maskContentUnits>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `mask` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `mask` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `mask` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `mask` element.</haxe_doc>
		</height>
		<haxe_doc><![CDATA[The `SVGMaskElement` interface provides access to the properties of `mask` elements, as well as methods to manipulate them.

	Documentation [SVGMaskElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMaskElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Matrix" params="" file="/home/vsts/work/1/s/std/js/html/svg/Matrix.hx" extern="1">
		<a public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the a component of the matrix.</haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the b component of the matrix.</haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the c component of the matrix.</haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the d component of the matrix.</haxe_doc>
		</d>
		<e public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the e component of the matrix.</haxe_doc>
		</e>
		<f public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the f component of the matrix.</haxe_doc>
		</f>
		<multiply public="1" set="method">
			<f a="secondMatrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Performs matrix multiplication. This matrix is post-multiplied by another matrix, returning the resulting new matrix as `SVGMatrix`.</haxe_doc>
		</multiply>
		<inverse public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns the inverse matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</inverse>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="scaleFactor">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scale>
		<scaleNonUniform public="1" set="method">
			<f a="scaleFactorX:scaleFactorY">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scaleNonUniform>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`. The rotation angle is determined by taking (+/-) atan(y/x). The direction of the vector (x, y) determines whether the positive or negative angle value is used.
		@throws DOMError</haxe_doc>
		</rotateFromVector>
		<flipX public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipX>
		<flipY public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipY>
		<skewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewY>
		<haxe_doc><![CDATA[Many of SVG's graphics operations utilize 2x3 matrices of the form:

	Documentation [SVGMatrix](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMatrix"</e></m></meta>
	</class>
	<class path="js.html.svg.MetadataElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/MetadataElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<haxe_doc><![CDATA[The `SVGMetadataElement` interface corresponds to the `metadata` element.

	Documentation [SVGMetadataElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGMetadataElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMetadataElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMetadataElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMetadataElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Number" params="" file="/home/vsts/work/1/s/std/js/html/svg/Number.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the number.
		 Note: If the `SVGNumber` is read-only, a `DOMException` with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `SVGNumber` interface corresponds to the `number` basic data type.

	Documentation [SVGNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.NumberList" params="" file="/home/vsts/work/1/s/std/js/html/svg/NumberList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Number"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Number"/>
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Number"/>
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Number"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGNumberList` defines a list of `SVGNumber` objects.

	Documentation [SVGNumberList](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumberList"</e></m></meta>
	</class>
	<class path="js.html.svg.PathElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathElement.hx" extern="1">
		<extends path="js.html.svg.GeometryElement"/>
		<pathSegList public="1" set="null"><c path="js.html.svg.PathSegList"/></pathSegList>
		<animatedPathSegList public="1" set="null"><c path="js.html.svg.PathSegList"/></animatedPathSegList>
		<getPathSegAtLength public="1" set="method">
			<f a="distance">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an unsigned long representing the index within the `SVGAnimatedPathData.pathSegList` utilizing the user agent's distance-along-a-path algorithm.</haxe_doc>
		</getPathSegAtLength>
		<haxe_doc><![CDATA[The `SVGPathElement` interface corresponds to the `path` element.

	Documentation [SVGPathElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSeg" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSeg.hx" extern="1">
		<PATHSEG_UNKNOWN public="1" get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</PATHSEG_UNKNOWN>
		<PATHSEG_CLOSEPATH public="1" get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PATHSEG_CLOSEPATH>
		<PATHSEG_MOVETO_ABS public="1" get="inline" set="null" expr="2" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</PATHSEG_MOVETO_ABS>
		<PATHSEG_MOVETO_REL public="1" get="inline" set="null" expr="3" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</PATHSEG_MOVETO_REL>
		<PATHSEG_LINETO_ABS public="1" get="inline" set="null" expr="4" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</PATHSEG_LINETO_ABS>
		<PATHSEG_LINETO_REL public="1" get="inline" set="null" expr="5" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</PATHSEG_LINETO_REL>
		<PATHSEG_CURVETO_CUBIC_ABS public="1" get="inline" set="null" expr="6" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_ABS>
		<PATHSEG_CURVETO_CUBIC_REL public="1" get="inline" set="null" expr="7" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_REL>
		<PATHSEG_CURVETO_QUADRATIC_ABS public="1" get="inline" set="null" expr="8" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_ABS>
		<PATHSEG_CURVETO_QUADRATIC_REL public="1" get="inline" set="null" expr="9" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_REL>
		<PATHSEG_ARC_ABS public="1" get="inline" set="null" expr="10" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</PATHSEG_ARC_ABS>
		<PATHSEG_ARC_REL public="1" get="inline" set="null" expr="11" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</PATHSEG_ARC_REL>
		<PATHSEG_LINETO_HORIZONTAL_ABS public="1" get="inline" set="null" expr="12" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</PATHSEG_LINETO_HORIZONTAL_ABS>
		<PATHSEG_LINETO_HORIZONTAL_REL public="1" get="inline" set="null" expr="13" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</PATHSEG_LINETO_HORIZONTAL_REL>
		<PATHSEG_LINETO_VERTICAL_ABS public="1" get="inline" set="null" expr="14" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</PATHSEG_LINETO_VERTICAL_ABS>
		<PATHSEG_LINETO_VERTICAL_REL public="1" get="inline" set="null" expr="15" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</PATHSEG_LINETO_VERTICAL_REL>
		<PATHSEG_CURVETO_CUBIC_SMOOTH_ABS public="1" get="inline" set="null" expr="16" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_SMOOTH_ABS>
		<PATHSEG_CURVETO_CUBIC_SMOOTH_REL public="1" get="inline" set="null" expr="17" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_SMOOTH_REL>
		<PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS public="1" get="inline" set="null" expr="18" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS>
		<PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL public="1" get="inline" set="null" expr="19" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL>
		<pathSegType public="1" set="null"><x path="Int"/></pathSegType>
		<pathSegTypeAsLetter public="1" set="null"><c path="String"/></pathSegTypeAsLetter>
		<meta><m n=":native"><e>"SVGPathSeg"</e></m></meta>
	</class>
	<typedef path="js.html.svg.PathSegArcAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegArcAbs.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<sweepFlag><x path="Bool"/></sweepFlag>
	<r2><x path="Float"/></r2>
	<r1><x path="Float"/></r1>
	<largeArcFlag><x path="Bool"/></largeArcFlag>
	<angle><x path="Float"/></angle>
</a></typedef>
	<typedef path="js.html.svg.PathSegArcRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegArcRel.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<sweepFlag><x path="Bool"/></sweepFlag>
	<r2><x path="Float"/></r2>
	<r1><x path="Float"/></r1>
	<largeArcFlag><x path="Bool"/></largeArcFlag>
	<angle><x path="Float"/></angle>
</a></typedef>
	<typedef path="js.html.svg.PathSegClosePath" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegClosePath.hx"><a/></typedef>
	<typedef path="js.html.svg.PathSegCurvetoCubicAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoCubicAbs.hx"><a>
	<y2><x path="Float"/></y2>
	<y1><x path="Float"/></y1>
	<y><x path="Float"/></y>
	<x2><x path="Float"/></x2>
	<x1><x path="Float"/></x1>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegCurvetoCubicRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoCubicRel.hx"><a>
	<y2><x path="Float"/></y2>
	<y1><x path="Float"/></y1>
	<y><x path="Float"/></y>
	<x2><x path="Float"/></x2>
	<x1><x path="Float"/></x1>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegCurvetoCubicSmoothAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoCubicSmoothAbs.hx"><a>
	<y2><x path="Float"/></y2>
	<y><x path="Float"/></y>
	<x2><x path="Float"/></x2>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegCurvetoCubicSmoothRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoCubicSmoothRel.hx"><a>
	<y2><x path="Float"/></y2>
	<y><x path="Float"/></y>
	<x2><x path="Float"/></x2>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegCurvetoQuadraticAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoQuadraticAbs.hx"><a>
	<y1><x path="Float"/></y1>
	<y><x path="Float"/></y>
	<x1><x path="Float"/></x1>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegCurvetoQuadraticRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoQuadraticRel.hx"><a>
	<y1><x path="Float"/></y1>
	<y><x path="Float"/></y>
	<x1><x path="Float"/></x1>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegCurvetoQuadraticSmoothAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoQuadraticSmoothAbs.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegCurvetoQuadraticSmoothRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegCurvetoQuadraticSmoothRel.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegLinetoAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegLinetoAbs.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegLinetoHorizontalAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegLinetoHorizontalAbs.hx"><a><x><x path="Float"/></x></a></typedef>
	<typedef path="js.html.svg.PathSegLinetoHorizontalRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegLinetoHorizontalRel.hx"><a><x><x path="Float"/></x></a></typedef>
	<typedef path="js.html.svg.PathSegLinetoRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegLinetoRel.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegLinetoVerticalAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegLinetoVerticalAbs.hx"><a><y><x path="Float"/></y></a></typedef>
	<typedef path="js.html.svg.PathSegLinetoVerticalRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegLinetoVerticalRel.hx"><a><y><x path="Float"/></y></a></typedef>
	<class path="js.html.svg.PathSegList" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.PathSeg"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<meta><m n=":native"><e>"SVGPathSegList"</e></m></meta>
	</class>
	<typedef path="js.html.svg.PathSegMovetoAbs" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegMovetoAbs.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="js.html.svg.PathSegMovetoRel" params="" file="/home/vsts/work/1/s/std/js/html/svg/PathSegMovetoRel.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<class path="js.html.svg.PatternElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/PatternElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<patternUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `patternUnits` attribute of the given `pattern` element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</patternUnits>
		<patternContentUnits public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `patternContentUnits` attribute of the given `pattern` element. Takes one of the constants defined in `SVGUnitTypes`.</haxe_doc>
		</patternContentUnits>
		<patternTransform public="1" set="null">
			<c path="js.html.svg.AnimatedTransformList"/>
			<haxe_doc>An `SVGAnimatedTransformList` corresponding to the `patternTransform` attribute of the given `pattern` element.</haxe_doc>
		</patternTransform>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `x` attribute of the given `pattern` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `y` attribute of the given `pattern` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `width` attribute of the given `pattern` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `height` attribute of the given `pattern` element.</haxe_doc>
		</height>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGPatternElement` interface corresponds to the `pattern` element.

	Documentation [SVGPatternElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPatternElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Point" params="" file="/home/vsts/work/1/s/std/js/html/svg/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrixTransform public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Point"/>
</f></matrixTransform>
		<haxe_doc><![CDATA[An `SVGPoint` represents a 2D or 3D point in the SVG coordinate system.

	Documentation [SVGPoint](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPoint"</e></m></meta>
	</class>
	<class path="js.html.svg.PointList" params="" file="/home/vsts/work/1/s/std/js/html/svg/PointList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Point"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Point"/>
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Point"/>
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Point"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<meta><m n=":native"><e>"SVGPointList"</e></m></meta>
	</class>
	<class path="js.html.svg.PolygonElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/PolygonElement.hx" extern="1">
		<extends path="js.html.svg.GeometryElement"/>
		<points public="1" set="null"><c path="js.html.svg.PointList"/></points>
		<animatedPoints public="1" set="null"><c path="js.html.svg.PointList"/></animatedPoints>
		<haxe_doc><![CDATA[The `SVGPolygonElement` interface provides access to the properties of `polygon` elements, as well as methods to manipulate them.

	Documentation [SVGPolygonElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPolygonElement"</e></m></meta>
	</class>
	<class path="js.html.svg.PolylineElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/PolylineElement.hx" extern="1">
		<extends path="js.html.svg.GeometryElement"/>
		<points public="1" set="null"><c path="js.html.svg.PointList"/></points>
		<animatedPoints public="1" set="null"><c path="js.html.svg.PointList"/></animatedPoints>
		<haxe_doc><![CDATA[The `SVGPolylineElement` interface provides access to the properties of `polyline` elements, as well as methods to manipulate them.

	Documentation [SVGPolylineElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPolylineElement"</e></m></meta>
	</class>
	<class path="js.html.svg.PreserveAspectRatio" params="" file="/home/vsts/work/1/s/std/js/html/svg/PreserveAspectRatio.hx" extern="1">
		<SVG_PRESERVEASPECTRATIO_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_NONE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_NONE>
		<SVG_PRESERVEASPECTRATIO_XMINYMIN public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMIN>
		<SVG_PRESERVEASPECTRATIO_XMIDYMIN public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMIN>
		<SVG_PRESERVEASPECTRATIO_XMAXYMIN public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMIN>
		<SVG_PRESERVEASPECTRATIO_XMINYMID public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMID>
		<SVG_PRESERVEASPECTRATIO_XMIDYMID public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMID>
		<SVG_PRESERVEASPECTRATIO_XMAXYMID public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMID>
		<SVG_PRESERVEASPECTRATIO_XMINYMAX public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMAX>
		<SVG_PRESERVEASPECTRATIO_XMIDYMAX public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMAX>
		<SVG_PRESERVEASPECTRATIO_XMAXYMAX public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMAX>
		<SVG_MEETORSLICE_UNKNOWN public="1" get="inline" set="null" expr="0" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MEETORSLICE_UNKNOWN>
		<SVG_MEETORSLICE_MEET public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MEETORSLICE_MEET>
		<SVG_MEETORSLICE_SLICE public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MEETORSLICE_SLICE>
		<align public="1"><x path="Int"/></align>
		<meetOrSlice public="1"><x path="Int"/></meetOrSlice>
		<haxe_doc><![CDATA[The `SVGPreserveAspectRatio` interface corresponds to the `preserveAspectRatio` attribute, which is available for some of SVG's elements.

	Documentation [SVGPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.RadialGradientElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/RadialGradientElement.hx" extern="1">
		<extends path="js.html.svg.GradientElement"/>
		<cx public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `cx` attribute of the given `RadialGradient` element.</haxe_doc>
		</cx>
		<cy public="1" set="null"><c path="js.html.svg.AnimatedLength"/></cy>
		<r public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `r` attribute of the given `RadialGradient` element.</haxe_doc>
		</r>
		<fx public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `fx` attribute of the given `RadialGradient` element.</haxe_doc>
		</fx>
		<fy public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `fy` attribute of the given `RadialGradient` element.</haxe_doc>
		</fy>
		<fr public="1" set="null"><c path="js.html.svg.AnimatedLength"/></fr>
		<haxe_doc><![CDATA[The `SVGRadialGradientElement` interface corresponds to the `RadialGradient` element.

	Documentation [SVGRadialGradientElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRadialGradientElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Rect" params="" file="/home/vsts/work/1/s/std/js/html/svg/Rect.hx" extern="1">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element.If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</y>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>This represents the width of the rectangle.A value that is negative results to an error. A value of zero disables rendering of the element</haxe_doc>
		</width>
		<height public="1"><x path="Float"/></height>
		<haxe_doc><![CDATA[The `SVGRect` represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.

	Documentation [SVGRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRect"</e></m></meta>
	</class>
	<class path="js.html.svg.RectElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/RectElement.hx" extern="1">
		<extends path="js.html.svg.GeometryElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` corresponding to the `x` attribute of the given `rect` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` corresponding to the `y` attribute of the given `rect` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` corresponding to the `width` attribute of the given `rect` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` corresponding to the `height` attribute of the given `rect` element.</haxe_doc>
		</height>
		<rx public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` corresponding to the `rx` attribute of the given `rect` element.</haxe_doc>
		</rx>
		<ry public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>Returns an `SVGAnimatedLength` corresponding to the `ry` attribute of the given `rect` element.</haxe_doc>
		</ry>
		<haxe_doc><![CDATA[The `SVGRectElement` interface provides access to the properties of `rect` elements, as well as methods to manipulate them.

	Documentation [SVGRectElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRectElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SVGElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/SVGElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `svg` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `svg` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `svg` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `svg` element.</haxe_doc>
		</height>
		<useCurrentView public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the "standard" view, i.e., based on attributes on the `svg` element such as `viewBox`) or on a "custom" view (i.e., a hyperlink into a particular `view` or other element). If the initial view is the "standard" view, then this attribute is `false`. If the initial view is a "custom" view, then this attribute is `true`.</haxe_doc>
		</useCurrentView>
		<currentScale public="1">
			<x path="Float"/>
			<haxe_doc>On an outermost `svg` element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes `currentScale` and `currentTranslate` are equivalent to the 2x3 matrix `[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]`. If "magnification" is enabled (i.e., `zoomAndPan="magnify"`), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost `svg` element).</haxe_doc>
		</currentScale>
		<currentTranslate public="1" set="null">
			<c path="js.html.svg.Point"/>
			<haxe_doc>An `SVGPoint` representing the translation factor that takes into account user "magnification" corresponding to an outermost `svg` element. The behavior is undefined for svg elements that are not at the outermost level.</haxe_doc>
		</currentTranslate>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<suspendRedraw public="1" set="method">
			<f a="maxWaitMilliseconds">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Takes a time-out value which indicates that redraw shall not occur until:
		 the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out.
		
		 In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to `suspendRedraw()` and `unsuspendRedraw()` should, but need not be, made in balanced pairs.
		
		 To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to:
		
		 suspendHandleID = suspendRedraw(maxWaitMilliseconds);
		
		 and follow the changes with a method call similar to:
		
		 unsuspendRedraw(suspendHandleID);
		
		 Note that multiple suspendRedraw calls can be used at once and that each such method call is treated independently of the other suspendRedraw method calls.</haxe_doc>
		</suspendRedraw>
		<unsuspendRedraw public="1" set="method">
			<f a="suspendHandleID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels a specified `suspendRedraw()` by providing a unique suspend handle ID that was returned by a previous `suspendRedraw()` call.</haxe_doc>
		</unsuspendRedraw>
		<unsuspendRedrawAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels all currently active `suspendRedraw()` method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending `suspendRedraw()` method calls have been cancelled.</haxe_doc>
		</unsuspendRedrawAll>
		<forceRedraw public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.</haxe_doc>
		</forceRedraw>
		<pauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this `svg` element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.</haxe_doc>
		</pauseAnimations>
		<unpauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.</haxe_doc>
		</unpauseAnimations>
		<animationsPaused public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if this SVG document fragment is in a paused state.</haxe_doc>
		</animationsPaused>
		<getCurrentTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then 0 is returned.</haxe_doc>
		</getCurrentTime>
		<setCurrentTime public="1" set="method">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adjusts the clock for this SVG document fragment, establishing a new current time. If `setCurrentTime` is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun.</haxe_doc>
		</setCurrentTime>
		<deselectAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unselects any selected objects, including any selections of text strings and type-in bars.</haxe_doc>
		</deselectAll>
		<createSVGNumber public="1" set="method">
			<f a=""><c path="js.html.svg.Number"/></f>
			<haxe_doc>Creates an `SVGNumber` object outside of any document trees. The object is initialized to a value of zero.</haxe_doc>
		</createSVGNumber>
		<createSVGLength public="1" set="method">
			<f a=""><c path="js.html.svg.Length"/></f>
			<haxe_doc>Creates an `SVGLength` object outside of any document trees. The object is initialized to a value of zero user units.</haxe_doc>
		</createSVGLength>
		<createSVGAngle public="1" set="method">
			<f a=""><c path="js.html.svg.Angle"/></f>
			<haxe_doc>Creates an `SVGAngle` object outside of any document trees. The object is initialized to a value of zero degrees (unitless).</haxe_doc>
		</createSVGAngle>
		<createSVGPoint public="1" set="method">
			<f a=""><c path="js.html.svg.Point"/></f>
			<haxe_doc>Creates an `SVGPoint` object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system.</haxe_doc>
		</createSVGPoint>
		<createSVGMatrix public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Creates an `SVGMatrix` object outside of any document trees. The object is initialized to the identity matrix.</haxe_doc>
		</createSVGMatrix>
		<createSVGRect public="1" set="method">
			<f a=""><c path="js.html.svg.Rect"/></f>
			<haxe_doc>Creates an `SVGRect` object outside of any document trees. The object is initialized such that all values are set to 0 user units.</haxe_doc>
		</createSVGRect>
		<createSVGTransform public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to an identity matrix transform (`SVG_TRANSFORM_MATRIX`).</haxe_doc>
		</createSVGTransform>
		<createSVGTransformFromMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to the given matrix transform (i.e., `SVG_TRANSFORM_MATRIX`). The values from the parameter matrix are copied, the matrix parameter is not adopted as `SVGTransform::matrix`.</haxe_doc>
		</createSVGTransformFromMatrix>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id.</haxe_doc>
		</getElementById>
		<haxe_doc><![CDATA[The `SVGSVGElement` interface provides access to the properties of `svg` elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.

	Documentation [SVGSVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ScriptElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/ScriptElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<type public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` corresponding to the `type` attribute of the given `script` element. A `DOMException` is raised with the code `NO_MODIFICATION_ALLOWED_ERR` on an attempt to change the value of a read only attribut.</haxe_doc>
		</type>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` corresponding to the `crossorigin` attribute of the given `script` element.</haxe_doc>
		</crossOrigin>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGScriptElement` interface corresponds to the SVG `script` element.

	Documentation [SVGScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGScriptElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SetElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/SetElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGSetElement` interface corresponds to the `set` element.

	Documentation [SVGSetElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSetElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StopElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/StopElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<offset public="1" set="null">
			<c path="js.html.svg.AnimatedNumber"/>
			<haxe_doc>An `SVGAnimatedNumber` corresponding to the `offset` of the given element.</haxe_doc>
		</offset>
		<haxe_doc><![CDATA[The `SVGStopElement` interface corresponds to the `stop` element.

	Documentation [SVGStopElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStopElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StringList" params="" file="/home/vsts/work/1/s/std/js/html/svg/StringList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGStringList` defines a list of `DOMString` objects.

	Documentation [SVGStringList](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStringList"</e></m></meta>
	</class>
	<class path="js.html.svg.StyleElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/StyleElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<xmlspace public="1"><c path="String"/></xmlspace>
		<type public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` corresponding to the `type` attribute of the given element.
		 SVG 1.1 defined that a `DOMException` is raised with code `NO_MODIFICATION_ALLOWED_ERR` on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.</haxe_doc>
		</type>
		<media public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` corresponding to the `media` attribute of the given element.
		 SVG 1.1 defined that a `DOMException` is raised with code `NO_MODIFICATION_ALLOWED_ERR` on an attempt to change the value of a read-only attribute. This restriction was removed in SVG 2.</haxe_doc>
		</media>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `SVGStyleElement` interface corresponds to the SVG `style` element.

	Documentation [SVGStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStyleElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SwitchElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/SwitchElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<haxe_doc><![CDATA[The `SVGSwitchElement` interface corresponds to the `switch` element.

	Documentation [SVGSwitchElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSwitchElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SymbolElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/SymbolElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGSymbolElement` interface corresponds to the `symbol` element.

	Documentation [SVGSymbolElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSymbolElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextContentElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/TextContentElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<LENGTHADJUST_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</LENGTHADJUST_UNKNOWN>
		<LENGTHADJUST_SPACING public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LENGTHADJUST_SPACING>
		<LENGTHADJUST_SPACINGANDGLYPHS public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LENGTHADJUST_SPACINGANDGLYPHS>
		<textLength public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` reflecting the `textLength` attribute of the given element.</haxe_doc>
		</textLength>
		<lengthAdjust public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` reflecting the `lengthAdjust` attribute of the given element. The numeric type values represent one of the constant values above.</haxe_doc>
		</lengthAdjust>
		<getNumberOfChars public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns a long representing the total number of addressable characters available for rendering within the current element, regardless of whether they will be rendered.</haxe_doc>
		</getNumberOfChars>
		<getComputedTextLength public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a float representing the computed length for the text within the element.</haxe_doc>
		</getComputedTextLength>
		<getSubStringLength public="1" set="method">
			<f a="charnum:nchars">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a float representing the computed length of the formatted text advance distance for a substring of text within the element. Note that this method only accounts for the widths of the glyphs in the substring and any extra spacing inserted by the CSS 'letter-spacing' and 'word-spacing' properties. Visual spacing adjustments made by the 'x' attribute is ignored.
		@throws DOMError</haxe_doc>
		</getSubStringLength>
		<getStartPositionOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>Returns a `DOMPoint` representing the position of a typographic character after text layout has been performed.
		 Note: In SVG 1.1 this method returned an `SVGPoint`.
		 
		@throws DOMError</haxe_doc>
		</getStartPositionOfChar>
		<getEndPositionOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>Returns a `DOMPoint` representing the trailing position of a typographic character after text layout has been performed.
		 Note: In SVG 1.1 this method returned an `SVGPoint`.
		 
		@throws DOMError</haxe_doc>
		</getEndPositionOfChar>
		<getExtentOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>Returns a `DOMRect` representing the computed tight bounding box of the glyph cell that corresponds to a given typographic character.
		@throws DOMError</haxe_doc>
		</getExtentOfChar>
		<getRotationOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a float representing the rotation of typographic character.
		@throws DOMError</haxe_doc>
		</getRotationOfChar>
		<getCharNumAtPosition public="1" set="method">
			<f a="point">
				<c path="js.html.svg.Point"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns a long representing the character which caused a text glyph to be rendered at a given position in the coordinate system. Because the relationship between characters and glyphs is not one-to-one, only the first character of the relevant typographic character is returned</haxe_doc>
		</getCharNumAtPosition>
		<selectSubString public="1" set="method">
			<f a="charnum:nchars">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects text within the element.
		@throws DOMError</haxe_doc>
		</selectSubString>
		<haxe_doc><![CDATA[The `SVGTextContentElement` interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as `SVGTextElement`, `SVGTSpanElement`, `SVGTRefElement`, `SVGAltGlyphElement` and `SVGTextPathElement`.

	Documentation [SVGTextContentElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTextContentElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTextContentElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextPositioningElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/TextPositioningElement.hx" extern="1">
		<extends path="js.html.svg.TextContentElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLengthList"/>
			<haxe_doc>Returns an `SVGAnimatedLengthList` reflecting the `x` attribute of the given element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLengthList"/>
			<haxe_doc>Returns an `SVGAnimatedLengthList` reflecting the `y` attribute of the given element.</haxe_doc>
		</y>
		<dx public="1" set="null">
			<c path="js.html.svg.AnimatedLengthList"/>
			<haxe_doc>Returns an `SVGAnimatedLengthList` reflecting the `dx` attribute of the given element.</haxe_doc>
		</dx>
		<dy public="1" set="null">
			<c path="js.html.svg.AnimatedLengthList"/>
			<haxe_doc>Returns an `SVGAnimatedLengthList` reflecting the `dy` attribute of the given element.</haxe_doc>
		</dy>
		<rotate public="1" set="null">
			<c path="js.html.svg.AnimatedNumberList"/>
			<haxe_doc>Returns an `SVGAnimatedNumberList` reflecting the `rotate` attribute of the given element.</haxe_doc>
		</rotate>
		<haxe_doc><![CDATA[The `SVGTextPositioningElement` interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by `SVGTextElement`, `SVGTSpanElement`, `SVGTRefElement` and `SVGAltGlyphElement`.

	Documentation [SVGTextPositioningElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTextPositioningElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TSpanElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/TSpanElement.hx" extern="1">
		<extends path="js.html.svg.TextPositioningElement"/>
		<haxe_doc><![CDATA[The `SVGTSpanElement` interface represents a `tspan` element.

	Documentation [SVGTSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTSpanElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/TextElement.hx" extern="1">
		<extends path="js.html.svg.TextPositioningElement"/>
		<haxe_doc><![CDATA[The `SVGTextElement` interface corresponds to the `text` elements.

	Documentation [SVGTextElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTextElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextPathElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/TextPathElement.hx" extern="1">
		<extends path="js.html.svg.TextContentElement"/>
		<TEXTPATH_METHODTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TEXTPATH_METHODTYPE_UNKNOWN>
		<TEXTPATH_METHODTYPE_ALIGN public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TEXTPATH_METHODTYPE_ALIGN>
		<TEXTPATH_METHODTYPE_STRETCH public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TEXTPATH_METHODTYPE_STRETCH>
		<TEXTPATH_SPACINGTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TEXTPATH_SPACINGTYPE_UNKNOWN>
		<TEXTPATH_SPACINGTYPE_AUTO public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TEXTPATH_SPACINGTYPE_AUTO>
		<TEXTPATH_SPACINGTYPE_EXACT public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TEXTPATH_SPACINGTYPE_EXACT>
		<startOffset public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the X component of the `startOffset` attribute of the given element.</haxe_doc>
		</startOffset>
		<method public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `method` attribute of the given element. It takes one of the `TEXTPATH_METHODTYPE_*` constants defined on this interface.</haxe_doc>
		</method>
		<spacing public="1" set="null">
			<c path="js.html.svg.AnimatedEnumeration"/>
			<haxe_doc>An `SVGAnimatedEnumeration` corresponding to the `spacing` attribute of the given element. It takes one of the `TEXTPATH_SPACINGTYPE_*` constants defined on this interface.</haxe_doc>
		</spacing>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGTextPathElement` interface corresponds to the `textPath` element.

	Documentation [SVGTextPathElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPathElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPathElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPathElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTextPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TitleElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/TitleElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<haxe_doc><![CDATA[The `SVGTitleElement` interface corresponds to the `title` element.

	Documentation [SVGTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTitleElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Transform" params="" file="/home/vsts/work/1/s/std/js/html/svg/Transform.hx" extern="1">
		<SVG_TRANSFORM_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TRANSFORM_UNKNOWN>
		<SVG_TRANSFORM_MATRIX public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TRANSFORM_MATRIX>
		<SVG_TRANSFORM_TRANSLATE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TRANSFORM_TRANSLATE>
		<SVG_TRANSFORM_SCALE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_TRANSFORM_SCALE>
		<SVG_TRANSFORM_ROTATE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_TRANSFORM_ROTATE>
		<SVG_TRANSFORM_SKEWX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_TRANSFORM_SKEWX>
		<SVG_TRANSFORM_SKEWY public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_TRANSFORM_SKEWY>
		<type public="1" set="null"><x path="Int"/></type>
		<matrix public="1" set="null"><c path="js.html.svg.Matrix"/></matrix>
		<angle public="1" set="null"><x path="Float"/></angle>
		<setMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setMatrix>
		<setTranslate public="1" set="method">
			<f a="tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTranslate>
		<setScale public="1" set="method">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setScale>
		<setRotate public="1" set="method">
			<f a="angle:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setRotate>
		<setSkewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewX>
		<setSkewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewY>
		<haxe_doc><![CDATA[`SVGTransform` is the interface for one of the component transformations within an `SVGTransformList`; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a `transform` attribute.

	Documentation [SVGTransform](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransform"</e></m></meta>
	</class>
	<class path="js.html.svg.TransformList" params="" file="/home/vsts/work/1/s/std/js/html/svg/TransformList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<consolidate public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</consolidate>
		<haxe_doc><![CDATA[The `SVGTransformList` defines a list of `SVGTransform` objects.

	Documentation [SVGTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransformList"</e></m></meta>
	</class>
	<class path="js.html.svg.UnitTypes" params="" file="/home/vsts/work/1/s/std/js/html/svg/UnitTypes.hx" extern="1">
		<SVG_UNIT_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_UNIT_TYPE_UNKNOWN>
		<SVG_UNIT_TYPE_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_UNIT_TYPE_USERSPACEONUSE>
		<SVG_UNIT_TYPE_OBJECTBOUNDINGBOX public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>
		<haxe_doc><![CDATA[The `SVGUnitTypes` interface defines a commonly used set of constants used for reflecting `gradientUnits`, `patternContentUnits` and other similar attributes.

	Documentation [SVGUnitTypes](https://developer.mozilla.org/en-US/docs/Web/API/SVGUnitTypes) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGUnitTypes$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGUnitTypes>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGUnitTypes"</e></m></meta>
	</class>
	<class path="js.html.svg.UseElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/UseElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given element.</haxe_doc>
		</height>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGUseElement` interface corresponds to the `use` element.

	Documentation [SVGUseElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGUseElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ViewElement" params="" file="/home/vsts/work/1/s/std/js/html/svg/ViewElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<haxe_doc><![CDATA[The `SVGViewElement` interface provides access to the properties of `view` elements, as well as methods to manipulate them.

	Documentation [SVGViewElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGViewElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ZoomAndPan" params="" file="/home/vsts/work/1/s/std/js/html/svg/ZoomAndPan.hx" extern="1">
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<zoomAndPan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned short representing the value of the `zoomAndPan` attribute.</haxe_doc>
		</zoomAndPan>
		<haxe_doc><![CDATA[The `SVGZoomAndPan` interfaceis used to reflect the `zoomAndPan` attribute, and is mixed in to other interfaces for elements that support this attribute.

	Documentation [SVGZoomAndPan](https://developer.mozilla.org/en-US/docs/Web/API/SVGZoomAndPan) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGZoomAndPan$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGZoomAndPan>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGZoomAndPan"</e></m></meta>
	</class>
	<class path="js.html.webgl.ActiveInfo" params="" file="/home/vsts/work/1/s/std/js/html/webgl/ActiveInfo.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only size of the requested variable.</haxe_doc>
		</size>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only type of the requested variable.</haxe_doc>
		</type>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The read-only name of the requested variable.</haxe_doc>
		</name>
		<haxe_doc><![CDATA[The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getActiveAttrib()` and `WebGLRenderingContext.getActiveUniform()` methods.

	Documentation [WebGLActiveInfo](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLActiveInfo"</e></m></meta>
	</class>
	<class path="js.html.webgl.Buffer" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Buffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.

	Documentation [WebGLBuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextAttributes" params="" file="/home/vsts/work/1/s/std/js/html/webgl/ContextAttributes.hx"><a>
	<stencil>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stencil>
	<preserveDrawingBuffer>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<premultipliedAlpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</premultipliedAlpha>
	<powerPreference>
		<x path="Null"><x path="js.html.webgl.PowerPreference"/></x>
		<meta><m n=":optional"/></meta>
	</powerPreference>
	<failIfMajorPerformanceCaveat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</failIfMajorPerformanceCaveat>
	<depth>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</depth>
	<antialias>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</antialias>
	<alpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<class path="js.html.webgl.ContextEvent" params="" file="/home/vsts/work/1/s/std/js/html/webgl/ContextEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<statusMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A read-only property containing additional information about the event.</haxe_doc>
		</statusMessage>
		<new public="1" set="method">
			<f a="type:?eventInit">
				<c path="String"/>
				<x path="Null"><t path="js.html.webgl.ContextEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.

	Documentation [WebGLContextEvent](https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLContextEvent"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextEventInit" params="" file="/home/vsts/work/1/s/std/js/html/webgl/ContextEventInit.hx"><a>
	<statusMessage>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</statusMessage>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.webgl.Extension" params="T" file="/home/vsts/work/1/s/std/js/html/webgl/Extension.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._Extension.Extension_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Extension.hx" private="1" module="js.html.webgl.Extension" extern="1" final="1">
	<ANGLE_instanced_arrays public="1" get="inline" set="null" expr="cast &quot;ANGLE_instanced_arrays&quot;" line="30" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.ANGLEInstancedArrays"/></x>
		<meta>
			<m n=":value"><e>cast "ANGLE_instanced_arrays"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANGLE_instanced_arrays>
	<EXT_blend_minmax public="1" get="inline" set="null" expr="cast &quot;EXT_blend_minmax&quot;" line="31" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTBlendMinmax"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_blend_minmax"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_blend_minmax>
	<EXT_color_buffer_float public="1" get="inline" set="null" expr="cast &quot;EXT_color_buffer_float&quot;" line="32" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.EXTColorBufferFloat"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_color_buffer_float"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_color_buffer_float>
	<EXT_color_buffer_half_float public="1" get="inline" set="null" expr="cast &quot;EXT_color_buffer_half_float&quot;" line="33" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTColorBufferHalfFloat"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_color_buffer_half_float"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_color_buffer_half_float>
	<EXT_disjoint_timer_query public="1" get="inline" set="null" expr="cast &quot;EXT_disjoint_timer_query&quot;" line="34" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTDisjointTimerQuery"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_disjoint_timer_query"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_disjoint_timer_query>
	<EXT_frag_depth public="1" get="inline" set="null" expr="cast &quot;EXT_frag_depth&quot;" line="35" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.EXTFragDepth"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_frag_depth"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_frag_depth>
	<EXT_sRGB public="1" get="inline" set="null" expr="cast &quot;EXT_sRGB&quot;" line="36" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTSrgb"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_sRGB"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_sRGB>
	<EXT_shader_texture_lod public="1" get="inline" set="null" expr="cast &quot;EXT_shader_texture_lod&quot;" line="37" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.EXTShaderTextureLod"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_shader_texture_lod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_shader_texture_lod>
	<EXT_texture_filter_anisotropic public="1" get="inline" set="null" expr="cast &quot;EXT_texture_filter_anisotropic&quot;" line="38" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTTextureFilterAnisotropic"/></x>
		<meta>
			<m n=":value"><e>cast "EXT_texture_filter_anisotropic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXT_texture_filter_anisotropic>
	<OES_element_index_uint public="1" get="inline" set="null" expr="cast &quot;OES_element_index_uint&quot;" line="39" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESElementIndexUint"/></x>
		<meta>
			<m n=":value"><e>cast "OES_element_index_uint"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OES_element_index_uint>
	<OES_standard_derivatives public="1" get="inline" set="null" expr="cast &quot;OES_standard_derivatives&quot;" line="40" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.OESStandardDerivatives"/></x>
		<meta>
			<m n=":value"><e>cast "OES_standard_derivatives"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OES_standard_derivatives>
	<OES_texture_float public="1" get="inline" set="null" expr="cast &quot;OES_texture_float&quot;" line="41" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESTextureFloat"/></x>
		<meta>
			<m n=":value"><e>cast "OES_texture_float"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OES_texture_float>
	<OES_texture_float_linear public="1" get="inline" set="null" expr="cast &quot;OES_texture_float_linear&quot;" line="42" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESTextureFloatLinear"/></x>
		<meta>
			<m n=":value"><e>cast "OES_texture_float_linear"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OES_texture_float_linear>
	<OES_texture_half_float public="1" get="inline" set="null" expr="cast &quot;OES_texture_half_float&quot;" line="43" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.OESTextureHalfFloat"/></x>
		<meta>
			<m n=":value"><e>cast "OES_texture_half_float"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OES_texture_half_float>
	<OES_texture_half_float_linear public="1" get="inline" set="null" expr="cast &quot;OES_texture_half_float_linear&quot;" line="44" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESTextureHalfFloatLinear"/></x>
		<meta>
			<m n=":value"><e>cast "OES_texture_half_float_linear"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OES_texture_half_float_linear>
	<OES_vertex_array_object public="1" get="inline" set="null" expr="cast &quot;OES_vertex_array_object&quot;" line="45" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.OESVertexArrayObject"/></x>
		<meta>
			<m n=":value"><e>cast "OES_vertex_array_object"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OES_vertex_array_object>
	<WEBGL_color_buffer_float public="1" get="inline" set="null" expr="cast &quot;WEBGL_color_buffer_float&quot;" line="46" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLColorBufferFloat"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_color_buffer_float"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_color_buffer_float>
	<WEBGL_compressed_texture_astc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_astc&quot;" line="47" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureAstc"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_compressed_texture_astc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_compressed_texture_astc>
	<WEBGL_compressed_texture_atc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_atc&quot;" line="48" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureAtc"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_compressed_texture_atc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_compressed_texture_atc>
	<WEBGL_compressed_texture_etc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_etc&quot;" line="49" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureEtc"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_compressed_texture_etc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_compressed_texture_etc>
	<WEBGL_compressed_texture_etc1 public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_etc1&quot;" line="50" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureEtc1"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_compressed_texture_etc1"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_compressed_texture_etc1>
	<WEBGL_compressed_texture_pvrtc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_pvrtc&quot;" line="51" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTexturePvrtc"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_compressed_texture_pvrtc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_compressed_texture_pvrtc>
	<WEBGL_compressed_texture_s3tc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_s3tc&quot;" line="52" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureS3tc"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_compressed_texture_s3tc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_compressed_texture_s3tc>
	<WEBGL_compressed_texture_s3tc_srgb public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_s3tc_srgb&quot;" line="53" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureS3tcSrgb"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_compressed_texture_s3tc_srgb"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_compressed_texture_s3tc_srgb>
	<WEBGL_debug_renderer_info public="1" get="inline" set="null" expr="cast &quot;WEBGL_debug_renderer_info&quot;" line="54" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLDebugRendererInfo"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_debug_renderer_info"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_debug_renderer_info>
	<WEBGL_debug_shaders public="1" get="inline" set="null" expr="cast &quot;WEBGL_debug_shaders&quot;" line="55" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.WEBGLDebugShaders"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_debug_shaders"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_debug_shaders>
	<WEBGL_depth_texture public="1" get="inline" set="null" expr="cast &quot;WEBGL_depth_texture&quot;" line="56" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLDepthTexture"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_depth_texture"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_depth_texture>
	<WEBGL_draw_buffers public="1" get="inline" set="null" expr="cast &quot;WEBGL_draw_buffers&quot;" line="57" static="1">
		<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLDrawBuffers"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_draw_buffers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_draw_buffers>
	<WEBGL_lose_context public="1" get="inline" set="null" expr="cast &quot;WEBGL_lose_context&quot;" line="58" static="1">
		<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.WEBGLLoseContext"/></x>
		<meta>
			<m n=":value"><e>cast "WEBGL_lose_context"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WEBGL_lose_context>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.webgl._Extension.Extension_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Extension.hx" private="1" module="js.html.webgl.Extension" extern="1" final="1">
		<ANGLE_instanced_arrays public="1" get="inline" set="null" expr="cast &quot;ANGLE_instanced_arrays&quot;" line="30" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.ANGLEInstancedArrays"/></x>
			<meta>
				<m n=":value"><e>cast "ANGLE_instanced_arrays"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANGLE_instanced_arrays>
		<EXT_blend_minmax public="1" get="inline" set="null" expr="cast &quot;EXT_blend_minmax&quot;" line="31" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTBlendMinmax"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_blend_minmax"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_blend_minmax>
		<EXT_color_buffer_float public="1" get="inline" set="null" expr="cast &quot;EXT_color_buffer_float&quot;" line="32" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.EXTColorBufferFloat"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_color_buffer_float"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_color_buffer_float>
		<EXT_color_buffer_half_float public="1" get="inline" set="null" expr="cast &quot;EXT_color_buffer_half_float&quot;" line="33" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTColorBufferHalfFloat"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_color_buffer_half_float"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_color_buffer_half_float>
		<EXT_disjoint_timer_query public="1" get="inline" set="null" expr="cast &quot;EXT_disjoint_timer_query&quot;" line="34" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTDisjointTimerQuery"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_disjoint_timer_query"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_disjoint_timer_query>
		<EXT_frag_depth public="1" get="inline" set="null" expr="cast &quot;EXT_frag_depth&quot;" line="35" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.EXTFragDepth"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_frag_depth"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_frag_depth>
		<EXT_sRGB public="1" get="inline" set="null" expr="cast &quot;EXT_sRGB&quot;" line="36" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTSrgb"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_sRGB"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_sRGB>
		<EXT_shader_texture_lod public="1" get="inline" set="null" expr="cast &quot;EXT_shader_texture_lod&quot;" line="37" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.EXTShaderTextureLod"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_shader_texture_lod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_shader_texture_lod>
		<EXT_texture_filter_anisotropic public="1" get="inline" set="null" expr="cast &quot;EXT_texture_filter_anisotropic&quot;" line="38" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.EXTTextureFilterAnisotropic"/></x>
			<meta>
				<m n=":value"><e>cast "EXT_texture_filter_anisotropic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXT_texture_filter_anisotropic>
		<OES_element_index_uint public="1" get="inline" set="null" expr="cast &quot;OES_element_index_uint&quot;" line="39" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESElementIndexUint"/></x>
			<meta>
				<m n=":value"><e>cast "OES_element_index_uint"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OES_element_index_uint>
		<OES_standard_derivatives public="1" get="inline" set="null" expr="cast &quot;OES_standard_derivatives&quot;" line="40" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.OESStandardDerivatives"/></x>
			<meta>
				<m n=":value"><e>cast "OES_standard_derivatives"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OES_standard_derivatives>
		<OES_texture_float public="1" get="inline" set="null" expr="cast &quot;OES_texture_float&quot;" line="41" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESTextureFloat"/></x>
			<meta>
				<m n=":value"><e>cast "OES_texture_float"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OES_texture_float>
		<OES_texture_float_linear public="1" get="inline" set="null" expr="cast &quot;OES_texture_float_linear&quot;" line="42" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESTextureFloatLinear"/></x>
			<meta>
				<m n=":value"><e>cast "OES_texture_float_linear"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OES_texture_float_linear>
		<OES_texture_half_float public="1" get="inline" set="null" expr="cast &quot;OES_texture_half_float&quot;" line="43" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.OESTextureHalfFloat"/></x>
			<meta>
				<m n=":value"><e>cast "OES_texture_half_float"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OES_texture_half_float>
		<OES_texture_half_float_linear public="1" get="inline" set="null" expr="cast &quot;OES_texture_half_float_linear&quot;" line="44" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.OESTextureHalfFloatLinear"/></x>
			<meta>
				<m n=":value"><e>cast "OES_texture_half_float_linear"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OES_texture_half_float_linear>
		<OES_vertex_array_object public="1" get="inline" set="null" expr="cast &quot;OES_vertex_array_object&quot;" line="45" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.OESVertexArrayObject"/></x>
			<meta>
				<m n=":value"><e>cast "OES_vertex_array_object"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OES_vertex_array_object>
		<WEBGL_color_buffer_float public="1" get="inline" set="null" expr="cast &quot;WEBGL_color_buffer_float&quot;" line="46" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLColorBufferFloat"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_color_buffer_float"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_color_buffer_float>
		<WEBGL_compressed_texture_astc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_astc&quot;" line="47" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureAstc"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_compressed_texture_astc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_compressed_texture_astc>
		<WEBGL_compressed_texture_atc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_atc&quot;" line="48" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureAtc"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_compressed_texture_atc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_compressed_texture_atc>
		<WEBGL_compressed_texture_etc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_etc&quot;" line="49" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureEtc"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_compressed_texture_etc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_compressed_texture_etc>
		<WEBGL_compressed_texture_etc1 public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_etc1&quot;" line="50" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureEtc1"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_compressed_texture_etc1"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_compressed_texture_etc1>
		<WEBGL_compressed_texture_pvrtc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_pvrtc&quot;" line="51" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTexturePvrtc"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_compressed_texture_pvrtc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_compressed_texture_pvrtc>
		<WEBGL_compressed_texture_s3tc public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_s3tc&quot;" line="52" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureS3tc"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_compressed_texture_s3tc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_compressed_texture_s3tc>
		<WEBGL_compressed_texture_s3tc_srgb public="1" get="inline" set="null" expr="cast &quot;WEBGL_compressed_texture_s3tc_srgb&quot;" line="53" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLCompressedTextureS3tcSrgb"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_compressed_texture_s3tc_srgb"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_compressed_texture_s3tc_srgb>
		<WEBGL_debug_renderer_info public="1" get="inline" set="null" expr="cast &quot;WEBGL_debug_renderer_info&quot;" line="54" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLDebugRendererInfo"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_debug_renderer_info"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_debug_renderer_info>
		<WEBGL_debug_shaders public="1" get="inline" set="null" expr="cast &quot;WEBGL_debug_shaders&quot;" line="55" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.WEBGLDebugShaders"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_debug_shaders"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_debug_shaders>
		<WEBGL_depth_texture public="1" get="inline" set="null" expr="cast &quot;WEBGL_depth_texture&quot;" line="56" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLDepthTexture"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_depth_texture"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_depth_texture>
		<WEBGL_draw_buffers public="1" get="inline" set="null" expr="cast &quot;WEBGL_draw_buffers&quot;" line="57" static="1">
			<x path="js.html.webgl.Extension"><c path="js.html.webgl.extension.WEBGLDrawBuffers"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_draw_buffers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_draw_buffers>
		<WEBGL_lose_context public="1" get="inline" set="null" expr="cast &quot;WEBGL_lose_context&quot;" line="58" static="1">
			<x path="js.html.webgl.Extension"><t path="js.html.webgl.extension.WEBGLLoseContext"/></x>
			<meta>
				<m n=":value"><e>cast "WEBGL_lose_context"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WEBGL_lose_context>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.webgl.Framebuffer" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Framebuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.

	Documentation [WebGLFramebuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLFramebuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.GL" params="" file="/home/vsts/work/1/s/std/js/html/webgl/GL.hx">
		<c path="js.html.webgl.RenderingContext"/>
		<haxe_doc>An alias for accessing GL constants more naturally.</haxe_doc>
	</typedef>
	<typedef path="js.html.webgl.GL2" params="" file="/home/vsts/work/1/s/std/js/html/webgl/GL2.hx">
		<c path="js.html.webgl.WebGL2RenderingContext"/>
		<haxe_doc>An alias for accessing GL constants more naturally.</haxe_doc>
	</typedef>
	<abstract path="js.html.webgl.PowerPreference" params="" file="/home/vsts/work/1/s/std/js/html/webgl/PowerPreference.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._PowerPreference.PowerPreference_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/webgl/PowerPreference.hx" private="1" module="js.html.webgl.PowerPreference" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="28" static="1">
		<x path="js.html.webgl.PowerPreference"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT>
	<LOW_POWER public="1" get="inline" set="null" expr="cast &quot;low-power&quot;" line="29" static="1">
		<x path="js.html.webgl.PowerPreference"/>
		<meta>
			<m n=":value"><e>cast "low-power"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOW_POWER>
	<HIGH_PERFORMANCE public="1" get="inline" set="null" expr="cast &quot;high-performance&quot;" line="30" static="1">
		<x path="js.html.webgl.PowerPreference"/>
		<meta>
			<m n=":value"><e>cast "high-performance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGH_PERFORMANCE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.html.webgl._PowerPreference.PowerPreference_Impl_" params="" file="/home/vsts/work/1/s/std/js/html/webgl/PowerPreference.hx" private="1" module="js.html.webgl.PowerPreference" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="28" static="1">
			<x path="js.html.webgl.PowerPreference"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT>
		<LOW_POWER public="1" get="inline" set="null" expr="cast &quot;low-power&quot;" line="29" static="1">
			<x path="js.html.webgl.PowerPreference"/>
			<meta>
				<m n=":value"><e>cast "low-power"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOW_POWER>
		<HIGH_PERFORMANCE public="1" get="inline" set="null" expr="cast &quot;high-performance&quot;" line="30" static="1">
			<x path="js.html.webgl.PowerPreference"/>
			<meta>
				<m n=":value"><e>cast "high-performance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGH_PERFORMANCE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.html.webgl.Program" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Program.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLProgram is part of the WebGL API and is a combination of two compiled `WebGLShader`s consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program.

	Documentation [WebGLProgram](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLProgram"</e></m></meta>
	</class>
	<class path="js.html.webgl.Query" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Query.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLQuery` interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.

	Documentation [WebGLQuery](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLQuery"</e></m></meta>
	</class>
	<class path="js.html.webgl.Renderbuffer" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Renderbuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.

	Documentation [WebGLRenderbuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderbuffer"</e></m></meta>
	</class>
	<class path="js.html.webgl.RenderingContext" params="" file="/home/vsts/work/1/s/std/js/html/webgl/RenderingContext.hx" extern="1">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<canvas public="1" set="null">
			<c path="js.html.CanvasElement"/>
			<haxe_doc>A read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `canvas` element.</haxe_doc>
		</canvas>
		<drawingBufferWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.</haxe_doc>
		</drawingBufferWidth>
		<drawingBufferHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.</haxe_doc>
		</drawingBufferHeight>
		<bufferData public="1" set="method">
			<f a="target:data:usage">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:data:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method">
			<f a="target:offset:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
			<overloads><bufferSubData public="1" set="method">
	<f a="target:offset:data">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
</bufferSubData></overloads>
		</bufferSubData>
		<compressedTexImage2D public="1" set="method">
			<f a="target:level:internalformat:width:height:border:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image in a compressed format.</haxe_doc>
		</compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:width:height:format:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture sub-image in a compressed format.</haxe_doc>
		</compressedTexSubImage2D>
		<readPixels public="1" set="method">
			<f a="x:y:width:height:format:type:pixels">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Reads a block of pixels from the `WebGLFrameBuffer`.
		@throws DOMError</haxe_doc>
		</readPixels>
		<texImage2D public="1" set="method">
			<f a="target:level:internalformat:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<uniform1fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform4iv></overloads>
		</uniform4iv>
		<uniformMatrix2fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix2fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix3fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix4fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<getContextAttributes public="1" set="method">
			<f a=""><t path="js.html.webgl.ContextAttributes"/></f>
			<haxe_doc>Returns a `WebGLContextAttributes` object that contains the actual context parameters. Might return `null`, if the context is lost.</haxe_doc>
		</getContextAttributes>
		<isContextLost public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the context is lost, otherwise returns `false`.</haxe_doc>
		</isContextLost>
		<getSupportedExtensions public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an `Array` of `DOMString` elements with all the supported WebGL extensions.</haxe_doc>
		</getSupportedExtensions>
		<getExtension public="1" params="T" set="method">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>Returns an extension object.
		@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method">
			<f a="texture">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects the active texture unit.</haxe_doc>
		</activeTexture>
		<attachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLShader` to a `WebGLProgram`.</haxe_doc>
		</attachShader>
		<bindAttribLocation public="1" set="method">
			<f a="program:index:name">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a generic vertex index to a named attribute variable.</haxe_doc>
		</bindAttribLocation>
		<bindBuffer public="1" set="method">
			<f a="target:buffer">
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLBuffer` object to a given target.</haxe_doc>
		</bindBuffer>
		<bindFramebuffer public="1" set="method">
			<f a="target:framebuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLFrameBuffer` object to a given target.</haxe_doc>
		</bindFramebuffer>
		<bindRenderbuffer public="1" set="method">
			<f a="target:renderbuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLRenderBuffer` object to a given target.</haxe_doc>
		</bindRenderbuffer>
		<bindTexture public="1" set="method">
			<f a="target:texture">
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLTexture` object to a given target.</haxe_doc>
		</bindTexture>
		<blendColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source and destination blending factors.</haxe_doc>
		</blendColor>
		<blendEquation public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the RGB blend equation and alpha blend equation to a single equation.</haxe_doc>
		</blendEquation>
		<blendEquationSeparate public="1" set="method">
			<f a="modeRGB:modeAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the RGB blend equation and alpha blend equation separately.</haxe_doc>
		</blendEquationSeparate>
		<blendFunc public="1" set="method">
			<f a="sfactor:dfactor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic.</haxe_doc>
		</blendFunc>
		<blendFuncSeparate public="1" set="method">
			<f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic for RGB and alpha components separately.</haxe_doc>
		</blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the status of the framebuffer.</haxe_doc>
		</checkFramebufferStatus>
		<clear public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Clears specified buffers to preset values.</haxe_doc>
		</clear>
		<clearColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the color values used when clearing color buffers.</haxe_doc>
		</clearColor>
		<clearDepth public="1" set="method">
			<f a="depth">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth value used when clearing the depth buffer.</haxe_doc>
		</clearDepth>
		<clearStencil public="1" set="method">
			<f a="s">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the stencil value used when clearing the stencil buffer.</haxe_doc>
		</clearStencil>
		<colorMask public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets which color components to enable or to disable when drawing or rendering to a `WebGLFramebuffer`.</haxe_doc>
		</colorMask>
		<compileShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Compiles a `WebGLShader`.</haxe_doc>
		</compileShader>
		<copyTexImage2D public="1" set="method">
			<f a="target:level:internalformat:x:y:width:height:border">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture image.</haxe_doc>
		</copyTexImage2D>
		<copyTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture sub-image.</haxe_doc>
		</copyTexSubImage2D>
		<createBuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Buffer"/></f>
			<haxe_doc>Creates a `WebGLBuffer` object.</haxe_doc>
		</createBuffer>
		<createFramebuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Framebuffer"/></f>
			<haxe_doc>Creates a `WebGLFrameBuffer` object.</haxe_doc>
		</createFramebuffer>
		<createProgram public="1" set="method">
			<f a=""><c path="js.html.webgl.Program"/></f>
			<haxe_doc>Creates a `WebGLProgram`.</haxe_doc>
		</createProgram>
		<createRenderbuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Renderbuffer"/></f>
			<haxe_doc>Creates a `WebGLRenderBuffer` object.</haxe_doc>
		</createRenderbuffer>
		<createShader public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<c path="js.html.webgl.Shader"/>
			</f>
			<haxe_doc>Creates a `WebGLShader`.</haxe_doc>
		</createShader>
		<createTexture public="1" set="method">
			<f a=""><c path="js.html.webgl.Texture"/></f>
			<haxe_doc>Creates a `WebGLTexture` object.</haxe_doc>
		</createTexture>
		<cullFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether or not front- and/or back-facing polygons can be culled.</haxe_doc>
		</cullFace>
		<deleteBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLBuffer` object.</haxe_doc>
		</deleteBuffer>
		<deleteFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLFrameBuffer` object.</haxe_doc>
		</deleteFramebuffer>
		<deleteProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLProgram`.</haxe_doc>
		</deleteProgram>
		<deleteRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLRenderBuffer` object.</haxe_doc>
		</deleteRenderbuffer>
		<deleteShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLShader`.</haxe_doc>
		</deleteShader>
		<deleteTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLTexture` object.</haxe_doc>
		</deleteTexture>
		<depthFunc public="1" set="method">
			<f a="func">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a function that compares incoming pixel depth to the current depth buffer value.</haxe_doc>
		</depthFunc>
		<depthMask public="1" set="method">
			<f a="flag">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets whether writing into the depth buffer is enabled or disabled.</haxe_doc>
		</depthMask>
		<depthRange public="1" set="method">
			<f a="zNear:zFar">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.</haxe_doc>
		</depthRange>
		<detachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Detaches a `WebGLShader`.</haxe_doc>
		</detachShader>
		<disable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables specific WebGL capabilities for this context.</haxe_doc>
		</disable>
		<disableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables a vertex attribute array at a given position.</haxe_doc>
		</disableVertexAttribArray>
		<drawArrays public="1" set="method">
			<f a="mode:first:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data.</haxe_doc>
		</drawArrays>
		<drawElements public="1" set="method">
			<f a="mode:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from element array data.</haxe_doc>
		</drawElements>
		<enable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables specific WebGL capabilities for this context.</haxe_doc>
		</enable>
		<enableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables a vertex attribute array at a given position.</haxe_doc>
		</enableVertexAttribArray>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Blocks execution until all previously called commands are finished.</haxe_doc>
		</finish>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties different buffer commands, causing all commands to be executed as quickly as possible.</haxe_doc>
		</flush>
		<framebufferRenderbuffer public="1" set="method">
			<f a="target:attachment:renderbuffertarget:renderbuffer">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLRenderingBuffer` object to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method">
			<f a="target:attachment:textarget:texture:level">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a textures image to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferTexture2D>
		<frontFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether polygons are front- or back-facing by setting a winding orientation.</haxe_doc>
		</frontFace>
		<generateMipmap public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Generates a set of mipmaps for a `WebGLTexture` object.</haxe_doc>
		</generateMipmap>
		<getActiveAttrib public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active attribute variable.</haxe_doc>
		</getActiveAttrib>
		<getActiveUniform public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active uniform variable.</haxe_doc>
		</getActiveUniform>
		<getAttachedShaders public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="js.html.webgl.Shader"/></c>
			</f>
			<haxe_doc>Returns a list of `WebGLShader` objects attached to a `WebGLProgram`.</haxe_doc>
		</getAttachedShaders>
		<getAttribLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the location of an attribute variable.</haxe_doc>
		</getAttribLocation>
		<getBufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the buffer.</haxe_doc>
		</getBufferParameter>
		<getParameter public="1" set="method">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a value for the passed parameter name.
		@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns error information.</haxe_doc>
		</getError>
		<getFramebufferAttachmentParameter public="1" set="method">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the framebuffer.
		@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method">
			<f a="program:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the program.</haxe_doc>
		</getProgramParameter>
		<getProgramInfoLog public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLProgram` object.</haxe_doc>
		</getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the renderbuffer.</haxe_doc>
		</getRenderbufferParameter>
		<getShaderParameter public="1" set="method">
			<f a="shader:pname">
				<c path="js.html.webgl.Shader"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the shader.</haxe_doc>
		</getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method">
			<f a="shadertype:precisiontype">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.ShaderPrecisionFormat"/>
			</f>
			<haxe_doc>Returns a `WebGLShaderPrecisionFormat` object describing the precision for the numeric format of the shader.</haxe_doc>
		</getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLShader` object.</haxe_doc>
		</getShaderInfoLog>
		<getShaderSource public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the source code of a `WebGLShader` as a string.</haxe_doc>
		</getShaderSource>
		<getTexParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the texture.</haxe_doc>
		</getTexParameter>
		<getUniform public="1" set="method">
			<f a="program:location">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.UniformLocation"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of a uniform variable at a given location.</haxe_doc>
		</getUniform>
		<getUniformLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<c path="js.html.webgl.UniformLocation"/>
			</f>
			<haxe_doc>Returns the location of a uniform variable.</haxe_doc>
		</getUniformLocation>
		<getVertexAttrib public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a vertex attribute at a given position.
		@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the address of a given vertex attribute.</haxe_doc>
		</getVertexAttribOffset>
		<hint public="1" set="method">
			<f a="target:mode">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.</haxe_doc>
		</hint>
		<isBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed buffer is valid.</haxe_doc>
		</isBuffer>
		<isEnabled public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether a specific WebGL capability is enabled or not for this context.</haxe_doc>
		</isEnabled>
		<isFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLFrameBuffer` object is valid.</haxe_doc>
		</isFramebuffer>
		<isProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLProgram` is valid.</haxe_doc>
		</isProgram>
		<isRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLRenderingBuffer` is valid.</haxe_doc>
		</isRenderbuffer>
		<isShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLShader` is valid.</haxe_doc>
		</isShader>
		<isTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLTexture` is valid.</haxe_doc>
		</isTexture>
		<lineWidth public="1" set="method">
			<f a="width">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the line width of rasterized lines.</haxe_doc>
		</lineWidth>
		<linkProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Links the passed `WebGLProgram` object.</haxe_doc>
		</linkProgram>
		<pixelStorei public="1" set="method">
			<f a="pname:param">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the pixel storage modes</haxe_doc>
		</pixelStorei>
		<polygonOffset public="1" set="method">
			<f a="factor:units">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the scale factors and units to calculate depth values.</haxe_doc>
		</polygonOffset>
		<renderbufferStorage public="1" set="method">
			<f a="target:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a renderbuffer data store.</haxe_doc>
		</renderbufferStorage>
		<sampleCoverage public="1" set="method">
			<f a="value:invert">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies multi-sample coverage parameters for anti-aliasing effects.</haxe_doc>
		</sampleCoverage>
		<scissor public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the scissor box.</haxe_doc>
		</scissor>
		<shaderSource public="1" set="method">
			<f a="shader:source">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source code in a `WebGLShader`.</haxe_doc>
		</shaderSource>
		<stencilFunc public="1" set="method">
			<f a="func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the both front and back function and reference value for stencil testing.</haxe_doc>
		</stencilFunc>
		<stencilFuncSeparate public="1" set="method">
			<f a="face:func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back function and reference value for stencil testing.</haxe_doc>
		</stencilFuncSeparate>
		<stencilMask public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMask>
		<stencilMaskSeparate public="1" set="method">
			<f a="face:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMaskSeparate>
		<stencilOp public="1" set="method">
			<f a="fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the front and back-facing stencil test actions.</haxe_doc>
		</stencilOp>
		<stencilOpSeparate public="1" set="method">
			<f a="face:fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back-facing stencil test actions.</haxe_doc>
		</stencilOpSeparate>
		<texParameterf public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Uses the specified `WebGLProgram` as part the current rendering state.</haxe_doc>
		</useProgram>
		<validateProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Validates a `WebGLProgram`.</haxe_doc>
		</validateProgram>
		<vertexAttrib1f public="1" set="method"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method">
			<f a="indx:size:type:normalized:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribPointer>
		<viewport public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the viewport.</haxe_doc>
		</viewport>
		<haxe_doc><![CDATA[The `WebGLRenderingContext` interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGLRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sampler" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Sampler.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSampler` interface is part of the WebGL 2 API and stores sampling parameters for `WebGLTexture` access inside of a shader.

	Documentation [WebGLSampler](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSampler"</e></m></meta>
	</class>
	<class path="js.html.webgl.Shader" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Shader.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A `WebGLProgram` requires both types of shaders.

	Documentation [WebGLShader](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShader"</e></m></meta>
	</class>
	<class path="js.html.webgl.ShaderPrecisionFormat" params="" file="/home/vsts/work/1/s/std/js/html/webgl/ShaderPrecisionFormat.hx" extern="1">
		<rangeMin public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the minimum value that can be represented.</haxe_doc>
		</rangeMin>
		<rangeMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the maximum value that can be represented.</haxe_doc>
		</rangeMax>
		<precision public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of bits of precision that can be represented. For integer formats this value is always 0.</haxe_doc>
		</precision>
		<haxe_doc><![CDATA[The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getShaderPrecisionFormat()` method.

	Documentation [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShaderPrecisionFormat"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sync" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Sync.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSync` interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.

	Documentation [WebGLSync](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSync"</e></m></meta>
	</class>
	<class path="js.html.webgl.Texture" params="" file="/home/vsts/work/1/s/std/js/html/webgl/Texture.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.

	Documentation [WebGLTexture](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTexture"</e></m></meta>
	</class>
	<class path="js.html.webgl.TransformFeedback" params="" file="/home/vsts/work/1/s/std/js/html/webgl/TransformFeedback.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLTransformFeedback` interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.

	Documentation [WebGLTransformFeedback](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTransformFeedback"</e></m></meta>
	</class>
	<class path="js.html.webgl.UniformLocation" params="" file="/home/vsts/work/1/s/std/js/html/webgl/UniformLocation.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.

	Documentation [WebGLUniformLocation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLUniformLocation"</e></m></meta>
	</class>
	<class path="js.html.webgl.VertexArrayObject" params="" file="/home/vsts/work/1/s/std/js/html/webgl/VertexArrayObject.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLVertexArrayObject` interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.

	Documentation [WebGLVertexArrayObject](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLVertexArrayObject"</e></m></meta>
	</class>
	<class path="js.html.webgl.WebGL2RenderingContext" params="" file="/home/vsts/work/1/s/std/js/html/webgl/WebGL2RenderingContext.hx" extern="1">
		<extends path="js.html.webgl.RenderingContext"/>
		<READ_BUFFER public="1" get="inline" set="null" expr="3074" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3074</e></m></meta>
		</READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" get="inline" set="null" expr="3314" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3314</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" get="inline" set="null" expr="3315" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3315</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3316" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3316</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" get="inline" set="null" expr="3330" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3330</e></m></meta>
		</PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" get="inline" set="null" expr="3331" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3331</e></m></meta>
		</PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3332" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3332</e></m></meta>
		</PACK_SKIP_PIXELS>
		<COLOR public="1" get="inline" set="null" expr="6144" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6144</e></m></meta>
		</COLOR>
		<DEPTH public="1" get="inline" set="null" expr="6145" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6145</e></m></meta>
		</DEPTH>
		<STENCIL public="1" get="inline" set="null" expr="6146" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6146</e></m></meta>
		</STENCIL>
		<RED public="1" get="inline" set="null" expr="6403" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6403</e></m></meta>
		</RED>
		<RGB8 public="1" get="inline" set="null" expr="32849" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32849</e></m></meta>
		</RGB8>
		<RGBA8 public="1" get="inline" set="null" expr="32856" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32856</e></m></meta>
		</RGBA8>
		<RGB10_A2 public="1" get="inline" set="null" expr="32857" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32857</e></m></meta>
		</RGB10_A2>
		<TEXTURE_BINDING_3D public="1" get="inline" set="null" expr="32874" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32874</e></m></meta>
		</TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" get="inline" set="null" expr="32877" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32877</e></m></meta>
		</UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" get="inline" set="null" expr="32878" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32878</e></m></meta>
		</UNPACK_IMAGE_HEIGHT>
		<TEXTURE_3D public="1" get="inline" set="null" expr="32879" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32879</e></m></meta>
		</TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" get="inline" set="null" expr="32882" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32882</e></m></meta>
		</TEXTURE_WRAP_R>
		<MAX_3D_TEXTURE_SIZE public="1" get="inline" set="null" expr="32883" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32883</e></m></meta>
		</MAX_3D_TEXTURE_SIZE>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="inline" set="null" expr="33640" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33640</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<MAX_ELEMENTS_VERTICES public="1" get="inline" set="null" expr="33000" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33000</e></m></meta>
		</MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" get="inline" set="null" expr="33001" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33001</e></m></meta>
		</MAX_ELEMENTS_INDICES>
		<TEXTURE_MIN_LOD public="1" get="inline" set="null" expr="33082" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33082</e></m></meta>
		</TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" get="inline" set="null" expr="33083" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33083</e></m></meta>
		</TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" get="inline" set="null" expr="33084" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33084</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="inline" set="null" expr="33085" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33085</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<MIN public="1" get="inline" set="null" expr="32775" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
		</MIN>
		<MAX public="1" get="inline" set="null" expr="32776" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
		</MAX>
		<DEPTH_COMPONENT24 public="1" get="inline" set="null" expr="33190" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33190</e></m></meta>
		</DEPTH_COMPONENT24>
		<MAX_TEXTURE_LOD_BIAS public="1" get="inline" set="null" expr="34045" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34045</e></m></meta>
		</MAX_TEXTURE_LOD_BIAS>
		<TEXTURE_COMPARE_MODE public="1" get="inline" set="null" expr="34892" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34892</e></m></meta>
		</TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" get="inline" set="null" expr="34893" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34893</e></m></meta>
		</TEXTURE_COMPARE_FUNC>
		<CURRENT_QUERY public="1" get="inline" set="null" expr="34917" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
		</CURRENT_QUERY>
		<QUERY_RESULT public="1" get="inline" set="null" expr="34918" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
		</QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" get="inline" set="null" expr="34919" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
		</QUERY_RESULT_AVAILABLE>
		<STREAM_READ public="1" get="inline" set="null" expr="35041" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35041</e></m></meta>
		</STREAM_READ>
		<STREAM_COPY public="1" get="inline" set="null" expr="35042" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35042</e></m></meta>
		</STREAM_COPY>
		<STATIC_READ public="1" get="inline" set="null" expr="35045" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35045</e></m></meta>
		</STATIC_READ>
		<STATIC_COPY public="1" get="inline" set="null" expr="35046" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35046</e></m></meta>
		</STATIC_COPY>
		<DYNAMIC_READ public="1" get="inline" set="null" expr="35049" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35049</e></m></meta>
		</DYNAMIC_READ>
		<DYNAMIC_COPY public="1" get="inline" set="null" expr="35050" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35050</e></m></meta>
		</DYNAMIC_COPY>
		<MAX_DRAW_BUFFERS public="1" get="inline" set="null" expr="34852" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
		</MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" get="inline" set="null" expr="34853" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
		</DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" get="inline" set="null" expr="34854" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" get="inline" set="null" expr="34855" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" get="inline" set="null" expr="34856" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" get="inline" set="null" expr="34857" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" get="inline" set="null" expr="34858" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" get="inline" set="null" expr="34859" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" get="inline" set="null" expr="34860" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" get="inline" set="null" expr="34861" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" get="inline" set="null" expr="34862" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" get="inline" set="null" expr="34863" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" get="inline" set="null" expr="34864" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" get="inline" set="null" expr="34865" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" get="inline" set="null" expr="34866" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" get="inline" set="null" expr="34867" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" get="inline" set="null" expr="34868" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35657" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35657</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35658" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35658</e></m></meta>
		</MAX_VERTEX_UNIFORM_COMPONENTS>
		<SAMPLER_3D public="1" get="inline" set="null" expr="35679" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35679</e></m></meta>
		</SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" get="inline" set="null" expr="35682" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35682</e></m></meta>
		</SAMPLER_2D_SHADOW>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="inline" set="null" expr="35723" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT>
		<PIXEL_PACK_BUFFER public="1" get="inline" set="null" expr="35051" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35051</e></m></meta>
		</PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" get="inline" set="null" expr="35052" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35052</e></m></meta>
		</PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35053" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35053</e></m></meta>
		</PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35055" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35055</e></m></meta>
		</PIXEL_UNPACK_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" get="inline" set="null" expr="35685" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35685</e></m></meta>
		</FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" get="inline" set="null" expr="35686" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35686</e></m></meta>
		</FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" get="inline" set="null" expr="35687" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35687</e></m></meta>
		</FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" get="inline" set="null" expr="35688" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35688</e></m></meta>
		</FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" get="inline" set="null" expr="35689" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35689</e></m></meta>
		</FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" get="inline" set="null" expr="35690" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35690</e></m></meta>
		</FLOAT_MAT4x3>
		<SRGB public="1" get="inline" set="null" expr="35904" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
		</SRGB>
		<SRGB8 public="1" get="inline" set="null" expr="35905" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35905</e></m></meta>
		</SRGB8>
		<SRGB8_ALPHA8 public="1" get="inline" set="null" expr="35907" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
		</SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" get="inline" set="null" expr="34894" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34894</e></m></meta>
		</COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" get="inline" set="null" expr="34836" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
		</RGBA32F>
		<RGB32F public="1" get="inline" set="null" expr="34837" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
		</RGB32F>
		<RGBA16F public="1" get="inline" set="null" expr="34842" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
		</RGBA16F>
		<RGB16F public="1" get="inline" set="null" expr="34843" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
		</RGB16F>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="inline" set="null" expr="35069" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35069</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_INTEGER>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" get="inline" set="null" expr="35071" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35071</e></m></meta>
		</MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35076" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35076</e></m></meta>
		</MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35077" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35077</e></m></meta>
		</MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" get="inline" set="null" expr="35659" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35659</e></m></meta>
		</MAX_VARYING_COMPONENTS>
		<TEXTURE_2D_ARRAY public="1" get="inline" set="null" expr="35866" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35866</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" get="inline" set="null" expr="35869" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35869</e></m></meta>
		</TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" get="inline" set="null" expr="35898" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35898</e></m></meta>
		</R11F_G11F_B10F>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="inline" set="null" expr="35899" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35899</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<RGB9_E5 public="1" get="inline" set="null" expr="35901" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35901</e></m></meta>
		</RGB9_E5>
		<UNSIGNED_INT_5_9_9_9_REV public="1" get="inline" set="null" expr="35902" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35902</e></m></meta>
		</UNSIGNED_INT_5_9_9_9_REV>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="inline" set="null" expr="35967" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35967</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="inline" set="null" expr="35968" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35968</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" get="inline" set="null" expr="35971" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35971</e></m></meta>
		</TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="inline" set="null" expr="35972" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35972</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="inline" set="null" expr="35973" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35973</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="inline" set="null" expr="35976" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35976</e></m></meta>
		</TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<RASTERIZER_DISCARD public="1" get="inline" set="null" expr="35977" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35977</e></m></meta>
		</RASTERIZER_DISCARD>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="inline" set="null" expr="35978" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35978</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35979" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35979</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" get="inline" set="null" expr="35980" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35980</e></m></meta>
		</INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35981" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35981</e></m></meta>
		</SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" get="inline" set="null" expr="35982" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35982</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35983" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35983</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<RGBA32UI public="1" get="inline" set="null" expr="36208" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36208</e></m></meta>
		</RGBA32UI>
		<RGB32UI public="1" get="inline" set="null" expr="36209" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36209</e></m></meta>
		</RGB32UI>
		<RGBA16UI public="1" get="inline" set="null" expr="36214" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36214</e></m></meta>
		</RGBA16UI>
		<RGB16UI public="1" get="inline" set="null" expr="36215" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36215</e></m></meta>
		</RGB16UI>
		<RGBA8UI public="1" get="inline" set="null" expr="36220" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36220</e></m></meta>
		</RGBA8UI>
		<RGB8UI public="1" get="inline" set="null" expr="36221" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36221</e></m></meta>
		</RGB8UI>
		<RGBA32I public="1" get="inline" set="null" expr="36226" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36226</e></m></meta>
		</RGBA32I>
		<RGB32I public="1" get="inline" set="null" expr="36227" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36227</e></m></meta>
		</RGB32I>
		<RGBA16I public="1" get="inline" set="null" expr="36232" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36232</e></m></meta>
		</RGBA16I>
		<RGB16I public="1" get="inline" set="null" expr="36233" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36233</e></m></meta>
		</RGB16I>
		<RGBA8I public="1" get="inline" set="null" expr="36238" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36238</e></m></meta>
		</RGBA8I>
		<RGB8I public="1" get="inline" set="null" expr="36239" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36239</e></m></meta>
		</RGB8I>
		<RED_INTEGER public="1" get="inline" set="null" expr="36244" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36244</e></m></meta>
		</RED_INTEGER>
		<RGB_INTEGER public="1" get="inline" set="null" expr="36248" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36248</e></m></meta>
		</RGB_INTEGER>
		<RGBA_INTEGER public="1" get="inline" set="null" expr="36249" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36249</e></m></meta>
		</RGBA_INTEGER>
		<SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36289" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36289</e></m></meta>
		</SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" get="inline" set="null" expr="36292" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36292</e></m></meta>
		</SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" get="inline" set="null" expr="36293" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36293</e></m></meta>
		</SAMPLER_CUBE_SHADOW>
		<UNSIGNED_INT_VEC2 public="1" get="inline" set="null" expr="36294" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36294</e></m></meta>
		</UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" get="inline" set="null" expr="36295" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36295</e></m></meta>
		</UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" get="inline" set="null" expr="36296" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36296</e></m></meta>
		</UNSIGNED_INT_VEC4>
		<INT_SAMPLER_2D public="1" get="inline" set="null" expr="36298" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36298</e></m></meta>
		</INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" get="inline" set="null" expr="36299" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36299</e></m></meta>
		</INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36300" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36300</e></m></meta>
		</INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36303" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36303</e></m></meta>
		</INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" get="inline" set="null" expr="36306" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36306</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" get="inline" set="null" expr="36307" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36307</e></m></meta>
		</UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36308" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36308</e></m></meta>
		</UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36311" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36311</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<DEPTH_COMPONENT32F public="1" get="inline" set="null" expr="36012" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36012</e></m></meta>
		</DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" get="inline" set="null" expr="36013" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36013</e></m></meta>
		</DEPTH32F_STENCIL8>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="inline" set="null" expr="36269" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36269</e></m></meta>
		</FLOAT_32_UNSIGNED_INT_24_8_REV>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="inline" set="null" expr="33296" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="inline" set="null" expr="33297" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="inline" set="null" expr="33298" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33298</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="inline" set="null" expr="33299" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33299</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="inline" set="null" expr="33300" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33300</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="inline" set="null" expr="33301" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33301</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="inline" set="null" expr="33302" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33302</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="inline" set="null" expr="33303" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33303</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" get="inline" set="null" expr="33304" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33304</e></m></meta>
		</FRAMEBUFFER_DEFAULT>
		<UNSIGNED_INT_24_8 public="1" get="inline" set="null" expr="34042" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
		</UNSIGNED_INT_24_8>
		<DEPTH24_STENCIL8 public="1" get="inline" set="null" expr="35056" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35056</e></m></meta>
		</DEPTH24_STENCIL8>
		<UNSIGNED_NORMALIZED public="1" get="inline" set="null" expr="35863" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
		</UNSIGNED_NORMALIZED>
		<DRAW_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" get="inline" set="null" expr="36008" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36008</e></m></meta>
		</READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" get="inline" set="null" expr="36009" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36009</e></m></meta>
		</DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36010" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36010</e></m></meta>
		</READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" get="inline" set="null" expr="36011" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36011</e></m></meta>
		</RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="inline" set="null" expr="36052" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36052</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<MAX_COLOR_ATTACHMENTS public="1" get="inline" set="null" expr="36063" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
		</MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" get="inline" set="null" expr="36065" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" get="inline" set="null" expr="36066" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" get="inline" set="null" expr="36067" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" get="inline" set="null" expr="36068" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" get="inline" set="null" expr="36069" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" get="inline" set="null" expr="36070" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" get="inline" set="null" expr="36071" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" get="inline" set="null" expr="36072" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" get="inline" set="null" expr="36073" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" get="inline" set="null" expr="36074" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" get="inline" set="null" expr="36075" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" get="inline" set="null" expr="36076" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" get="inline" set="null" expr="36077" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" get="inline" set="null" expr="36078" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" get="inline" set="null" expr="36079" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="inline" set="null" expr="36182" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36182</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<MAX_SAMPLES public="1" get="inline" set="null" expr="36183" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36183</e></m></meta>
		</MAX_SAMPLES>
		<HALF_FLOAT public="1" get="inline" set="null" expr="5131" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5131</e></m></meta>
		</HALF_FLOAT>
		<RG public="1" get="inline" set="null" expr="33319" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33319</e></m></meta>
		</RG>
		<RG_INTEGER public="1" get="inline" set="null" expr="33320" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33320</e></m></meta>
		</RG_INTEGER>
		<R8 public="1" get="inline" set="null" expr="33321" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33321</e></m></meta>
		</R8>
		<RG8 public="1" get="inline" set="null" expr="33323" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33323</e></m></meta>
		</RG8>
		<R16F public="1" get="inline" set="null" expr="33325" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33325</e></m></meta>
		</R16F>
		<R32F public="1" get="inline" set="null" expr="33326" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33326</e></m></meta>
		</R32F>
		<RG16F public="1" get="inline" set="null" expr="33327" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33327</e></m></meta>
		</RG16F>
		<RG32F public="1" get="inline" set="null" expr="33328" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33328</e></m></meta>
		</RG32F>
		<R8I public="1" get="inline" set="null" expr="33329" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33329</e></m></meta>
		</R8I>
		<R8UI public="1" get="inline" set="null" expr="33330" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33330</e></m></meta>
		</R8UI>
		<R16I public="1" get="inline" set="null" expr="33331" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33331</e></m></meta>
		</R16I>
		<R16UI public="1" get="inline" set="null" expr="33332" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33332</e></m></meta>
		</R16UI>
		<R32I public="1" get="inline" set="null" expr="33333" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33333</e></m></meta>
		</R32I>
		<R32UI public="1" get="inline" set="null" expr="33334" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33334</e></m></meta>
		</R32UI>
		<RG8I public="1" get="inline" set="null" expr="33335" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33335</e></m></meta>
		</RG8I>
		<RG8UI public="1" get="inline" set="null" expr="33336" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33336</e></m></meta>
		</RG8UI>
		<RG16I public="1" get="inline" set="null" expr="33337" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33337</e></m></meta>
		</RG16I>
		<RG16UI public="1" get="inline" set="null" expr="33338" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33338</e></m></meta>
		</RG16UI>
		<RG32I public="1" get="inline" set="null" expr="33339" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33339</e></m></meta>
		</RG32I>
		<RG32UI public="1" get="inline" set="null" expr="33340" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33340</e></m></meta>
		</RG32UI>
		<VERTEX_ARRAY_BINDING public="1" get="inline" set="null" expr="34229" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
		</VERTEX_ARRAY_BINDING>
		<R8_SNORM public="1" get="inline" set="null" expr="36756" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36756</e></m></meta>
		</R8_SNORM>
		<RG8_SNORM public="1" get="inline" set="null" expr="36757" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36757</e></m></meta>
		</RG8_SNORM>
		<RGB8_SNORM public="1" get="inline" set="null" expr="36758" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36758</e></m></meta>
		</RGB8_SNORM>
		<RGBA8_SNORM public="1" get="inline" set="null" expr="36759" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36759</e></m></meta>
		</RGBA8_SNORM>
		<SIGNED_NORMALIZED public="1" get="inline" set="null" expr="36764" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36764</e></m></meta>
		</SIGNED_NORMALIZED>
		<COPY_READ_BUFFER public="1" get="inline" set="null" expr="36662" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" get="inline" set="null" expr="36663" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" get="inline" set="null" expr="36662" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" get="inline" set="null" expr="36663" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER_BINDING>
		<UNIFORM_BUFFER public="1" get="inline" set="null" expr="35345" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35345</e></m></meta>
		</UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" get="inline" set="null" expr="35368" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35368</e></m></meta>
		</UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" get="inline" set="null" expr="35369" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35369</e></m></meta>
		</UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" get="inline" set="null" expr="35370" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35370</e></m></meta>
		</UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35371" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35371</e></m></meta>
		</MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35373" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35373</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35374" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35374</e></m></meta>
		</MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="inline" set="null" expr="35375" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35375</e></m></meta>
		</MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" get="inline" set="null" expr="35376" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35376</e></m></meta>
		</MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35377" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35377</e></m></meta>
		</MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35379" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35379</e></m></meta>
		</MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="inline" set="null" expr="35380" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35380</e></m></meta>
		</UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35382" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35382</e></m></meta>
		</ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" get="inline" set="null" expr="35383" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35383</e></m></meta>
		</UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" get="inline" set="null" expr="35384" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35384</e></m></meta>
		</UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" get="inline" set="null" expr="35386" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35386</e></m></meta>
		</UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" get="inline" set="null" expr="35387" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35387</e></m></meta>
		</UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" get="inline" set="null" expr="35388" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35388</e></m></meta>
		</UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" get="inline" set="null" expr="35389" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35389</e></m></meta>
		</UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" get="inline" set="null" expr="35390" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35390</e></m></meta>
		</UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" get="inline" set="null" expr="35391" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35391</e></m></meta>
		</UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" get="inline" set="null" expr="35392" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35392</e></m></meta>
		</UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35394" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35394</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="inline" set="null" expr="35395" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35395</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="inline" set="null" expr="35396" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35396</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="inline" set="null" expr="35398" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35398</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<INVALID_INDEX public="1" get="inline" set="null" expr="cast 4294967295" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</INVALID_INDEX>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="inline" set="null" expr="37154" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37154</e></m></meta>
		</MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="inline" set="null" expr="37157" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37157</e></m></meta>
		</MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" get="inline" set="null" expr="37137" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37137</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT>
		<OBJECT_TYPE public="1" get="inline" set="null" expr="37138" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37138</e></m></meta>
		</OBJECT_TYPE>
		<SYNC_CONDITION public="1" get="inline" set="null" expr="37139" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37139</e></m></meta>
		</SYNC_CONDITION>
		<SYNC_STATUS public="1" get="inline" set="null" expr="37140" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37140</e></m></meta>
		</SYNC_STATUS>
		<SYNC_FLAGS public="1" get="inline" set="null" expr="37141" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37141</e></m></meta>
		</SYNC_FLAGS>
		<SYNC_FENCE public="1" get="inline" set="null" expr="37142" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37142</e></m></meta>
		</SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" get="inline" set="null" expr="37143" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37143</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" get="inline" set="null" expr="37144" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37144</e></m></meta>
		</UNSIGNALED>
		<SIGNALED public="1" get="inline" set="null" expr="37145" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37145</e></m></meta>
		</SIGNALED>
		<ALREADY_SIGNALED public="1" get="inline" set="null" expr="37146" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37146</e></m></meta>
		</ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" get="inline" set="null" expr="37147" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37147</e></m></meta>
		</TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" get="inline" set="null" expr="37148" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37148</e></m></meta>
		</CONDITION_SATISFIED>
		<WAIT_FAILED public="1" get="inline" set="null" expr="37149" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37149</e></m></meta>
		</WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" get="inline" set="null" expr="1" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="inline" set="null" expr="35070" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR>
		<ANY_SAMPLES_PASSED public="1" get="inline" set="null" expr="35887" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35887</e></m></meta>
		</ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="inline" set="null" expr="36202" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36202</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE>
		<SAMPLER_BINDING public="1" get="inline" set="null" expr="35097" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35097</e></m></meta>
		</SAMPLER_BINDING>
		<RGB10_A2UI public="1" get="inline" set="null" expr="36975" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36975</e></m></meta>
		</RGB10_A2UI>
		<INT_2_10_10_10_REV public="1" get="inline" set="null" expr="36255" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36255</e></m></meta>
		</INT_2_10_10_10_REV>
		<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="36386" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36386</e></m></meta>
		</TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" get="inline" set="null" expr="36387" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36387</e></m></meta>
		</TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" get="inline" set="null" expr="36388" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36388</e></m></meta>
		</TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" get="inline" set="null" expr="36389" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36389</e></m></meta>
		</TRANSFORM_FEEDBACK_BINDING>
		<TEXTURE_IMMUTABLE_FORMAT public="1" get="inline" set="null" expr="37167" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37167</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT>
		<MAX_ELEMENT_INDEX public="1" get="inline" set="null" expr="36203" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36203</e></m></meta>
		</MAX_ELEMENT_INDEX>
		<TEXTURE_IMMUTABLE_LEVELS public="1" get="inline" set="null" expr="33503" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33503</e></m></meta>
		</TEXTURE_IMMUTABLE_LEVELS>
		<TIMEOUT_IGNORED public="1" get="inline" set="null" expr="-1" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="inline" set="null" expr="37447" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37447</e></m></meta>
		</MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="332" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="333" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="334" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="335" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="336" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="337" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="338" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="339" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="340" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="341" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="342" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="343" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="344" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="345" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="346" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="347" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="348" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="349" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="350" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="351" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="352" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="353" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="354" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="355" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="356" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="357" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="358" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="359" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="360" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="361" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="362" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="363" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="364" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="365" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="366" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="367" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="368" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="369" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="370" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="371" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="372" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="373" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="374" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="375" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="376" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="377" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="378" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="379" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="380" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="381" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="382" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="383" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="384" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="385" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="386" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="387" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="388" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="389" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="390" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="391" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="392" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="393" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="394" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="395" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="396" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="397" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="398" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="399" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="400" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="401" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="402" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="403" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="404" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="405" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="406" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="407" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="408" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="409" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="410" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="411" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="412" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="413" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="414" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="415" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="416" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="417" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="418" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="419" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="420" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="421" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="422" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="423" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="424" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="425" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="426" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="427" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="428" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="429" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="430" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="431" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="432" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="433" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="434" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="435" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="436" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="437" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="438" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="439" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="440" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="441" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="442" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="443" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="444" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="445" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="446" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="447" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="448" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="449" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="450" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="451" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="452" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="453" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="454" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="455" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="456" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="457" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="458" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="459" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="460" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="461" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="462" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="463" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="464" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="465" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="466" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="467" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="468" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="469" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="470" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="471" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="472" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="473" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="474" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="475" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="476" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="477" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="478" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="479" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="480" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="481" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="482" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="483" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="484" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="485" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="486" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="487" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="488" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="489" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="490" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="491" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="492" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="493" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="494" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="495" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="496" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="497" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="498" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="499" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="500" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="501" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="502" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="503" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="504" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="505" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="506" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="507" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="508" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="509" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="510" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="511" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="512" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="513" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="514" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="515" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="516" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="517" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="518" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="519" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="520" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="521" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="522" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="523" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="524" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="525" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="526" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="527" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="528" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="529" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="530" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="531" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="532" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="533" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="534" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="535" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="536" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="537" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="538" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="539" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="540" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="541" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="542" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="543" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="544" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="545" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="546" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="547" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="548" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="549" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="550" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="551" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="552" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="553" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="554" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="555" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="556" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="557" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="558" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="559" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="560" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="561" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="562" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="563" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="564" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="565" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="566" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="567" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="568" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="569" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="570" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="571" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="572" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="573" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="574" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="575" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="576" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="577" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="578" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="579" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="580" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="581" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="582" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="583" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="584" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="585" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="586" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="587" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="588" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="589" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="590" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="591" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="592" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="593" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="594" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<bufferData public="1" set="method" override="1">
			<f a="target:srcData:usage:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method" override="1">
			<f a="target:dstByteOffset:srcData:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
			<overloads>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
			</overloads>
		</bufferSubData>
		<copyBufferSubData public="1" set="method">
			<f a="readTarget:writeTarget:readOffset:writeOffset:size">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies part of the data of a buffer to another buffer.</haxe_doc>
		</copyBufferSubData>
		<getBufferSubData public="1" set="method">
			<f a="target:srcByteOffset:dstData:?dstOffset:?length" v=":::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, dstOffset : 0 }</e></m></meta>
			<haxe_doc>Reads data from a buffer and writes them to an `ArrayBuffer` or `SharedArrayBuffer`.</haxe_doc>
		</getBufferSubData>
		<blitFramebuffer public="1" set="method">
			<f a="srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transfers a block of pixels from the read framebuffer to the draw framebuffer.</haxe_doc>
		</blitFramebuffer>
		<framebufferTextureLayer public="1" set="method">
			<f a="target:attachment:texture:level:layer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a single layer of a texture to a framebuffer.</haxe_doc>
		</framebufferTextureLayer>
		<invalidateFramebuffer public="1" set="method">
			<f a="target:attachments">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates the contents of attachments in a framebuffer.
		@throws DOMError</haxe_doc>
		</invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" set="method">
			<f a="target:attachments:x:y:width:height">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates portions of the contents of attachments in a framebuffer
		@throws DOMError</haxe_doc>
		</invalidateSubFramebuffer>
		<readBuffer public="1" set="method">
			<f a="src">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects a color buffer as the source for pixels.</haxe_doc>
		</readBuffer>
		<getInternalformatParameter public="1" set="method">
			<f a="target:internalformat:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about implementation-dependent support for internal formats.
		@throws DOMError</haxe_doc>
		</getInternalformatParameter>
		<renderbufferStorageMultisample public="1" set="method">
			<f a="target:samples:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.</haxe_doc>
		</renderbufferStorageMultisample>
		<texStorage2D public="1" set="method">
			<f a="target:levels:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of two-dimensional texture storage.</haxe_doc>
		</texStorage2D>
		<texStorage3D public="1" set="method">
			<f a="target:levels:internalformat:width:height:depth">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of a three-dimensional texture or two-dimensional array texture.</haxe_doc>
		</texStorage3D>
		<texImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<texImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
			</overloads>
		</texImage3D>
		<texSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:srcData:?srcOffset" v=":::::::::::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
			</overloads>
		</texSubImage3D>
		<copyTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies pixels from the current `WebGLFramebuffer` into an existing 3D texture sub-image.</haxe_doc>
		</copyTexSubImage3D>
		<compressedTexImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:srcData:?srcOffset:?srcLengthOverride" v=":::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexImage2D public="1" set="method"><f a="target:level:internalformat:width:height:border:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexImage2D></overloads>
		</compressedTexImage2D>
		<compressedTexImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexImage3D public="1" set="method">
	<f a="target:level:internalformat:width:height:depth:border:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
</compressedTexImage3D></overloads>
		</compressedTexImage3D>
		<compressedTexSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:width:height:format:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexSubImage2D></overloads>
		</compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexSubImage3D public="1" set="method">
	<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
</compressedTexSubImage3D></overloads>
		</compressedTexSubImage3D>
		<getFragDataLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the binding of color numbers to user-defined varying out variables.</haxe_doc>
		</getFragDataLocation>
		<uniform1ui public="1" set="method"><f a="location:v0">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform2ui public="1" set="method"><f a="location:v0:v1">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform3ui public="1" set="method"><f a="location:v0:v1:v2">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform4ui public="1" set="method"><f a="location:v0:v1:v2:v3">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform1fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4iv></overloads>
		</uniform4iv>
		<uniform1uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1uiv></overloads>
		</uniform1uiv>
		<uniform2uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2uiv></overloads>
		</uniform2uiv>
		<uniform3uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3uiv></overloads>
		</uniform3uiv>
		<uniform4uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4uiv></overloads>
		</uniform4uiv>
		<uniformMatrix2fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x2fv></overloads>
		</uniformMatrix3x2fv>
		<uniformMatrix4x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x2fv></overloads>
		</uniformMatrix4x2fv>
		<uniformMatrix2x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x3fv></overloads>
		</uniformMatrix2x3fv>
		<uniformMatrix3fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x3fv></overloads>
		</uniformMatrix4x3fv>
		<uniformMatrix2x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x4fv></overloads>
		</uniformMatrix2x4fv>
		<uniformMatrix3x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x4fv></overloads>
		</uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<vertexAttribI4i public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4iv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4iv></overloads>
		</vertexAttribI4iv>
		<vertexAttribI4ui public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4uiv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4uiv></overloads>
		</vertexAttribI4uiv>
		<vertexAttribIPointer public="1" set="method">
			<f a="index:size:type:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies integer data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribIPointer>
		<vertexAttribDivisor public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `WebGL2RenderingContext.drawArraysInstanced()` and `WebGL2RenderingContext.drawElementsInstanced()`.</haxe_doc>
		</vertexAttribDivisor>
		<drawArraysInstanced public="1" set="method">
			<f a="mode:first:count:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.</haxe_doc>
		</drawArraysInstanced>
		<drawElementsInstanced public="1" set="method">
			<f a="mode:count:type:offset:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.</haxe_doc>
		</drawElementsInstanced>
		<drawRangeElements public="1" set="method">
			<f a="mode:start:end:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data in a given range.</haxe_doc>
		</drawRangeElements>
		<readPixels public="1" set="method" override="1">
			<f a="x:y:width:height:format:type:dstData:dstOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:dstData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:offset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
			</overloads>
		</readPixels>
		<drawBuffers public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a list of color buffers to be drawn into.</haxe_doc>
		</drawBuffers>
		<clearBufferfv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferfv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferfv></overloads>
		</clearBufferfv>
		<clearBufferiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferiv></overloads>
		</clearBufferiv>
		<clearBufferuiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferuiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferuiv></overloads>
		</clearBufferuiv>
		<clearBufferfi public="1" set="method"><f a="buffer:drawbuffer:depth:stencil">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<createQuery public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery` object.</haxe_doc>
		</createQuery>
		<deleteQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery` object.</haxe_doc>
		</deleteQuery>
		<isQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLQuery` object.</haxe_doc>
		</isQuery>
		<beginQuery public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Begins an asynchronous query.</haxe_doc>
		</beginQuery>
		<endQuery public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Marks the end of an asynchronous query.</haxe_doc>
		</endQuery>
		<getQuery public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a `WebGLQuery` object for a given target.</haxe_doc>
		</getQuery>
		<getQueryParameter public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query.</haxe_doc>
		</getQueryParameter>
		<createSampler public="1" set="method">
			<f a=""><c path="js.html.webgl.Sampler"/></f>
			<haxe_doc>Creates a new `WebGLSampler` object.</haxe_doc>
		</createSampler>
		<deleteSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSampler` object.</haxe_doc>
		</deleteSampler>
		<isSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLSampler` object.</haxe_doc>
		</isSampler>
		<bindSampler public="1" set="method">
			<f a="unit:sampler">
				<x path="Int"/>
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLSampler` to a texture unit.</haxe_doc>
		</bindSampler>
		<samplerParameteri public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<samplerParameterf public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<getSamplerParameter public="1" set="method">
			<f a="sampler:pname">
				<c path="js.html.webgl.Sampler"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns sampler parameter information.</haxe_doc>
		</getSamplerParameter>
		<fenceSync public="1" set="method">
			<f a="condition:flags">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Sync"/>
			</f>
			<haxe_doc>Creates a new `WebGLSync` object and inserts it into the GL command stream.</haxe_doc>
		</fenceSync>
		<isSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLSync` object.</haxe_doc>
		</isSync>
		<deleteSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSync` object.</haxe_doc>
		</deleteSync>
		<clientWaitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Blocks and waits for a `WebGLSync` object to become signaled or a given timeout to be passed.</haxe_doc>
		</clientWaitSync>
		<waitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Returns immediately, but waits on the GL server until the given `WebGLSync` object is signaled.</haxe_doc>
		</waitSync>
		<getSyncParameter public="1" set="method">
			<f a="sync:pname">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns parameter information of a `WebGLSync` object.</haxe_doc>
		</getSyncParameter>
		<createTransformFeedback public="1" set="method">
			<f a=""><c path="js.html.webgl.TransformFeedback"/></f>
			<haxe_doc>Creates and initializes `WebGLTransformFeedback` objects.</haxe_doc>
		</createTransformFeedback>
		<deleteTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLTransformFeedback` object.</haxe_doc>
		</deleteTransformFeedback>
		<isTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLTransformFeedback` object.</haxe_doc>
		</isTransformFeedback>
		<bindTransformFeedback public="1" set="method">
			<f a="target:tf">
				<x path="Int"/>
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a passed `WebGLTransformFeedback` object to the current GL state.</haxe_doc>
		</bindTransformFeedback>
		<beginTransformFeedback public="1" set="method">
			<f a="primitiveMode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts a transform feedback operation.</haxe_doc>
		</beginTransformFeedback>
		<endTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Ends a transform feedback operation.</haxe_doc>
		</endTransformFeedback>
		<transformFeedbackVaryings public="1" set="method">
			<f a="program:varyings:bufferMode">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies values to record in `WebGLTransformFeedback` buffers.</haxe_doc>
		</transformFeedbackVaryings>
		<getTransformFeedbackVarying public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about varying variables from `WebGLTransformFeedback` buffers.</haxe_doc>
		</getTransformFeedbackVarying>
		<pauseTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses a transform feedback operation.</haxe_doc>
		</pauseTransformFeedback>
		<resumeTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resumes a transform feedback operation.</haxe_doc>
		</resumeTransformFeedback>
		<bindBufferBase public="1" set="method">
			<f a="target:index:buffer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferBase>
		<bindBufferRange public="1" set="method">
			<f a="target:index:buffer:offset:size">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a range of a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferRange>
		<getIndexedParameter public="1" set="method">
			<f a="target:index">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns the indexed value for the given `target`.
		@throws DOMError</haxe_doc>
		</getIndexedParameter>
		<getUniformIndices public="1" set="method">
			<f a="program:uniformNames">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Retrieves the indices of a number of uniforms within a `WebGLProgram`.</haxe_doc>
		</getUniformIndices>
		<getActiveUniforms public="1" set="method">
			<f a="program:uniformIndices:pname">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about active uniforms within a `WebGLProgram`.</haxe_doc>
		</getActiveUniforms>
		<getUniformBlockIndex public="1" set="method">
			<f a="program:uniformBlockName">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Retrieves the index of a uniform block within a `WebGLProgram`.</haxe_doc>
		</getUniformBlockIndex>
		<getActiveUniformBlockParameter public="1" set="method">
			<f a="program:uniformBlockIndex:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about an active uniform block within a `WebGLProgram`.
		@throws DOMError</haxe_doc>
		</getActiveUniformBlockParameter>
		<getActiveUniformBlockName public="1" set="method">
			<f a="program:uniformBlockIndex">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the name of the active uniform block at a given index within a `WebGLProgram`.</haxe_doc>
		</getActiveUniformBlockName>
		<uniformBlockBinding public="1" set="method">
			<f a="program:uniformBlockIndex:uniformBlockBinding">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Assigns binding points for active uniform blocks.</haxe_doc>
		</uniformBlockBinding>
		<createVertexArray public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArray>
		<deleteVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArray>
		<isVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArray>
		<bindVertexArray public="1" set="method">
			<f a="array">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArray>
		<getContextAttributes public="1" set="method" override="1"><f a=""><t path="js.html.webgl.ContextAttributes"/></f></getContextAttributes>
		<isContextLost public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isContextLost>
		<getSupportedExtensions public="1" set="method" override="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getExtension public="1" params="T" set="method" override="1">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method" override="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method" override="1"><f a="program:index:name">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" override="1"><f a="target:buffer">
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method" override="1"><f a="target:framebuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" override="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method" override="1"><f a="target:texture">
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" override="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" override="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" override="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method" override="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method" override="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></compileShader>
		<copyTexImage2D public="1" set="method" override="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" override="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Buffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Framebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Program"/></f></createProgram>
		<createRenderbuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Renderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method" override="1"><f a="type">
	<x path="Int"/>
	<c path="js.html.webgl.Shader"/>
</f></createShader>
		<createTexture public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Texture"/></f></createTexture>
		<cullFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method" override="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" override="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method" override="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" override="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method" override="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method" override="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" override="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" override="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="Array"><c path="js.html.webgl.Shader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getParameter public="1" set="method" override="1">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method" override="1"><f a=""><x path="Int"/></f></getError>
		<getFramebufferAttachmentParameter public="1" set="method" override="1">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method" override="1"><f a="program:pname">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getProgramInfoLog public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderParameter public="1" set="method" override="1"><f a="shader:pname">
	<c path="js.html.webgl.Shader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" override="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.ShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderSource public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderSource>
		<getTexParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method" override="1"><f a="program:location">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.UniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<c path="js.html.webgl.UniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" override="1">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method" override="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method" override="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method" override="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></linkProgram>
		<pixelStorei public="1" set="method" override="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" override="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<renderbufferStorage public="1" set="method" override="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method" override="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method" override="1"><f a="shader:source">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" override="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" override="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" override="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" override="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" override="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texParameterf public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" override="1"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" override="1"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" override="1"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" override="1"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method" override="1"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<haxe_doc><![CDATA[The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGL2RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGL2RenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.ANGLEInstancedArrays" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/ANGLEInstancedArrays.hx" extern="1">
		<VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE public="1" get="inline" set="null" expr="35070" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
			<haxe_doc>Returns a `GLint` describing the frequency divisor used for instanced rendering when used in the `WebGLRenderingContext.getVertexAttrib()` as the `pname` parameter.</haxe_doc>
		</VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE>
		<drawArraysInstancedANGLE public="1" set="method">
			<f a="mode:first:count:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawArrays()` except that multiple instances of the range of elements are executed, and the instance advances for each iteration.</haxe_doc>
		</drawArraysInstancedANGLE>
		<drawElementsInstancedANGLE public="1" set="method">
			<f a="mode:count:type:offset:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawElements()` except that multiple instances of the set of elements are executed and the instance advances between each set.</haxe_doc>
		</drawElementsInstancedANGLE>
		<vertexAttribDivisorANGLE public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `ANGLE_instanced_arrays.drawArraysInstancedANGLE()` and `ANGLE_instanced_arrays.drawElementsInstancedANGLE()`.</haxe_doc>
		</vertexAttribDivisorANGLE>
		<haxe_doc><![CDATA[The `ANGLE_instanced_arrays` extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.

	Documentation [ANGLE_instanced_arrays](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays>]]></haxe_doc>
		<meta><m n=":native"><e>"ANGLE_instanced_arrays"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTBlendMinmax" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTBlendMinmax.hx" extern="1">
		<MIN_EXT public="1" get="inline" set="null" expr="32775" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
			<haxe_doc>Produces the minimum color components of the source and destination colors.</haxe_doc>
		</MIN_EXT>
		<MAX_EXT public="1" get="inline" set="null" expr="32776" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
			<haxe_doc>Produces the maximum color components of the source and destination colors.</haxe_doc>
		</MAX_EXT>
		<haxe_doc><![CDATA[The `EXT_blend_minmax` extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.

	Documentation [EXT_blend_minmax](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_blend_minmax"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTColorBufferFloat" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTColorBufferFloat.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTColorBufferHalfFloat" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTColorBufferHalfFloat.hx" extern="1">
		<RGBA16F_EXT public="1" get="inline" set="null" expr="34842" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
			<haxe_doc>RGBA 16-bit floating-point color-renderable format.</haxe_doc>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" get="inline" set="null" expr="34843" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
			<haxe_doc>RGB 16-bit floating-point color-renderable format.</haxe_doc>
		</RGB16F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `EXT_color_buffer_half_float` extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.

	Documentation [EXT_color_buffer_half_float](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_color_buffer_half_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTDisjointTimerQuery" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTDisjointTimerQuery.hx" extern="1">
		<QUERY_COUNTER_BITS_EXT public="1" get="inline" set="null" expr="34916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34916</e></m></meta>
			<haxe_doc>A `GLint` indicating the number of bits used to hold the query result for the given target.</haxe_doc>
		</QUERY_COUNTER_BITS_EXT>
		<CURRENT_QUERY_EXT public="1" get="inline" set="null" expr="34917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
			<haxe_doc>A `WebGLQuery` object, which is the currently active query for the given target.</haxe_doc>
		</CURRENT_QUERY_EXT>
		<QUERY_RESULT_EXT public="1" get="inline" set="null" expr="34918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
			<haxe_doc>A `GLuint64EXT` containing the query result.</haxe_doc>
		</QUERY_RESULT_EXT>
		<QUERY_RESULT_AVAILABLE_EXT public="1" get="inline" set="null" expr="34919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not a query result is available.</haxe_doc>
		</QUERY_RESULT_AVAILABLE_EXT>
		<TIME_ELAPSED_EXT public="1" get="inline" set="null" expr="35007" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35007</e></m></meta>
			<haxe_doc>Elapsed time (in nanoseconds).</haxe_doc>
		</TIME_ELAPSED_EXT>
		<TIMESTAMP_EXT public="1" get="inline" set="null" expr="36392" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36392</e></m></meta>
			<haxe_doc>The current time.</haxe_doc>
		</TIMESTAMP_EXT>
		<GPU_DISJOINT_EXT public="1" get="inline" set="null" expr="36795" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36795</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not the GPU performed any disjoint operation.</haxe_doc>
		</GPU_DISJOINT_EXT>
		<createQueryEXT public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery`.</haxe_doc>
		</createQueryEXT>
		<deleteQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery`.</haxe_doc>
		</deleteQueryEXT>
		<isQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLQuery`.</haxe_doc>
		</isQueryEXT>
		<beginQueryEXT public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer starts when all commands prior to `beginQueryEXT` have been fully executed.</haxe_doc>
		</beginQueryEXT>
		<endQueryEXT public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer stops when all commands prior to `endQueryEXT` have been fully executed.</haxe_doc>
		</endQueryEXT>
		<queryCounterEXT public="1" set="method">
			<f a="query:target">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Records the current time into the corresponding query object.</haxe_doc>
		</queryCounterEXT>
		<getQueryEXT public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query target.</haxe_doc>
		</getQueryEXT>
		<getQueryObjectEXT public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Return the state of a query object.</haxe_doc>
		</getQueryObjectEXT>
		<haxe_doc><![CDATA[The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.

	Documentation [EXT_disjoint_timer_query](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_disjoint_timer_query"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTFragDepth" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTFragDepth.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.EXTShaderTextureLod" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTShaderTextureLod.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTSrgb" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTSrgb.hx" extern="1">
		<SRGB_EXT public="1" get="inline" set="null" expr="35904" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
			<haxe_doc>Unsized sRGB format that leaves the precision up to the driver.</haxe_doc>
		</SRGB_EXT>
		<SRGB_ALPHA_EXT public="1" get="inline" set="null" expr="35906" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35906</e></m></meta>
			<haxe_doc>Unsized sRGB format with unsized alpha component.</haxe_doc>
		</SRGB_ALPHA_EXT>
		<SRGB8_ALPHA8_EXT public="1" get="inline" set="null" expr="35907" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
			<haxe_doc>Sized (8-bit) sRGB and alpha formats.</haxe_doc>
		</SRGB8_ALPHA8_EXT>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT public="1" get="inline" set="null" expr="33296" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
			<haxe_doc>Returns the framebuffer color encoding (`gl.LINEAR` or `ext.SRGB_EXT`).</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT>
		<haxe_doc><![CDATA[The `EXT_sRGB` extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.

	Documentation [EXT_sRGB](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_sRGB"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTTextureFilterAnisotropic" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/EXTTextureFilterAnisotropic.hx" extern="1">
		<TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34046" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34046</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getTexParameter` and `WebGLRenderingContext.texParameterf` / `WebGLRenderingContext.texParameteri` calls and sets the desired maximum anisotropy for a texture.</haxe_doc>
		</TEXTURE_MAX_ANISOTROPY_EXT>
		<MAX_TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34047" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34047</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getParameter` call, and it returns the maximum available anisotropy.</haxe_doc>
		</MAX_TEXTURE_MAX_ANISOTROPY_EXT>
		<haxe_doc><![CDATA[The `EXT_texture_filter_anisotropic` extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).

	Documentation [EXT_texture_filter_anisotropic](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_texture_filter_anisotropic"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESElementIndexUint" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/OESElementIndexUint.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESStandardDerivatives" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/OESStandardDerivatives.hx" extern="1">
		<FRAGMENT_SHADER_DERIVATIVE_HINT_OES public="1" get="inline" set="null" expr="35723" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
			<haxe_doc>A `Glenum` indicating the accuracy of the derivative calculation for the GLSL built-in functions: `dFdx`, `dFdy`, and `fwidth`.</haxe_doc>
		</FRAGMENT_SHADER_DERIVATIVE_HINT_OES>
		<haxe_doc><![CDATA[The `OES_standard_derivatives` extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.

	Documentation [OES_standard_derivatives](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_standard_derivatives"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureFloat" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/OESTextureFloat.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.OESTextureFloatLinear" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/OESTextureFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESTextureHalfFloat" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/OESTextureHalfFloat.hx" extern="1">
		<HALF_FLOAT_OES public="1" get="inline" set="null" expr="36193" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36193</e></m></meta>
			<haxe_doc>Half floating-point type (16-bit).</haxe_doc>
		</HALF_FLOAT_OES>
		<haxe_doc><![CDATA[The `OES_texture_half_float` extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.

	Documentation [OES_texture_half_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_half_float"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureHalfFloatLinear" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/OESTextureHalfFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESVertexArrayObject" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/OESVertexArrayObject.hx" extern="1">
		<VERTEX_ARRAY_BINDING_OES public="1" get="inline" set="null" expr="34229" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
			<haxe_doc>Returns a `WebGLVertexArrayObject` object when used in the `WebGLRenderingContext.getParameter()` method as the `pname` parameter.</haxe_doc>
		</VERTEX_ARRAY_BINDING_OES>
		<createVertexArrayOES public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArrayOES>
		<deleteVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArrayOES>
		<isVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArrayOES>
		<bindVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArrayOES>
		<haxe_doc><![CDATA[The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.

	Documentation [OES_vertex_array_object](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_vertex_array_object"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLColorBufferFloat" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLColorBufferFloat.hx" extern="1">
		<RGBA32F_EXT public="1" get="inline" set="null" expr="34836" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
			<haxe_doc>RGBA 32-bit floating-point color-renderable format.</haxe_doc>
		</RGBA32F_EXT>
		<RGB32F_EXT public="1" get="inline" set="null" expr="34837" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
			<haxe_doc>RGB 32-bit floating-point color-renderable format.</haxe_doc>
		</RGB32F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `WEBGL_color_buffer_float` extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.

	Documentation [WEBGL_color_buffer_float](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_color_buffer_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAstc" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLCompressedTextureAstc.hx" extern="1">
		<COMPRESSED_RGBA_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37808" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37808</e></m></meta>
		</COMPRESSED_RGBA_ASTC_4x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37809" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37809</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37810" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37810</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37811" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37811</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37812" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37812</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37813" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37813</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x5_KHR>
		<COMPRESSED_RGBA_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37814" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37814</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37815" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37815</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37816" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37816</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x5_KHR>
		<COMPRESSED_RGBA_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37817" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37817</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x6_KHR>
		<COMPRESSED_RGBA_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37818" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37818</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37819" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37819</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37820" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37820</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37821" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37821</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x12_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37840" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37840</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37841" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37841</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37842" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37842</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37843" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37843</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37844" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37844</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37845" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37845</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37846" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37846</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37847" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37847</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37848" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37848</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37849" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37849</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37850" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37850</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37851" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37851</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37852" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37852</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37853" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37853</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR>
		<getSupportedProfiles public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedProfiles>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_astc` extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.

	Documentation [WEBGL_compressed_texture_astc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_astc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAtc" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLCompressedTextureAtc.hx" extern="1">
		<COMPRESSED_RGB_ATC_WEBGL public="1" get="inline" set="null" expr="35986" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35986</e></m></meta>
			<haxe_doc>Compresses RGB textures with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ATC_WEBGL>
		<COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL public="1" get="inline" set="null" expr="35987" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35987</e></m></meta>
			<haxe_doc>Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp).</haxe_doc>
		</COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL>
		<COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL public="1" get="inline" set="null" expr="34798" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34798</e></m></meta>
			<haxe_doc>Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient).</haxe_doc>
		</COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_atc` extension is part of the WebGL API and exposes 3 ATC compressed texture formats. ATC is a proprietary compression algorithm for compressing textures on handheld devices.

	Documentation [WEBGL_compressed_texture_atc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_atc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLCompressedTextureEtc.hx" extern="1">
		<COMPRESSED_R11_EAC public="1" get="inline" set="null" expr="37488" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37488</e></m></meta>
			<haxe_doc>One-channel (red) unsigned format compression.</haxe_doc>
		</COMPRESSED_R11_EAC>
		<COMPRESSED_SIGNED_R11_EAC public="1" get="inline" set="null" expr="37489" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37489</e></m></meta>
			<haxe_doc>One-channel (red) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_R11_EAC>
		<COMPRESSED_RG11_EAC public="1" get="inline" set="null" expr="37490" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37490</e></m></meta>
			<haxe_doc>Two-channel (red and green) unsigned format compression.</haxe_doc>
		</COMPRESSED_RG11_EAC>
		<COMPRESSED_SIGNED_RG11_EAC public="1" get="inline" set="null" expr="37491" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37491</e></m></meta>
			<haxe_doc>Two-channel (red and green) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_RG11_EAC>
		<COMPRESSED_RGB8_ETC2 public="1" get="inline" set="null" expr="37492" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37492</e></m></meta>
			<haxe_doc>Compresses RGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB8_ETC2>
		<COMPRESSED_SRGB8_ETC2 public="1" get="inline" set="null" expr="37493" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37493</e></m></meta>
			<haxe_doc>Compresses sRGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_SRGB8_ETC2>
		<COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37494" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37494</e></m></meta>
			<haxe_doc>Similar to `RGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37495" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37495</e></m></meta>
			<haxe_doc>Similar to `SRGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_RGBA8_ETC2_EAC public="1" get="inline" set="null" expr="37496" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37496</e></m></meta>
			<haxe_doc>Compresses RGBA8 data. The RGB part is encoded the same as `RGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_RGBA8_ETC2_EAC>
		<COMPRESSED_SRGB8_ALPHA8_ETC2_EAC public="1" get="inline" set="null" expr="37497" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37497</e></m></meta>
			<haxe_doc>Compresses sRGBA8 data. The sRGB part is encoded the same as `SRGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_SRGB8_ALPHA8_ETC2_EAC>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc` extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.

	Documentation [WEBGL_compressed_texture_etc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc1" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLCompressedTextureEtc1.hx" extern="1">
		<COMPRESSED_RGB_ETC1_WEBGL public="1" get="inline" set="null" expr="36196" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36196</e></m></meta>
			<haxe_doc>Compresses 24-bit RGB data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ETC1_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc1` extension is part of the WebGL API and exposes the ETC1 compressed texture format.

	Documentation [WEBGL_compressed_texture_etc1](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc1"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTexturePvrtc" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLCompressedTexturePvrtc.hx" extern="1">
		<COMPRESSED_RGB_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35840" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35840</e></m></meta>
			<haxe_doc>RGB compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGB_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35841" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35841</e></m></meta>
			<haxe_doc>RGB compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_2BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35842" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35842</e></m></meta>
			<haxe_doc>RGBA compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35843" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35843</e></m></meta>
			<haxe_doc>RGBA compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_2BPPV1_IMG>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_pvrtc` extension is part of the WebGL API and exposes four PVRTC compressed texture formats.

	Documentation [WEBGL_compressed_texture_pvrtc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_pvrtc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tc" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLCompressedTextureS3tc.hx" extern="1">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33776" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33776</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format.</haxe_doc>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33777" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33777</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="33778" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33778</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT3_EXT>
		<COMPRESSED_RGBA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="33779" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33779</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc` extension is part of the WebGL API and exposes four S3TC compressed texture formats.

	Documentation [WEBGL_compressed_texture_s3tc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tcSrgb" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLCompressedTextureS3tcSrgb.hx" extern="1">
		<COMPRESSED_SRGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35916</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format.</haxe_doc>
		</COMPRESSED_SRGB_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35917</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="35918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35918</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="35919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35919</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc_srgb` extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.

	Documentation [WEBGL_compressed_texture_s3tc_srgb](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc_srgb"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDebugRendererInfo" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLDebugRendererInfo.hx" extern="1">
		<UNMASKED_VENDOR_WEBGL public="1" get="inline" set="null" expr="37445" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37445</e></m></meta>
		</UNMASKED_VENDOR_WEBGL>
		<UNMASKED_RENDERER_WEBGL public="1" get="inline" set="null" expr="37446" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37446</e></m></meta>
		</UNMASKED_RENDERER_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_debug_renderer_info` extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.

	Documentation [WEBGL_debug_renderer_info](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_debug_renderer_info"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLDebugShaders" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLDebugShaders.hx"><a><getTranslatedShaderSource set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getTranslatedShaderSource></a></typedef>
	<class path="js.html.webgl.extension.WEBGLDepthTexture" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLDepthTexture.hx" extern="1">
		<UNSIGNED_INT_24_8_WEBGL public="1" get="inline" set="null" expr="34042" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
			<haxe_doc>Unsigned integer type for 24-bit depth texture data.</haxe_doc>
		</UNSIGNED_INT_24_8_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_depth_texture` extension is part of the WebGL API and defines 2D depth and depth-stencil textures.

	Documentation [WEBGL_depth_texture](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_depth_texture"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDrawBuffers" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLDrawBuffers.hx" extern="1">
		<COLOR_ATTACHMENT0_WEBGL public="1" get="inline" set="null" expr="36064" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
			<haxe_doc>A `GLenum` specifying a color buffer.</haxe_doc>
		</COLOR_ATTACHMENT0_WEBGL>
		<COLOR_ATTACHMENT1_WEBGL public="1" get="inline" set="null" expr="36065" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1_WEBGL>
		<COLOR_ATTACHMENT2_WEBGL public="1" get="inline" set="null" expr="36066" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2_WEBGL>
		<COLOR_ATTACHMENT3_WEBGL public="1" get="inline" set="null" expr="36067" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3_WEBGL>
		<COLOR_ATTACHMENT4_WEBGL public="1" get="inline" set="null" expr="36068" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4_WEBGL>
		<COLOR_ATTACHMENT5_WEBGL public="1" get="inline" set="null" expr="36069" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5_WEBGL>
		<COLOR_ATTACHMENT6_WEBGL public="1" get="inline" set="null" expr="36070" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6_WEBGL>
		<COLOR_ATTACHMENT7_WEBGL public="1" get="inline" set="null" expr="36071" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7_WEBGL>
		<COLOR_ATTACHMENT8_WEBGL public="1" get="inline" set="null" expr="36072" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8_WEBGL>
		<COLOR_ATTACHMENT9_WEBGL public="1" get="inline" set="null" expr="36073" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9_WEBGL>
		<COLOR_ATTACHMENT10_WEBGL public="1" get="inline" set="null" expr="36074" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10_WEBGL>
		<COLOR_ATTACHMENT11_WEBGL public="1" get="inline" set="null" expr="36075" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11_WEBGL>
		<COLOR_ATTACHMENT12_WEBGL public="1" get="inline" set="null" expr="36076" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12_WEBGL>
		<COLOR_ATTACHMENT13_WEBGL public="1" get="inline" set="null" expr="36077" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13_WEBGL>
		<COLOR_ATTACHMENT14_WEBGL public="1" get="inline" set="null" expr="36078" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14_WEBGL>
		<COLOR_ATTACHMENT15_WEBGL public="1" get="inline" set="null" expr="36079" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15_WEBGL>
		<DRAW_BUFFER0_WEBGL public="1" get="inline" set="null" expr="34853" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
			<haxe_doc>A `GLenum` returning a draw buffer.</haxe_doc>
		</DRAW_BUFFER0_WEBGL>
		<DRAW_BUFFER1_WEBGL public="1" get="inline" set="null" expr="34854" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1_WEBGL>
		<DRAW_BUFFER2_WEBGL public="1" get="inline" set="null" expr="34855" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2_WEBGL>
		<DRAW_BUFFER3_WEBGL public="1" get="inline" set="null" expr="34856" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3_WEBGL>
		<DRAW_BUFFER4_WEBGL public="1" get="inline" set="null" expr="34857" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4_WEBGL>
		<DRAW_BUFFER5_WEBGL public="1" get="inline" set="null" expr="34858" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5_WEBGL>
		<DRAW_BUFFER6_WEBGL public="1" get="inline" set="null" expr="34859" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6_WEBGL>
		<DRAW_BUFFER7_WEBGL public="1" get="inline" set="null" expr="34860" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7_WEBGL>
		<DRAW_BUFFER8_WEBGL public="1" get="inline" set="null" expr="34861" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8_WEBGL>
		<DRAW_BUFFER9_WEBGL public="1" get="inline" set="null" expr="34862" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9_WEBGL>
		<DRAW_BUFFER10_WEBGL public="1" get="inline" set="null" expr="34863" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10_WEBGL>
		<DRAW_BUFFER11_WEBGL public="1" get="inline" set="null" expr="34864" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11_WEBGL>
		<DRAW_BUFFER12_WEBGL public="1" get="inline" set="null" expr="34865" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12_WEBGL>
		<DRAW_BUFFER13_WEBGL public="1" get="inline" set="null" expr="34866" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13_WEBGL>
		<DRAW_BUFFER14_WEBGL public="1" get="inline" set="null" expr="34867" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14_WEBGL>
		<DRAW_BUFFER15_WEBGL public="1" get="inline" set="null" expr="34868" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15_WEBGL>
		<MAX_COLOR_ATTACHMENTS_WEBGL public="1" get="inline" set="null" expr="36063" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of framebuffer color attachment points.</haxe_doc>
		</MAX_COLOR_ATTACHMENTS_WEBGL>
		<MAX_DRAW_BUFFERS_WEBGL public="1" get="inline" set="null" expr="34852" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of draw buffers.</haxe_doc>
		</MAX_DRAW_BUFFERS_WEBGL>
		<drawBuffersWEBGL public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the draw buffers to which all fragment colors are written. (When using `WebGL2RenderingContext`, this method is available as `WebGL2RenderingContext.drawBuffers()` by default).</haxe_doc>
		</drawBuffersWEBGL>
		<haxe_doc><![CDATA[The `WEBGL_draw_buffers` extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.

	Documentation [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_draw_buffers"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLLoseContext" params="" file="/home/vsts/work/1/s/std/js/html/webgl/extension/WEBGLLoseContext.hx"><a>
	<restoreContext set="method"><f a=""><x path="Void"/></f></restoreContext>
	<loseContext set="method"><f a=""><x path="Void"/></f></loseContext>
</a></typedef>
	<class path="js.lib._ArrayBuffer.ArrayBufferCompat" params="" file="/home/vsts/work/1/s/std/js/lib/ArrayBuffer.hx" private="1" module="js.lib.ArrayBuffer">
		<sliceImpl set="method" line="40" static="1"><f a="begin:?end">
	<x path="Null"><x path="Int"/></x>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></sliceImpl>
		<meta><m n=":ifFeature"><e>"js.lib.ArrayBuffer.slice"</e></m></meta>
	</class>
	<abstract path="js.lib.BufferSource" params="" file="/home/vsts/work/1/s/std/js/lib/BufferSource.hx">
		<from>
			<icast><c path="js.lib.ArrayBuffer"/></icast>
			<icast field="fromBufferView"><c path="js.lib.ArrayBufferView"/></icast>
		</from>
		<this><c path="js.lib.ArrayBuffer"/></this>
		<to><icast><c path="js.lib.ArrayBuffer"/></icast></to>
		<haxe_doc><![CDATA[`BufferSource` is a typedef used to represent objects that are either themselves an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer),
	or which are a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) providing an [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView).

	This is a helper type to simplify the specification. It isn't an interface and there are no objects implementing it.

	Documentation [BufferSource](https://developer.mozilla.org/en-US/docs/Web/API/BufferSource) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BufferSource$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BufferSource>]]></haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.lib._BufferSource.BufferSource_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/BufferSource.hx" private="1" module="js.lib.BufferSource" final="1"><fromBufferView public="1" get="inline" set="null" line="39" static="1">
	<f a="view">
		<c path="js.lib.ArrayBufferView"/>
		<x path="js.lib.BufferSource"/>
	</f>
	<meta><m n=":from"/></meta>
</fromBufferView></class></impl>
	</abstract>
	<class path="js.lib._BufferSource.BufferSource_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/BufferSource.hx" private="1" module="js.lib.BufferSource" final="1"><fromBufferView public="1" get="inline" set="null" line="39" static="1">
	<f a="view">
		<c path="js.lib.ArrayBufferView"/>
		<x path="js.lib.BufferSource"/>
	</f>
	<meta><m n=":from"/></meta>
</fromBufferView></class>
	<class path="js.lib.Error" params="" file="/home/vsts/work/1/s/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/home/vsts/work/1/s/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/home/vsts/work/1/s/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/home/vsts/work/1/s/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/home/vsts/work/1/s/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/home/vsts/work/1/s/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/home/vsts/work/1/s/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/home/vsts/work/1/s/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/home/vsts/work/1/s/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/home/vsts/work/1/s/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.HaxeIterator" params="T" file="/home/vsts/work/1/s/std/js/lib/HaxeIterator.hx">
		<iterator public="1" params="T" get="inline" set="null" line="49" static="1"><f a="jsIterator">
	<t path="js.lib.Iterator"><c path="iterator.T"/></t>
	<c path="js.lib.HaxeIterator"><c path="iterator.T"/></c>
</f></iterator>
		<jsIterator final="1"><t path="js.lib.Iterator"><c path="js.lib.HaxeIterator.T"/></t></jsIterator>
		<lastStep><t path="js.lib.IteratorStep"><c path="js.lib.HaxeIterator.T"/></t></lastStep>
		<hasNext public="1" get="inline" set="null" line="39"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="43"><f a=""><c path="js.lib.HaxeIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="34"><f a="jsIterator">
	<t path="js.lib.Iterator"><c path="js.lib.HaxeIterator.T"/></t>
	<x path="Void"/>
</f></new>
		<haxe_doc>`HaxeIterator` wraps a JavaScript native iterator object to enable for-in iteration in haxe.
	It can be used directly: `new HaxeIterator(jsIterator)` or via using: `using HaxeIterator`.</haxe_doc>
	</class>
	<class path="js.lib.Int16Array" params="" file="/home/vsts/work/1/s/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/home/vsts/work/1/s/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/home/vsts/work/1/s/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<class path="js.lib.Intl" params="" file="/home/vsts/work/1/s/std/js/lib/Intl.hx" extern="1">
		<getCanonicalLocales public="1" set="method" static="1">
			<f a="locales">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns canonical locale names.</haxe_doc>
			<overloads><getCanonicalLocales public="1" set="method">
	<f a="locales">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns canonical locale names.</haxe_doc>
</getCanonicalLocales></overloads>
		</getCanonicalLocales>
		<haxe_doc>The `Intl` object is the namespace for the ECMAScript Internationalization API,
	which provides language sensitive string comparison, number formatting,and date and time formatting.
	The INTL object provides access to several constructors as well as functionality common to
	the internationalization constructors and other language sensitive functions.

	Documentation [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/home/vsts/work/1/s/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/home/vsts/work/1/s/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/home/vsts/work/1/s/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/home/vsts/work/1/s/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1">
	<key public="1" get="accessor" set="null" static="1">
		<c path="js.lib.KeyValue.K"/>
		<meta><m n=":impl"/></meta>
	</key>
	<value public="1" get="accessor" set="null" static="1">
		<c path="js.lib.KeyValue.V"/>
		<meta><m n=":impl"/></meta>
	</value>
	<get_key get="inline" set="null" line="32" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<c path="js.lib.KeyValue.K"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_key>
	<get_value get="inline" set="null" line="36" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<c path="js.lib.KeyValue.V"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_value>
</class></impl>
	</abstract>
	<class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1">
		<key public="1" get="accessor" set="null" static="1">
			<c path="js.lib.KeyValue.K"/>
			<meta><m n=":impl"/></meta>
		</key>
		<value public="1" get="accessor" set="null" static="1">
			<c path="js.lib.KeyValue.V"/>
			<meta><m n=":impl"/></meta>
		</value>
		<get_key get="inline" set="null" line="32" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<c path="js.lib.KeyValue.K"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_key>
		<get_value get="inline" set="null" line="36" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<c path="js.lib.KeyValue.V"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_value>
	</class>
	<class path="js.lib.Map" params="K:V" file="/home/vsts/work/1/s/std/js/lib/Map.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of key/value pairs in the `js.Map` object.</haxe_doc>
		</size>
		<has public="1" set="method">
			<f a="key">
				<c path="js.lib.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>A boolean asserting whether a value has been associated to the key in
		the `js.Map` object or not.</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="js.lib.Map.K"/>
				<x path="Null"><c path="js.lib.Map.V"/></x>
			</f>
			<haxe_doc>The value associated to the key, or `null` if there is none.</haxe_doc>
		</get>
		<set public="1" set="method">
			<f a="key:value">
				<c path="js.lib.Map.K"/>
				<c path="js.lib.Map.V"/>
				<c path="js.lib.Map">
					<c path="js.lib.Map.K"/>
					<c path="js.lib.Map.V"/>
				</c>
			</f>
			<haxe_doc>Sets the value for the key in the Map object.
		Returns the `js.Map` object.</haxe_doc>
		</set>
		<delete public="1" set="method">
			<f a="key">
				<c path="js.lib.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if an element in the `js.Map` object existed and has been
		removed, or `false` if the element does not exist.
		`has(key)` will return `false` afterwards.</haxe_doc>
		</delete>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all key/value pairs from the Map object.</haxe_doc>
		</clear>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="value:key:map">
					<c path="js.lib.Map.V"/>
					<c path="js.lib.Map.K"/>
					<c path="js.lib.Map">
						<c path="js.lib.Map.K"/>
						<c path="js.lib.Map.V"/>
					</c>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `callback` once for each key-value pair present in the `js.Map`
		object, in insertion order.

		If a `thisArg` parameter is provided to forEach, it will be used as the
		`this` value for each callback.</haxe_doc>
		</forEach>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><c path="js.lib.Map.K"/></t></f>
			<haxe_doc>Returns a new `Iterator` object that contains the keys for each element
		in the `js.Map` object in insertion order.</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><c path="js.lib.Map.V"/></t></f>
			<haxe_doc>Returns a new `Iterator` object that contains the values for each
		element in the `js.Map` object in insertion order.</haxe_doc>
		</values>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<c path="js.lib.Map.K"/>
	<c path="js.lib.Map.V"/>
</x></t></f>
			<haxe_doc>Returns a new `Iterator` object that contains an array of `KeyValue`
		for each element in the `js.Map` object in insertion order.</haxe_doc>
		</entries>
		<iterator public="1" get="inline" set="null" line="103"><f a=""><c path="js.lib.HaxeIterator"><c path="js.lib.Map.V"/></c></f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="107"><f a=""><c path="js.lib.HaxeIterator"><x path="js.lib.KeyValue">
	<c path="js.lib.Map.K"/>
	<c path="js.lib.Map.V"/>
</x></c></f></keyValueIterator>
		<new public="1" set="method">
			<f a="?iterable">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>An Array or other iterable object whose elements are key-value pairs
		(arrays with two elements, e.g. `[[ 1, 'one' ],[ 2, 'two' ]]`).
		Each key-value pair is added to the new `js.Map`;
		null values are treated as undefined.</haxe_doc>
		</new>
		<haxe_doc>The (native) JavaScript Map object holds key-value pairs.
	Any value (both objects and primitive values) may be used as either a key
	or a value.

	Documentation [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Map"</e></m></meta>
	</class>
	<typedef path="js.lib.MapEntry" params="K:V" file="/home/vsts/work/1/s/std/js/lib/Map.hx" module="js.lib.Map">
		<x path="js.lib.KeyValue">
			<c path="js.lib.MapEntry.K"/>
			<c path="js.lib.MapEntry.V"/>
		</x>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.lib.Math" params="" file="/home/vsts/work/1/s/std/js/lib/Math.hx" extern="1">
		<E public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Euler's constant and the base of natural logarithms, approximately 2.718.</haxe_doc>
		</E>
		<LN2 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Natural logarithm of 2, approximately 0.693.</haxe_doc>
		</LN2>
		<LN10 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Natural logarithm of 10, approximately 2.303.</haxe_doc>
		</LN10>
		<LOG2E public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Base 2 logarithm of E, approximately 1.443.</haxe_doc>
		</LOG2E>
		<LOG10E public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Base 10 logarithm of E, approximately 0.434.</haxe_doc>
		</LOG10E>
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Ratio of the circumference of a circle to its diameter, approximately 3.14159.</haxe_doc>
		</PI>
		<SQRT1_2 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.</haxe_doc>
		</SQRT1_2>
		<SQRT2 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Square root of 2, approximately 1.414.</haxe_doc>
		</SQRT2>
		<abs public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the absolute value of a number.</haxe_doc>
			<overloads><abs public="1" set="method">
	<f a="x">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<haxe_doc>Returns the absolute value of a number.</haxe_doc>
</abs></overloads>
		</abs>
		<acos public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arccosine of a number.</haxe_doc>
		</acos>
		<acosh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic arccosine of a number.</haxe_doc>
		</acosh>
		<asin public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arcsine of a number.</haxe_doc>
		</asin>
		<asinh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic arcsine of a number.</haxe_doc>
		</asinh>
		<atan public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arctangent of a number.</haxe_doc>
		</atan>
		<atanh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic arctangent of a number.</haxe_doc>
		</atanh>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arctangent of the quotient of its arguments.</haxe_doc>
		</atan2>
		<cbrt public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the cube root of a number.</haxe_doc>
		</cbrt>
		<ceil public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer greater than or equal to a number.</haxe_doc>
		</ceil>
		<clz32 public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of leading zeroes of a 32-bit integer.</haxe_doc>
		</clz32>
		<cos public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the cosine of a number.</haxe_doc>
		</cos>
		<cosh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic cosine of a number.</haxe_doc>
		</cosh>
		<exp public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Ex, where x is the argument, and E is Euler's constant (2.718…), the base of the natural logarithm.</haxe_doc>
		</exp>
		<expm1 public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns subtracting 1 from exp(x).</haxe_doc>
		</expm1>
		<floor public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer less than or equal to a number.</haxe_doc>
		</floor>
		<fround public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the nearest single precision float representation of a number.</haxe_doc>
		</fround>
		<hypot public="1" set="method" static="1">
			<f a="args">
				<x path="haxe.extern.Rest"><x path="Float"/></x>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of the sum of squares of its arguments.</haxe_doc>
		</hypot>
		<imul public="1" set="method" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the result of a 32-bit integer multiplication.</haxe_doc>
		</imul>
		<log public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm (loge, also ln) of a number.</haxe_doc>
		</log>
		<log1p public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm (loge, also ln) of 1 + x for a number x.</haxe_doc>
		</log1p>
		<log10 public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the base 10 logarithm of a number.</haxe_doc>
		</log10>
		<log2 public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the base 2 logarithm of a number.</haxe_doc>
		</log2>
		<max public="1" set="method" static="1">
			<f a="args">
				<x path="haxe.extern.Rest"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest of zero or more numbers.</haxe_doc>
			<overloads><max public="1" set="method">
	<f a="args">
		<x path="haxe.extern.Rest"><x path="Float"/></x>
		<x path="Float"/>
	</f>
	<haxe_doc>Returns the largest of zero or more numbers.</haxe_doc>
</max></overloads>
		</max>
		<min public="1" set="method" static="1">
			<f a="args">
				<x path="haxe.extern.Rest"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest of zero or more numbers.</haxe_doc>
			<overloads><min public="1" set="method">
	<f a="args">
		<x path="haxe.extern.Rest"><x path="Float"/></x>
		<x path="Float"/>
	</f>
	<haxe_doc>Returns the smallest of zero or more numbers.</haxe_doc>
</min></overloads>
		</min>
		<pow public="1" set="method" static="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns base to the exponent power, that is, baseexponent.</haxe_doc>
		</pow>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number between 0 and 1.</haxe_doc>
		</random>
		<round public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the value of a number rounded to the nearest integer.</haxe_doc>
		</round>
		<sign public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the sign of the x, indicating whether x is positive, negative or zero.</haxe_doc>
		</sign>
		<sin public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the sine of a number.</haxe_doc>
		</sin>
		<sinh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic sine of a number.</haxe_doc>
		</sinh>
		<sqrt public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the positive square root of a number.</haxe_doc>
		</sqrt>
		<tan public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the tangent of a number.</haxe_doc>
		</tan>
		<tanh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic tangent of a number.</haxe_doc>
		</tanh>
		<trunc public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the integer part of the number x, removing any fractional digits.</haxe_doc>
		</trunc>
		<haxe_doc>Math is a built-in object that has properties and methods for mathematical constants and functions.
	Not a function object.

	Documentation [Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Math"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/home/vsts/work/1/s/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/home/vsts/work/1/s/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/home/vsts/work/1/s/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1">
	<key public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
	</key>
	<value public="1" get="accessor" set="null" static="1">
		<x path="Any"/>
		<meta><m n=":impl"/></meta>
	</value>
	<get_key get="inline" set="null" line="253" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_key>
	<get_value get="inline" set="null" line="256" static="1">
		<f a="this">
			<c path="Array"><x path="Any"/></c>
			<x path="Any"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_value>
</class></impl>
	</abstract>
	<class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1">
		<key public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
		</key>
		<value public="1" get="accessor" set="null" static="1">
			<x path="Any"/>
			<meta><m n=":impl"/></meta>
		</value>
		<get_key get="inline" set="null" line="253" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_key>
		<get_value get="inline" set="null" line="256" static="1">
			<f a="this">
				<c path="Array"><x path="Any"/></c>
				<x path="Any"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_value>
	</class>
	<class path="js.lib.Promise" params="T" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
		</all>
		<race public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" params="TOut" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="catchError.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="catchError.TOut"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
		</catchError>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" extern="1" final="1"/></impl>
	</abstract>
	<class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" extern="1" final="1"/>
	<abstract path="js.lib.Thenable" params="T" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" extern="1" final="1"/></impl>
	</abstract>
	<class path="js.lib._Promise.Thenable_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" extern="1" final="1"/>
	<typedef path="js.lib.ThenableStruct" params="T" file="/home/vsts/work/1/s/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<class path="js.lib.Proxy" params="T" file="/home/vsts/work/1/s/std/js/lib/Proxy.hx" extern="1">
		<revocable public="1" params="T" set="method" static="1">
			<f a="target:handler">
				<c path="revocable.T"/>
				<t path="js.lib.ProxyHandler"><c path="revocable.T"/></t>
				<t path="js.lib.RevocableProxy"><c path="revocable.T"/></t>
			</f>
			<haxe_doc>Creates a revocable `Proxy` object.</haxe_doc>
		</revocable>
		<new public="1" set="method"><f a="target:handler">
	<c path="js.lib.Proxy.T"/>
	<t path="js.lib.ProxyHandler"><c path="js.lib.Proxy.T"/></t>
	<x path="Void"/>
</f></new>
		<haxe_doc>The `Proxy` object is used to define custom behavior for fundamental operations
	(e.g. property lookup, assignment, enumeration, function invocation, etc).

	Documentation [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Proxy"</e></m></meta>
	</class>
	<typedef path="js.lib.ProxyHandler" params="T" file="/home/vsts/work/1/s/std/js/lib/Proxy.hx" module="js.lib.Proxy"><a>
	<setPrototypeOf>
		<x path="Null"><f a="target:prototype">
	<c path="js.lib.ProxyHandler.T"/>
	<x path="Null"><a/></x>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for `Object.setPrototypeOf`.</haxe_doc>
	</setPrototypeOf>
	<set>
		<x path="Null"><f a="target:property:value:receiver">
	<c path="js.lib.ProxyHandler.T"/>
	<c path="String"/>
	<x path="Any"/>
	<x path="Null"><a/></x>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for setting property values.</haxe_doc>
	</set>
	<preventExtensions>
		<x path="Null"><f a="target">
	<c path="js.lib.ProxyHandler.T"/>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for `Object.preventExtensions`.</haxe_doc>
	</preventExtensions>
	<ownKeys>
		<x path="Null"><f a="target">
	<c path="js.lib.ProxyHandler.T"/>
	<c path="Array"><c path="String"/></c>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for `Object.getOwnPropertyNames` and `Object.getOwnPropertySymbols`.</haxe_doc>
	</ownKeys>
	<isExtensible>
		<x path="Null"><f a="target">
	<c path="js.lib.ProxyHandler.T"/>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for `Object.isExtensible`.</haxe_doc>
	</isExtensible>
	<has>
		<x path="Null"><f a="target:prop">
	<c path="js.lib.ProxyHandler.T"/>
	<c path="String"/>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for the `in` operator.</haxe_doc>
	</has>
	<getPrototypeOf>
		<x path="Null"><f a="target">
	<c path="js.lib.ProxyHandler.T"/>
	<x path="Null"><a/></x>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for `Object.getPrototypeOf`.</haxe_doc>
	</getPrototypeOf>
	<getOwnPropertyDescriptor>
		<x path="Null"><f a="target:prop">
	<c path="js.lib.ProxyHandler.T"/>
	<c path="String"/>
	<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for `Object.getOwnPropertyDescriptor`.</haxe_doc>
	</getOwnPropertyDescriptor>
	<get>
		<x path="Null"><f a="target:property:receiver">
	<c path="js.lib.ProxyHandler.T"/>
	<c path="String"/>
	<x path="Null"><a/></x>
	<x path="Any"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for getting property values.</haxe_doc>
	</get>
	<deleteProperty>
		<x path="Null"><f a="target:property">
	<c path="js.lib.ProxyHandler.T"/>
	<c path="String"/>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for the `delete` operator.</haxe_doc>
	</deleteProperty>
	<defineProperty>
		<x path="Null"><f a="target:property:descriptor">
	<c path="js.lib.ProxyHandler.T"/>
	<c path="String"/>
	<t path="js.lib.ObjectPropertyDescriptor"/>
	<x path="Bool"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for `Object.defineProperty`.</haxe_doc>
	</defineProperty>
	<construct>
		<x path="Null"><f a="target:argumentsList:newTarget">
	<x path="Class"><c path="js.lib.ProxyHandler.T"/></x>
	<c path="Array"><x path="Any"/></c>
	<x path="Class"><x path="Any"/></x>
	<x path="Void"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap for the `new` operator.</haxe_doc>
	</construct>
	<apply>
		<x path="Null"><f a="target:thisArg:argumentsList">
	<c path="js.lib.ProxyHandler.T"/>
	<a/>
	<c path="Array"><x path="Any"/></c>
	<x path="Any"/>
</f></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>A trap a function call.</haxe_doc>
	</apply>
</a></typedef>
	<typedef path="js.lib.RevocableProxy" params="T" file="/home/vsts/work/1/s/std/js/lib/Proxy.hx" module="js.lib.Proxy"><a>
	<revoke set="method">
		<f a=""><x path="Void"/></f>
		<haxe_doc>A function with no argument to invalidate (switch off) the `proxy`.</haxe_doc>
	</revoke>
	<proxy final="1" set="null">
		<c path="js.lib.Proxy"><c path="js.lib.RevocableProxy.T"/></c>
		<haxe_doc>A Proxy object created with `new Proxy(target, handler)` call.</haxe_doc>
	</proxy>
</a></typedef>
	<class path="js.lib.Reflect" params="" file="/home/vsts/work/1/s/std/js/lib/Reflect.hx" extern="1">
		<apply public="1" params="T" set="method" static="1">
			<f a="target:thisArgument:argumentsList">
				<x path="haxe.Function"/>
				<a/>
				<c path="Array"><x path="Any"/></c>
				<c path="apply.T"/>
			</f>
			<haxe_doc>Calls a target function with arguments as specified by the args parameter.
		See also `Function.prototype.apply()`.</haxe_doc>
		</apply>
		<construct public="1" params="T:S" set="method" static="1">
			<f a="target:argumentsList:?newTarget">
				<x path="Class"><c path="construct.T"/></x>
				<c path="Array"><x path="Any"/></c>
				<x path="Class"><c path="construct.S"/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>The `new` operator as a function. Equivalent to calling `new target(...args)`.
		Provides also the optional possibility to specify a different prototype.</haxe_doc>
		</construct>
		<defineProperty public="1" set="method" static="1">
			<f a="target:propertyKey:attributes">
				<a/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Similar to `Object.defineProperty()`. Returns a Bool.</haxe_doc>
		</defineProperty>
		<deleteProperty public="1" set="method" static="1">
			<f a="target:propertyKey">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `delete` operator as a function. Equivalent to calling `delete target[name]`.</haxe_doc>
			<overloads><deleteProperty public="1" params="T" set="method">
	<f a="target:propertyKey">
		<c path="Array"><c path="deleteProperty.T"/></c>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>The `delete` operator as a function. Equivalent to calling `delete target[name]`.</haxe_doc>
</deleteProperty></overloads>
		</deleteProperty>
		<get public="1" params="T" set="method" static="1">
			<f a="target:propertyKey:?receiver">
				<a/>
				<c path="String"/>
				<a/>
				<x path="Null"><c path="get.T"/></x>
			</f>
			<haxe_doc>A function that returns the value of properties.</haxe_doc>
			<overloads><get public="1" params="T" set="method">
	<f a="target:propertyKey:?receiver">
		<c path="Array"><c path="get.T"/></c>
		<x path="Int"/>
		<a/>
		<x path="Null"><c path="get.T"/></x>
	</f>
	<haxe_doc>A function that returns the value of properties.</haxe_doc>
</get></overloads>
		</get>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="target:propertyKey">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Similar to `Object.getOwnPropertyDescriptor()`.
		Returns a property descriptor of the given property if it exists on the object,
		`undefined` otherwise.</haxe_doc>
		</getOwnPropertyDescriptor>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="target">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Same as `Object.getPrototypeOf()`.</haxe_doc>
		</getPrototypeOf>
		<has public="1" set="method" static="1">
			<f a="target:propertyKey">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `in` operator as function. Returns a boolean indicating whether an own
		or inherited property exists.</haxe_doc>
		</has>
		<isExtensible public="1" set="method" static="1">
			<f a="target">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Same as `Object.isExtensible()`.</haxe_doc>
		</isExtensible>
		<ownKeys public="1" set="method" static="1">
			<f a="target">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of the target object's own (not inherited) property keys.</haxe_doc>
		</ownKeys>
		<preventExtensions public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Similar to `Object.preventExtensions()`. Returns a Bool.</haxe_doc>
		</preventExtensions>
		<set public="1" params="T" set="method" static="1">
			<f a="target:propertyKey:value:?receiver">
				<a/>
				<c path="String"/>
				<c path="set.T"/>
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>A function that assigns values to properties. Returns a Bool that is true
		if the update was successful.</haxe_doc>
			<overloads><set public="1" params="T" set="method">
	<f a="target:propertyKey:value:?receiver">
		<c path="Array"><c path="set.T"/></c>
		<x path="Int"/>
		<c path="set.T"/>
		<a/>
		<x path="Bool"/>
	</f>
	<haxe_doc>A function that assigns values to properties. Returns a Bool that is true
		if the update was successful.</haxe_doc>
</set></overloads>
		</set>
		<setPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="target:prototype">
				<a/>
				<c path="setPrototypeOf.TProto"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>A function that sets the prototype of an object.</haxe_doc>
		</setPrototypeOf>
		<haxe_doc>`Reflect` is a built-in object that provides methods for interceptable JavaScript operations.
	The methods are the same as those of [proxy handlers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler).
	Reflect is not a function object, so it's not constructible.

	Documentation [Reflect](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Reflect"</e></m></meta>
	</class>
	<class path="js.lib.RegExpMatch" params="" file="/home/vsts/work/1/s/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Set" params="T" file="/home/vsts/work/1/s/std/js/lib/Set.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of values in the `js.Set` object.</haxe_doc>
		</size>
		<has public="1" set="method">
			<f a="value">
				<c path="js.lib.Set.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean asserting whether an element is present with the given
		value in the `js.Set` object or not.</haxe_doc>
		</has>
		<add public="1" set="method">
			<f a="value">
				<c path="js.lib.Set.T"/>
				<c path="js.lib.Set"><c path="js.lib.Set.T"/></c>
			</f>
			<haxe_doc>Appends a new element with the given value to the `js.Set` object.
		Returns the `js.Set` object.</haxe_doc>
		</add>
		<delete public="1" set="method">
			<f a="value">
				<c path="js.lib.Set.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the element associated to the value and returns the value that
		`has(value)` would have previously returned.
		`has(value)` will return `false` afterwards.</haxe_doc>
		</delete>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all elements from the `js.Set` object.</haxe_doc>
		</clear>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="value:key:set">
					<c path="js.lib.Set.T"/>
					<c path="js.lib.Set.T"/>
					<c path="js.lib.Set"><c path="js.lib.Set.T"/></c>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `callback` once for each key-value pair present in the `js.Set`
		object, in insertion order.

		If a `thisArg` parameter is provided to forEach, it will be used as the
		`this` value for each callback.</haxe_doc>
		</forEach>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><c path="js.lib.Set.T"/></t></f>
			<haxe_doc>Returns a new `js.lib.Iterator` object that contains the keys for each element
		in the `js.Set` object in insertion order.</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><c path="js.lib.Set.T"/></t></f>
			<haxe_doc>Returns a new `js.lib.Iterator` object that contains the values for each
		element in the `js.Set` object in insertion order.</haxe_doc>
		</values>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<c path="js.lib.Set.T"/>
	<c path="js.lib.Set.T"/>
</x></t></f>
			<haxe_doc>Returns a new `js.lib.Iterator` object that contains an array of
		`[value, value]` for each element in the `js.Set` object, in insertion
		order.
		This is kept similar to the `js.Map` object, so that each entry has the
		same value for its key and value here.</haxe_doc>
		</entries>
		<iterator public="1" get="inline" set="null" line="98"><f a=""><c path="js.lib.HaxeIterator"><c path="js.lib.Set.T"/></c></f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="102"><f a=""><c path="js.lib.SetKeyValueIterator"><c path="js.lib.Set.T"/></c></f></keyValueIterator>
		<new public="1" set="method">
			<f a="?iterable">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>If an iterable object is passed, all of its elements will be added to
		the new `js.Set`.</haxe_doc>
		</new>
		<haxe_doc>The `js.Set` object lets you store unique values of any type, whether
	primitive values or object references.

	Documentation [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Set"</e></m></meta>
	</class>
	<class path="js.lib.SetKeyValueIterator" params="T" file="/home/vsts/work/1/s/std/js/lib/Set.hx" module="js.lib.Set">
		<set final="1"><c path="js.lib.Set"><c path="js.lib.SetKeyValueIterator.T"/></c></set>
		<values final="1"><c path="js.lib.HaxeIterator"><c path="js.lib.SetKeyValueIterator.T"/></c></values>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="120"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="124"><f a=""><a>
	<value><c path="js.lib.SetKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="115"><f a="set">
	<c path="js.lib.Set"><c path="js.lib.SetKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[key => value iterator for js.lib.Set, tracking the entry index for the key to match the behavior of haxe.ds.List]]></haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/home/vsts/work/1/s/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="66">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/home/vsts/work/1/s/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/home/vsts/work/1/s/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/home/vsts/work/1/s/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<class path="js.lib.WeakMap" params="T" file="/home/vsts/work/1/s/std/js/lib/WeakMap.hx" extern="1">
		<length final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The value of the `length` property is 0.</haxe_doc>
		</length>
		<delete public="1" set="method">
			<f a="key">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes any value associated to the `key`. `has(key)` will return `false` afterwards.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="key">
				<a/>
				<c path="js.lib.WeakMap.T"/>
			</f>
			<haxe_doc>Returns the value associated to the `key`, or `undefined` if there is none.</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="key">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean asserting whether a value has been associated to the `key` in the `WeakMap` object or not.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="key:value">
				<a/>
				<c path="js.lib.WeakMap.T"/>
				<c path="js.lib.WeakMap"><c path="js.lib.WeakMap.T"/></c>
			</f>
			<haxe_doc>Sets the value for the `key` in the `WeakMap` object. Returns the `WeakMap` object.</haxe_doc>
		</set>
		<new public="1" set="method">
			<f a="?iterable">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>If an iterable object is passed, all of its elements will be added to the new WeakSet.
		null is treated as undefined.</haxe_doc>
		</new>
		<haxe_doc>The `WeakMap` object is a collection of key/value pairs in which the keys are weakly referenced.
	The keys must be objects and the values can be arbitrary values.

	You can learn more about WeakMaps in the section [WeakMap object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections#WeakMap_object)
	in [Keyed collections](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections).

	Documentation [WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WeakMap"</e></m></meta>
	</class>
	<class path="js.lib.WeakSet" params="" file="/home/vsts/work/1/s/std/js/lib/WeakSet.hx" extern="1">
		<length final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The value of the `length` property is 0.</haxe_doc>
		</length>
		<add public="1" set="method">
			<f a="value">
				<a/>
				<c path="js.lib.WeakSet"/>
			</f>
			<haxe_doc>Appends a new object with the given value to the `WeakSet` object.</haxe_doc>
		</add>
		<delete public="1" set="method">
			<f a="value">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the element associated to the `value`.
		`has(value)` will return `false` afterwards.</haxe_doc>
		</delete>
		<has public="1" set="method">
			<f a="value">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean asserting whether an element is present with the given value
		in the `WeakSet` object or not.</haxe_doc>
		</has>
		<new public="1" set="method">
			<f a="?iterable">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>If an iterable object is passed, all of its elements will be added to the new WeakSet.
		null is treated as undefined.</haxe_doc>
		</new>
		<haxe_doc>The `WeakSet` object lets you store weakly held objects in a collection.

	Documentation [WeakSet](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WeakSet"</e></m></meta>
	</class>
	<class path="js.lib.WebAssembly" params="" file="/home/vsts/work/1/s/std/js/lib/WebAssembly.hx" extern="1">
		<instantiate public="1" set="method" static="1">
			<f a="bufferSource:importObject">
				<x path="js.lib.BufferSource"/>
				<a/>
				<c path="js.lib.Promise"><t path="js.lib.WebAssemblyInstantiatedSource"/></c>
			</f>
			<haxe_doc>The `WebAssembly.instantiate()` function allows you to compile and instantiate WebAssembly code.
		This function has two overloads:

		- The primary overload takes the WebAssembly binary code, in the form of a typed array or ArrayBuffer,
		  and performs both compilation and instantiation in one step. The returned Promise resolves to both
		  a compiled WebAssembly.Module and its first WebAssembly.Instance.

		- The secondary overload takes an already-compiled WebAssembly.Module and returns a Promise that resolves
		  to an Instance of that Module. This overload is useful if the Module has already been compiled.</haxe_doc>
			<overloads><instantiate public="1" set="method">
	<f a="module:importObject">
		<c path="js.lib.webassembly.Module"/>
		<a/>
		<c path="js.lib.Promise"><c path="js.lib.webassembly.Instance"/></c>
	</f>
	<haxe_doc>The `WebAssembly.instantiate()` function allows you to compile and instantiate WebAssembly code.
		This function has two overloads:

		- The primary overload takes the WebAssembly binary code, in the form of a typed array or ArrayBuffer,
		  and performs both compilation and instantiation in one step. The returned Promise resolves to both
		  a compiled WebAssembly.Module and its first WebAssembly.Instance.

		- The secondary overload takes an already-compiled WebAssembly.Module and returns a Promise that resolves
		  to an Instance of that Module. This overload is useful if the Module has already been compiled.</haxe_doc>
</instantiate></overloads>
		</instantiate>
		<instantiateStreaming public="1" set="method" static="1">
			<f a="source:importObject">
				<c path="js.html.Response"/>
				<a/>
				<c path="js.lib.Promise"><t path="js.lib.WebAssemblyInstantiatedSource"/></c>
			</f>
			<haxe_doc>The `WebAssembly.instantiateStreaming()` function compiles and instantiates a WebAssembly module
		directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.</haxe_doc>
		</instantiateStreaming>
		<compile public="1" set="method" static="1">
			<f a="bufferSource">
				<x path="js.lib.BufferSource"/>
				<c path="js.lib.Promise"><c path="js.lib.webassembly.Module"/></c>
			</f>
			<haxe_doc>The `WebAssembly.compile()` function compiles a WebAssembly `Module` from WebAssembly binary code.
		This function is useful if it is necessary to a compile a module before it can be instantiated
		(otherwise, the `WebAssembly.instantiate()` function should be used).</haxe_doc>
		</compile>
		<compileStreaming public="1" set="method" static="1">
			<f a="source">
				<c path="js.html.Response"/>
				<c path="js.lib.Promise"><c path="js.lib.webassembly.Module"/></c>
			</f>
			<haxe_doc>The `WebAssembly.compileStreaming()` function compiles a WebAssembly `Module` directly from a streamed
		underlying source. This function is useful if it is necessary to a compile a module before it can
		be instantiated (otherwise, the `WebAssembly.instantiateStreaming()` function should be used).</haxe_doc>
		</compileStreaming>
		<validate public="1" set="method" static="1">
			<f a="bufferSource">
				<x path="js.lib.BufferSource"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The `WebAssembly.validate()` function validates a given typed array of WebAssembly binary code,
		returning whether the bytes form a valid wasm module (`true`) or not (`false`).</haxe_doc>
		</validate>
		<haxe_doc>The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.

	Documentation [WebAssembly](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly"</e></m></meta>
	</class>
	<typedef path="js.lib.WebAssemblyInstantiatedSource" params="" file="/home/vsts/work/1/s/std/js/lib/WebAssembly.hx" module="js.lib.WebAssembly"><a>
	<module final="1" set="null"><c path="js.lib.webassembly.Module"/></module>
	<instance final="1" set="null"><c path="js.lib.webassembly.Instance"/></instance>
</a></typedef>
	<class path="js.lib.intl.Collator" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.CollatorSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.
		@param locales A string with a BCP 47 language tag, or an array of such strings.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.CollatorSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.
		@param locales A string with a BCP 47 language tag, or an array of such strings.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<compare public="1" set="method">
			<f a="string1:string2">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Getter function that compares two strings according to the sort order of this `Collator` object.</haxe_doc>
		</compare>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.CollatorResolvedOptions"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options computed
		during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.CollatorOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.CollatorOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `Collator` object is a constructor for collators, objects that enable language
	sensitive string comparison.

	Documentation [Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.Collator"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.CollatorOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" module="js.lib.intl.Collator"><a>
	<usage>
		<x path="Null"><x path="js.lib.intl.Usage"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the comparison is for sorting or for searching for matching strings.
		The default is `Sort`.</haxe_doc>
	</usage>
	<sensitivity>
		<x path="Null"><x path="js.lib.intl.Sensitivity"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Which differences in the strings should lead to non-zero result values.
		The default is `Variant` for usage `Sort`; it's locale dependent for usage `Search`.</haxe_doc>
	</sensitivity>
	<numeric>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[Whether numeric collation should be used, such that "1" < "2" < "10".
		The default is `false`.
		This option can be set through an `options` property or through a Unicode extension key;
		if both are provided, the `options` property takes precedence.
		Implementations are not required to support this property.]]></haxe_doc>
	</numeric>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<ignorePunctuation>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether punctuation should be ignored.
		The default is `false`.</haxe_doc>
	</ignorePunctuation>
	<caseFirst>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether upper case or lower case should sort first.
		The default is "false".
		This option can be set through an options property or through a Unicode extension key;
		if both are provided, the `options` property takes precedence.
		Implementations are not required to support this property.</haxe_doc>
	</caseFirst>
</a></typedef>
	<typedef path="js.lib.intl.CollatorResolvedOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" module="js.lib.intl.Collator"><a>
	<usage final="1" set="null"><x path="js.lib.intl.Usage"/></usage>
	<sensitivity final="1" set="null"><x path="js.lib.intl.Sensitivity"/></sensitivity>
	<numeric final="1" set="null"><x path="Bool"/></numeric>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used.
		If any Unicode extension values were requested in the input BCP 47 language tag
		that led to this locale, the key-value pairs that were requested and are supported
		for this locale are included in `locale`.</haxe_doc>
	</locale>
	<ignorePunctuation final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</ignorePunctuation>
	<collation final="1" set="null">
		<x path="js.lib.intl.Collation"/>
		<haxe_doc>he value requested using the Unicode extension key `"co"`, if it is supported for `Locale`,
		or `Default`.</haxe_doc>
	</collation>
	<caseFirst final="1" set="null">
		<x path="js.lib.intl.CaseFirst"/>
		<haxe_doc>The values requested for these properties in the options argument or using the
		Unicode extension keys `"kn"` and `"kf"` or filled in as defaults.
		If the implementation does not support these properties, they are omitted.</haxe_doc>
	</caseFirst>
</a></typedef>
	<abstract path="js.lib.intl.Usage" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" module="js.lib.intl.Collator">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._Collator.Usage_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
	<Sort public="1" get="inline" set="null" expr="cast &quot;sort&quot;" line="135" static="1">
		<x path="js.lib.intl.Usage"/>
		<meta>
			<m n=":value"><e>cast "sort"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Sort>
	<Search public="1" get="inline" set="null" expr="cast &quot;search&quot;" line="136" static="1">
		<x path="js.lib.intl.Usage"/>
		<meta>
			<m n=":value"><e>cast "search"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Search>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._Collator.Usage_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
		<Sort public="1" get="inline" set="null" expr="cast &quot;sort&quot;" line="135" static="1">
			<x path="js.lib.intl.Usage"/>
			<meta>
				<m n=":value"><e>cast "sort"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Sort>
		<Search public="1" get="inline" set="null" expr="cast &quot;search&quot;" line="136" static="1">
			<x path="js.lib.intl.Usage"/>
			<meta>
				<m n=":value"><e>cast "search"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Search>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.Sensitivity" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" module="js.lib.intl.Collator">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._Collator.Sensitivity_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
	<Base public="1" get="inline" set="null" expr="cast &quot;base&quot;" line="144" static="1">
		<x path="js.lib.intl.Sensitivity"/>
		<meta>
			<m n=":value"><e>cast "base"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Only strings that differ in base letters compare as unequal.
		Examples: a ≠ b, a = á, a = A.</haxe_doc>
	</Base>
	<Accent public="1" get="inline" set="null" expr="cast &quot;accent&quot;" line="150" static="1">
		<x path="js.lib.intl.Sensitivity"/>
		<meta>
			<m n=":value"><e>cast "accent"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Only strings that differ in base letters or accents and other diacritic marks compare as unequal.
		Examples: a ≠ b, a ≠ á, a = A.</haxe_doc>
	</Accent>
	<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="156" static="1">
		<x path="js.lib.intl.Sensitivity"/>
		<meta>
			<m n=":value"><e>cast "case"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Only strings that differ in base letters or case compare as unequal.
		Examples: a ≠ b, a = á, a ≠ A.</haxe_doc>
	</Case>
	<Variant public="1" get="inline" set="null" expr="cast &quot;variant&quot;" line="163" static="1">
		<x path="js.lib.intl.Sensitivity"/>
		<meta>
			<m n=":value"><e>cast "variant"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.
		Other differences may also be taken into consideration.
		Examples: a ≠ b, a ≠ á, a ≠ A.</haxe_doc>
	</Variant>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._Collator.Sensitivity_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
		<Base public="1" get="inline" set="null" expr="cast &quot;base&quot;" line="144" static="1">
			<x path="js.lib.intl.Sensitivity"/>
			<meta>
				<m n=":value"><e>cast "base"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Only strings that differ in base letters compare as unequal.
		Examples: a ≠ b, a = á, a = A.</haxe_doc>
		</Base>
		<Accent public="1" get="inline" set="null" expr="cast &quot;accent&quot;" line="150" static="1">
			<x path="js.lib.intl.Sensitivity"/>
			<meta>
				<m n=":value"><e>cast "accent"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Only strings that differ in base letters or accents and other diacritic marks compare as unequal.
		Examples: a ≠ b, a ≠ á, a = A.</haxe_doc>
		</Accent>
		<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="156" static="1">
			<x path="js.lib.intl.Sensitivity"/>
			<meta>
				<m n=":value"><e>cast "case"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Only strings that differ in base letters or case compare as unequal.
		Examples: a ≠ b, a = á, a ≠ A.</haxe_doc>
		</Case>
		<Variant public="1" get="inline" set="null" expr="cast &quot;variant&quot;" line="163" static="1">
			<x path="js.lib.intl.Sensitivity"/>
			<meta>
				<m n=":value"><e>cast "variant"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.
		Other differences may also be taken into consideration.
		Examples: a ≠ b, a ≠ á, a ≠ A.</haxe_doc>
		</Variant>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.CaseFirst" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" module="js.lib.intl.Collator">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._Collator.CaseFirst_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
	<Upper public="1" get="inline" set="null" expr="cast &quot;upper&quot;" line="167" static="1">
		<x path="js.lib.intl.CaseFirst"/>
		<meta>
			<m n=":value"><e>cast "upper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Upper>
	<Lower public="1" get="inline" set="null" expr="cast &quot;lower&quot;" line="168" static="1">
		<x path="js.lib.intl.CaseFirst"/>
		<meta>
			<m n=":value"><e>cast "lower"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Lower>
	<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="169" static="1">
		<x path="js.lib.intl.CaseFirst"/>
		<meta>
			<m n=":value"><e>cast "false"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</False>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._Collator.CaseFirst_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
		<Upper public="1" get="inline" set="null" expr="cast &quot;upper&quot;" line="167" static="1">
			<x path="js.lib.intl.CaseFirst"/>
			<meta>
				<m n=":value"><e>cast "upper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Upper>
		<Lower public="1" get="inline" set="null" expr="cast &quot;lower&quot;" line="168" static="1">
			<x path="js.lib.intl.CaseFirst"/>
			<meta>
				<m n=":value"><e>cast "lower"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Lower>
		<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="169" static="1">
			<x path="js.lib.intl.CaseFirst"/>
			<meta>
				<m n=":value"><e>cast "false"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</False>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.Collation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" module="js.lib.intl.Collator">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._Collator.Collation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
	<Locale public="1" get="inline" set="null" expr="cast &quot;locale&quot;" line="173" static="1">
		<x path="js.lib.intl.Collation"/>
		<meta>
			<m n=":value"><e>cast "locale"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Locale>
	<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="174" static="1">
		<x path="js.lib.intl.Collation"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Default>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._Collator.Collation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" private="1" module="js.lib.intl.Collator" extern="1" final="1">
		<Locale public="1" get="inline" set="null" expr="cast &quot;locale&quot;" line="173" static="1">
			<x path="js.lib.intl.Collation"/>
			<meta>
				<m n=":value"><e>cast "locale"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Locale>
		<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="174" static="1">
			<x path="js.lib.intl.Collation"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Default>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.lib.intl.CollatorSupportedLocalesOfOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/Collator.hx" module="js.lib.intl.Collator"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<class path="js.lib.intl.DateTimeFormat" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.DateTimeFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.DateTimeFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="date">
				<c path="js.lib.Date"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a date according to the locale and formatting options
		of this `DateTimeFormat` object.</haxe_doc>
			<overloads><format public="1" set="method">
	<f a="date">
		<c path="js.lib.Date"/>
		<c path="String"/>
	</f>
	<haxe_doc>Getter function that formats a date according to the locale and formatting options
		of this `DateTimeFormat` object.</haxe_doc>
</format></overloads>
		</format>
		<formatToParts public="1" set="method">
			<f a="date">
				<c path="js.lib.Date"/>
				<c path="Array"><t path="js.lib.intl.DateTimeFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the date string in parts that can be used
		for custom locale-aware formatting.</haxe_doc>
			<overloads><formatToParts public="1" set="method">
	<f a="date">
		<c path="js.lib.Date"/>
		<c path="Array"><t path="js.lib.intl.DateTimeFormatPart"/></c>
	</f>
	<haxe_doc>Returns an `Array` of objects representing the date string in parts that can be used
		for custom locale-aware formatting.</haxe_doc>
</formatToParts></overloads>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.DateTimeFormatResolvedOptions"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and formatting options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.DateTimeFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.DateTimeFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `DateTimeFormat` object is a constructor for objects that enable language-sensitive
	date and time formatting.

	Documentation [DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.DateTimeFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.DateTimeFormatOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat"><a>
	<year>
		<x path="Null"><x path="js.lib.intl.YearRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the year.</haxe_doc>
	</year>
	<weekday>
		<x path="Null"><x path="js.lib.intl.WeekdayRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the weekday.</haxe_doc>
	</weekday>
	<timeZoneName>
		<x path="Null"><x path="js.lib.intl.TimeZoneName"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the time zone name.</haxe_doc>
	</timeZoneName>
	<timeZone>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The time zone to use. The only value implementations must recognize is `"UTC"`;
		the default is the runtime's default time zone. Implementations may also recognize
		the time zone names of the [IANA time zone database](https://www.iana.org/time-zones),
		such as `"Asia/Shanghai"`, `"Asia/Kolkata"`, `"America/New_York"`.</haxe_doc>
	</timeZone>
	<second>
		<x path="Null"><x path="js.lib.intl.SecondRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the second.</haxe_doc>
	</second>
	<month>
		<x path="Null"><x path="js.lib.intl.MonthRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the month.</haxe_doc>
	</month>
	<minute>
		<x path="Null"><x path="js.lib.intl.MinuteRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the minute.</haxe_doc>
	</minute>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
	</localeMatcher>
	<hourCycle>
		<x path="Null"><x path="js.lib.intl.HourCycle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The hour cycle to use. This option overrides the `hc` language tag, if both are present,
		and the `Hour12` option takes precedence in case both options have been specified.</haxe_doc>
	</hourCycle>
	<hour12>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use 12-hour time (as opposed to 24-hour time).
		The default is locale dependent.
		This option overrides the hc language tag and/or the `hourCycle` option in case both are present.</haxe_doc>
	</hour12>
	<hour>
		<x path="Null"><x path="js.lib.intl.HourRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the hour.</haxe_doc>
	</hour>
	<formatMatcher>
		<x path="Null"><x path="js.lib.intl.FormatMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The format matching algorithm to use.
		The default is `BestFit`.
		See the following paragraphs for information about the use of this property.</haxe_doc>
	</formatMatcher>
	<era>
		<x path="Null"><x path="js.lib.intl.EraRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the era.</haxe_doc>
	</era>
	<day>
		<x path="Null"><x path="js.lib.intl.DayRepresentation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The representation of the day.</haxe_doc>
	</day>
</a></typedef>
	<typedef path="js.lib.intl.DateTimeFormatResolvedOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat"><a>
	<year final="1" set="null"><x path="js.lib.intl.YearRepresentation"/></year>
	<weekday final="1" set="null"><x path="js.lib.intl.WeekdayRepresentation"/></weekday>
	<timeZoneName final="1" set="null">
		<x path="js.lib.intl.TimeZoneName"/>
		<haxe_doc>The values resulting from format matching between the corresponding properties in the `options` argument
		and the available combinations and representations for date-time formatting in the selected locale.
		Some of these properties may not be present, indicating that the corresponding components will not be
		represented in formatted output.</haxe_doc>
	</timeZoneName>
	<timeZone final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<haxe_doc>The value provided for this property in the options argument; `undefined` (representing the runtime's
		default time zone) if none was provided.
		Warning: Applications should not rely on `undefined` being returned, as future versions may return
		a String value identifying the runtime’s default time zone instead.</haxe_doc>
	</timeZone>
	<second final="1" set="null"><x path="js.lib.intl.SecondRepresentation"/></second>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values requested using the Unicode extension keys "ca" and "nu" or filled in as default values.</haxe_doc>
	</numberingSystem>
	<month final="1" set="null"><x path="js.lib.intl.MonthRepresentation"/></month>
	<minute final="1" set="null"><x path="js.lib.intl.MinuteRepresentation"/></minute>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used.
		If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale,
		the key-value pairs that were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<hour12 final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>The value provided for this property in the `options` argument or filled in as a default.</haxe_doc>
	</hour12>
	<hour final="1" set="null"><x path="js.lib.intl.HourRepresentation"/></hour>
	<era final="1" set="null"><x path="js.lib.intl.EraRepresentation"/></era>
	<day final="1" set="null"><x path="js.lib.intl.DayRepresentation"/></day>
	<calendar final="1" set="null">
		<c path="String"/>
		<haxe_doc>E.g. "gregory"</haxe_doc>
	</calendar>
</a></typedef>
	<abstract path="js.lib.intl.HourCycle" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.HourCycle_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<H11 public="1" get="inline" set="null" expr="cast &quot;h11&quot;" line="195" static="1">
		<x path="js.lib.intl.HourCycle"/>
		<meta>
			<m n=":value"><e>cast "h11"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</H11>
	<H12 public="1" get="inline" set="null" expr="cast &quot;h12&quot;" line="196" static="1">
		<x path="js.lib.intl.HourCycle"/>
		<meta>
			<m n=":value"><e>cast "h12"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</H12>
	<H23 public="1" get="inline" set="null" expr="cast &quot;h23&quot;" line="197" static="1">
		<x path="js.lib.intl.HourCycle"/>
		<meta>
			<m n=":value"><e>cast "h23"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</H23>
	<H24 public="1" get="inline" set="null" expr="cast &quot;h24&quot;" line="198" static="1">
		<x path="js.lib.intl.HourCycle"/>
		<meta>
			<m n=":value"><e>cast "h24"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</H24>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.HourCycle_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<H11 public="1" get="inline" set="null" expr="cast &quot;h11&quot;" line="195" static="1">
			<x path="js.lib.intl.HourCycle"/>
			<meta>
				<m n=":value"><e>cast "h11"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</H11>
		<H12 public="1" get="inline" set="null" expr="cast &quot;h12&quot;" line="196" static="1">
			<x path="js.lib.intl.HourCycle"/>
			<meta>
				<m n=":value"><e>cast "h12"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</H12>
		<H23 public="1" get="inline" set="null" expr="cast &quot;h23&quot;" line="197" static="1">
			<x path="js.lib.intl.HourCycle"/>
			<meta>
				<m n=":value"><e>cast "h23"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</H23>
		<H24 public="1" get="inline" set="null" expr="cast &quot;h24&quot;" line="198" static="1">
			<x path="js.lib.intl.HourCycle"/>
			<meta>
				<m n=":value"><e>cast "h24"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</H24>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.FormatMatcher" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.FormatMatcher_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Basic public="1" get="inline" set="null" expr="cast &quot;basic&quot;" line="202" static="1">
		<x path="js.lib.intl.FormatMatcher"/>
		<meta>
			<m n=":value"><e>cast "basic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Basic>
	<BestFit public="1" get="inline" set="null" expr="cast &quot;best fit&quot;" line="203" static="1">
		<x path="js.lib.intl.FormatMatcher"/>
		<meta>
			<m n=":value"><e>cast "best fit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BestFit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.FormatMatcher_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Basic public="1" get="inline" set="null" expr="cast &quot;basic&quot;" line="202" static="1">
			<x path="js.lib.intl.FormatMatcher"/>
			<meta>
				<m n=":value"><e>cast "basic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Basic>
		<BestFit public="1" get="inline" set="null" expr="cast &quot;best fit&quot;" line="203" static="1">
			<x path="js.lib.intl.FormatMatcher"/>
			<meta>
				<m n=":value"><e>cast "best fit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BestFit>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.WeekdayRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.WeekdayRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="210" static="1">
		<x path="js.lib.intl.WeekdayRepresentation"/>
		<meta>
			<m n=":value"><e>cast "long"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., Thursday)</haxe_doc>
	</Long>
	<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="215" static="1">
		<x path="js.lib.intl.WeekdayRepresentation"/>
		<meta>
			<m n=":value"><e>cast "short"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., Thu)</haxe_doc>
	</Short>
	<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="220" static="1">
		<x path="js.lib.intl.WeekdayRepresentation"/>
		<meta>
			<m n=":value"><e>cast "narrow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., T). Two weekdays may have the same narrow style for some locales (e.g. Tuesday's narrow style is also T).</haxe_doc>
	</Narrow>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.WeekdayRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="210" static="1">
			<x path="js.lib.intl.WeekdayRepresentation"/>
			<meta>
				<m n=":value"><e>cast "long"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., Thursday)</haxe_doc>
		</Long>
		<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="215" static="1">
			<x path="js.lib.intl.WeekdayRepresentation"/>
			<meta>
				<m n=":value"><e>cast "short"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., Thu)</haxe_doc>
		</Short>
		<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="220" static="1">
			<x path="js.lib.intl.WeekdayRepresentation"/>
			<meta>
				<m n=":value"><e>cast "narrow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., T). Two weekdays may have the same narrow style for some locales (e.g. Tuesday's narrow style is also T).</haxe_doc>
		</Narrow>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.EraRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.EraRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="227" static="1">
		<x path="js.lib.intl.EraRepresentation"/>
		<meta>
			<m n=":value"><e>cast "long"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., Anno Domini)</haxe_doc>
	</Long>
	<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="232" static="1">
		<x path="js.lib.intl.EraRepresentation"/>
		<meta>
			<m n=":value"><e>cast "short"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., AD)</haxe_doc>
	</Short>
	<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="237" static="1">
		<x path="js.lib.intl.EraRepresentation"/>
		<meta>
			<m n=":value"><e>cast "narrow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., A)</haxe_doc>
	</Narrow>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.EraRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="227" static="1">
			<x path="js.lib.intl.EraRepresentation"/>
			<meta>
				<m n=":value"><e>cast "long"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., Anno Domini)</haxe_doc>
		</Long>
		<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="232" static="1">
			<x path="js.lib.intl.EraRepresentation"/>
			<meta>
				<m n=":value"><e>cast "short"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., AD)</haxe_doc>
		</Short>
		<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="237" static="1">
			<x path="js.lib.intl.EraRepresentation"/>
			<meta>
				<m n=":value"><e>cast "narrow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., A)</haxe_doc>
		</Narrow>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.YearRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.YearRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="244" static="1">
		<x path="js.lib.intl.YearRepresentation"/>
		<meta>
			<m n=":value"><e>cast "numeric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., 2012)</haxe_doc>
	</Numeric>
	<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="249" static="1">
		<x path="js.lib.intl.YearRepresentation"/>
		<meta>
			<m n=":value"><e>cast "2-digit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., 12)</haxe_doc>
	</TwoDigit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.YearRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="244" static="1">
			<x path="js.lib.intl.YearRepresentation"/>
			<meta>
				<m n=":value"><e>cast "numeric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., 2012)</haxe_doc>
		</Numeric>
		<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="249" static="1">
			<x path="js.lib.intl.YearRepresentation"/>
			<meta>
				<m n=":value"><e>cast "2-digit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., 12)</haxe_doc>
		</TwoDigit>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.MonthRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.MonthRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="256" static="1">
		<x path="js.lib.intl.MonthRepresentation"/>
		<meta>
			<m n=":value"><e>cast "numeric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., 2)</haxe_doc>
	</Numeric>
	<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="261" static="1">
		<x path="js.lib.intl.MonthRepresentation"/>
		<meta>
			<m n=":value"><e>cast "2-digit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., 02)</haxe_doc>
	</TwoDigit>
	<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="266" static="1">
		<x path="js.lib.intl.MonthRepresentation"/>
		<meta>
			<m n=":value"><e>cast "long"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., March)</haxe_doc>
	</Long>
	<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="271" static="1">
		<x path="js.lib.intl.MonthRepresentation"/>
		<meta>
			<m n=":value"><e>cast "short"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., Mar)</haxe_doc>
	</Short>
	<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="276" static="1">
		<x path="js.lib.intl.MonthRepresentation"/>
		<meta>
			<m n=":value"><e>cast "narrow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., M). Two months may have the same narrow style for some locales (e.g. May's narrow style is also M).</haxe_doc>
	</Narrow>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.MonthRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="256" static="1">
			<x path="js.lib.intl.MonthRepresentation"/>
			<meta>
				<m n=":value"><e>cast "numeric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., 2)</haxe_doc>
		</Numeric>
		<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="261" static="1">
			<x path="js.lib.intl.MonthRepresentation"/>
			<meta>
				<m n=":value"><e>cast "2-digit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., 02)</haxe_doc>
		</TwoDigit>
		<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="266" static="1">
			<x path="js.lib.intl.MonthRepresentation"/>
			<meta>
				<m n=":value"><e>cast "long"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., March)</haxe_doc>
		</Long>
		<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="271" static="1">
			<x path="js.lib.intl.MonthRepresentation"/>
			<meta>
				<m n=":value"><e>cast "short"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., Mar)</haxe_doc>
		</Short>
		<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="276" static="1">
			<x path="js.lib.intl.MonthRepresentation"/>
			<meta>
				<m n=":value"><e>cast "narrow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., M). Two months may have the same narrow style for some locales (e.g. May's narrow style is also M).</haxe_doc>
		</Narrow>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.DayRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.DayRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="283" static="1">
		<x path="js.lib.intl.DayRepresentation"/>
		<meta>
			<m n=":value"><e>cast "numeric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., 1)</haxe_doc>
	</Numeric>
	<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="288" static="1">
		<x path="js.lib.intl.DayRepresentation"/>
		<meta>
			<m n=":value"><e>cast "2-digit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., 01)</haxe_doc>
	</TwoDigit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.DayRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="283" static="1">
			<x path="js.lib.intl.DayRepresentation"/>
			<meta>
				<m n=":value"><e>cast "numeric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., 1)</haxe_doc>
		</Numeric>
		<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="288" static="1">
			<x path="js.lib.intl.DayRepresentation"/>
			<meta>
				<m n=":value"><e>cast "2-digit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., 01)</haxe_doc>
		</TwoDigit>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.HourRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.HourRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="292" static="1">
		<x path="js.lib.intl.HourRepresentation"/>
		<meta>
			<m n=":value"><e>cast "numeric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numeric>
	<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="293" static="1">
		<x path="js.lib.intl.HourRepresentation"/>
		<meta>
			<m n=":value"><e>cast "2-digit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TwoDigit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.HourRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="292" static="1">
			<x path="js.lib.intl.HourRepresentation"/>
			<meta>
				<m n=":value"><e>cast "numeric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numeric>
		<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="293" static="1">
			<x path="js.lib.intl.HourRepresentation"/>
			<meta>
				<m n=":value"><e>cast "2-digit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TwoDigit>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.MinuteRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.MinuteRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="297" static="1">
		<x path="js.lib.intl.MinuteRepresentation"/>
		<meta>
			<m n=":value"><e>cast "numeric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numeric>
	<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="298" static="1">
		<x path="js.lib.intl.MinuteRepresentation"/>
		<meta>
			<m n=":value"><e>cast "2-digit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TwoDigit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.MinuteRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="297" static="1">
			<x path="js.lib.intl.MinuteRepresentation"/>
			<meta>
				<m n=":value"><e>cast "numeric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numeric>
		<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="298" static="1">
			<x path="js.lib.intl.MinuteRepresentation"/>
			<meta>
				<m n=":value"><e>cast "2-digit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TwoDigit>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.SecondRepresentation" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.SecondRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="302" static="1">
		<x path="js.lib.intl.SecondRepresentation"/>
		<meta>
			<m n=":value"><e>cast "numeric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numeric>
	<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="303" static="1">
		<x path="js.lib.intl.SecondRepresentation"/>
		<meta>
			<m n=":value"><e>cast "2-digit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TwoDigit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.SecondRepresentation_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Numeric public="1" get="inline" set="null" expr="cast &quot;numeric&quot;" line="302" static="1">
			<x path="js.lib.intl.SecondRepresentation"/>
			<meta>
				<m n=":value"><e>cast "numeric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numeric>
		<TwoDigit public="1" get="inline" set="null" expr="cast &quot;2-digit&quot;" line="303" static="1">
			<x path="js.lib.intl.SecondRepresentation"/>
			<meta>
				<m n=":value"><e>cast "2-digit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TwoDigit>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.TimeZoneName" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.TimeZoneName_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="310" static="1">
		<x path="js.lib.intl.TimeZoneName"/>
		<meta>
			<m n=":value"><e>cast "long"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., British Summer Time)</haxe_doc>
	</Long>
	<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="315" static="1">
		<x path="js.lib.intl.TimeZoneName"/>
		<meta>
			<m n=":value"><e>cast "short"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., GMT+1)</haxe_doc>
	</Short>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.TimeZoneName_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="310" static="1">
			<x path="js.lib.intl.TimeZoneName"/>
			<meta>
				<m n=":value"><e>cast "long"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., British Summer Time)</haxe_doc>
		</Long>
		<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="315" static="1">
			<x path="js.lib.intl.TimeZoneName"/>
			<meta>
				<m n=":value"><e>cast "short"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., GMT+1)</haxe_doc>
		</Short>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.lib.intl.DateTimeFormatPart" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat"><a>
	<value set="null"><c path="String"/></value>
	<type set="null"><x path="js.lib.intl.DateTimeFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.DateTimeFormatPartType" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._DateTimeFormat.DateTimeFormatPartType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
	<Day public="1" get="inline" set="null" expr="cast &quot;day&quot;" line="327" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "day"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the day, for example "17".</haxe_doc>
	</Day>
	<DayPeriod public="1" get="inline" set="null" expr="cast &quot;dayPeriod&quot;" line="332" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "dayPeriod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the day period, for example, "AM" or "PM".</haxe_doc>
	</DayPeriod>
	<Era public="1" get="inline" set="null" expr="cast &quot;era&quot;" line="337" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "era"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the era, for example "BC" or "AD".</haxe_doc>
	</Era>
	<Hour public="1" get="inline" set="null" expr="cast &quot;hour&quot;" line="342" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "hour"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the hour, for example "3" or "03".</haxe_doc>
	</Hour>
	<Literal public="1" get="inline" set="null" expr="cast &quot;literal&quot;" line="347" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "literal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for separating date and time values, for example "/", ",", "o'clock", "de", etc.</haxe_doc>
	</Literal>
	<Minute public="1" get="inline" set="null" expr="cast &quot;minute&quot;" line="352" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "minute"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the minute, for example "00".</haxe_doc>
	</Minute>
	<Month public="1" get="inline" set="null" expr="cast &quot;month&quot;" line="357" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "month"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the month, for example "12".</haxe_doc>
	</Month>
	<Second public="1" get="inline" set="null" expr="cast &quot;second&quot;" line="362" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "second"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the second, for example "07" or "42".</haxe_doc>
	</Second>
	<TimeZoneName public="1" get="inline" set="null" expr="cast &quot;timeZoneName&quot;" line="367" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "timeZoneName"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the name of the time zone, for example "UTC".</haxe_doc>
	</TimeZoneName>
	<Weekday public="1" get="inline" set="null" expr="cast &quot;weekday&quot;" line="372" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "weekday"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the weekday, for example "M", "Monday", or "Montag".</haxe_doc>
	</Weekday>
	<Year public="1" get="inline" set="null" expr="cast &quot;year&quot;" line="377" static="1">
		<x path="js.lib.intl.DateTimeFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "year"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The string used for the year, for example "2012" or "96".</haxe_doc>
	</Year>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._DateTimeFormat.DateTimeFormatPartType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" private="1" module="js.lib.intl.DateTimeFormat" extern="1" final="1">
		<Day public="1" get="inline" set="null" expr="cast &quot;day&quot;" line="327" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "day"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the day, for example "17".</haxe_doc>
		</Day>
		<DayPeriod public="1" get="inline" set="null" expr="cast &quot;dayPeriod&quot;" line="332" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "dayPeriod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the day period, for example, "AM" or "PM".</haxe_doc>
		</DayPeriod>
		<Era public="1" get="inline" set="null" expr="cast &quot;era&quot;" line="337" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "era"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the era, for example "BC" or "AD".</haxe_doc>
		</Era>
		<Hour public="1" get="inline" set="null" expr="cast &quot;hour&quot;" line="342" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "hour"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the hour, for example "3" or "03".</haxe_doc>
		</Hour>
		<Literal public="1" get="inline" set="null" expr="cast &quot;literal&quot;" line="347" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "literal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for separating date and time values, for example "/", ",", "o'clock", "de", etc.</haxe_doc>
		</Literal>
		<Minute public="1" get="inline" set="null" expr="cast &quot;minute&quot;" line="352" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "minute"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the minute, for example "00".</haxe_doc>
		</Minute>
		<Month public="1" get="inline" set="null" expr="cast &quot;month&quot;" line="357" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "month"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the month, for example "12".</haxe_doc>
		</Month>
		<Second public="1" get="inline" set="null" expr="cast &quot;second&quot;" line="362" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "second"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the second, for example "07" or "42".</haxe_doc>
		</Second>
		<TimeZoneName public="1" get="inline" set="null" expr="cast &quot;timeZoneName&quot;" line="367" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "timeZoneName"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the name of the time zone, for example "UTC".</haxe_doc>
		</TimeZoneName>
		<Weekday public="1" get="inline" set="null" expr="cast &quot;weekday&quot;" line="372" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "weekday"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the weekday, for example "M", "Monday", or "Montag".</haxe_doc>
		</Weekday>
		<Year public="1" get="inline" set="null" expr="cast &quot;year&quot;" line="377" static="1">
			<x path="js.lib.intl.DateTimeFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "year"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The string used for the year, for example "2012" or "96".</haxe_doc>
		</Year>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.lib.intl.DateTimeFormatSupportedLocalesOfOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/DateTimeFormat.hx" module="js.lib.intl.DateTimeFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/home/vsts/work/1/s/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" extern="1" final="1">
	<Lookup public="1" get="inline" set="null" expr="cast &quot;lookup&quot;" line="25" static="1">
		<x path="js.lib.intl.LocaleMatcher"/>
		<meta>
			<m n=":value"><e>cast "lookup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Lookup>
	<BestFit public="1" get="inline" set="null" expr="cast &quot;best fit&quot;" line="26" static="1">
		<x path="js.lib.intl.LocaleMatcher"/>
		<meta>
			<m n=":value"><e>cast "best fit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BestFit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" extern="1" final="1">
		<Lookup public="1" get="inline" set="null" expr="cast &quot;lookup&quot;" line="25" static="1">
			<x path="js.lib.intl.LocaleMatcher"/>
			<meta>
				<m n=":value"><e>cast "lookup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Lookup>
		<BestFit public="1" get="inline" set="null" expr="cast &quot;best fit&quot;" line="26" static="1">
			<x path="js.lib.intl.LocaleMatcher"/>
			<meta>
				<m n=":value"><e>cast "best fit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BestFit>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.lib.intl.NumberFormat" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" extern="1" final="1">
	<Decimal public="1" get="inline" set="null" expr="cast &quot;decimal&quot;" line="184" static="1">
		<x path="js.lib.intl.NumberFormatStyle"/>
		<meta>
			<m n=":value"><e>cast "decimal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>plain number formatting</haxe_doc>
	</Decimal>
	<Currency public="1" get="inline" set="null" expr="cast &quot;currency&quot;" line="189" static="1">
		<x path="js.lib.intl.NumberFormatStyle"/>
		<meta>
			<m n=":value"><e>cast "currency"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>currency formatting</haxe_doc>
	</Currency>
	<Percent public="1" get="inline" set="null" expr="cast &quot;percent&quot;" line="194" static="1">
		<x path="js.lib.intl.NumberFormatStyle"/>
		<meta>
			<m n=":value"><e>cast "percent"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>percent formatting</haxe_doc>
	</Percent>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" extern="1" final="1">
		<Decimal public="1" get="inline" set="null" expr="cast &quot;decimal&quot;" line="184" static="1">
			<x path="js.lib.intl.NumberFormatStyle"/>
			<meta>
				<m n=":value"><e>cast "decimal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>plain number formatting</haxe_doc>
		</Decimal>
		<Currency public="1" get="inline" set="null" expr="cast &quot;currency&quot;" line="189" static="1">
			<x path="js.lib.intl.NumberFormatStyle"/>
			<meta>
				<m n=":value"><e>cast "currency"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>currency formatting</haxe_doc>
		</Currency>
		<Percent public="1" get="inline" set="null" expr="cast &quot;percent&quot;" line="194" static="1">
			<x path="js.lib.intl.NumberFormatStyle"/>
			<meta>
				<m n=":value"><e>cast "percent"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>percent formatting</haxe_doc>
		</Percent>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" extern="1" final="1">
	<Symbol public="1" get="inline" set="null" expr="cast &quot;symbol&quot;" line="201" static="1">
		<x path="js.lib.intl.CurrencyDisplay"/>
		<meta>
			<m n=":value"><e>cast "symbol"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>To use a localized currency symbol such as €.</haxe_doc>
	</Symbol>
	<Code public="1" get="inline" set="null" expr="cast &quot;code&quot;" line="206" static="1">
		<x path="js.lib.intl.CurrencyDisplay"/>
		<meta>
			<m n=":value"><e>cast "code"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>To use the ISO currency code.</haxe_doc>
	</Code>
	<Name public="1" get="inline" set="null" expr="cast &quot;name&quot;" line="211" static="1">
		<x path="js.lib.intl.CurrencyDisplay"/>
		<meta>
			<m n=":value"><e>cast "name"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>To use a localized currency name such as "dollar".</haxe_doc>
	</Name>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" extern="1" final="1">
		<Symbol public="1" get="inline" set="null" expr="cast &quot;symbol&quot;" line="201" static="1">
			<x path="js.lib.intl.CurrencyDisplay"/>
			<meta>
				<m n=":value"><e>cast "symbol"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>To use a localized currency symbol such as €.</haxe_doc>
		</Symbol>
		<Code public="1" get="inline" set="null" expr="cast &quot;code&quot;" line="206" static="1">
			<x path="js.lib.intl.CurrencyDisplay"/>
			<meta>
				<m n=":value"><e>cast "code"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>To use the ISO currency code.</haxe_doc>
		</Code>
		<Name public="1" get="inline" set="null" expr="cast &quot;name&quot;" line="211" static="1">
			<x path="js.lib.intl.CurrencyDisplay"/>
			<meta>
				<m n=":value"><e>cast "name"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>To use a localized currency name such as "dollar".</haxe_doc>
		</Name>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" extern="1" final="1">
	<Currency public="1" get="inline" set="null" expr="cast &quot;currency&quot;" line="224" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "currency"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The currency string, such as the symbols "$" and "€" or the name "Dollar", "Euro" depending
		on how currencyDisplay is specified.</haxe_doc>
	</Currency>
	<Decimal public="1" get="inline" set="null" expr="cast &quot;decimal&quot;" line="229" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "decimal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The decimal separator string (".").</haxe_doc>
	</Decimal>
	<Fraction public="1" get="inline" set="null" expr="cast &quot;fraction&quot;" line="234" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "fraction"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The fraction number.</haxe_doc>
	</Fraction>
	<group public="1" get="inline" set="null" expr="cast &quot;group&quot;" line="239" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "group"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The group separator string (",").</haxe_doc>
	</group>
	<infinity public="1" get="inline" set="null" expr="cast &quot;infinity&quot;" line="244" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "infinity"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The Infinity string ("∞").</haxe_doc>
	</infinity>
	<integer public="1" get="inline" set="null" expr="cast &quot;integer&quot;" line="249" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "integer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The integer number.</haxe_doc>
	</integer>
	<literal public="1" get="inline" set="null" expr="cast &quot;literal&quot;" line="254" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "literal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Any literal strings or whitespace in the formatted number.</haxe_doc>
	</literal>
	<minusSign public="1" get="inline" set="null" expr="cast &quot;minusSign&quot;" line="259" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "minusSign"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The minus sign string ("-").</haxe_doc>
	</minusSign>
	<nan public="1" get="inline" set="null" expr="cast &quot;nan&quot;" line="264" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "nan"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The NaN string ("NaN").</haxe_doc>
	</nan>
	<plusSign public="1" get="inline" set="null" expr="cast &quot;plusSign&quot;" line="269" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "plusSign"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The plus sign string ("+").</haxe_doc>
	</plusSign>
	<percentSign public="1" get="inline" set="null" expr="cast &quot;percentSign&quot;" line="274" static="1">
		<x path="js.lib.intl.NumberFormatPartType"/>
		<meta>
			<m n=":value"><e>cast "percentSign"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The percent sign string ("%").</haxe_doc>
	</percentSign>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" extern="1" final="1">
		<Currency public="1" get="inline" set="null" expr="cast &quot;currency&quot;" line="224" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "currency"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The currency string, such as the symbols "$" and "€" or the name "Dollar", "Euro" depending
		on how currencyDisplay is specified.</haxe_doc>
		</Currency>
		<Decimal public="1" get="inline" set="null" expr="cast &quot;decimal&quot;" line="229" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "decimal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The decimal separator string (".").</haxe_doc>
		</Decimal>
		<Fraction public="1" get="inline" set="null" expr="cast &quot;fraction&quot;" line="234" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "fraction"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The fraction number.</haxe_doc>
		</Fraction>
		<group public="1" get="inline" set="null" expr="cast &quot;group&quot;" line="239" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "group"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The group separator string (",").</haxe_doc>
		</group>
		<infinity public="1" get="inline" set="null" expr="cast &quot;infinity&quot;" line="244" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "infinity"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The Infinity string ("∞").</haxe_doc>
		</infinity>
		<integer public="1" get="inline" set="null" expr="cast &quot;integer&quot;" line="249" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "integer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The integer number.</haxe_doc>
		</integer>
		<literal public="1" get="inline" set="null" expr="cast &quot;literal&quot;" line="254" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "literal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Any literal strings or whitespace in the formatted number.</haxe_doc>
		</literal>
		<minusSign public="1" get="inline" set="null" expr="cast &quot;minusSign&quot;" line="259" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "minusSign"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The minus sign string ("-").</haxe_doc>
		</minusSign>
		<nan public="1" get="inline" set="null" expr="cast &quot;nan&quot;" line="264" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "nan"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The NaN string ("NaN").</haxe_doc>
		</nan>
		<plusSign public="1" get="inline" set="null" expr="cast &quot;plusSign&quot;" line="269" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "plusSign"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The plus sign string ("+").</haxe_doc>
		</plusSign>
		<percentSign public="1" get="inline" set="null" expr="cast &quot;percentSign&quot;" line="274" static="1">
			<x path="js.lib.intl.NumberFormatPartType"/>
			<meta>
				<m n=":value"><e>cast "percentSign"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The percent sign string ("%").</haxe_doc>
		</percentSign>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<class path="js.lib.intl.PluralRules" params="" file="/home/vsts/work/1/s/std/js/lib/intl/PluralRules.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.PluralRulesSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.PluralRulesSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.PluralRulesResolvedOptions"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<select public="1" set="method">
			<f a="number">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String indicating which plurar rule to use for locale-aware formatting.</haxe_doc>
		</select>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.PluralRulesOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.PluralRulesOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `PluralRules` object is a constructor for objects that enable plural sensitive formatting
	and plural language rules.

	Documentation [PluralRules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.PluralRules"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.PluralRulesOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/PluralRules.hx" module="js.lib.intl.PluralRules"><a>
	<type>
		<x path="Null"><x path="js.lib.intl.PluralRulesType"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The type to use.
		The default is `Cardinal`.</haxe_doc>
	</type>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is "best fit".
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
</a></typedef>
	<typedef path="js.lib.intl.PluralRulesResolvedOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/PluralRules.hx" module="js.lib.intl.PluralRules"><a>
	<type final="1" set="null">
		<x path="js.lib.intl.PluralRulesType"/>
		<haxe_doc>The type used (cardinal or ordinal).</haxe_doc>
	</type>
	<pluralCategories final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An `Array` of plural rules used by the given language.</haxe_doc>
	</pluralCategories>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the options argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in
		the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are
		supported for this locale are included in `locale`.</haxe_doc>
	</locale>
</a></typedef>
	<abstract path="js.lib.intl.PluralRulesType" params="" file="/home/vsts/work/1/s/std/js/lib/intl/PluralRules.hx" module="js.lib.intl.PluralRules">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._PluralRules.PluralRulesType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/PluralRules.hx" private="1" module="js.lib.intl.PluralRules" extern="1" final="1">
	<Cardinal public="1" get="inline" set="null" expr="cast &quot;cardinal&quot;" line="110" static="1">
		<x path="js.lib.intl.PluralRulesType"/>
		<meta>
			<m n=":value"><e>cast "cardinal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>For cardinal numbers (refering to the quantity of things).</haxe_doc>
	</Cardinal>
	<Ordinal public="1" get="inline" set="null" expr="cast &quot;ordinal&quot;" line="115" static="1">
		<x path="js.lib.intl.PluralRulesType"/>
		<meta>
			<m n=":value"><e>cast "ordinal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>For ordinal number (refering to the ordering or ranking of things, e.g. "1st", "2nd", "3rd" in English).</haxe_doc>
	</Ordinal>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._PluralRules.PluralRulesType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/PluralRules.hx" private="1" module="js.lib.intl.PluralRules" extern="1" final="1">
		<Cardinal public="1" get="inline" set="null" expr="cast &quot;cardinal&quot;" line="110" static="1">
			<x path="js.lib.intl.PluralRulesType"/>
			<meta>
				<m n=":value"><e>cast "cardinal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>For cardinal numbers (refering to the quantity of things).</haxe_doc>
		</Cardinal>
		<Ordinal public="1" get="inline" set="null" expr="cast &quot;ordinal&quot;" line="115" static="1">
			<x path="js.lib.intl.PluralRulesType"/>
			<meta>
				<m n=":value"><e>cast "ordinal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>For ordinal number (refering to the ordering or ranking of things, e.g. "1st", "2nd", "3rd" in English).</haxe_doc>
		</Ordinal>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.lib.intl.PluralRulesSupportedLocalesOfOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/PluralRules.hx" module="js.lib.intl.PluralRules"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<class path="js.lib.intl.RelativeTimeFormat" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.RelativeTimeFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.RelativeTimeFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="value:unit">
				<x path="Float"/>
				<x path="js.lib.intl.RelativeTimeUnit"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a value and a unit according to the locale and formatting options
		of the given Intl.RelativeTimeFormat object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="value:unit">
				<x path="Float"/>
				<x path="js.lib.intl.RelativeTimeUnit"/>
				<c path="Array"><t path="js.lib.intl.RelativeTimeFormatPart"/></c>
			</f>
			<haxe_doc>Returns an Array of objects representing the relative time format in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.RelativeTimeFormatResolvedOptions"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and formatting options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.RelativeTimeFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.RelativeTimeFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `RelativeTimeFormat` object is a constructor for objects that enable language-sensitive
	relative time formatting.

	Documentation [RelativeTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.RelativeTimeFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.RelativeTimeFormatOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat"><a>
	<style>
		<x path="Null"><x path="js.lib.intl.RelativeTimeFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The length of the internationalized message.
		The default value is `Long`.
		The `Narrow` style could be similar to the short style for some locales.</haxe_doc>
	</style>
	<numeric>
		<x path="Null"><x path="js.lib.intl.RelativeTimeNumeric"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The format of output message.
		The default value is `Always`.
		The `Auto` value allows to not always have to use numeric values in the output.</haxe_doc>
	</numeric>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
</a></typedef>
	<typedef path="js.lib.intl.RelativeTimeFormatResolvedOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat"><a>
	<style final="1" set="null">
		<x path="js.lib.intl.RelativeTimeFormatStyle"/>
		<haxe_doc>The length of the internationalized message.</haxe_doc>
	</style>
	<numeric final="1" set="null">
		<x path="js.lib.intl.RelativeTimeNumeric"/>
		<haxe_doc>The format of output message.</haxe_doc>
	</numeric>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in
		the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are
		supported for this locale are included in `locale`.</haxe_doc>
	</locale>
</a></typedef>
	<abstract path="js.lib.intl.RelativeTimeNumeric" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._RelativeTimeFormat.RelativeTimeNumeric_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" private="1" module="js.lib.intl.RelativeTimeFormat" extern="1" final="1">
	<Always public="1" get="inline" set="null" expr="cast &quot;always&quot;" line="113" static="1">
		<x path="js.lib.intl.RelativeTimeNumeric"/>
		<meta>
			<m n=":value"><e>cast "always"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., 1 day ago),</haxe_doc>
	</Always>
	<Auto public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="118" static="1">
		<x path="js.lib.intl.RelativeTimeNumeric"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., yesterday).</haxe_doc>
	</Auto>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._RelativeTimeFormat.RelativeTimeNumeric_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" private="1" module="js.lib.intl.RelativeTimeFormat" extern="1" final="1">
		<Always public="1" get="inline" set="null" expr="cast &quot;always&quot;" line="113" static="1">
			<x path="js.lib.intl.RelativeTimeNumeric"/>
			<meta>
				<m n=":value"><e>cast "always"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., 1 day ago),</haxe_doc>
		</Always>
		<Auto public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="118" static="1">
			<x path="js.lib.intl.RelativeTimeNumeric"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., yesterday).</haxe_doc>
		</Auto>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.RelativeTimeFormatStyle" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._RelativeTimeFormat.RelativeTimeFormatStyle_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" private="1" module="js.lib.intl.RelativeTimeFormat" extern="1" final="1">
	<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="125" static="1">
		<x path="js.lib.intl.RelativeTimeFormatStyle"/>
		<meta>
			<m n=":value"><e>cast "long"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., in 1 month)</haxe_doc>
	</Long>
	<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="130" static="1">
		<x path="js.lib.intl.RelativeTimeFormatStyle"/>
		<meta>
			<m n=":value"><e>cast "short"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., in 1 mo.)</haxe_doc>
	</Short>
	<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="135" static="1">
		<x path="js.lib.intl.RelativeTimeFormatStyle"/>
		<meta>
			<m n=":value"><e>cast "narrow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>(e.g., in 1 mo.)</haxe_doc>
	</Narrow>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._RelativeTimeFormat.RelativeTimeFormatStyle_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" private="1" module="js.lib.intl.RelativeTimeFormat" extern="1" final="1">
		<Long public="1" get="inline" set="null" expr="cast &quot;long&quot;" line="125" static="1">
			<x path="js.lib.intl.RelativeTimeFormatStyle"/>
			<meta>
				<m n=":value"><e>cast "long"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., in 1 month)</haxe_doc>
		</Long>
		<Short public="1" get="inline" set="null" expr="cast &quot;short&quot;" line="130" static="1">
			<x path="js.lib.intl.RelativeTimeFormatStyle"/>
			<meta>
				<m n=":value"><e>cast "short"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., in 1 mo.)</haxe_doc>
		</Short>
		<Narrow public="1" get="inline" set="null" expr="cast &quot;narrow&quot;" line="135" static="1">
			<x path="js.lib.intl.RelativeTimeFormatStyle"/>
			<meta>
				<m n=":value"><e>cast "narrow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>(e.g., in 1 mo.)</haxe_doc>
		</Narrow>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="js.lib.intl.RelativeTimeUnit" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._RelativeTimeFormat.RelativeTimeUnit_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" private="1" module="js.lib.intl.RelativeTimeFormat" extern="1" final="1">
	<Year public="1" get="inline" set="null" expr="cast &quot;year&quot;" line="139" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "year"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Year>
	<Quarter public="1" get="inline" set="null" expr="cast &quot;quarter&quot;" line="140" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "quarter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Quarter>
	<Month public="1" get="inline" set="null" expr="cast &quot;month&quot;" line="141" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "month"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Month>
	<Week public="1" get="inline" set="null" expr="cast &quot;week&quot;" line="142" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "week"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Week>
	<Day public="1" get="inline" set="null" expr="cast &quot;day&quot;" line="143" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "day"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Day>
	<Hour public="1" get="inline" set="null" expr="cast &quot;hour&quot;" line="144" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "hour"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hour>
	<Minute public="1" get="inline" set="null" expr="cast &quot;minute&quot;" line="145" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "minute"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Minute>
	<Second public="1" get="inline" set="null" expr="cast &quot;second&quot;" line="146" static="1">
		<x path="js.lib.intl.RelativeTimeUnit"/>
		<meta>
			<m n=":value"><e>cast "second"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Second>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.intl._RelativeTimeFormat.RelativeTimeUnit_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" private="1" module="js.lib.intl.RelativeTimeFormat" extern="1" final="1">
		<Year public="1" get="inline" set="null" expr="cast &quot;year&quot;" line="139" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "year"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Year>
		<Quarter public="1" get="inline" set="null" expr="cast &quot;quarter&quot;" line="140" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "quarter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Quarter>
		<Month public="1" get="inline" set="null" expr="cast &quot;month&quot;" line="141" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "month"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Month>
		<Week public="1" get="inline" set="null" expr="cast &quot;week&quot;" line="142" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "week"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Week>
		<Day public="1" get="inline" set="null" expr="cast &quot;day&quot;" line="143" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "day"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Day>
		<Hour public="1" get="inline" set="null" expr="cast &quot;hour&quot;" line="144" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "hour"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hour>
		<Minute public="1" get="inline" set="null" expr="cast &quot;minute&quot;" line="145" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "minute"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Minute>
		<Second public="1" get="inline" set="null" expr="cast &quot;second&quot;" line="146" static="1">
			<x path="js.lib.intl.RelativeTimeUnit"/>
			<meta>
				<m n=":value"><e>cast "second"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Second>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="js.lib.intl.RelativeTimeFormatPart" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<unit final="1" set="null">
		<x path="Null"><x path="js.lib.intl.RelativeTimeUnit"/></x>
		<meta><m n=":optional"/></meta>
	</unit>
	<type final="1" set="null"><t path="js.lib.intl.RelativeTimeFormatPartType"/></type>
</a></typedef>
	<typedef path="js.lib.intl.RelativeTimeFormatPartType" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat"><x path="js.lib.intl.NumberFormatPartType"/></typedef>
	<typedef path="js.lib.intl.RelativeTimeFormatSupportedLocalesOfOptions" params="" file="/home/vsts/work/1/s/std/js/lib/intl/RelativeTimeFormat.hx" module="js.lib.intl.RelativeTimeFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<class path="js.lib.webassembly.CompileError" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/CompileError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A WebAssembly `CompileError` object indicates an error during WebAssembly
	decoding or validation.

	Documentation [CompileError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.CompileError"</e></m></meta>
	</class>
	<class path="js.lib.webassembly.Global" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Global.hx" extern="1">
		<value public="1">
			<x path="Any"/>
			<haxe_doc>The value contained inside the global variable — this can be used to directly set
		and get the global's value.</haxe_doc>
		</value>
		<valueOf public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Old-style method that returns the value contained inside the global variable.</haxe_doc>
		</valueOf>
		<new public="1" set="method"><f a="descriptor:value">
	<t path="js.lib.webassembly.GlobalDescriptor"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A WebAssembly `Global` object represents a global variable instance, accessible from
	both JavaScript and importable/exportable across one or more WebAssembly `Module` instances.
	This allows dynamic linking of multiple modules.

	Documentation [Global](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.Global"</e></m></meta>
	</class>
	<typedef path="js.lib.webassembly.GlobalDescriptor" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Global.hx" module="js.lib.webassembly.Global"><a>
	<value><x path="js.lib.webassembly.ValueType"/></value>
	<mutable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>By default, this is false.</haxe_doc>
	</mutable>
</a></typedef>
	<abstract path="js.lib.webassembly.ValueType" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Global.hx" module="js.lib.webassembly.Global">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.webassembly._Global.ValueType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Global.hx" private="1" module="js.lib.webassembly.Global" extern="1" final="1">
	<I32 public="1" get="inline" set="null" expr="cast &quot;i32&quot;" line="58" static="1">
		<x path="js.lib.webassembly.ValueType"/>
		<meta>
			<m n=":value"><e>cast "i32"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</I32>
	<I64 public="1" get="inline" set="null" expr="cast &quot;i64&quot;" line="59" static="1">
		<x path="js.lib.webassembly.ValueType"/>
		<meta>
			<m n=":value"><e>cast "i64"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</I64>
	<F32 public="1" get="inline" set="null" expr="cast &quot;f32&quot;" line="60" static="1">
		<x path="js.lib.webassembly.ValueType"/>
		<meta>
			<m n=":value"><e>cast "f32"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F32>
	<F64 public="1" get="inline" set="null" expr="cast &quot;f64&quot;" line="61" static="1">
		<x path="js.lib.webassembly.ValueType"/>
		<meta>
			<m n=":value"><e>cast "f64"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F64>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.webassembly._Global.ValueType_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Global.hx" private="1" module="js.lib.webassembly.Global" extern="1" final="1">
		<I32 public="1" get="inline" set="null" expr="cast &quot;i32&quot;" line="58" static="1">
			<x path="js.lib.webassembly.ValueType"/>
			<meta>
				<m n=":value"><e>cast "i32"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</I32>
		<I64 public="1" get="inline" set="null" expr="cast &quot;i64&quot;" line="59" static="1">
			<x path="js.lib.webassembly.ValueType"/>
			<meta>
				<m n=":value"><e>cast "i64"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</I64>
		<F32 public="1" get="inline" set="null" expr="cast &quot;f32&quot;" line="60" static="1">
			<x path="js.lib.webassembly.ValueType"/>
			<meta>
				<m n=":value"><e>cast "f32"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F32>
		<F64 public="1" get="inline" set="null" expr="cast &quot;f64&quot;" line="61" static="1">
			<x path="js.lib.webassembly.ValueType"/>
			<meta>
				<m n=":value"><e>cast "f64"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F64>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.lib.webassembly.Instance" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Instance.hx" extern="1">
		<exports public="1" set="null">
			<d><x path="haxe.Function"/></d>
			<haxe_doc>Returns an object containing as its members all the functions exported from
		the WebAssembly module instance, to allow them to be accessed and used by JavaScript.</haxe_doc>
		</exports>
		<new public="1" set="method"><f a="module:?importObject">
	<c path="js.lib.webassembly.Module"/>
	<a/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A WebAssembly `Instance` object is a stateful, executable instance of a WebAssembly `Module`.
	Instance objects contain all the [Exported WebAssembly functions](https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions)
	that allow calling into WebAssembly code from JavaScript.

	Documentation [Instance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.Instance"</e></m></meta>
	</class>
	<class path="js.lib.webassembly.LinkError" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/LinkError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A WebAssembly `LinkError` object indicates an error during module instantiation
	(besides [traps](http://webassembly.org/docs/semantics/#traps) from the start function).

	Documentation [LinkError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.LinkError"</e></m></meta>
	</class>
	<class path="js.lib.webassembly.Memory" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Memory.hx" extern="1">
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>An accessor property that returns the buffer contained in the memory.</haxe_doc>
		</buffer>
		<grow public="1" set="method">
			<f a="number">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Increases the size of the memory instance by a specified number of WebAssembly pages
		(each one is 64KB in size).</haxe_doc>
		</grow>
		<new public="1" set="method"><f a="memoryDescriptor">
	<t path="js.lib.webassembly.MemoryDescriptor"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A new WebAssembly `Memory` object which is a resizable ArrayBuffer that holds the raw bytes of memory
	accessed by a WebAssembly WebAssembly `Instance`.

	A memory created by JavaScript or in WebAssembly code will be accessible and mutable from
	both JavaScript and WebAssembly.

	Documentation [Memory](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.Memory"</e></m></meta>
	</class>
	<typedef path="js.lib.webassembly.MemoryDescriptor" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Memory.hx" module="js.lib.webassembly.Memory"><a>
	<maximum>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum size the WebAssembly Memory is allowed to grow to, in units of WebAssembly pages.
		When present, the `maximum` parameter acts as a hint to the engine to reserve memory up front.
		However, the engine may ignore or clamp this reservation request.
		In general, most WebAssembly modules shouldn't need to set a `maximum`.</haxe_doc>
	</maximum>
	<initial>
		<x path="Int"/>
		<haxe_doc>The initial size of the WebAssembly Memory, in units of WebAssembly pages.</haxe_doc>
	</initial>
</a></typedef>
	<class path="js.lib.webassembly.Module" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Module.hx" extern="1">
		<customSections public="1" set="method" static="1">
			<f a="module:sectionName">
				<c path="js.lib.webassembly.Module"/>
				<c path="String"/>
				<c path="Array"><c path="js.lib.ArrayBuffer"/></c>
			</f>
			<haxe_doc>Given a `Module` and string, returns a copy of the contents of all custom sections
		in the module with the given string name.</haxe_doc>
		</customSections>
		<exports public="1" set="method" static="1">
			<f a="module">
				<c path="js.lib.webassembly.Module"/>
				<c path="Array"><t path="js.lib.webassembly.ModuleExportDescriptor"/></c>
			</f>
			<haxe_doc>Given a `Module`, returns an array containing descriptions of all the declared exports.</haxe_doc>
		</exports>
		<imports public="1" set="method" static="1">
			<f a="module">
				<c path="js.lib.webassembly.Module"/>
				<c path="Array"><t path="js.lib.webassembly.ModuleImportDescriptor"/></c>
			</f>
			<haxe_doc>Given a `Module`, returns an array containing descriptions of all the declared imports.</haxe_doc>
		</imports>
		<new public="1" set="method"><f a="bufferSource">
	<x path="js.lib.BufferSource"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A WebAssembly `Module` object contains stateless WebAssembly code that has already
	been compiled by the browser and can be efficiently [shared with Workers](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage),
	and instantiated multiple times. To instantiate the module, call
	[the secondary overload of `WebAssembly.instantiate()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate#Secondary_overload_%E2%80%94_taking_a_module_object_instance).

	Documentation [Module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.Module"</e></m></meta>
	</class>
	<typedef path="js.lib.webassembly.ModuleExportDescriptor" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Module.hx" module="js.lib.webassembly.Module"><a>
	<name><c path="String"/></name>
	<kind><x path="js.lib.webassembly.ImportExportKind"/></kind>
</a></typedef>
	<typedef path="js.lib.webassembly.ModuleImportDescriptor" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Module.hx" module="js.lib.webassembly.Module"><a>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<kind><x path="js.lib.webassembly.ImportExportKind"/></kind>
</a></typedef>
	<abstract path="js.lib.webassembly.ImportExportKind" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Module.hx" module="js.lib.webassembly.Module">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.webassembly._Module.ImportExportKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Module.hx" private="1" module="js.lib.webassembly.Module" extern="1" final="1">
	<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="68" static="1">
		<x path="js.lib.webassembly.ImportExportKind"/>
		<meta>
			<m n=":value"><e>cast "function"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Function>
	<Table public="1" get="inline" set="null" expr="cast &quot;table&quot;" line="69" static="1">
		<x path="js.lib.webassembly.ImportExportKind"/>
		<meta>
			<m n=":value"><e>cast "table"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Table>
	<Memory public="1" get="inline" set="null" expr="cast &quot;memory&quot;" line="70" static="1">
		<x path="js.lib.webassembly.ImportExportKind"/>
		<meta>
			<m n=":value"><e>cast "memory"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Memory>
	<Global public="1" get="inline" set="null" expr="cast &quot;global&quot;" line="71" static="1">
		<x path="js.lib.webassembly.ImportExportKind"/>
		<meta>
			<m n=":value"><e>cast "global"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Global>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.webassembly._Module.ImportExportKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Module.hx" private="1" module="js.lib.webassembly.Module" extern="1" final="1">
		<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="68" static="1">
			<x path="js.lib.webassembly.ImportExportKind"/>
			<meta>
				<m n=":value"><e>cast "function"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Function>
		<Table public="1" get="inline" set="null" expr="cast &quot;table&quot;" line="69" static="1">
			<x path="js.lib.webassembly.ImportExportKind"/>
			<meta>
				<m n=":value"><e>cast "table"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Table>
		<Memory public="1" get="inline" set="null" expr="cast &quot;memory&quot;" line="70" static="1">
			<x path="js.lib.webassembly.ImportExportKind"/>
			<meta>
				<m n=":value"><e>cast "memory"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Memory>
		<Global public="1" get="inline" set="null" expr="cast &quot;global&quot;" line="71" static="1">
			<x path="js.lib.webassembly.ImportExportKind"/>
			<meta>
				<m n=":value"><e>cast "global"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Global>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="js.lib.webassembly.RuntimeError" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/RuntimeError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A WebAssembly `RuntimeError` object is thrown whenever WebAssembly specifies a
	[trap](http://webassembly.org/docs/semantics/#traps).

	Documentation [RuntimeError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.RuntimeError"</e></m></meta>
	</class>
	<class path="js.lib.webassembly.Table" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Table.hx" extern="1">
		<length public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length of the table, i.e. the number of elements.</haxe_doc>
		</length>
		<get public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="haxe.Function"/>
			</f>
			<haxe_doc>Accessor function — gets the element stored at a given index.</haxe_doc>
		</get>
		<grow public="1" set="method">
			<f a="number">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Increases the size of the Table instance by a specified number of elements.</haxe_doc>
		</grow>
		<set public="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<x path="haxe.Function"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets an element stored at a given index to a given value.</haxe_doc>
		</set>
		<new public="1" set="method"><f a="tableDescriptor">
	<t path="js.lib.webassembly.TableDescriptor"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A Table object of the given size and element type.

	This is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table,
	which stores function references. A table created by JavaScript or in WebAssembly code will be
	accessible and mutable from both JavaScript and WebAssembly.

	Documentation [Table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"WebAssembly.Table"</e></m></meta>
	</class>
	<typedef path="js.lib.webassembly.TableDescriptor" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Table.hx" module="js.lib.webassembly.Table"><a>
	<maximum>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of elements the WebAssembly Table is allowed to grow to.</haxe_doc>
	</maximum>
	<initial>
		<x path="Int"/>
		<haxe_doc>The initial number of elements of the WebAssembly Table.</haxe_doc>
	</initial>
	<element>
		<x path="js.lib.webassembly.TableKind"/>
		<haxe_doc>A string representing the type of value to be stored in the table.
		At the moment this can only have a value of `Anyfunc` (functions).</haxe_doc>
	</element>
</a></typedef>
	<abstract path="js.lib.webassembly.TableKind" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Table.hx" module="js.lib.webassembly.Table">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.webassembly._Table.TableKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Table.hx" private="1" module="js.lib.webassembly.Table" extern="1" final="1">
	<Anyfunc public="1" get="inline" set="null" expr="cast &quot;anyfunc&quot;" line="80" static="1">
		<x path="js.lib.webassembly.TableKind"/>
		<meta>
			<m n=":value"><e>cast "anyfunc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Anyfunc>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.webassembly._Table.TableKind_Impl_" params="" file="/home/vsts/work/1/s/std/js/lib/webassembly/Table.hx" private="1" module="js.lib.webassembly.Table" extern="1" final="1">
		<Anyfunc public="1" get="inline" set="null" expr="cast &quot;anyfunc&quot;" line="80" static="1">
			<x path="js.lib.webassembly.TableKind"/>
			<meta>
				<m n=":value"><e>cast "anyfunc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Anyfunc>
		<meta><m n=":enum"/></meta>
	</class>
</haxe>