<haxe>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/python/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" get="inline" set="null" line="36">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<copy public="1" get="inline" set="null" line="41">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="45">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<insert public="1" get="inline" set="null" line="49">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<join public="1" get="inline" set="null" line="54">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<toString public="1" get="inline" set="null" line="58">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<pop public="1" get="inline" set="null" line="62">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" get="inline" set="null" line="66">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<unshift public="1" get="inline" set="null" line="70">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<indexOf public="1" get="inline" set="null" line="74">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="78">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<remove public="1" get="inline" set="null" line="82">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<reverse public="1" get="inline" set="null" line="87">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" get="inline" set="null" line="91">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" get="inline" set="null" line="95">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" get="inline" set="null" line="99">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" get="inline" set="null" line="103">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<map public="1" params="S" get="inline" set="null" line="107">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="111">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<_get get="inline" set="null" line="115">
			<f a="idx">
				<x path="Int"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</_get>
		<_set get="inline" set="null" line="120">
			<f a="idx:val">
				<x path="Int"/>
				<c path="Array.T"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</_set>
		<unsafeGet get="inline" set="null" line="125">
			<f a="idx">
				<x path="Int"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</unsafeGet>
		<unsafeSet get="inline" set="null" line="130">
			<f a="idx:val">
				<x path="Int"/>
				<c path="Array.T"/>
				<c path="Array.T"/>
			</f>
			<meta><m n=":keep"/></meta>
		</unsafeSet>
		<__iter__ set="method">
			<f a=""><x path="python.NativeIterator"><c path="Array.T"/></x></f>
			<meta><m n=":noCompletion"/></meta>
		</__iter__>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
		<meta>
			<m n=":native"><e>"list"</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="python.lib.datetime.Datetime" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Datetime.hx" extern="1">
		<min public="1" static="1"><c path="python.lib.datetime.Datetime"/></min>
		<max public="1" static="1"><c path="python.lib.datetime.Datetime"/></max>
		<resolution public="1" static="1"><c path="python.lib.datetime.Timedelta"/></resolution>
		<today public="1" set="method" static="1"><f a=""><c path="python.lib.datetime.Datetime"/></f></today>
		<now public="1" set="method" static="1"><f a="?tzinfo">
	<c path="python.lib.datetime.Tzinfo"/>
	<c path="python.lib.datetime.Datetime"/>
</f></now>
		<utcnow public="1" set="method" static="1"><f a=""><c path="python.lib.datetime.Datetime"/></f></utcnow>
		<fromtimestamp public="1" set="method" static="1">
			<f a="timestamp:?tzInfo" v=":null">
				<x path="Float"/>
				<c path="python.lib.datetime.Tzinfo"/>
				<c path="python.lib.datetime.Datetime"/>
			</f>
			<meta><m n=":value"><e>{tzInfo:null}</e></m></meta>
		</fromtimestamp>
		<utcfromtimestamp public="1" set="method" static="1"><f a="timestamp">
	<x path="Int"/>
	<c path="python.lib.datetime.Datetime"/>
</f></utcfromtimestamp>
		<fromordinal public="1" set="method" static="1"><f a="ordinal">
	<x path="Int"/>
	<c path="python.lib.datetime.Datetime"/>
</f></fromordinal>
		<year public="1"><x path="Int"/></year>
		<month public="1"><x path="Int"/></month>
		<day public="1"><x path="Int"/></day>
		<hour public="1"><x path="Int"/></hour>
		<minute public="1"><x path="Int"/></minute>
		<second public="1"><x path="Int"/></second>
		<microsecond public="1"><x path="Int"/></microsecond>
		<tzinfo public="1"><c path="python.lib.datetime.Tzinfo"/></tzinfo>
		<strftime public="1" set="method"><f a="format">
	<c path="String"/>
	<c path="String"/>
</f></strftime>
		<replace public="1" set="method">
			<f a="?year:?month:?day:?hour:?minute:?second:?microsecond:?tzinfo" v="1970:1:1:0:0:::">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="python.lib.datetime.Tzinfo"/>
				<c path="python.lib.datetime.Datetime"/>
			</f>
			<meta><m n=":value"><e>{minute:0,hour:0,day:1,month:1,year:1970}</e></m></meta>
		</replace>
		<weekday public="1" set="method"><f a=""><x path="Int"/></f></weekday>
		<isoweekday public="1" set="method"><f a=""><x path="Int"/></f></isoweekday>
		<timestamp public="1" set="method"><f a=""><x path="Float"/></f></timestamp>
		<new public="1" set="method">
			<f a="year:month:day:?hour:?minute:?second:?microsecond:?tzinfo" v=":::0:0:0:0:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="python.lib.datetime.Tzinfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{tzinfo:null,microsecond:0,second:0,minute:0,hour:0}</e></m></meta>
		</new>
		<meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"datetime"</e>
</m></meta>
	</class>
	<class path="python.lib.datetime.Tzinfo" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Tzinfo.hx" extern="1"><meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"tzinfo"</e>
</m></meta></class>
	<class path="python.lib.datetime.Timezone" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Timezone.hx" extern="1">
		<extends path="python.lib.datetime.Tzinfo"/>
		<utc public="1" set="null" static="1"><c path="python.lib.datetime.Tzinfo"/></utc>
		<meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"timezone"</e>
</m></meta>
	</class>
	<class path="Date" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Date.hx">
		<EPOCH_UTC expr="Datetime.fromtimestamp(0, python.lib.datetime.Timezone.utc)" line="28" static="1">
			<c path="python.lib.datetime.Datetime"/>
			<meta><m n=":value"><e>Datetime.fromtimestamp(0, python.lib.datetime.Timezone.utc)</e></m></meta>
		</EPOCH_UTC>
		<EPOCH_LOCAL expr="Datetime.fromtimestamp(0)" line="29" static="1">
			<c path="python.lib.datetime.Datetime"/>
			<meta><m n=":value"><e>Datetime.fromtimestamp(0)</e></m></meta>
		</EPOCH_LOCAL>
		<now public="1" set="method" line="99" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="106" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<UTC set="method" line="114" static="1"><f a="year:month:day:hour:min:sec">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></UTC>
		<datetimeTimestamp set="method" line="121" static="1"><f a="dt:epoch">
	<c path="python.lib.datetime.Datetime"/>
	<c path="python.lib.datetime.Datetime"/>
	<x path="Float"/>
</f></datetimeTimestamp>
		<fromString public="1" set="method" line="125" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<epoch><c path="python.lib.datetime.Datetime"/></epoch>
		<date><c path="python.lib.datetime.Datetime"/></date>
		<getTime public="1" get="inline" set="null" line="42">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" get="inline" set="null" line="47">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" get="inline" set="null" line="57">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" get="inline" set="null" line="67">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" get="inline" set="null" line="72">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" get="inline" set="null" line="77">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="82">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="DateTools" params="" file="C:\HaxeToolkit\haxe\std/DateTools.hx">
		<__format_get set="method" line="36" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="91" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="116" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="132" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31,28,31,30,31,30,31,31,30,31,30,31]" line="136" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31,28,31,30,31,30,31,31,30,31,30,31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="143" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="157" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="164" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="171" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="178" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="185" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="201" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<makeUtc public="1" set="method" line="209" static="1">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</haxe_doc>
		</makeUtc>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="C:\HaxeToolkit\haxe\std/python/_std/EReg.hx">
		<pattern>
			<c path="python.lib.Regex"/>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</pattern>
		<matchObj><c path="python.lib.MatchObject"/></matchObj>
		<global><x path="Bool"/></global>
		<match public="1" get="inline" set="null" line="63">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" get="inline" set="null" line="79">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" get="inline" set="null" line="94">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" get="inline" set="null" line="109">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" get="inline" set="null" line="124">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="139">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{len:-1}</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.matchSub(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="168">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String "" between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="205">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="226">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>For each occurence of the pattern in the string `s`, the function `f` is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the `g` flag might cause some incorrect behavior on some platforms.</haxe_doc>
		</map>
		<new public="1" set="method" line="42">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/manual/std-regex.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="C:\HaxeToolkit\haxe\std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="52">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
	</class>
	<class path="Lambda" params="" file="C:\HaxeToolkit\haxe\std/Lambda.hx">
		<array public="1" params="A" set="method" line="42" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="54" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="68" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="82" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="115" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="134" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="146" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="159" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.

		If `it` is empty, the result is the empty List even if `f` is null.

		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="179" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="191" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="206" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="237" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="250" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="List" params="T" file="C:\HaxeToolkit\haxe\std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="161">
			<f a=""><c path="_List.ListIterator"><c path="List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="171">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="192">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="211">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="227">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
	</class>
	<class path="_List.ListIterator" params="T" file="C:\HaxeToolkit\haxe\std/List.hx" private="1" module="List">
		<head><c path="Array"><d/></c></head>
		<val><d/></val>
		<hasNext public="1" get="inline" set="null" line="249"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="253"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="244"><f a="head">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="71" static="1">
		<f a="this:key:value">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="95" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="103" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="110" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="119" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="128" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="132" static="1">
		<f a="this:k:v">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="137" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</t>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="141" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</t>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="145" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</t>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="149" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</t>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="153" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="157" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="161" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="71" static="1">
			<f a="this:key:value">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="95" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="103" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="110" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="119" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="128" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="132" static="1">
			<f a="this:k:v">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="137" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</t>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="141" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</t>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="145" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</t>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="149" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</t>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="153" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="157" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="161" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<typedef path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="python.internal.UBuiltins" params="" file="C:\HaxeToolkit\haxe\std/python/internal/UBuiltins.hx" extern="1">
		<len public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Int"/>
</f></len>
		<isinstance public="1" set="method" static="1"><f a="o:c">
	<d/>
	<d/>
	<x path="Bool"/>
</f></isinstance>
		<str public="1" set="method" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></str>
		<bool public="1" set="method" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></bool>
		<float public="1" set="method" static="1"><f a="o">
	<d/>
	<x path="Float"/>
</f></float>
		<int public="1" set="method" static="1"><f a="o:?base">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></int>
		<list public="1" params="T" set="method" static="1"><f a="o">
	<d/>
	<c path="Array"><c path="list.T"/></c>
</f></list>
		<min public="1" params="T" set="method" static="1"><f a="a:b">
	<c path="min.T"/>
	<c path="min.T"/>
	<c path="min.T"/>
</f></min>
		<max public="1" params="T" set="method" static="1"><f a="a:b">
	<c path="max.T"/>
	<c path="max.T"/>
	<c path="max.T"/>
</f></max>
		<hasattr public="1" set="method" static="1"><f a="o:a">
	<d/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasattr>
		<getattr public="1" set="method" static="1"><f a="o:a">
	<d/>
	<c path="String"/>
	<d/>
</f></getattr>
		<setattr public="1" set="method" static="1"><f a="o:a:v">
	<d/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setattr>
		<delattr public="1" set="method" static="1"><f a="o:attr">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></delattr>
		<callable public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Bool"/>
</f></callable>
		<type public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></type>
		<ord public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></ord>
		<chr public="1" set="method" static="1"><f a="c">
	<x path="Int"/>
	<c path="String"/>
</f></chr>
		<map public="1" params="T:S" set="method" static="1"><f a="f:a">
	<f a="">
		<c path="map.T"/>
		<c path="map.S"/>
	</f>
	<c path="Array"><c path="map.T"/></c>
	<c path="Array"><c path="map.S"/></c>
</f></map>
		<filter public="1" params="T" set="method" static="1"><f a="f:a">
	<f a="">
		<c path="filter.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="filter.T"/></c>
	<c path="Array"><c path="filter.T"/></c>
</f></filter>
		<iter public="1" params="T" set="method" static="1"><f a="o">
	<x path="python.NativeIterable"><c path="iter.T"/></x>
	<x path="python.NativeIterator"><c path="iter.T"/></x>
</f></iter>
		<haxe_doc>This class provides unqualified access to python builtins that are safe to use in haxe/python code.
    Fields listed here must be synchronized with genpy's KeywordHandler.kwds2 list to be properly escaped.</haxe_doc>
	</class>
	<class path="python.lib.Math" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Math.hx" extern="1">
		<isnan public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Bool"/>
</f></isnan>
		<pi public="1" static="1"><x path="Float"/></pi>
		<sqrt public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<log public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<cos public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<sin public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<tan public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<meta><m n=":pythonImport"><e>"math"</e></m></meta>
	</class>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" get="inline" set="null" line="36" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" get="inline" set="null" line="41" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" get="inline" set="null" line="45" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" get="inline" set="null" line="50" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" get="inline" set="null" line="54" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" get="inline" set="null" line="74" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" get="inline" set="null" line="85" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" get="inline" set="null" line="91" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" get="inline" set="null" line="96" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" get="inline" set="null" line="104" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="108" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="114" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="121" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" get="inline" set="null" line="127" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" get="inline" set="null" line="129" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta>
			<m n=":pythonImport"><e>"math"</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Reflect.hx">
		<hasField public="1" get="inline" set="null" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="43" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read"</e>
	<e>"anon_optional_read"</e>
</m></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="48" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_write"</e>
	<e>"anon_optional_write"</e>
</m></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="52" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="65" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="74" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" get="inline" set="null" line="79" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="84" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="89" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="96" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="105" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="112" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="116" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="122" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="130" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":access"><e>python.Boot</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Std.hx">
		<instance public="1" params="T:S" get="inline" set="null" line="34" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<isMetaType get="inline" set="null" line="43" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>python.Boot</e></m></meta>
		</isMetaType>
		<is public="1" set="method" line="48" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":access"><e>python.Boot</e></m>
			</meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="131" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":access"><e>python.Boot</e></m></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="136" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="145" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<shortenPossibleNumber set="method" line="174" static="1"><f a="x">
	<c path="String"/>
	<c path="String"/>
</f></shortenPossibleNumber>
		<parseFloat public="1" set="method" line="197" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" get="inline" set="null" line="213" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check `hasNext` first. A call to this
		method while `hasNext` is false yields unspecified behavior.

		On the other hand iterators should not require a call to `hasNext`
		before the first call to `next` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/python/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="191" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code [code].

		If [code] is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in [this] String.</haxe_doc>
		</length>
		<toUpperCase public="1" get="inline" set="null" line="54">
			<f a=""><c path="String"/></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns a String where all characters of [this] String are upper case.

		Affects the characters [a-z]. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="63">
			<f a=""><c path="String"/></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns a String where all characters of [this] String are lower case.

		Affects the characters [A-Z]. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="73">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position [index] of [this] String.

		If [index] is negative or exceeds [this].length, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="87">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position [index] of [this] String.

		If [index] is negative or exceeds [this].length, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="103">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of [str] within [this]
		String.

		If [startIndex] is given, the search is performed within the substring
		of [this] String starting from [startIndex]. Otherwise the search is
		performed within [this] String. In either case, the returned position
		is relative to the beginning of [this] String.

		If [str] cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="118">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of [str] within [this]
		String.

		If [startIndex] is given, the search is performed within the substring
		of [this] String from 0 to [startIndex]. Otherwise the search is
		performed within [this] String. In either case, the returned position
		is relative to the beginning of [this] String.

		If [str] cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="139">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits [this] String at each occurence of [delimiter].

		If [delimiter] is the empty String "", [this] String is split into an
		Array of [this].length elements, where the elements correspond to the
		characters of [this] String.

		If [delimiter] is not found within [this] String, the result is an Array
		with one element, which equals [this] String.

		If [delimiter] is null, the result is unspecified.

		Otherwise, [this] String is split into parts at each occurence of
		[delimiter]. If [this] String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="158">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns [len] characters of [this] String, starting at position [pos].

		If [len] is omitted, all characters from position [pos] to the end of
		[this] String are included.

		If [pos] is negative, its value is calculated from the end of [this]
		String by [this].length + [pos]. If this yields a negative value, 0 is
		used instead.

		If the calculated position + [len] exceeds [this].length, the characters
		from that position to the end of [this] String are returned.

		If [len] is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="176">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of [this] String from [startIndex] to [endIndex].

		If [startIndex] or [endIndex] are negative, 0 is used instead.

		If [startIndex] exceeds [endIndex], they are swapped.

		If the (possibly swapped) [endIndex] is omitted or exceeds
		[this].length, [this].length is used instead.

		If the (possibly swapped) [startIndex] exceeds [this].length, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" get="inline" set="null" line="183">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"str"</e></m>
		</meta>
	</class>
	<class path="StringBuf" params="" file="C:\HaxeToolkit\haxe\std/python/_std/StringBuf.hx">
		<b>
			<c path="python.lib.io.StringIO"/>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length public="1" set="method" line="56"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="73">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of [x] to [this] StringBuf.

		The exact representation of [x] may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If [x] is null, the String "null" is appended.</haxe_doc>
		</add>
		<add1 get="inline" set="null" line="77"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></add1>
		<addChar public="1" get="inline" set="null" line="87">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by [c] to [this] StringBuf.

		If [c] is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="103">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of [s] to [this] StringBuf.

		This function expects [pos] and [len] to describe a valid substring of
		[s], or else the result is unspecified. To get more robust behavior,
		[this].add(s.substr(pos,len)) can be used instead.

		If [s] or [pos] are null, the result is unspecified.

		If [len] is omitted or null, the substring ranges from [pos] to the end
		of [s].</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="112">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of [this] StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="50">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="36" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="61" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="97" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="116" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: htmlUnescape(htmlEscape(s)) == s

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="153" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is null, the result is unspecified.

		If `end` is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="183" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="200" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="225" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="247" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="269" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="291" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="312" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="334" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="376" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than String.charCodeAt() on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the \0
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="399" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeToolkit\haxe\std/python/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><c path="python.Dict">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</c></h>
		<set public="1" get="inline" set="null" line="35"><f a="key:value">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="39"><f a="key">
	<c path="String"/>
	<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
</f></get>
		<exists public="1" get="inline" set="null" line="43"><f a="key">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="47"><f a="key">
	<c path="String"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method" line="53"><f a=""><t path="Iterator"><c path="String"/></t></f></keys>
		<iterator public="1" set="method" line="57"><f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f></iterator>
		<toString public="1" set="method" line="61"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="python.Dict" params="K:V" file="C:\HaxeToolkit\haxe\std/python/Dict.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="34"><f a=""><x path="Int"/></f></get_length>
		<get public="1" set="method"><f a="key:?def">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<c path="python.Dict.V"/>
</f></get>
		<getSafe public="1" get="inline" set="null" line="40"><f a="key">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</f></getSafe>
		<set public="1" get="inline" set="null" line="44"><f a="key:val">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<x path="Void"/>
</f></set>
		<remove public="1" get="inline" set="null" line="48"><f a="key">
	<c path="python.Dict.K"/>
	<x path="Void"/>
</f></remove>
		<hasKey public="1" get="inline" set="null" line="52"><f a="k">
	<c path="python.Dict.K"/>
	<x path="Bool"/>
</f></hasKey>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copy public="1" set="method"><f a=""><c path="python.Dict">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</c></f></copy>
		<items public="1" set="method"><f a=""><c path="python.DictView"><c path="python.Tuple2">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</c></c></f></items>
		<keys public="1" set="method"><f a=""><c path="python.DictView"><c path="python.Dict.K"/></c></f></keys>
		<pop public="1" set="method"><f a="key:?def">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<c path="python.Dict.V"/>
</f></pop>
		<popitem public="1" set="method"><f a=""><c path="python.Tuple2">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
</c></f></popitem>
		<setdefault public="1" set="method"><f a="key:?def">
	<c path="python.Dict.K"/>
	<c path="python.Dict.V"/>
	<c path="python.Dict.V"/>
</f></setdefault>
		<update public="1" set="method"><f a="d">
	<c path="python.Dict">
		<c path="python.Dict.K"/>
		<c path="python.Dict.V"/>
	</c>
	<x path="Void"/>
</f></update>
		<values public="1" set="method"><f a=""><c path="python.DictView"><c path="python.Dict.V"/></c></f></values>
		<iter public="1" get="inline" set="null" line="66"><f a=""><x path="python.NativeIterator"><c path="python.Dict.K"/></x></f></iter>
		<iterator public="1" get="inline" set="null" line="70"><f a=""><t path="Iterator"><c path="python.Dict.V"/></t></f></iterator>
		<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.Dict.K"/></x></f></__iter__>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"dict"</e></m></meta>
	</class>
	<class path="python.lib.Os" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Os.hx" extern="1">
		<environ public="1" static="1"><c path="python.Dict">
	<c path="String"/>
	<c path="String"/>
</c></environ>
		<putenv public="1" set="method" static="1"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></putenv>
		<chdir public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></chdir>
		<unlink public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></unlink>
		<remove public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></remove>
		<getcwd public="1" set="method" static="1"><f a=""><c path="String"/></f></getcwd>
		<getcwdb public="1" set="method" static="1"><f a=""><c path="python.Bytes"/></f></getcwdb>
		<removedirs public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></removedirs>
		<rename public="1" set="method" static="1"><f a="src:dest">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></rename>
		<renames public="1" set="method" static="1"><f a="oldName:newName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></renames>
		<rmdir public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></rmdir>
		<stat public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="python.lib.Stat"/>
</f></stat>
		<fchdir public="1" set="method" static="1"><f a="fd">
	<c path="python.lib.FileDescriptor"/>
	<x path="Void"/>
</f></fchdir>
		<listdir public="1" set="method" static="1">
			<f a="?path" v="&quot;.&quot;">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{path:"."}</e></m></meta>
		</listdir>
		<walk public="1" set="method" static="1">
			<f a="top:?topdown:?onerror:?followlinks" v=":true:null:false">
				<c path="String"/>
				<x path="Bool"/>
				<f a="">
					<c path="python.OSError"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="python.Tuple3">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
					<c path="Array"><c path="String"/></c>
				</c>
			</f>
			<meta><m n=":value"><e>{followlinks:false,onerror:null,topdown:true}</e></m></meta>
		</walk>
		<sep public="1" set="null" static="1"><c path="String"/></sep>
		<pathsep public="1" set="null" static="1"><c path="String"/></pathsep>
		<makedirs public="1" set="method" static="1">
			<f a="path:?mode:?exist_ok" v=":511:false">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{exist_ok:false,mode:511}</e></m></meta>
		</makedirs>
		<mkdir public="1" set="method" static="1">
			<f a="path:?mode" v=":511">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{mode:511}</e></m></meta>
		</mkdir>
		<meta><m n=":pythonImport"><e>"os"</e></m></meta>
	</class>
	<class path="python.HaxeIterator" params="T" file="C:\HaxeToolkit\haxe\std/python/HaxeIterator.hx">
		<it><t path="python.NativeIteratorRaw"><c path="python.HaxeIterator.T"/></t></it>
		<x expr="null">
			<t path="Null"><c path="python.HaxeIterator.T"/></t>
			<meta><m n=":value"><e>null</e></m></meta>
		</x>
		<has expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</has>
		<checked expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</checked>
		<next public="1" get="inline" set="null" line="37"><f a=""><c path="python.HaxeIterator.T"/></f></next>
		<hasNext public="1" set="method" line="43"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" set="method" line="33"><f a="it">
	<t path="python.NativeIteratorRaw"><c path="python.HaxeIterator.T"/></t>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.Syntax" params="" file="C:\HaxeToolkit\haxe\std/python/Syntax.hx" extern="1">
		<importModule public="1" set="method" static="1">
			<f a="module">
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</importModule>
		<importAs public="1" set="method" static="1">
			<f a="module:className">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</importAs>
		<newInstance public="1" set="method" static="1">
			<f a="c:params">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</newInstance>
		<_newInstance public="1" set="method" static="1"><f a="c:args">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></_newInstance>
		<isIn public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isIn>
		<delete public="1" set="method" static="1">
			<f a="a">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</delete>
		<binop public="1" set="method" static="1">
			<f a="a:op:b">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</binop>
		<assign public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</assign>
		<pythonCode public="1" set="method" static="1">
			<f a="b:rest">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</pythonCode>
		<_pythonCode public="1" params="T" set="method" static="1">
			<f a="b:args">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="_pythonCode.T"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</_pythonCode>
		<arrayAccess public="1" set="method" static="1">
			<f a="x:rest">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</arrayAccess>
		<arrayAccessWithTrailingColon public="1" set="method" static="1">
			<f a="x:rest">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</arrayAccessWithTrailingColon>
		<_arrayAccess public="1" set="method" static="1">
			<f a="a:args:?trailingColon" v="::false">
				<d/>
				<c path="Array"><d/></c>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{trailingColon:false}</e></m></meta>
		</_arrayAccess>
		<arraySet public="1" set="method" static="1">
			<f a="a:i:v">
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</arraySet>
		<_foreach public="1" set="method" static="1"><f a="id:it:block">
	<d/>
	<d/>
	<d/>
	<d/>
</f></_foreach>
		<foreach public="1" params="T" set="method" static="1">
			<f a="v:it:b">
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</foreach>
		<importFromAs public="1" set="method" static="1">
			<f a="from:module:className">
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</importFromAs>
		<callField public="1" set="method" static="1">
			<f a="o:field:params">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</callField>
		<call public="1" set="method" static="1"><f a="e:args">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</field>
		<tuple public="1" set="method" static="1">
			<f a="args">
				<d/>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</tuple>
		<_tuple public="1" set="method" static="1"><f a="args">
	<c path="Array"><d/></c>
	<d/>
</f></_tuple>
		<varArgs public="1" set="method" static="1">
			<f a="args">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</varArgs>
		<callNamedUntyped public="1" set="method" static="1"><f a="e:args">
	<d/>
	<d/>
	<d/>
</f></callNamedUntyped>
		<_callNamedUntyped public="1" set="method" static="1"><f a="e:args">
	<d/>
	<d/>
	<d/>
</f></_callNamedUntyped>
		<opPow public="1" set="method" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></opPow>
		<meta>
			<m n=":noPackageRestrict"/>
			<m n=":analyzer"><e>no_simplification</e></m>
		</meta>
	</class>
	<class path="Sys" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Sys.hx">
		<environ expr="&apos;???&apos;" line="30" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</environ>
		<time public="1" set="method" line="41" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds).</haxe_doc>
		</time>
		<exit public="1" set="method" line="45" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exit the current process with the given error code.</haxe_doc>
		</exit>
		<print public="1" set="method" line="49" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" line="53" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline</haxe_doc>
		</println>
		<args public="1" set="method" line="57" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed by the commandline.</haxe_doc>
		</args>
		<getEnv public="1" set="method" line="62" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="66" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the value of the given environment variable.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" line="71" static="1">
			<f a=""><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></f>
			<haxe_doc>Returns the whole environement variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" line="75" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="79" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Change the current time locale, which will affect [DateTools.format] date formating.
		Returns true if the locale was successfully changed</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" line="83" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Get the current working directory (usually the one in which the program was started)</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the current working directory.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="91" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the name of the system you are running on. For instance :
			"Windows", "Linux", "BSD" and "Mac" depending on your desktop OS.</haxe_doc>
		</systemName>
		<command public="1" set="method" line="102" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Run the given command with the list of arguments. The command output will be printed on the same output as the current process.
		The current process will block until the command terminates and it will return the command result (0 if there was no error).
		Read the [sys.io.Process] api for a more complete way to start background processes.</haxe_doc>
		</command>
		<cpuTime public="1" set="method" line="107" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds) but only account for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" line="111" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<getChar public="1" set="method" line="115" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read a single input character from the standard input (without blocking) and returns it. Setting [echo] to true will also display it on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" line="145" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the process standard input, from which you can read what user enters. Usually it will block until the user send a full input line. See [getChar] for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" line="149" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard output on which you can write.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" line="153" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard error on which you can write.</haxe_doc>
		</stderr>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="ValueType" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/python/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="44" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="63" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="69" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="74" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="92" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="96" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="109" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="115" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="143" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="161" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="175" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" get="inline" set="null" line="182" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" get="inline" set="null" line="186" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="190" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="201" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<asEnumImpl get="inline" set="null" line="229" static="1"><f a="x">
	<d/>
	<c path="python.internal.EnumImpl"/>
</f></asEnumImpl>
		<enumEq public="1" params="T" set="method" line="233" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="256" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="260" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="264" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="268" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":access"><e>python.Boot</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned Int type is only defined for Flash and C#.
	Simulate it for other platforms.</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx" private="1" module="UInt">
	<add get="inline" set="null" line="100" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
	</add>
	<div get="inline" set="null" line="104" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="108" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A*B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="112" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="124" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="132" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="140" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="144" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A|B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A^B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="156" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A+B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A*B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A==B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A!=B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A==B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A!=B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="217" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="249" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="253" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="257" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="265" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="270" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="274" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat get="inline" set="null" line="278" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx" private="1" module="UInt">
		<add get="inline" set="null" line="100" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</add>
		<div get="inline" set="null" line="104" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="108" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A*B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="112" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="124" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="144" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A|B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A^B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="156" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A+B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A*B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A==B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A!=B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A==B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A!=B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="217" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="249" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="253" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="257" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="265" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="270" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="274" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat get="inline" set="null" line="278" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
	</class>
	<abstract path="XmlType" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx" private="1" module="Xml" extern="1">
	<Element public="1" get="inline" set="null" expr="&apos;???&apos;" line="24" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Element>
	<PCData public="1" get="inline" set="null" expr="&apos;???&apos;" line="25" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PCData>
	<CData public="1" get="inline" set="null" expr="&apos;???&apos;" line="26" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CData>
	<Comment public="1" get="inline" set="null" expr="&apos;???&apos;" line="27" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="&apos;???&apos;" line="28" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="&apos;???&apos;" line="29" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="&apos;???&apos;" line="30" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Document>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx" private="1" module="Xml" extern="1">
		<Element public="1" get="inline" set="null" expr="&apos;???&apos;" line="24" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Element>
		<PCData public="1" get="inline" set="null" expr="&apos;???&apos;" line="25" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PCData>
		<CData public="1" get="inline" set="null" expr="&apos;???&apos;" line="26" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CData>
		<Comment public="1" get="inline" set="null" expr="&apos;???&apos;" line="27" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="&apos;???&apos;" line="28" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="&apos;???&apos;" line="29" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="&apos;???&apos;" line="30" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Document>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="Xml" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="35" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="36" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="37" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="38" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="39" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="40" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="41" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
		</Document>
		<parse public="1" set="method" line="43" static="1"><f a="str">
	<c path="String"/>
	<c path="Xml"/>
</f></parse>
		<createElement public="1" set="method" line="104" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="113" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="122" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="131" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="140" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="149" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="158" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></attributeMap>
		<get_nodeName get="inline" set="null" line="73"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="80"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="87"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="94"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="166">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="177">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="188">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="199">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="209">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="220">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="229">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="239">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="248">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="256">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="272">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="285">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="300">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="312">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="322"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="316"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.StackItem" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="77" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="140" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="206" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="215" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="242" static="1"><f a="s">
	<unknown/>
	<unknown/>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<abstract path="haxe.DynamicAccess" params="T" file="C:\HaxeToolkit\haxe\std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="47" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="65" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="79" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="47" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="65" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="79" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{i:0}</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<has public="1" get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="63" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="75" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</unset>
	<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{i:0}</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is null, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning true if
		matching succeeded and false otherwise.

		Example usage:

		```
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
	</class>
	<typedef path="haxe._Http.AbstractSocket" params="" file="C:\HaxeToolkit\haxe\std/haxe/Http.hx" private="1" module="haxe.Http"><a>
	<write set="method"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></write>
	<shutdown set="method"><f a="read:write">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></shutdown>
	<setTimeout set="method"><f a="t">
	<x path="Float"/>
	<x path="Void"/>
</f></setTimeout>
	<output set="null"><c path="haxe.io.Output"/></output>
	<input set="null"><c path="haxe.io.Input"/></input>
	<connect set="method"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
	<close set="method"><f a=""><x path="Void"/></f></close>
</a></typedef>
	<class path="haxe.Http" params="" file="C:\HaxeToolkit\haxe\std/haxe/Http.hx">
		<PROXY public="1" expr="null" line="74" static="1">
			<a>
				<port><x path="Int"/></port>
				<host><c path="String"/></host>
				<auth><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></auth>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</PROXY>
		<requestUrl public="1" set="method" line="772" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

		This creates a new Http instance and makes a GET request by calling its
		request(false) method.

		If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the request() method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" set="null"><t path="Null"><c path="String"/></t></responseData>
		<noShutdown public="1"><x path="Bool"/></noShutdown>
		<cnxTimeout public="1"><x path="Float"/></cnxTimeout>
		<responseHeaders public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></responseHeaders>
		<chunk_size><t path="Null"><x path="Int"/></t></chunk_size>
		<chunk_buf><c path="haxe.io.Bytes"/></chunk_buf>
		<file><a>
	<size><x path="Int"/></size>
	<param><c path="String"/></param>
	<mimeType><c path="String"/></mimeType>
	<io><c path="haxe.io.Input"/></io>
	<filename><c path="String"/></filename>
</a></file>
		<postData><c path="String"/></postData>
		<headers><c path="List"><a>
	<value><c path="String"/></value>
	<header><c path="String"/></header>
</a></c></headers>
		<params><c path="List"><a>
	<value><c path="String"/></value>
	<param><c path="String"/></param>
</a></c></params>
		<setHeader public="1" set="method" line="110">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="116"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addHeader>
		<setParameter public="1" set="method" line="128">
			<f a="param:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the parameter identified as `param` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="134"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addParameter>
		<setPostData public="1" set="method" line="149">
			<f a="data">
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data`.

		There can only be one post data per request. Subsequent calls overwrite
		the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<request public="1" set="method" line="195">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		onStatus(), onError() or onData() callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the onError() callback
		function is called.

		(Js) If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<fileTransfert public="1" get="inline" set="null" line="363">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{mimeType:"application/octet-stream"}</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Note: Deprecated in 4.0</haxe_doc>
		</fileTransfert>
		<fileTransfer public="1" set="method" line="367">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{mimeType:"application/octet-stream"}</e></m></meta>
		</fileTransfer>
		<customRequest public="1" set="method" line="371"><f a="post:api:?sock:?method">
	<x path="Bool"/>
	<c path="haxe.io.Output"/>
	<t path="haxe._Http.AbstractSocket"/>
	<c path="String"/>
	<x path="Void"/>
</f></customRequest>
		<readHttpResponse set="method" line="534"><f a="api:sock">
	<c path="haxe.io.Output"/>
	<t path="haxe._Http.AbstractSocket"/>
	<x path="Void"/>
</f></readHttpResponse>
		<readChunk set="method" line="674"><f a="chunk_re:api:buf:len">
	<c path="EReg"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></readChunk>
		<onData public="1" set="dynamic" line="740">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onError public="1" set="dynamic" line="750">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="760">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<new public="1" set="method" line="88">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until request() is called.

		If `url` is null, the field url must be set to a value before making the
		call to request(), or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call haxe.Http.requestUrl(url) and receive the result as a String (not
	available on flash)
	- create a new haxe.Http(url), register your callbacks for onData, onError
	and onStatus, then call request().</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A+B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</intSub>
	<mul set="method" line="72" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A*B</e></m></meta>
	</mul>
	<mulInt get="inline" set="null" line="75" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A*B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<shl get="inline" set="null" line="154" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
	</shl>
	<shlInt get="inline" set="null" line="157" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
	</shlInt>
	<intShl get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
	</intShl>
	<toFloat get="inline" set="null" line="171" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="177" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="187" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
	</clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A+B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</intSub>
		<mul set="method" line="72" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A*B</e></m></meta>
		</mul>
		<mulInt get="inline" set="null" line="75" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A*B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<shl get="inline" set="null" line="154" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
		</shl>
		<shlInt get="inline" set="null" line="157" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
		</shlInt>
		<intShl get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
		</intShl>
		<toFloat get="inline" set="null" line="171" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="177" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="187" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</clamp>
	</class>
	<abstract path="haxe.Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<_new get="inline" set="null" line="35" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<copy public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="47" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="54" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="61" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="71" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<getHigh public="1" get="inline" set="null" line="78" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="85" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="91" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="97" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="105" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="124" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="127" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<divMod public="1" set="method" line="152" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="199" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>'???'</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="207" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="213" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="219" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="225" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="234" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A+B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="247" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="257" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="263" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A*B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="283" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A*B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="289" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="292" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="295" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="301" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="304" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="307" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="313" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A==B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="316" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A==B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="322" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A!=B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="325" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A!=B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="328" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="331" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="334" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="337" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="340" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="343" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="346" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="349" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="352" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="355" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="358" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="361" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="367" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>'???'</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="373" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="379" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A|B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="385" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A^B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="391" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="402" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="413" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high get="inline" set="null" line="421" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<set_high get="inline" set="null" line="422" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low get="inline" set="null" line="425" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<set_low get="inline" set="null" line="426" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_low>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<_new get="inline" set="null" line="35" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<copy public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="47" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="61" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="71" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<getHigh public="1" get="inline" set="null" line="78" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="85" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="91" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="97" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="105" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="124" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="127" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<divMod public="1" set="method" line="152" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="199" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>'???'</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="207" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="213" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="219" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="225" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="234" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A+B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="247" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="257" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="263" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A*B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="283" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A*B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="289" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="292" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="295" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="301" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="304" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="307" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="313" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A==B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="316" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A==B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="322" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A!=B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="325" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A!=B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="328" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="331" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="334" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="337" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="340" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="343" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="346" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="349" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="352" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="355" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="358" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="361" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="367" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>'???'</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="373" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="379" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A|B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="385" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A^B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="391" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="402" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="413" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high get="inline" set="null" line="421" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<set_high get="inline" set="null" line="422" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low get="inline" set="null" line="425" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<set_low get="inline" set="null" line="426" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_low>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="450">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling Std.string. This tends not to happen when
		toString is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="440"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Json" params="" file="C:\HaxeToolkit\haxe\std/python/_std/haxe/Json.hx">
		<parse public="1" get="inline" set="null" line="28" static="1"><f a="text">
	<c path="String"/>
	<d/>
</f></parse>
		<stringify public="1" get="inline" set="null" line="32" static="1"><f a="value:?replacer:?space">
	<d/>
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<c path="String"/>
</f></stringify>
	</class>
	<class path="haxe.Log" params="" file="C:\HaxeToolkit\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="C:\HaxeToolkit\haxe\std/python/_std/haxe/Resource.hx">
		<content static="1"><c path="python.Dict">
	<c path="String"/>
	<t path="haxe.io.BytesData"/>
</c></content>
		<getContent set="method" line="31" static="1">
			<f a=""><c path="python.Dict">
	<c path="String"/>
	<t path="haxe.io.BytesData"/>
</c></f>
			<meta><m n=":has_untyped"/></meta>
		</getContent>
		<listNames public="1" get="inline" set="null" line="36" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the -resource file@name command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="40" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a String.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="54" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.Serializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="55" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set USE_CACHE to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="67" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<run public="1" set="method" line="544" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="115">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		http://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="152"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="171"><f a="v">
	<unknown/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="208"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="226">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="519">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</__getField>
		<serializeException public="1" set="method" line="521"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc>The Serializer class can be used to encode values and objects into a String,
	from which the Unserializer class can recreate the original representation.

	This class can be used in two ways:

	- create a new Serializer() instance, call its serialize() method with
		any argument and finally retrieve the String representation from
		toString()
	- call Serializer.run() to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	`http://haxe.org/manual/serialization/format`</haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="python.lib.Re" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" extern="1">
		<A public="1" static="1"><x path="Int"/></A>
		<ASCII public="1" static="1"><x path="Int"/></ASCII>
		<DEBUG public="1" static="1"><x path="Int"/></DEBUG>
		<I public="1" static="1"><x path="Int"/></I>
		<IGNORECASE public="1" static="1"><x path="Int"/></IGNORECASE>
		<L public="1" static="1"><x path="Int"/></L>
		<LOCALE public="1" static="1"><x path="Int"/></LOCALE>
		<M public="1" static="1"><x path="Int"/></M>
		<MULTILINE public="1" static="1"><x path="Int"/></MULTILINE>
		<S public="1" static="1"><x path="Int"/></S>
		<DOTALL public="1" static="1"><x path="Int"/></DOTALL>
		<X public="1" static="1"><x path="Int"/></X>
		<VERBOSE public="1" static="1"><x path="Int"/></VERBOSE>
		<U public="1" static="1"><x path="Int"/></U>
		<UNICODE public="1" static="1"><x path="Int"/></UNICODE>
		<compile public="1" set="method" static="1">
			<f a="pattern:?flags" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="python.lib.Regex"/>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</compile>
		<match public="1" set="method" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</match>
		<search public="1" set="method" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</search>
		<split public="1" set="method" static="1">
			<f a="pattern:string:?maxsplit:?flags" v="::0:0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{flags:0,maxsplit:0}</e></m></meta>
		</split>
		<findallDynamic public="1" get="inline" set="null" line="173" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</findallDynamic>
		<findallString public="1" get="inline" set="null" line="179" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</findallString>
		<findallTuple public="1" get="inline" set="null" line="184" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="python.Tuple"><c path="String"/></c></c>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</findallTuple>
		<findallArray public="1" get="inline" set="null" line="189" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="Array"><c path="String"/></c></c>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</findallArray>
		<finditer public="1" set="method" static="1">
			<f a="pattern:string:?flags" v="::0">
				<t path="python.lib.Pattern"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="python.NativeIterator"><c path="python.lib.MatchObject"/></x>
			</f>
			<meta><m n=":value"><e>{flags:0}</e></m></meta>
		</finditer>
		<sub public="1" set="method" static="1">
			<f a="pattern:repl:string:?count:?flags" v=":::0:0">
				<t path="python.lib.Pattern"/>
				<f a="">
					<c path="python.lib.MatchObject"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{flags:0,count:0}</e></m></meta>
			<overloads><sub public="1" set="method">
	<f a="pattern:repl:string:?count:?flags" v=":::0:0">
		<t path="python.lib.Pattern"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":value"><e>{flags:0,count:0}</e></m></meta>
</sub></overloads>
		</sub>
		<subn public="1" set="method" static="1">
			<f a="pattern:repl:string:?count:?flags" v=":::0:0">
				<t path="python.lib.Pattern"/>
				<t path="python.lib.Repl"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{flags:0,count:0}</e></m></meta>
		</subn>
		<escape public="1" set="method" static="1"><f a="string">
	<c path="String"/>
	<t path="python.lib.TODO"/>
</f></escape>
		<purge public="1" set="method" static="1"><f a=""><x path="Void"/></f></purge>
		<meta><m n=":pythonImport"><e>"re"</e></m></meta>
	</class>
	<class path="haxe.Template" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="54" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="55" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="56" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="57" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="&apos;???&apos;" line="64" static="1">
			<d/>
			<meta><m n=":value"><e>'???'</e></m></meta>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="105">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` Template, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.

		If `macros` has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the resolve() method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is null, the result is unspecified. If `macros` is null,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="114"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="125"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="171"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="186"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="236"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="267"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="286"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="300"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="304"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="350"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="82">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.

		If `str` is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<a href="http://haxe.org/manual/std-template.html">http://haxe.org/manual/std-template.html</a>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Timer.hx">
		<delay public="1" set="method" line="121" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its run() method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="143" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of `f`.

		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" set="method" line="156" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<stop public="1" set="method" line="80">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="108">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="59">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this].run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="C:\HaxeToolkit\haxe\std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<t path="Null"><x path="Int"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Splits `this` Ucs2 at each occurence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurence of
		`delimiter`. If `this` Ucs2 starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":extern"/></meta>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Splits `this` Ucs2 at each occurence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurence of
		`delimiter`. If `this` Ucs2 starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":extern"/></meta>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
	</class>
	<class path="haxe.Unserializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="Type" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>Type</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:

		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="Serializer.BASE64" line="62" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>Serializer.BASE64</e></m>
				<m n=":access"><e>haxe.Serializer</e></m>
			</meta>
		</BASE64>
		<CODES expr="null" line="65" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="67" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="459" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="139">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="143"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="172"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="185"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="200"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="232">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:

	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
	</class>
	<class path="haxe.Utf8" params="" file="C:\HaxeToolkit\haxe\std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="72" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="79" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="86" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="94" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="101" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="108" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String;</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since all platforms does not guarantee that String always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="455" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="482" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="540" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="558" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="41"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="59"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="79">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="133"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="161">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</compare>
		<getDouble public="1" set="method" line="213">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="232">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="252">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="275">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="294">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsignged integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="305">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Returns the 16 bit unsignged integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="317">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="331">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="338">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="352">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="357">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getString>
		<readString public="1" get="inline" set="null" line="412">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="416"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="437"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="451"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.Bytearray" params="" file="C:\HaxeToolkit\haxe\std/python/Bytearray.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" get="inline" set="null" line="36"><f a=""><x path="Int"/></f></get_length>
		<get public="1" get="inline" set="null" line="40"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="44"><f a="i:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<__setitem__ public="1" set="method"><f a="i:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></__setitem__>
		<decode public="1" set="method">
			<f a="?encoding:?errors" v="&quot;utf-8&quot;:&quot;strict&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{errors:"strict",encoding:"utf-8"}</e></m></meta>
		</decode>
		<new public="1" set="method">
			<f a="source:encoding:?errors">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="it">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="it">
	<x path="python.NativeIterable"><x path="Int"/></x>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"bytearray"</e></m></meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{complement:true}</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{complement:true}</e></m></meta>
		</decode>
		<haxe_doc>Allows to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionnary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="67" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" set="method" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" set="method" line="46"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="60"><f a=""><x path="Int"/></f></get>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="41" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="110" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="139" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="76"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="82"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="94"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="100"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="168"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="172"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="176"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="180"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="184"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="188"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="192"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="107" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="124" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="61"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="144">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="151">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="161">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="171"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="58"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="135" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd set="method" line="151" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="59"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR set="method" line="158"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR set="method" line="163"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch set="method" line="168"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="173"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 set="method" line="177"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 set="method" line="181"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 set="method" line="185"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 set="method" line="189"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="193"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="115" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="132" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="59"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S set="method" line="149"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R set="method" line="153"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch set="method" line="157"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="161"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 set="method" line="165"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 set="method" line="169"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 set="method" line="173"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 set="method" line="177"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd set="method" line="181"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="187"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="43" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="47" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="112" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="121" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="136" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="150" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="156" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="231">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<toString public="1" set="method" line="233"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="220">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{h:-1}</e></m></meta>
		</new>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="C:\HaxeToolkit\haxe\std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="73">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="82">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="91">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="104">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="117">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="148">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.]]></haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="25" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="28" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="32" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
	<exists public="1" get="inline" set="null" line="35" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</exists>
	<remove public="1" get="inline" set="null" line="38" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<keys public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</keys>
	<iterator public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="25" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="28" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<exists public="1" get="inline" set="null" line="35" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</exists>
		<remove public="1" get="inline" set="null" line="38" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<keys public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</keys>
		<iterator public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="53"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeToolkit\haxe\std/python/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><c path="python.Dict">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</c></h>
		<set public="1" set="method" line="34"><f a="key:value">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="38"><f a="key">
	<x path="Int"/>
	<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
</f></get>
		<exists public="1" get="inline" set="null" line="42"><f a="key">
	<x path="Int"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="46"><f a="key">
	<x path="Int"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method" line="53"><f a=""><t path="Iterator"><x path="Int"/></t></f></keys>
		<iterator public="1" set="method" line="57"><f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f></iterator>
		<toString public="1" set="method" line="61"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.ListSort" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="43" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as [sort] but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation</haxe_doc>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeToolkit\haxe\std/python/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<h><c path="python.Dict">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></h>
		<set public="1" set="method" line="35"><f a="key:value">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="39"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
</f></get>
		<exists public="1" get="inline" set="null" line="43"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="47"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method" line="54"><f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f></keys>
		<iterator public="1" set="method" line="58"><f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f></iterator>
		<toString public="1" set="method" line="62"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.ds.Option" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).</haxe_doc>
	</enum>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<_new public="1" get="inline" set="null" line="56" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="84" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="100" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="115" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<blit public="1" params="T" set="method" line="136" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" set="method" line="157" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="180" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="190" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="205" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="56" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="84" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="100" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="115" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<blit public="1" params="T" set="method" line="136" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" set="method" line="157" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="180" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="190" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="205" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<set public="1" set="method" line="44">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="50">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="57">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="64">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="71">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="78">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="85">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.</haxe_doc>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc>An abstract type allowing values to be either of `T1` or `T2` type.
    Supports implicit casts from/to either types.

    It is useful for interfacing with external code on dynamic platforms
    such as JavaScript or Python.

    Otherwise, use of this type is discouraged.</haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/>
	<abstract path="haxe.extern.Rest" params="T" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc>A special abstract type that represents "rest" function argument.

    Should be used as a type for the last argument of an extern method,
    representing that arbitrary number of arguments of given type can be
    passed to that method.</haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/>
	<class path="haxe.format.JsonParser" params="" file="C:\HaxeToolkit\haxe\std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="42" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into Array<Dynamic>.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<parseRec set="method" line="54"><f a=""><d/></f></parseRec>
		<parseString set="method" line="136"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="205"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="243"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="247"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="252"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="49"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="C:\HaxeToolkit\haxe\std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="42" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o` value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a=":">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="69"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="73"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="77"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="138">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</addChar>
		<add get="inline" set="null" line="146">
			<f a="v">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="191"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="54"><f a="replacer:space">
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.</haxe_doc>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="14"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="19"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="9"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<EMULATED public="1" get="accessor" set="null" static="1">
		<x path="Bool"/>
		<haxe_doc>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will
		try to emulate the array buffers API. However in that case memory sharing will not be supported :
		each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation.
		At the moment only JavaScript is concerned.</haxe_doc>
	</EMULATED>
	<get_EMULATED get="inline" set="null" line="35" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<_new public="1" get="inline" set="null" line="43" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="47" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteOffset>
	<get_byteLength get="inline" set="null" line="48" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<get_buffer get="inline" set="null" line="49" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_buffer>
	<sub public="1" get="inline" set="null" line="51" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="59" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<t path="haxe.io.ArrayBufferViewData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="63" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="67" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
		<EMULATED public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<haxe_doc>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will
		try to emulate the array buffers API. However in that case memory sharing will not be supported :
		each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation.
		At the moment only JavaScript is concerned.</haxe_doc>
		</EMULATED>
		<get_EMULATED get="inline" set="null" line="35" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
		<buffer public="1" get="accessor" set="null" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":impl"/></meta>
		</buffer>
		<byteOffset public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<_new public="1" get="inline" set="null" line="43" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="47" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteOffset>
		<get_byteLength get="inline" set="null" line="48" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<get_buffer get="inline" set="null" line="49" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_buffer>
		<sub public="1" get="inline" set="null" line="51" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="59" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<t path="haxe.io.ArrayBufferViewData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="63" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="67" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Input" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="46">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="61">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="87">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="90"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="103">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="130">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="141">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="158">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="171">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="193">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="202">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="211">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="223">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="237">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="248">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="263">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="275">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="294">
			<f a="len">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<getDoubleSig set="method" line="316"><f a="bytes">
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
</f></getDoubleSig>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="54" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{available:0,pos:0}</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesBuffer.hx">
		<b><c path="Array"><x path="Int"/></c></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="128"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="139"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="144"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="152"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="160"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="191">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesData.hx"><c path="python.Bytearray"/></typedef>
	<class path="haxe.io.BytesInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="63"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="71"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="79"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="90" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="111" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="83">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="91">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="104">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="177">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="193">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="203">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="221">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="242">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="251">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="276">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeByte] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="125"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="35" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<LN2 get="inline" set="null" expr="0.6931471805599453" line="58" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN2>
		<i32ToFloat public="1" set="method" line="62" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="109" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="149" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="208" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<t path="haxe.io.Float32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<t path="haxe.io.Float32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<t path="haxe.io.Float64ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<t path="haxe.io.Float64ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<t path="haxe.io.Int32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<t path="haxe.io.Int32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Path" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are null, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is null, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').

		Also replaces backslashes \ with slashes / and afterwards turns
		multiple slashes into a single one.

		If `path` is null, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="265" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		"".

		If `path` is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="290" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver>=3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="304" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver>=3.2]]></e></m></meta>
			<haxe_doc>Returns true if the path is an absolute path, and false otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="310" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="315" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{allowSlashes:false}</e></m></meta>
		</escape>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is true, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is null, their representation
		is the empty String "".</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.

		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- directory1/directory2/filename.extension
	- directory1\directory2\filename.excention</haxe_doc>
	</class>
	<class path="haxe.io.StringInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<t path="haxe.io.UInt16ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<t path="haxe.io.UInt16ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<t path="haxe.io.UInt32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<t path="haxe.io.UInt32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<t path="haxe.io.UInt8ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<t path="haxe.io.UInt8ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type [c] to a human-readable String representation.

		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through 'using haxe.macro.ComplexTypeTools' syntax and then provides
	additional methods on haxe.macro.Expr.ComplexType instances.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v"><c path="String"/></CInt>
		<CFloat a="f"><c path="String"/></CFloat>
		<CString a="s"><c path="String"/></CString>
		<CIdent a="s"><c path="String"/></CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EVars a="vars"><c path="Array"><t path="haxe.macro.Var"/></c></EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
		</ETry>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EBreak/>
		<EContinue/>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EDisplay>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
		</EMeta>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><t path="Null"><c path="String"/></t></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="Null"><t path="haxe.macro.Metadata"/></t>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><t path="Null"><c path="String"/></t></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic/>
		<APrivate/>
		<AStatic/>
		<AOverride/>
		<ADynamic/>
		<AInline/>
		<AMacro/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="Null"><t path="haxe.macro.Metadata"/></t>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum/>
		<TDStructure/>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
		</TDClass>
		<TDAlias a="t"><e path="haxe.macro.ComplexType"/></TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		</TDAbstract>
	</enum>
	<class path="haxe.macro.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1"><c path="String"/></message>
		<pos public="1"><t path="haxe.macro.Position"/></pos>
		<toString set="method" line="333"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="329"><f a="m:p">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal/>
		<IAsName a="alias"><c path="String"/></IAsName>
		<IAll/>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<path><c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c></path>
	<mode><e path="haxe.macro.ImportMode"/></mode>
</a></typedef>
	<class path="haxe.macro.ExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression [e] to a human-readable String representation.

		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="70" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function [f] on each sub-expression of [e].

		If [e] has no sub-expressions, this operation has no effect.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}</haxe_doc>
		</iter>
		<map public="1" set="method" line="156" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.

		If [e] has no sub-expressions, this operation returns [e] unchanged.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}</haxe_doc>
		</map>
		<getValue public="1" set="method" line="230" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:
			- `Int`, `Float` and `String` literals
			- identifiers `true`, `false` and `null`
			- structure declarations if all their fields are values
			- array declarations if all their elements are values
			- unary operators `-`, `!` and `~` if the operand is a value
			- binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="290" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="293" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="302" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="309" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="72" static="1">
			<f a="sl">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="87" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="91" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="C:\HaxeToolkit\haxe\std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<class path="haxe.macro.PositionTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="22" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="33" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="38"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="46"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="74"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="78"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="82"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="86"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="95"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="100"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="107"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="116"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="120"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="130"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="140"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="145"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="151"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="157"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printExpr public="1" set="method" line="163"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="225"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="229"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="234"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="239">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{printPackage:true}</e></m></meta>
		</printTypeDefinition>
		<opt params="T" set="method" line="310">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{prefix:""}</e></m></meta>
		</opt>
		<new public="1" set="method" line="33">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{tabString:"\t"}</e></m></meta>
		</new>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc>This class can be added via 'using haxe.macro.Tools' in order to enable
	'using' functionality on all macro tool classes listed below.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.ComplexTypeTools"/></typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.TypeTools"/></typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.MacroStringTools"/></typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.TypedExprTools"/></typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.PositionTools"/></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t>
			<haxe_doc>Represents a monomorph.

		@see http://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see http://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see http://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see http://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see http://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see http://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<t path="Null"><e path="haxe.macro.Type"/></t>
			<haxe_doc>Represents Dynamic.

		@see http://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see http://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed/>
		<AOpened/>
		<AConst/>
		<AExtend a="tl"><t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t></AExtend>
		<AClassStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></AClassStatics>
		<AEnumStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t></AEnumStatics>
		<AAbstractStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></AAbstractStatics>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<enum path="haxe.macro.ClassKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal/>
		<KTypeParameter a="constraints"><c path="Array"><e path="haxe.macro.Type"/></c></KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KExtension>
		<KExpr a="expr"><t path="haxe.macro.Expr"/></KExpr>
		<KGeneric/>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KGenericInstance>
		<KMacroType/>
		<KAbstractImpl a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></KAbstractImpl>
		<KGenericBuild/>
	</enum>
	<typedef path="haxe.macro.ClassType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><x path="Map">
	<c path="String"/>
	<t path="haxe.macro.EnumField"/>
</x></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccResolve/>
		<AccCall/>
		<AccInline/>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
		</AccRequire>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethInline/>
		<MethDynamic/>
		<MethMacro/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i"><x path="Int"/></TInt>
		<TFloat a="s"><c path="String"/></TFloat>
		<TString a="s"><c path="String"/></TString>
		<TBool a="b"><x path="Bool"/></TBool>
		<TNull/>
		<TThis/>
		<TSuper/>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t set="null"><e path="haxe.macro.Type"/></t>
	<name set="null"><c path="String"/></name>
	<id set="null"><x path="Int"/></id>
	<extra set="null"><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture set="null"><x path="Bool"/></capture>
</a></typedef>
	<enum path="haxe.macro.ModuleType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></TClassDecl>
		<TEnumDecl a="e"><t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t></TEnumDecl>
		<TTypeDecl a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t></TTypeDecl>
		<TAbstract a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></TAbstract>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FStatic>
		<FAnon a="cf"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></FAnon>
		<FDynamic a="s"><c path="String"/></FDynamic>
		<FClosure a="c:cf">
			<t path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
		</FEnum>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c"><e path="haxe.macro.TConstant"/></TConst>
		<TLocal a="v"><t path="haxe.macro.TVar"/></TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
		</TField>
		<TTypeExpr a="m"><e path="haxe.macro.ModuleType"/></TTypeExpr>
		<TParenthesis a="e"><t path="haxe.macro.TypedExpr"/></TParenthesis>
		<TObjectDecl a="fields"><c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c></TObjectDecl>
		<TArrayDecl a="el"><c path="Array"><t path="haxe.macro.TypedExpr"/></c></TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
		</TUnop>
		<TFunction a="tfunc"><t path="haxe.macro.TFunc"/></TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TVar>
		<TBlock a="el"><c path="Array"><t path="haxe.macro.TypedExpr"/></c></TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
		</TTry>
		<TReturn a="e"><t path="Null"><t path="haxe.macro.TypedExpr"/></t></TReturn>
		<TBreak/>
		<TContinue/>
		<TThrow a="e"><t path="haxe.macro.TypedExpr"/></TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><e path="haxe.macro.ModuleType"/></t>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
		</TEnumParameter>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="haxe.macro.TypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="38" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="40" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="95" static="1">
			<f a="type">
				<t path="Null"><e path="haxe.macro.Type"/></t>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypePath set="method" line="142" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="330" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
			</f>
			<meta><m n=":value"><e>{isStatic:false}</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="28" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><e path="haxe.macro.Type"/></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.TypedExprDef"/></expr>
	</a>
</f></with>
		<map public="1" set="method" line="43" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="78" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function [f] on each sub-expression of [e].

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="123" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
	</class>
	<class path="haxe.remoting.AsyncConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncConnection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AMFConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AMFConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><d/></cnx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="41"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="47"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<close public="1" set="method" line="51"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="55">
			<f a="params:?onResult">
				<c path="Array"><d/></c>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</call>
		<new set="method" line="36"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><d/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncAdapter" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncAdapter.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="56" static="1"><f a="cnx">
	<c path="haxe.remoting.Connection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></create>
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<__error><a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a></__error>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="41"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="45"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="32"><f a="cnx:error">
	<c path="haxe.remoting.Connection"/>
	<a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a>
	<x path="Void"/>
</f></new>
		<haxe_doc>Build an AsyncConnection from a synchronized Connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncDebugConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncDebugConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="76" static="1"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncDebugConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<__data><a>
	<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
	<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
	<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="41"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="47"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorDebug public="1" set="method" line="51"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorDebug>
		<setResultDebug public="1" set="method" line="55"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setResultDebug>
		<setCallDebug public="1" set="method" line="59"><f a="h">
	<f a=":">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setCallDebug>
		<call public="1" set="method" line="63"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="35"><f a="path:cnx:data">
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.AsyncConnection"/>
	<a>
		<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
		<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
		<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncDebugConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncProxy" params="T" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncProxy.hx">
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.AsyncConnection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.Connection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/Connection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Context" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="55" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<objects><c path="haxe.ds.StringMap"><a>
	<rec><x path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<addObject public="1" set="method" line="32"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addObject>
		<call public="1" set="method" line="36"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.ContextAll" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/ContextAll.hx">
		<extends path="haxe.remoting.Context"/>
		<call public="1" set="method" line="26" override="1"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.DelayedConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/DelayedConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<process set="method" line="70" static="1"><f a="d">
	<c path="haxe.remoting.DelayedConnection"/>
	<x path="Void"/>
</f></process>
		<create public="1" set="method" line="86" static="1"><f a=""><c path="haxe.remoting.DelayedConnection"/></f></create>
		<connection public="1" get="accessor" set="accessor"><c path="haxe.remoting.AsyncConnection"/></connection>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
	<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
</a></__data>
		<setErrorHandler public="1" set="method" line="45"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<get_connection set="method" line="55"><f a=""><c path="haxe.remoting.AsyncConnection"/></f></get_connection>
		<set_connection set="method" line="59"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></set_connection>
		<call public="1" set="method" line="65"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="40"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
		<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.ExternalConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/ExternalConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<escapeString get="inline" set="null" line="53" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<connections expr="&apos;???&apos;" line="90" static="1">
			<c path="haxe.ds.StringMap"><c path="haxe.remoting.ExternalConnection"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</connections>
		<doCall set="method" line="93" static="1">
			<f a="name:path:params">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</doCall>
		<__data><a>
	<name><c path="String"/></name>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="38"><f a="field">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<close public="1" set="method" line="44"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="58"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="33"><f a="data:path">
	<a>
		<name><c path="String"/></name>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Synchronous communications between Flash and Javascript.</haxe_doc>
		<meta><m n=":expose"/></meta>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.FlashJsConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/FlashJsConnection.hx"/>
	<class path="haxe.remoting.HttpAsyncConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/HttpAsyncConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="73" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpAsyncConnection"/>
</f></urlConnect>
		<__data><a>
	<url><c path="String"/></url>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="34"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="40"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="44"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="29"><f a="data:path">
	<a>
		<url><c path="String"/></url>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/HttpConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<TIMEOUT public="1" expr="10." line="26" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>10.</e></m></meta>
		</TIMEOUT>
		<processRequest public="1" set="method" line="94" static="1"><f a="requestData:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<__url><c path="String"/></__url>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="36"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method" line="42"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="31"><f a="url:path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.LocalConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/LocalConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<ID expr="0" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ID>
		<remotingCall set="method" line="75" static="1"><f a="c:id:path:args">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingCall>
		<remotingResult set="method" line="90" static="1"><f a="c:id:result">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingResult>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<target><c path="String"/></target>
	<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
	<cnx><d/></cnx>
</a></__data>
		<resolve public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="52"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="56"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<close public="1" set="method" line="71"><f a=""><x path="Void"/></f></close>
		<new set="method" line="41"><f a="data:path">
	<a>
		<target><c path="String"/></target>
		<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
		<cnx><d/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Proxy" params="T" file="C:\HaxeToolkit\haxe\std/haxe/remoting/Proxy.hx">
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.Connection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.SocketConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/SocketConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="120" static="1"><f a="s:?ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.SocketConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
	<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
	<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="44"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method" line="50"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="59"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorLogger public="1" set="method" line="63"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorLogger>
		<setProtocol public="1" set="method" line="67"><f a="p">
	<c path="haxe.remoting.SocketProtocol"/>
	<x path="Void"/>
</f></setProtocol>
		<getProtocol public="1" set="method" line="71"><f a=""><c path="haxe.remoting.SocketProtocol"/></f></getProtocol>
		<close public="1" set="method" line="75"><f a=""><x path="Void"/></f></close>
		<processMessage public="1" set="method" line="79"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></processMessage>
		<defaultLog set="method" line="111"><f a="path:args:e">
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<unknown/>
	<x path="Void"/>
</f></defaultLog>
		<new set="method" line="39"><f a="data:path">
	<a>
		<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
		<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
		<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<typedef path="haxe.remoting.Socket" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/SocketProtocol.hx" module="haxe.remoting.SocketProtocol"><c path="sys.net.Socket"/></typedef>
	<class path="haxe.remoting.SocketProtocol" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/SocketProtocol.hx">
		<socket public="1"><t path="haxe.remoting.Socket"/></socket>
		<context public="1"><c path="haxe.remoting.Context"/></context>
		<decodeChar set="method" line="59"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></decodeChar>
		<encodeChar set="method" line="78"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></encodeChar>
		<messageLength public="1" set="method" line="99"><f a="c1:c2">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></messageLength>
		<encodeMessageLength public="1" set="method" line="107"><f a="len">
	<x path="Int"/>
	<a>
		<c2><t path="Null"><x path="Int"/></t></c2>
		<c1><t path="Null"><x path="Int"/></t></c1>
	</a>
</f></encodeMessageLength>
		<sendRequest public="1" set="method" line="115"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></sendRequest>
		<sendAnswer public="1" set="method" line="123"><f a="answer:?isException">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sendAnswer>
		<sendMessage public="1" set="method" line="133"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></sendMessage>
		<decodeData public="1" set="dynamic" line="146"><f a="data">
	<c path="String"/>
	<c path="String"/>
</f></decodeData>
		<isRequest public="1" set="method" line="150"><f a="data">
	<c path="String"/>
	<x path="Bool"/>
</f></isRequest>
		<processRequest public="1" set="method" line="158"><f a="data:?onError">
	<c path="String"/>
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></processRequest>
		<processAnswer public="1" set="method" line="180"><f a="data">
	<c path="String"/>
	<d/>
</f></processAnswer>
		<readMessage public="1" set="method" line="189"><f a=""><c path="String"/></f></readMessage>
		<new public="1" set="method" line="54"><f a="sock:ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Haxe Remoting Socket Protocol is composed of serialized string exchanges.
	Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)
	and postfixed with the \0 message delimiting char.
	A request string is composed of the following serialized values :
		- the boolean true for a request
		- an array of strings representing the object+method path
		- an array of parameters
	A response string is composed of the following serialized values :
		- the boolean false for a response
		- a serialized value representing the result
	Exceptions are serialized with [serializeException] so they will be thrown immediatly
	when they are unserialized.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<value>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.rtti.CType" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="List"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<overloads><t path="Null"><c path="List"><t path="haxe.rtti.ClassField"/></c></t></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<line><t path="Null"><x path="Int"/></t></line>
	<isPublic><x path="Bool"/></isPublic>
	<isOverride><x path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<expr><t path="Null"><c path="String"/></t></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="Null"><t path="haxe.rtti.PathParams"/></t></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<file><t path="Null"><c path="String"/></t></file>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><x path="Map">
	<c path="String"/>
	<e path="haxe.rtti.CType"/>
</x></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></to>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<impl><t path="haxe.rtti.Classdef"/></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></from>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
	<athis><e path="haxe.rtti.CType"/></athis>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="133" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="145" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<x path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="152" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="166" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<x path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="181" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<x path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="234" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="254" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<x path="Bool"/>
</f></constructorEq>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="269" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<c path="String"/>
</f></toString>
		<nameWithParams set="method" line="292" static="1"><f a="name:params">
	<c path="String"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="299" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="303" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
	</class>
	<class path="haxe.rtti.Meta" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="32" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<getMeta set="method" line="37" static="1">
			<f a="t">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMeta>
		<getStatics public="1" set="method" line="65" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="73" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="39" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti@` was
		added, `null` is returned.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is null, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc>Rtti is a helper class which supplements the `@:rtti` metadata.</haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="35"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="62"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></sortFields>
		<process public="1" set="method" line="82"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="88"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="97"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="105"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="109"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="112"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="150"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="170"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="178"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="194"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="284"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="288"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="295"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="305"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="309"><f a="x">
	<c path="haxe.xml.Fast"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="315"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="326"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="337"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="345"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="356"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="396">
			<f a="x:?defPublic" v=":false">
				<c path="haxe.xml.Fast"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{defPublic:false}</e></m></meta>
		</xclassfield>
		<xenum set="method" line="426"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="451"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="481"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="520"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="548"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="604"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="611"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestCase" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestCase.hx">
		<currentTest public="1"><c path="haxe.unit.TestStatus"/></currentTest>
		<setup public="1" set="method" line="33"><f a=""><x path="Void"/></f></setup>
		<tearDown public="1" set="method" line="36"><f a=""><x path="Void"/></f></tearDown>
		<print public="1" set="method" line="39"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="43"><f a="b:?c">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertTrue>
		<assertFalse public="1" set="method" line="53"><f a="b:?c">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertFalse>
		<assertEquals public="1" params="T" set="method" line="63"><f a="expected:actual:?c">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertEquals>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keepSub"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="haxe.unit.TestResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null"><x path="Bool"/></success>
		<add public="1" set="method" line="34"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<x path="Void"/>
</f></add>
		<toString public="1" set="method" line="40"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestRunner.hx">
		<print public="1" set="dynamic" line="33" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</print>
		<customTrace set="method" line="75" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></customTrace>
		<result public="1" set="null"><c path="haxe.unit.TestResult"/></result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="84"><f a="c">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></add>
		<run public="1" set="method" line="88"><f a=""><x path="Bool"/></f></run>
		<runCase set="method" line="97"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></runCase>
		<new public="1" set="method" line="79"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestStatus.hx">
		<done public="1"><x path="Bool"/></done>
		<success public="1"><x path="Bool"/></success>
		<error public="1"><c path="String"/></error>
		<method public="1"><c path="String"/></method>
		<classname public="1"><c path="String"/></classname>
		<posInfos public="1"><t path="haxe.PosInfos"/></posInfos>
		<backtrace public="1"><c path="String"/></backtrace>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.web.DispatchConfig" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><a>
	<rules><d/></rules>
	<obj><d/></obj>
</a></typedef>
	<typedef path="haxe.web.Lock" params="T" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><c path="haxe.web.Lock.T"/></typedef>
	<enum path="haxe.web.MatchRule" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<MRInt/>
		<MRBool/>
		<MRFloat/>
		<MRString/>
		<MRDate/>
		<MREnum a="e"><c path="String"/></MREnum>
		<MRDispatch/>
		<MRSpod a="c:lock">
			<c path="String"/>
			<x path="Bool"/>
		</MRSpod>
		<MROpt a="r"><e path="haxe.web.MatchRule"/></MROpt>
	</enum>
	<enum path="haxe.web.DispatchRule" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DRMatch a="r"><e path="haxe.web.MatchRule"/></DRMatch>
		<DRMult a="r"><c path="Array"><e path="haxe.web.MatchRule"/></c></DRMult>
		<DRArgs a="r:args:opt">
			<e path="haxe.web.DispatchRule"/>
			<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<x path="Bool"/>
		</DRArgs>
		<DRMeta a="r"><e path="haxe.web.DispatchRule"/></DRMeta>
	</enum>
	<enum path="haxe.web.DispatchError" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DENotFound a="part"><c path="String"/></DENotFound>
		<DEInvalidValue/>
		<DEMissing/>
		<DEMissingParam a="p"><c path="String"/></DEMissingParam>
		<DETooManyValues/>
	</enum>
	<class path="haxe.web.Redirect" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><new public="1" set="method" line="65"><f a=""><x path="Void"/></f></new></class>
	<class path="haxe.web.Dispatch" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx">
		<GET_RULES static="1"><c path="Array"><c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></c></GET_RULES>
		<make public="1" set="method" static="1"><f a="obj">
	<a/>
	<t path="haxe.web.DispatchConfig"/>
</f></make>
		<run public="1" set="method" static="1"><f a="url:params:obj">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<a/>
	<x path="Void"/>
</f></run>
		<extractConfig set="method" line="468" static="1"><f a="obj">
	<d/>
	<t path="haxe.web.DispatchConfig"/>
</f></extractConfig>
		<parts public="1"><c path="Array"><c path="String"/></c></parts>
		<params public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></params>
		<name public="1"><c path="String"/></name>
		<cfg public="1"><t path="haxe.web.DispatchConfig"/></cfg>
		<subDispatch><x path="Bool"/></subDispatch>
		<dispatch public="1" set="method"><f a="obj">
	<a/>
	<x path="Void"/>
</f></dispatch>
		<getParams public="1" set="method"><f a=""><d/></f></getParams>
		<onMeta public="1" set="dynamic" line="103"><f a="v:args">
	<c path="String"/>
	<t path="Null"><c path="Array"><d/></c></t>
	<x path="Void"/>
</f></onMeta>
		<resolveName set="method" line="106"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolveName>
		<runtimeDispatch public="1" set="method" line="110"><f a="cfg">
	<t path="haxe.web.DispatchConfig"/>
	<x path="Void"/>
</f></runtimeDispatch>
		<redirect public="1" set="method" line="138"><f a="url:?params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></redirect>
		<runtimeGetParams public="1" set="method" line="146"><f a="cfgIndex">
	<x path="Int"/>
	<d/>
</f></runtimeGetParams>
		<match set="method" line="152"><f a="v:r:opt">
	<c path="String"/>
	<e path="haxe.web.MatchRule"/>
	<x path="Bool"/>
	<d/>
</f></match>
		<checkParams set="method" line="217"><f a="params:opt">
	<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
	<x path="Bool"/>
	<a/>
</f></checkParams>
		<loop set="method" line="231"><f a="args:r">
	<c path="Array"><d/></c>
	<e path="haxe.web.DispatchRule"/>
	<x path="Void"/>
</f></loop>
		<new public="1" set="method" line="77"><f a="url:params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.xml.Filter" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="79" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="102" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="167" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="240" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="255" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="264" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="275" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="305" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="312" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="32"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="28"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="47"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="70"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="66"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="86"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="82"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="100"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="96"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx">
		<x public="1" set="null"><c path="Xml"/></x>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<innerData public="1" get="accessor" set="null"><c path="String"/></innerData>
		<innerHTML public="1" get="accessor" set="null"><c path="String"/></innerHTML>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<elements public="1" get="accessor" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<get_name set="method" line="133"><f a=""><c path="String"/></f></get_name>
		<get_innerData set="method" line="137"><f a=""><c path="String"/></f></get_innerData>
		<get_innerHTML set="method" line="157"><f a=""><c path="String"/></f></get_innerHTML>
		<get_elements set="method" line="164"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
</a></f></get_elements>
		<new public="1" set="method" line="122"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml._Parser.S" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="10" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="11" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="12" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="13" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="14" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="15" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="17" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="18" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</ESCAPE>
	</class>
	<class path="haxe.xml.Parser" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Parser.hx">
		<escapes expr="&apos;???&apos;" line="51" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</escapes>
		<parse public="1" set="method" line="64" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{strict:false}</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.</haxe_doc>
		</parse>
		<doParse set="method" line="71" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{p:0}</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="393" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="33" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{pretty:false}</e></m></meta>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="47"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="100"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="104"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="110"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="42"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="C:\HaxeToolkit\haxe\std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="50"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="46"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	[
	class MyXml extends haxe.xml.Proxy<"my.xml",MyStructure> {
	}
	...
	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// access to "myNode" is only possible
	// if you have an id="myNode" attribute
	// in your XML, and completion works as well
	]]]></haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="40" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="37"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<t path="Null"><t path="Null"><c path="List"><e path="haxe.zip.ExtraField"/></c></t></t>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
	<crc32><t path="Null"><x path="Int"/></t></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="35"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="46"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="63"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="76"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1&lt;&lt;15" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1<<15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1&lt;&lt;16" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1<<16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="41"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="49"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="55"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="61"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="65"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="69"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="35"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1]" line="92" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258]" line="93" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1]" line="94" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]" line="95" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]" line="96" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="114" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="363" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{bufsize:65536}</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<final><x path="Bool"/></final>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><t path="Null"><e path="haxe.zip.Huffman"/></t></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="136"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="146"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="156"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="167"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="178"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="187"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="192"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="199"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="206"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="212"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="216"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="224"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="253"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="116">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{crc:true,header:true}</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="190" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="195" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<t path="Null"><c path="haxe.io.Bytes"/></t>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="35"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="47"><f a="length">
	<x path="Int"/>
	<c path="List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="75"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="118"><f a=""><c path="List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="31"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Tools.hx"><compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress></class>
	<class path="haxe.zip.Uncompress" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="40" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="37"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Writer" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="50"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="61"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="121"><f a="files">
	<c path="List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="129"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="45"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.Set" params="T" file="C:\HaxeToolkit\haxe\std/python/Set.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="36"><f a=""><x path="Int"/></f></get_length>
		<has public="1" get="inline" set="null" line="40"><f a="v">
	<c path="python.Set.T"/>
	<x path="Bool"/>
</f></has>
		<isdisjoint public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></isdisjoint>
		<issubset public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issubset>
		<issubset_proper public="1" get="inline" set="null" line="46"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issubset_proper>
		<issuperset public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issuperset>
		<issuperset_proper public="1" get="inline" set="null" line="50"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="Bool"/>
</f></issuperset_proper>
		<union public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></union>
		<intersection public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></intersection>
		<difference public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></difference>
		<symmetric_difference public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></symmetric_difference>
		<copy public="1" set="method"><f a=""><c path="python.Set"><c path="python.Set.T"/></c></f></copy>
		<update public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></update>
		<intersection_update public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></intersection_update>
		<difference_update public="1" set="method"><f a="other:others">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<x path="haxe.extern.Rest"><c path="python.Set"><c path="python.Set.T"/></c></x>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></difference_update>
		<symmetric_difference_update public="1" set="method"><f a="other">
	<c path="python.Set"><c path="python.Set.T"/></c>
	<c path="python.Set"><c path="python.Set.T"/></c>
</f></symmetric_difference_update>
		<add public="1" set="method"><f a="elem">
	<c path="python.Set.T"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method"><f a="elem">
	<c path="python.Set.T"/>
	<x path="Void"/>
</f></remove>
		<discard public="1" set="method"><f a="elem">
	<c path="python.Set.T"/>
	<x path="Void"/>
</f></discard>
		<pop public="1" set="method"><f a=""><c path="python.Set.T"/></f></pop>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<iter public="1" get="inline" set="null" line="70"><f a=""><x path="python.NativeIterator"><c path="python.Set.T"/></x></f></iter>
		<iterator public="1" get="inline" set="null" line="74"><f a=""><t path="Iterator"><c path="python.Set.T"/></t></f></iterator>
		<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.Set.T"/></x></f></__iter__>
		<new public="1" set="method">
			<f a="?iterable">
				<x path="python.NativeIterable"><c path="python.Set.T"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?array">
	<c path="Array"><c path="python.Set.T"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta><m n=":native"><e>"set"</e></m></meta>
	</class>
	<class path="python.Boot" params="" file="C:\HaxeToolkit\haxe\std/python/Boot.hx">
		<keywords expr="&apos;???&apos;" line="38" static="1">
			<c path="python.Set"><c path="String"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</keywords>
		<arrayJoin params="T" get="inline" set="null" line="49" static="1">
			<f a="x:sep">
				<c path="Array"><c path="arrayJoin.T"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</arrayJoin>
		<safeJoin get="inline" set="null" line="53" static="1">
			<f a="x:sep">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</safeJoin>
		<isPyBool get="inline" set="null" line="57" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></isPyBool>
		<isPyInt get="inline" set="null" line="61" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></isPyInt>
		<isPyFloat get="inline" set="null" line="65" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></isPyFloat>
		<isClass get="inline" set="null" line="69" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></isClass>
		<isAnonObject get="inline" set="null" line="73" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></isAnonObject>
		<_add_dynamic set="method" line="77" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":ifFeature"><e>"add_dynamic"</e></m></meta>
		</_add_dynamic>
		<toString get="inline" set="null" line="87" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></toString>
		<toString1 set="method" line="91" static="1">
			<f a="o:s">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toString1>
		<isMetaType get="inline" set="null" line="238" static="1"><f a="v:t">
	<d/>
	<d/>
	<x path="Bool"/>
</f></isMetaType>
		<fields set="method" line="243" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":analyzer"><e>no_local_dce</e></m>
			</meta>
		</fields>
		<isString get="inline" set="null" line="271" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></isString>
		<isArray get="inline" set="null" line="275" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></isArray>
		<simpleField set="method" line="279" static="1"><f a="o:field">
	<d/>
	<c path="String"/>
	<d/>
</f></simpleField>
		<field set="method" line="286" static="1"><f a="o:field">
	<d/>
	<c path="String"/>
	<d/>
</f></field>
		<getInstanceFields set="method" line="329" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInstanceFields>
		<getSuperClass set="method" line="354" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSuperClass>
		<getClassFields set="method" line="370" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClassFields>
		<unsafeFastCodeAt get="inline" set="null" line="381" static="1"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></unsafeFastCodeAt>
		<handleKeywords get="inline" set="null" line="385" static="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></handleKeywords>
		<prefixLength expr="Internal.prefix().length" line="394" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>Internal.prefix().length</e></m></meta>
		</prefixLength>
		<unhandleKeywords set="method" line="396" static="1"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></unhandleKeywords>
	</class>
	<class path="python.Bytes" params="" file="C:\HaxeToolkit\haxe\std/python/Bytes.hx" extern="1">
		<extends path="python.Bytearray"/>
		<meta><m n=":native"><e>"bytes"</e></m></meta>
	</class>
	<class path="python.DictView" params="T" file="C:\HaxeToolkit\haxe\std/python/Dict.hx" module="python.Dict" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length get="inline" set="null" line="79"><f a=""><x path="Int"/></f></get_length>
		<iter public="1" get="inline" set="null" line="83"><f a=""><x path="python.NativeIterator"><c path="python.DictView.T"/></x></f></iter>
		<iterator public="1" get="inline" set="null" line="87"><f a=""><t path="Iterator"><c path="python.DictView.T"/></t></f></iterator>
		<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.DictView.T"/></x></f></__iter__>
	</class>
	<class path="python.BaseException" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<new public="1" set="method"><f a="args">
	<x path="haxe.extern.Rest"><d/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"BaseException"</e></m></meta>
	</class>
	<class path="python.BufferError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta><m n=":native"><e>"BufferError"</e></m></meta>
	</class>
	<class path="python.GeneratorExit" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta><m n=":native"><e>"GeneratorExit"</e></m></meta>
	</class>
	<class path="python.KeyboardInterrupt" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta><m n=":native"><e>"KeyboardInterrupt"</e></m></meta>
	</class>
	<class path="python.Exception" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.BaseException"/>
		<meta><m n=":native"><e>"Exception"</e></m></meta>
	</class>
	<class path="python.SyntaxError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="python.StopIteration" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"StopIteration"</e></m></meta>
	</class>
	<class path="python.RuntimeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"RuntimeError"</e></m></meta>
	</class>
	<class path="python.NotImplementedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.RuntimeError"/>
		<meta><m n=":native"><e>"NotImplementedError"</e></m></meta>
	</class>
	<class path="python.IndentationError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.SyntaxError"/>
		<meta><m n=":native"><e>"IndentationError"</e></m></meta>
	</class>
	<class path="python.EnvironmentError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"EnvironmentError"</e></m></meta>
	</class>
	<class path="python.OSError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.EnvironmentError"/>
		<meta><m n=":native"><e>"OSError"</e></m></meta>
	</class>
	<class path="python.BlockingIOError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"BlockingIOError"</e></m></meta>
	</class>
	<class path="python.ChildProcessError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"ChildProcessError"</e></m></meta>
	</class>
	<class path="python.ConnectionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"ConnectionError"</e></m></meta>
	</class>
	<class path="python.BrokenPipeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"BrokenPipeError"</e></m></meta>
	</class>
	<class path="python.ConnectionAbortedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"ConnectionAbortedError"</e></m></meta>
	</class>
	<class path="python.ConnectionRefusedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"ConnectionRefusedError"</e></m></meta>
	</class>
	<class path="python.ConnectionResetError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ConnectionError"/>
		<meta><m n=":native"><e>"ConnectionResetError"</e></m></meta>
	</class>
	<class path="python.FileExistsError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"FileExistsError"</e></m></meta>
	</class>
	<class path="python.FileNotFoundError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"FileNotFoundError"</e></m></meta>
	</class>
	<class path="python.InterruptedError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"InterruptedError"</e></m></meta>
	</class>
	<class path="python.IsADirectoryError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"IsADirectoryError"</e></m></meta>
	</class>
	<class path="python.NotADirectoryError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"NotADirectoryError"</e></m></meta>
	</class>
	<class path="python.PermissionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"PermissionError"</e></m></meta>
	</class>
	<class path="python.ProcessLookupError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"ProcessLookupError"</e></m></meta>
	</class>
	<class path="python.TimeoutError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"TimeoutError"</e></m></meta>
	</class>
	<class path="python.NameError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"NameError"</e></m></meta>
	</class>
	<class path="python.UnboundLocalError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.NameError"/>
		<meta><m n=":native"><e>"UnboundLocalError"</e></m></meta>
	</class>
	<class path="python.MemoryError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"MemoryError"</e></m></meta>
	</class>
	<class path="python.AssertionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"AssertionError"</e></m></meta>
	</class>
	<class path="python.AttributeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"AttributeError"</e></m></meta>
	</class>
	<class path="python.EOFError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"EOFError"</e></m></meta>
	</class>
	<class path="python.ArithmeticError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"ArithmeticError"</e></m></meta>
	</class>
	<class path="python.FloatingPointError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ArithmeticError"/>
		<meta><m n=":native"><e>"FloatingPointError"</e></m></meta>
	</class>
	<class path="python.OverflowError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ArithmeticError"/>
		<meta><m n=":native"><e>"OverflowError"</e></m></meta>
	</class>
	<class path="python.ZeroDivisionError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ArithmeticError"/>
		<meta><m n=":native"><e>"ZeroDivisionError"</e></m></meta>
	</class>
	<class path="python.ImportError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"ImportError"</e></m></meta>
	</class>
	<class path="python.LookupError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"LookupError"</e></m></meta>
	</class>
	<class path="python.IndexError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.LookupError"/>
		<meta><m n=":native"><e>"IndexError"</e></m></meta>
	</class>
	<class path="python.KeyError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.LookupError"/>
		<meta><m n=":native"><e>"KeyError"</e></m></meta>
	</class>
	<class path="python.IOError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.EnvironmentError"/>
		<meta><m n=":native"><e>"IOError"</e></m></meta>
	</class>
	<class path="python.VMSError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"VMSError"</e></m></meta>
	</class>
	<class path="python.WindowsError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.OSError"/>
		<meta><m n=":native"><e>"WindowsError"</e></m></meta>
	</class>
	<class path="python.ValueError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"ValueError"</e></m></meta>
	</class>
	<class path="python.UnicodeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.ValueError"/>
		<meta><m n=":native"><e>"UnicodeError"</e></m></meta>
	</class>
	<class path="python.UnicodeDecodeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.UnicodeError"/>
		<meta><m n=":native"><e>"UnicodeDecodeError"</e></m></meta>
	</class>
	<class path="python.UnicodeEncodeError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.UnicodeError"/>
		<meta><m n=":native"><e>"UnicodeEncodeError"</e></m></meta>
	</class>
	<class path="python.UnicodeTranslateError" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.UnicodeError"/>
		<meta><m n=":native"><e>"UnicodeTranslateError"</e></m></meta>
	</class>
	<class path="python.Warning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Exception"/>
		<meta><m n=":native"><e>"Warning"</e></m></meta>
	</class>
	<class path="python.DeprecationWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"DeprecationWarning"</e></m></meta>
	</class>
	<class path="python.PendingDeprecationWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"PendingDeprecationWarning"</e></m></meta>
	</class>
	<class path="python.RuntimeWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"RuntimeWarning"</e></m></meta>
	</class>
	<class path="python.SyntaxWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"SyntaxWarning"</e></m></meta>
	</class>
	<class path="python.UserWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"UserWarning"</e></m></meta>
	</class>
	<class path="python.FutureWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"FutureWarning"</e></m></meta>
	</class>
	<class path="python.ImportWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"ImportWarning"</e></m></meta>
	</class>
	<class path="python.UnicodeWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"UnicodeWarning"</e></m></meta>
	</class>
	<class path="python.BytesWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"BytesWarning"</e></m></meta>
	</class>
	<class path="python.ResourceWarning" params="" file="C:\HaxeToolkit\haxe\std/python/Exceptions.hx" module="python.Exceptions" extern="1">
		<extends path="python.Warning"/>
		<meta><m n=":native"><e>"ResourceWarning"</e></m></meta>
	</class>
	<class path="python.HaxeIterable" params="T" file="C:\HaxeToolkit\haxe\std/python/HaxeIterable.hx">
		<x><t path="python.NativeIterableRaw"><c path="python.HaxeIterable.T"/></t></x>
		<iterator public="1" get="inline" set="null" line="34"><f a=""><c path="python.HaxeIterator"><c path="python.HaxeIterable.T"/></c></f></iterator>
		<new public="1" get="inline" set="null" line="30"><f a="x">
	<t path="python.NativeIterableRaw"><c path="python.HaxeIterable.T"/></t>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="python.KwArgs" params="T" file="C:\HaxeToolkit\haxe\std/python/KwArgs.hx">
		<from>
			<icast field="fromDict"><c path="python.Dict">
	<c path="String"/>
	<d/>
</c></icast>
			<icast field="fromT"><c path="fromT.T"/></icast>
		</from>
		<this><c path="python.Dict">
	<c path="String"/>
	<d/>
</c></this>
		<to><icast field="toDict"><c path="python.Dict">
	<c path="String"/>
	<d/>
</c></icast></to>
		<haxe_doc><![CDATA[This type represents python `**kwargs` feature, supporting
	passing named arguments to a function.

	Example:

        function f(kwargs:KwArgs<{a:Int}>) {}
        f({a: 10});]]></haxe_doc>
		<impl><class path="python._KwArgs.KwArgs_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/KwArgs.hx" private="1" module="python.KwArgs">
	<_new get="inline" set="null" line="36" static="1">
		<f a="d">
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
			<x path="python.KwArgs"><c path="python.KwArgs.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<toDict public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toDict>
	<toDictHelper set="method" line="46" static="1">
		<f a="this:x">
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
			<c path="python.KwArgs.T"/>
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
		</f>
		<meta><m n=":impl"/></meta>
	</toDictHelper>
	<fromDict get="inline" set="null" line="50" static="1">
		<f a="d">
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
			<x path="python.KwArgs"><d/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromDict>
	<fromT params="T" set="method" line="54" static="1">
		<f a="d">
			<c path="fromT.T"/>
			<x path="python.KwArgs"><c path="fromT.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromT>
	<typed public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
			<c path="python.KwArgs.T"/>
		</f>
		<meta><m n=":impl"/></meta>
	</typed>
	<get public="1" params="V" get="inline" set="null" line="62" static="1">
		<f a="this:key:def">
			<c path="python.Dict">
				<c path="String"/>
				<d/>
			</c>
			<c path="String"/>
			<c path="get.V"/>
			<c path="get.V"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
</class></impl>
	</abstract>
	<class path="python._KwArgs.KwArgs_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/KwArgs.hx" private="1" module="python.KwArgs">
		<_new get="inline" set="null" line="36" static="1">
			<f a="d">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<x path="python.KwArgs"><c path="python.KwArgs.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<toDict public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toDict>
		<toDictHelper set="method" line="46" static="1">
			<f a="this:x">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<c path="python.KwArgs.T"/>
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta><m n=":impl"/></meta>
		</toDictHelper>
		<fromDict get="inline" set="null" line="50" static="1">
			<f a="d">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<x path="python.KwArgs"><d/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromDict>
		<fromT params="T" set="method" line="54" static="1">
			<f a="d">
				<c path="fromT.T"/>
				<x path="python.KwArgs"><c path="fromT.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromT>
		<typed public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<c path="python.KwArgs.T"/>
			</f>
			<meta><m n=":impl"/></meta>
		</typed>
		<get public="1" params="V" get="inline" set="null" line="62" static="1">
			<f a="this:key:def">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<c path="String"/>
				<c path="get.V"/>
				<c path="get.V"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
	</class>
	<typedef path="python.PySys" params="" file="C:\HaxeToolkit\haxe\std/python/Lib.hx" module="python.Lib"><c path="python.lib.Sys"/></typedef>
	<class path="python.Lib" params="" file="C:\HaxeToolkit\haxe\std/python/Lib.hx">
		<print public="1" set="method" line="32" static="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<println public="1" set="method" line="39" static="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></println>
		<dictToAnon public="1" set="method" line="49" static="1">
			<f a="v">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<d/>
			</f>
			<haxe_doc>Returns an anonymous Object which holds the same data as the Dictionary `v`.</haxe_doc>
		</dictToAnon>
		<anonToDict public="1" set="method" line="58" static="1">
			<f a="o">
				<a/>
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta><m n=":access"><e>python.Boot.isAnonObject</e></m></meta>
			<haxe_doc>Returns a flat copy of the underlying Dictionary of `o`.</haxe_doc>
		</anonToDict>
		<anonAsDict public="1" set="method" line="72" static="1">
			<f a="o">
				<a/>
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta><m n=":access"><e>python.Boot.isAnonObject</e></m></meta>
			<haxe_doc>Returns the underlying Dictionary of the anonymous object `o`.
	 	Modifications to this dictionary are reflected in the anonymous Object too.</haxe_doc>
		</anonAsDict>
		<dictAsAnon public="1" set="method" line="84" static="1">
			<f a="d">
				<c path="python.Dict">
					<c path="String"/>
					<d/>
				</c>
				<d/>
			</f>
			<haxe_doc>Returns the Dictionary `d` as an anonymous Object.
	 	Modifications to the object are reflected in the Dictionary too.</haxe_doc>
		</dictAsAnon>
		<toPythonIterable public="1" params="T" set="method" line="88" static="1"><f a="it">
	<t path="Iterable"><c path="toPythonIterable.T"/></t>
	<x path="python.NativeIterable"><c path="toPythonIterable.T"/></x>
</f></toPythonIterable>
		<toHaxeIterable public="1" params="T" get="inline" set="null" line="108" static="1"><f a="it">
	<x path="python.NativeIterable"><c path="toHaxeIterable.T"/></x>
	<c path="python.HaxeIterable"><c path="toHaxeIterable.T"/></c>
</f></toHaxeIterable>
		<toHaxeIterator public="1" params="T" get="inline" set="null" line="112" static="1"><f a="it">
	<x path="python.NativeIterator"><c path="toHaxeIterator.T"/></x>
	<c path="python.HaxeIterator"><c path="toHaxeIterator.T"/></c>
</f></toHaxeIterator>
	</class>
	<class path="python.NativeArrayTools" params="" file="C:\HaxeToolkit\haxe\std/python/NativeArrayTools.hx">
		<extend public="1" params="T" get="inline" set="null" line="26" static="1"><f a="a:x">
	<c path="Array"><c path="extend.T"/></c>
	<c path="Array"><c path="extend.T"/></c>
	<x path="Void"/>
</f></extend>
		<append public="1" params="T" get="inline" set="null" line="30" static="1"><f a="a:x">
	<c path="Array"><c path="append.T"/></c>
	<c path="append.T"/>
	<x path="Void"/>
</f></append>
		<contains public="1" params="T" get="inline" set="null" line="34" static="1"><f a="a:x">
	<c path="Array"><c path="contains.T"/></c>
	<c path="contains.T"/>
	<x path="Bool"/>
</f></contains>
	</class>
	<abstract path="python.NativeIterable" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterable.hx">
		<from><icast><t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t></icast></from>
		<this><t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t></this>
		<to>
			<icast><t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t></icast>
			<icast field="toHaxeIterable"><c path="python.HaxeIterable"><c path="python.NativeIterable.T"/></c></icast>
		</to>
		<haxe_doc>This type represents native python iterables (objects that implement __iter__() method).
    It supports haxe iteration and conversion to `Iterable` by creating wrapper objects.</haxe_doc>
		<impl><class path="python._NativeIterable.NativeIterable_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/NativeIterable.hx" private="1" module="python.NativeIterable">
	<toHaxeIterable public="1" get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t>
			<c path="python.HaxeIterable"><c path="python.NativeIterable.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Return haxe `Iterable` object wrapping `this` native iterable.</haxe_doc>
	</toHaxeIterable>
	<iterator public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t>
			<c path="python.HaxeIterator"><c path="python.NativeIterable.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Return haxe `Iterator` object by wrapping `this.__iter__()` native iterator.</haxe_doc>
	</iterator>
</class></impl>
	</abstract>
	<class path="python._NativeIterable.NativeIterable_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/NativeIterable.hx" private="1" module="python.NativeIterable">
		<toHaxeIterable public="1" get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t>
				<c path="python.HaxeIterable"><c path="python.NativeIterable.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Return haxe `Iterable` object wrapping `this` native iterable.</haxe_doc>
		</toHaxeIterable>
		<iterator public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="python.NativeIterableRaw"><c path="python.NativeIterable.T"/></t>
				<c path="python.HaxeIterator"><c path="python.NativeIterable.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Return haxe `Iterator` object by wrapping `this.__iter__()` native iterator.</haxe_doc>
		</iterator>
	</class>
	<typedef path="python.NativeIterableRaw" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterable.hx" module="python.NativeIterable">
		<a><__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.NativeIterableRaw.T"/></x></f></__iter__></a>
		<haxe_doc>Native python iterable protocol.</haxe_doc>
	</typedef>
	<abstract path="python.NativeIterator" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterator.hx">
		<this><t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t></this>
		<to>
			<icast><x path="python.NativeIterable"><c path="python.NativeIterator.T"/></x></icast>
			<icast><t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t></icast>
			<icast field="toHaxeIterator"><c path="python.HaxeIterator"><c path="python.NativeIterator.T"/></c></icast>
		</to>
		<haxe_doc>This type represents native python iterators.
    It supports automatic conversion to haxe `Iterator` by creating wrapper object.</haxe_doc>
		<impl><class path="python._NativeIterator.NativeIterator_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/NativeIterator.hx" private="1" module="python.NativeIterator">
	<_new public="1" get="inline" set="null" line="31" static="1">
		<f a="p">
			<t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t>
			<x path="python.NativeIterator"><c path="python.NativeIterator.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<toHaxeIterator public="1" get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t>
			<c path="python.HaxeIterator"><c path="python.NativeIterator.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Return haxe `Iterator` object by wrapping `this` native iterator.</haxe_doc>
	</toHaxeIterator>
</class></impl>
	</abstract>
	<class path="python._NativeIterator.NativeIterator_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/NativeIterator.hx" private="1" module="python.NativeIterator">
		<_new public="1" get="inline" set="null" line="31" static="1">
			<f a="p">
				<t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t>
				<x path="python.NativeIterator"><c path="python.NativeIterator.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<toHaxeIterator public="1" get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="python.NativeIteratorRaw"><c path="python.NativeIterator.T"/></t>
				<c path="python.HaxeIterator"><c path="python.NativeIterator.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Return haxe `Iterator` object by wrapping `this` native iterator.</haxe_doc>
		</toHaxeIterator>
	</class>
	<typedef path="python.NativeIteratorRaw" params="T" file="C:\HaxeToolkit\haxe\std/python/NativeIterator.hx" module="python.NativeIterator">
		<a>
			<__next__ set="method"><f a=""><c path="python.NativeIteratorRaw.T"/></f></__next__>
			<__iter__ set="method"><f a=""><x path="python.NativeIterator"><c path="python.NativeIteratorRaw.T"/></x></f></__iter__>
		</a>
		<haxe_doc>Native python iterator protocol.</haxe_doc>
	</typedef>
	<class path="python.NativeStringTools" params="" file="C:\HaxeToolkit\haxe\std/python/NativeStringTools.hx">
		<format public="1" set="method" line="29" static="1"><f a="s:args">
	<c path="String"/>
	<c path="Array"><d/></c>
	<c path="String"/>
</f></format>
		<encode public="1" get="inline" set="null" line="34" static="1">
			<f a="s:?encoding:?errors" v=":&quot;utf-8&quot;:&quot;strict&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="python.Bytes"/>
			</f>
			<meta><m n=":value"><e>{errors:"strict",encoding:"utf-8"}</e></m></meta>
		</encode>
		<contains public="1" get="inline" set="null" line="38" static="1"><f a="s:e">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></contains>
		<strip public="1" get="inline" set="null" line="42" static="1"><f a="s:?chars">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></strip>
		<rpartition public="1" get="inline" set="null" line="47" static="1"><f a="s:sep">
	<c path="String"/>
	<c path="String"/>
	<c path="python.Tuple3">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
	</c>
</f></rpartition>
	</class>
	<class path="python.Tuple" params="X" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" extern="1">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" get="inline" set="null" line="34"><f a=""><x path="Int"/></f></get_length>
		<toArray public="1" get="inline" set="null" line="38"><f a=""><c path="Array"><c path="python.Tuple.X"/></c></f></toArray>
		<new public="1" set="method">
			<f a="a">
				<c path="Array"><c path="python.Tuple.X"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple1" params="A" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A" get="inline" set="null" line="45" static="1"><f a="a">
	<c path="make.A"/>
	<c path="python.Tuple1"><c path="make.A"/></c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple1.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="47"><f a=""><c path="python.Tuple1.A"/></f></get__1>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple2" params="A:B" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B" get="inline" set="null" line="52" static="1"><f a="a:b">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="python.Tuple2">
		<c path="make.A"/>
		<c path="make.B"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple2.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="54"><f a=""><c path="python.Tuple2.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple2.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="56"><f a=""><c path="python.Tuple2.B"/></f></get__2>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple3" params="A:B:C" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B:C" get="inline" set="null" line="61" static="1"><f a="a:b:c">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="make.C"/>
	<c path="python.Tuple3">
		<c path="make.A"/>
		<c path="make.B"/>
		<c path="make.C"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple3.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="63"><f a=""><c path="python.Tuple3.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple3.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="65"><f a=""><c path="python.Tuple3.B"/></f></get__2>
		<_3 public="1" get="accessor" set="null"><c path="python.Tuple3.C"/></_3>
		<get__3 public="1" get="inline" set="null" line="67"><f a=""><c path="python.Tuple3.C"/></f></get__3>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple4" params="A:B:C:D" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B:C:D" get="inline" set="null" line="72" static="1"><f a="a:b:c:d">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="make.C"/>
	<c path="make.D"/>
	<c path="python.Tuple4">
		<c path="make.A"/>
		<c path="make.B"/>
		<c path="make.C"/>
		<c path="make.D"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple4.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="74"><f a=""><c path="python.Tuple4.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple4.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="76"><f a=""><c path="python.Tuple4.B"/></f></get__2>
		<_3 public="1" get="accessor" set="null"><c path="python.Tuple4.C"/></_3>
		<get__3 public="1" get="inline" set="null" line="78"><f a=""><c path="python.Tuple4.C"/></f></get__3>
		<_4 public="1" get="accessor" set="null"><c path="python.Tuple4.D"/></_4>
		<get__4 public="1" get="inline" set="null" line="80"><f a=""><c path="python.Tuple4.D"/></f></get__4>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<class path="python.Tuple5" params="A:B:C:D:E" file="C:\HaxeToolkit\haxe\std/python/Tuple.hx" module="python.Tuple" extern="1">
		<extends path="python.Tuple"><d/></extends>
		<make public="1" params="A:B:C:D:E" get="inline" set="null" line="85" static="1"><f a="a:b:c:d:e">
	<c path="make.A"/>
	<c path="make.B"/>
	<c path="make.C"/>
	<c path="make.D"/>
	<c path="make.E"/>
	<c path="python.Tuple5">
		<c path="make.A"/>
		<c path="make.B"/>
		<c path="make.C"/>
		<c path="make.D"/>
		<c path="make.E"/>
	</c>
</f></make>
		<_1 public="1" get="accessor" set="null"><c path="python.Tuple5.A"/></_1>
		<get__1 public="1" get="inline" set="null" line="87"><f a=""><c path="python.Tuple5.A"/></f></get__1>
		<_2 public="1" get="accessor" set="null"><c path="python.Tuple5.B"/></_2>
		<get__2 public="1" get="inline" set="null" line="89"><f a=""><c path="python.Tuple5.B"/></f></get__2>
		<_3 public="1" get="accessor" set="null"><c path="python.Tuple5.C"/></_3>
		<get__3 public="1" get="inline" set="null" line="91"><f a=""><c path="python.Tuple5.C"/></f></get__3>
		<_4 public="1" get="accessor" set="null"><c path="python.Tuple5.D"/></_4>
		<get__4 public="1" get="inline" set="null" line="93"><f a=""><c path="python.Tuple5.D"/></f></get__4>
		<_5 public="1" get="accessor" set="null"><c path="python.Tuple5.E"/></_5>
		<get__5 public="1" get="inline" set="null" line="95"><f a=""><c path="python.Tuple5.E"/></f></get__5>
		<meta><m n=":native"><e>"tuple"</e></m></meta>
	</class>
	<abstract path="python.VarArgs" params="T" file="C:\HaxeToolkit\haxe\std/python/VarArgs.hx">
		<from><icast field="fromArray"><c path="Array"><c path="fromArray.T"/></c></icast></from>
		<this><d/></this>
		<to><icast field="toArray"><c path="Array"><c path="python.VarArgs.T"/></c></icast></to>
		<haxe_doc><![CDATA[This type represents python `*args` feature, supporting
	passing arbitrary number of arguments to a function.

	Example:

		function f(args:VarArgs<Int>) {}
		f([1, 2, 3]);]]></haxe_doc>
		<meta><m n=":analyzer"><e>no_simplification</e></m></meta>
		<impl><class path="python._VarArgs.VarArgs_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/VarArgs.hx" private="1" module="python.VarArgs">
	<_new get="inline" set="null" line="37" static="1">
		<f a="d">
			<c path="Array"><c path="python.VarArgs.T"/></c>
			<x path="python.VarArgs"><c path="python.VarArgs.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<raw get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<d/>
		</f>
		<meta><m n=":impl"/></meta>
	</raw>
	<toArray public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<d/>
			<c path="Array"><c path="python.VarArgs.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromArray params="T" get="inline" set="null" line="49" static="1">
		<f a="d">
			<c path="Array"><c path="fromArray.T"/></c>
			<x path="python.VarArgs"><c path="fromArray.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
</class></impl>
	</abstract>
	<class path="python._VarArgs.VarArgs_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/VarArgs.hx" private="1" module="python.VarArgs">
		<_new get="inline" set="null" line="37" static="1">
			<f a="d">
				<c path="Array"><c path="python.VarArgs.T"/></c>
				<x path="python.VarArgs"><c path="python.VarArgs.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<raw get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<d/>
			</f>
			<meta><m n=":impl"/></meta>
		</raw>
		<toArray public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<d/>
				<c path="Array"><c path="python.VarArgs.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromArray params="T" get="inline" set="null" line="49" static="1">
			<f a="d">
				<c path="Array"><c path="fromArray.T"/></c>
				<x path="python.VarArgs"><c path="fromArray.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
	</class>
	<class path="python.internal.AnonObject" params="" file="C:\HaxeToolkit\haxe\std/python/internal/AnonObject.hx">
		<new public="1" set="method" line="26"><f a="fields">
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"_hx_AnonObject"</e></m></meta>
	</class>
	<class path="python.internal.ArrayImpl" params="" file="C:\HaxeToolkit\haxe\std/python/internal/ArrayImpl.hx">
		<get_length public="1" params="T" get="inline" set="null" line="31" static="1">
			<f a="x">
				<c path="Array"><c path="get_length.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.length"</e>
	<e>"anon_optional_read.length"</e>
</m></meta>
		</get_length>
		<concat public="1" params="T" get="inline" set="null" line="34" static="1">
			<f a="a1:a2">
				<c path="Array"><c path="concat.T"/></c>
				<c path="Array"><c path="concat.T"/></c>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.concat"</e>
	<e>"anon_optional_read.concat"</e>
</m></meta>
		</concat>
		<copy public="1" params="T" get="inline" set="null" line="39" static="1">
			<f a="x">
				<c path="Array"><c path="copy.T"/></c>
				<c path="Array"><c path="copy.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.copy"</e>
	<e>"anon_optional_read.copy"</e>
</m></meta>
		</copy>
		<iterator public="1" params="T" get="inline" set="null" line="44" static="1">
			<f a="x">
				<c path="Array"><c path="iterator.T"/></c>
				<t path="Iterator"><c path="iterator.T"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.iterator"</e>
	<e>"anon_optional_read.iterator"</e>
</m></meta>
		</iterator>
		<indexOf public="1" params="T" set="method" line="49" static="1">
			<f a="a:x:?fromIndex">
				<c path="Array"><c path="indexOf.T"/></c>
				<c path="indexOf.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.indexOf"</e>
	<e>"anon_optional_read.indexOf"</e>
</m></meta>
		</indexOf>
		<lastIndexOf public="1" params="T" set="method" line="63" static="1">
			<f a="a:x:?fromIndex">
				<c path="Array"><c path="lastIndexOf.T"/></c>
				<c path="lastIndexOf.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.lastIndexOf"</e>
	<e>"anon_optional_read.lastIndexOf"</e>
</m></meta>
		</lastIndexOf>
		<join public="1" params="T" get="inline" set="null" line="78" static="1">
			<f a="x:sep">
				<c path="Array"><c path="join.T"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":access"><e>python.Boot</e></m>
				<m n=":ifFeature">
					<e>"dynamic_read.join"</e>
					<e>"anon_optional_read.join"</e>
				</m>
			</meta>
		</join>
		<toString public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="x">
				<c path="Array"><c path="toString.T"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toString"</e>
	<e>"anon_optional_read.toString"</e>
</m></meta>
		</toString>
		<pop public="1" params="T" get="inline" set="null" line="88" static="1">
			<f a="x">
				<c path="Array"><c path="pop.T"/></c>
				<t path="Null"><c path="pop.T"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.pop"</e>
	<e>"anon_optional_read.pop"</e>
</m></meta>
		</pop>
		<push public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="x:e">
				<c path="Array"><c path="push.T"/></c>
				<c path="push.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.push"</e>
	<e>"anon_optional_read.push"</e>
</m></meta>
		</push>
		<unshift public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="x:e">
				<c path="Array"><c path="unshift.T"/></c>
				<c path="unshift.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.unshift"</e>
	<e>"anon_optional_read.unshift"</e>
</m></meta>
		</unshift>
		<remove public="1" params="T" set="method" line="104" static="1">
			<f a="x:e">
				<c path="Array"><c path="remove.T"/></c>
				<c path="remove.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.remove"</e>
	<e>"anon_optional_read.remove"</e>
</m></meta>
		</remove>
		<shift public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="x">
				<c path="Array"><c path="shift.T"/></c>
				<t path="Null"><c path="shift.T"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.shift"</e>
	<e>"anon_optional_read.shift"</e>
</m></meta>
		</shift>
		<slice public="1" params="T" get="inline" set="null" line="120" static="1">
			<f a="x:pos:?end">
				<c path="Array"><c path="slice.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="slice.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.slice"</e>
	<e>"anon_optional_read.slice"</e>
</m></meta>
		</slice>
		<sort public="1" params="T" get="inline" set="null" line="124" static="1">
			<f a="x:f">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.sort"</e>
	<e>"anon_optional_read.sort"</e>
</m></meta>
		</sort>
		<splice public="1" params="T" get="inline" set="null" line="129" static="1">
			<f a="x:pos:len">
				<c path="Array"><c path="splice.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="splice.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.splice"</e>
	<e>"anon_optional_read.splice"</e>
</m></meta>
		</splice>
		<map public="1" params="S:T" get="inline" set="null" line="138" static="1">
			<f a="x:f">
				<c path="Array"><c path="map.T"/></c>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.map"</e>
	<e>"anon_optional_read.map"</e>
</m></meta>
		</map>
		<filter public="1" params="T" get="inline" set="null" line="143" static="1">
			<f a="x:f">
				<c path="Array"><c path="filter.T"/></c>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.T"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.filter"</e>
	<e>"anon_optional_read.filter"</e>
</m></meta>
		</filter>
		<insert public="1" params="T" get="inline" set="null" line="148" static="1">
			<f a="a:pos:x">
				<c path="Array"><c path="insert.T"/></c>
				<x path="Int"/>
				<c path="insert.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.insert"</e>
	<e>"anon_optional_read.insert"</e>
</m></meta>
		</insert>
		<reverse public="1" params="T" get="inline" set="null" line="152" static="1">
			<f a="a">
				<c path="Array"><c path="reverse.T"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.reverse"</e>
	<e>"anon_optional_read.reverse"</e>
</m></meta>
		</reverse>
		<_get params="T" get="inline" set="null" line="157" static="1">
			<f a="x:idx">
				<c path="Array"><c path="_get.T"/></c>
				<x path="Int"/>
				<c path="_get.T"/>
			</f>
			<meta><m n=":ifFeature"><e>"array_read"</e></m></meta>
		</_get>
		<_set params="T" get="inline" set="null" line="162" static="1">
			<f a="x:idx:v">
				<c path="Array"><c path="_set.T"/></c>
				<x path="Int"/>
				<c path="_set.T"/>
				<c path="_set.T"/>
			</f>
			<meta><m n=":ifFeature"><e>"array_write"</e></m></meta>
		</_set>
		<unsafeGet public="1" params="T" get="inline" set="null" line="176" static="1"><f a="x:idx">
	<c path="Array"><c path="unsafeGet.T"/></c>
	<x path="Int"/>
	<c path="unsafeGet.T"/>
</f></unsafeGet>
		<unsafeSet public="1" params="T" get="inline" set="null" line="180" static="1"><f a="x:idx:val">
	<c path="Array"><c path="unsafeSet.T"/></c>
	<x path="Int"/>
	<c path="unsafeSet.T"/>
	<c path="unsafeSet.T"/>
</f></unsafeSet>
		<meta><m n=":allow"><e>Array</e></m></meta>
	</class>
	<class path="python.internal.EnumImpl" params="" file="C:\HaxeToolkit\haxe\std/python/internal/EnumImpl.hx">
		<tag public="1">
			<c path="String"/>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</tag>
		<index public="1">
			<x path="Int"/>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</index>
		<params public="1">
			<c path="Array"><d/></c>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</params>
		<__str__ set="method" line="44">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</__str__>
		<new public="1" set="method" line="37">
			<f a="tag:index:params">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"has_enum"</e>
	<e>"Enum.*"</e>
</m></meta>
		</new>
		<meta>
			<m n=":ifFeature">
				<e>"has_enum"</e>
				<e>"Enum.*"</e>
			</m>
			<m n=":native"><e>"Enum"</e></m>
		</meta>
	</class>
	<class path="python.internal.HxException" params="" file="C:\HaxeToolkit\haxe\std/python/internal/HxException.hx">
		<extends path="python.Exception"/>
		<val public="1">
			<d/>
			<meta><m n=":ifFeature"><e>"has_throw"</e></m></meta>
		</val>
		<new public="1" set="method" line="30">
			<f a="val">
				<unknown/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"has_throw"</e></m></meta>
		</new>
		<meta>
			<m n=":ifFeature"><e>"has_throw"</e></m>
			<m n=":native"><e>"_HxException"</e></m>
		</meta>
	</class>
	<class path="python.internal.Internal" params="" file="C:\HaxeToolkit\haxe\std/python/internal/Internal.hx">
		<getPrefixed public="1" set="method" static="1"><f a="x">
	<c path="String"/>
	<d/>
</f></getPrefixed>
		<classRegistry public="1" set="method" static="1"><f a=""><d/></f></classRegistry>
		<callFieldPrefixed public="1" set="method" static="1"><f a="o:x:params">
	<d/>
	<d/>
	<d/>
	<d/>
</f></callFieldPrefixed>
		<fieldPrefixed public="1" set="method" static="1"><f a="o:x">
	<d/>
	<d/>
	<d/>
</f></fieldPrefixed>
		<hasAttrPrefixed public="1" set="method" static="1"><f a="o:x">
	<d/>
	<d/>
	<d/>
</f></hasAttrPrefixed>
		<importAsPrefixed public="1" set="method" static="1"><f a="o:x">
	<d/>
	<d/>
	<d/>
</f></importAsPrefixed>
		<prefix public="1" set="method" static="1"><f a=""><d/></f></prefix>
		<pythonCodePrefixed public="1" set="method" static="1"><f a="x">
	<d/>
	<d/>
</f></pythonCodePrefixed>
		<hasClassName public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasClassName>
		<hasInterfaces public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasInterfaces>
		<hasClass public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasClass>
		<hasConstructs public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasConstructs>
		<hasEmptyInit public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasEmptyInit>
		<hasMethods public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasMethods>
		<hasFields public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasFields>
		<hasSuper public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasSuper>
		<hasStatics public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></hasStatics>
		<classNameVal public="1" set="method" static="1"><f a=""><d/></f></classNameVal>
		<methodsVal public="1" set="method" static="1"><f a=""><d/></f></methodsVal>
		<classVal public="1" set="method" static="1"><f a=""><d/></f></classVal>
		<superVal public="1" set="method" static="1"><f a=""><d/></f></superVal>
		<interfacesVal public="1" set="method" static="1"><f a=""><d/></f></interfacesVal>
		<fieldsVal public="1" set="method" static="1"><f a=""><d/></f></fieldsVal>
		<staticsVal public="1" set="method" static="1"><f a=""><d/></f></staticsVal>
		<constructsVal public="1" set="method" static="1"><f a=""><d/></f></constructsVal>
		<emptyInitVal public="1" set="method" static="1"><f a=""><d/></f></emptyInitVal>
		<fieldClassName public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldClassName>
		<fieldInterfaces public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldInterfaces>
		<fieldClass public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldClass>
		<fieldSuper public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldSuper>
		<fieldStatics public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldStatics>
		<fieldMethods public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldMethods>
		<fieldFields public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldFields>
		<fieldConstructs public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldConstructs>
		<fieldDict public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldDict>
		<fieldEmptyInit public="1" set="method" static="1"><f a="o">
	<d/>
	<d/>
</f></fieldEmptyInit>
		<callEmptyInit public="1" set="method" static="1"><f a="o:instance">
	<d/>
	<d/>
	<d/>
</f></callEmptyInit>
		<meta><m n=":noPackageRestrict"/></meta>
	</class>
	<class path="python.internal.StringImpl" params="" file="C:\HaxeToolkit\haxe\std/python/internal/StringImpl.hx">
		<split public="1" get="inline" set="null" line="30" static="1">
			<f a="s:d">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.split"</e>
	<e>"anon_optional_read.split"</e>
</m></meta>
		</split>
		<charCodeAt public="1" set="method" line="35" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.charCodeAt"</e>
	<e>"anon_optional_read.charCodeAt"</e>
</m></meta>
		</charCodeAt>
		<charAt public="1" get="inline" set="null" line="42" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.charAt"</e>
	<e>"anon_optional_read.charAt"</e>
</m></meta>
		</charAt>
		<lastIndexOf public="1" get="inline" set="null" line="47" static="1">
			<f a="s:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.lastIndexOf"</e>
	<e>"anon_optional_read.lastIndexOf"</e>
</m></meta>
		</lastIndexOf>
		<toUpperCase public="1" get="inline" set="null" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toUpperCase"</e>
	<e>"anon_optional_read.toUpperCase"</e>
</m></meta>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="68" static="1">
			<f a="s">
				<c path="String"/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toLowerCase"</e>
	<e>"anon_optional_read.toLowerCase"</e>
</m></meta>
		</toLowerCase>
		<indexOf public="1" get="inline" set="null" line="72" static="1">
			<f a="s:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.indexOf"</e>
	<e>"anon_optional_read.indexOf"</e>
</m></meta>
		</indexOf>
		<toString public="1" get="inline" set="null" line="79" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.toString"</e>
	<e>"anon_optional_read.toString"</e>
</m></meta>
		</toString>
		<get_length public="1" get="inline" set="null" line="83" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.length"</e>
	<e>"anon_optional_read.length"</e>
</m></meta>
		</get_length>
		<fromCharCode public="1" get="inline" set="null" line="87" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.fromCharCode"</e>
	<e>"anon_optional_read.fromCharCode"</e>
</m></meta>
		</fromCharCode>
		<substring public="1" set="method" line="95" static="1">
			<f a="s:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.substring"</e>
	<e>"anon_optional_read.substring"</e>
</m></meta>
		</substring>
		<substr public="1" set="method" line="111" static="1">
			<f a="s:startIndex:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ifFeature">
	<e>"dynamic_read.substr"</e>
	<e>"anon_optional_read.substr"</e>
</m></meta>
		</substr>
		<meta><m n=":native"><e>"HxString"</e></m></meta>
	</class>
	<class path="python.io.NativeInput" params="T" file="C:\HaxeToolkit\haxe\std/python/io/NativeInput.hx">
		<extends path="haxe.io.Input"/>
		<stream><c path="python.io.NativeInput.T"/></stream>
		<wasEof><x path="Bool"/></wasEof>
		<canSeek public="1" get="accessor" set="null"><x path="Bool"/></canSeek>
		<get_canSeek set="method" line="43"><f a=""><x path="Bool"/></f></get_canSeek>
		<close public="1" set="method" line="48" override="1"><f a=""><x path="Void"/></f></close>
		<tell public="1" set="method" line="53"><f a=""><x path="Int"/></f></tell>
		<throwEof set="method" line="58"><f a=""><x path="Void"/></f></throwEof>
		<eof public="1" set="method" line="63"><f a=""><x path="Bool"/></f></eof>
		<readinto set="method" line="67"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></readinto>
		<seek set="method" line="71"><f a="p:mode">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<readBytes public="1" set="method" line="75" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new set="method" line="35"><f a="s">
	<c path="python.io.NativeInput.T"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.IInput" params="" file="C:\HaxeToolkit\haxe\std/python/io/IInput.hx" interface="1">
		<set_bigEndian public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":compilerGenerated"/></meta>
		</set_bigEndian>
		<bigEndian public="1" set="accessor"><x path="Bool"/></bigEndian>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<readAll public="1" set="method"><f a="?bufsize">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFullBytes>
		<read public="1" set="method"><f a="nbytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method"><f a="end">
	<x path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readInt8 public="1" set="method"><f a=""><x path="Int"/></f></readInt8>
		<readInt16 public="1" set="method"><f a=""><x path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method"><f a=""><x path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method"><f a=""><x path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method"><f a=""><x path="Int"/></f></readUInt24>
		<readInt32 public="1" set="method"><f a=""><x path="Int"/></f></readInt32>
		<readString public="1" set="method"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
	</class>
	<class path="python.io.NativeBytesInput" params="" file="C:\HaxeToolkit\haxe\std/python/io/NativeBytesInput.hx">
		<extends path="python.io.NativeInput"><c path="python.lib.io.RawIOBase"/></extends>
		<implements path="python.io.IInput"/>
		<readByte public="1" set="method" line="42" override="1"><f a=""><x path="Int"/></f></readByte>
		<seek public="1" set="method" line="52" override="1"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<readinto set="method" line="58" override="1"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></readinto>
		<new public="1" set="method" line="37"><f a="stream">
	<c path="python.lib.io.RawIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.IFileInput" params="" file="C:\HaxeToolkit\haxe\std/python/io/IFileInput.hx" interface="1">
		<extends path="python.io.IInput"/>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<eof public="1" set="method"><f a=""><x path="Bool"/></f></eof>
	</class>
	<class path="python.io.FileBytesInput" params="" file="C:\HaxeToolkit\haxe\std/python/io/FileBytesInput.hx">
		<extends path="python.io.NativeBytesInput"/>
		<implements path="python.io.IFileInput"/>
		<new public="1" set="method" line="31"><f a="stream">
	<c path="python.lib.io.RawIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.NativeOutput" params="T" file="C:\HaxeToolkit\haxe\std/python/io/NativeOutput.hx">
		<extends path="haxe.io.Output"/>
		<stream><c path="python.io.NativeOutput.T"/></stream>
		<canSeek public="1" get="accessor" set="null"><x path="Bool"/></canSeek>
		<close public="1" set="method" line="40" override="1"><f a=""><x path="Void"/></f></close>
		<get_canSeek set="method" line="45"><f a=""><x path="Bool"/></f></get_canSeek>
		<prepare public="1" set="method" line="50" override="1"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></prepare>
		<flush public="1" set="method" line="55" override="1"><f a=""><x path="Void"/></f></flush>
		<tell public="1" set="method" line="61"><f a=""><x path="Int"/></f></tell>
		<new public="1" set="method" line="35"><f a="stream">
	<c path="python.io.NativeOutput.T"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.NativeBytesOutput" params="" file="C:\HaxeToolkit\haxe\std/python/io/NativeBytesOutput.hx">
		<extends path="python.io.NativeOutput"><c path="python.lib.io.RawIOBase"/></extends>
		<seek public="1" set="method" line="36"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<prepare public="1" set="method" line="41" override="1"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></prepare>
		<writeByte public="1" set="method" line="46" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<new public="1" set="method" line="32"><f a="stream">
	<c path="python.lib.io.RawIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.IOutput" params="" file="C:\HaxeToolkit\haxe\std/python/io/IOutput.hx" interface="1">
		<set_bigEndian public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":compilerGenerated"/></meta>
		</set_bigEndian>
		<bigEndian public="1" set="accessor"><x path="Bool"/></bigEndian>
		<writeByte public="1" set="method"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<write public="1" set="method"><f a="s">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt24>
		<writeInt32 public="1" set="method"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></prepare>
		<writeInput public="1" set="method"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeInput>
		<writeString public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
	</class>
	<class path="python.io.IFileOutput" params="" file="C:\HaxeToolkit\haxe\std/python/io/IFileOutput.hx" interface="1">
		<extends path="python.io.IOutput"/>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
	</class>
	<class path="python.io.FileBytesOutput" params="" file="C:\HaxeToolkit\haxe\std/python/io/FileBytesOutput.hx">
		<extends path="python.io.NativeBytesOutput"/>
		<implements path="python.io.IFileOutput"/>
		<new public="1" set="method" line="29"><f a="stream">
	<c path="python.lib.io.RawIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.NativeTextInput" params="" file="C:\HaxeToolkit\haxe\std/python/io/NativeTextInput.hx">
		<extends path="python.io.NativeInput"><c path="python.lib.io.TextIOBase"/></extends>
		<implements path="python.io.IInput"/>
		<readByte public="1" set="method" line="42" override="1"><f a=""><x path="Int"/></f></readByte>
		<seek public="1" set="method" line="51" override="1"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<readinto set="method" line="57" override="1"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></readinto>
		<new public="1" set="method" line="38"><f a="stream">
	<c path="python.lib.io.TextIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.FileTextInput" params="" file="C:\HaxeToolkit\haxe\std/python/io/FileTextInput.hx">
		<extends path="python.io.NativeTextInput"/>
		<implements path="python.io.IFileInput"/>
		<new public="1" set="method" line="31"><f a="stream">
	<c path="python.lib.io.TextIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.NativeTextOutput" params="" file="C:\HaxeToolkit\haxe\std/python/io/NativeTextOutput.hx">
		<extends path="python.io.NativeOutput"><c path="python.lib.io.TextIOBase"/></extends>
		<seek public="1" set="method" line="38"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<writeByte public="1" set="method" line="43" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<new public="1" set="method" line="33"><f a="stream">
	<c path="python.lib.io.TextIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.FileTextOutput" params="" file="C:\HaxeToolkit\haxe\std/python/io/FileTextOutput.hx">
		<extends path="python.io.NativeTextOutput"/>
		<implements path="python.io.IFileOutput"/>
		<new public="1" set="method" line="29"><f a="stream">
	<c path="python.lib.io.TextIOBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="python.io.IoTools" params="" file="C:\HaxeToolkit\haxe\std/python/io/IoTools.hx">
		<createFileInputFromText public="1" set="method" line="38" static="1"><f a="t">
	<c path="python.lib.io.TextIOBase"/>
	<c path="sys.io.FileInput"/>
</f></createFileInputFromText>
		<createFileInputFromBytes public="1" set="method" line="42" static="1"><f a="t">
	<c path="python.lib.io.RawIOBase"/>
	<c path="sys.io.FileInput"/>
</f></createFileInputFromBytes>
		<createFileOutputFromText public="1" set="method" line="46" static="1"><f a="t">
	<c path="python.lib.io.TextIOBase"/>
	<c path="sys.io.FileOutput"/>
</f></createFileOutputFromText>
		<createFileOutputFromBytes public="1" set="method" line="50" static="1"><f a="t">
	<c path="python.lib.io.RawIOBase"/>
	<c path="sys.io.FileOutput"/>
</f></createFileOutputFromBytes>
		<seekInTextMode public="1" set="method" line="54" static="1"><f a="stream:tell:p:pos">
	<c path="python.lib.io.TextIOBase"/>
	<f a=""><x path="Int"/></f>
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seekInTextMode>
		<seekInBinaryMode public="1" set="method" line="71" static="1"><f a="stream:p:pos">
	<c path="python.lib.io.RawIOBase"/>
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seekInBinaryMode>
	</class>
	<class path="python.lib.Builtins" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Builtins.hx" extern="1">
		<abs public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><abs public="1" set="method"><f a="f">
	<x path="Int"/>
	<x path="Int"/>
</f></abs></overloads>
		</abs>
		<all public="1" set="method" static="1"><f a="i">
	<t path="Iterable"><x path="Bool"/></t>
	<x path="Bool"/>
</f></all>
		<any public="1" set="method" static="1"><f a="i">
	<t path="Iterable"><x path="Bool"/></t>
	<x path="Bool"/>
</f></any>
		<bool public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Bool"/>
</f></bool>
		<issubclass public="1" set="method" static="1"><f a="x:from">
	<x path="Class"><d/></x>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></issubclass>
		<callable public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Bool"/>
</f></callable>
		<isinstance public="1" set="method" static="1">
			<f a="obj:cl">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<overloads><isinstance public="1" set="method"><f a="obj:f">
	<d/>
	<c path="python.Tuple"><d/></c>
	<x path="Bool"/>
</f></isinstance></overloads>
		</isinstance>
		<hasattr public="1" set="method" static="1"><f a="obj:attr">
	<d/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasattr>
		<getattr public="1" set="method" static="1"><f a="obj:attr">
	<d/>
	<c path="String"/>
	<d/>
</f></getattr>
		<len public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads>
				<len public="1" set="method"><f a="f">
	<c path="python.Set"><d/></c>
	<x path="Int"/>
</f></len>
				<len public="1" set="method"><f a="f">
	<c path="StringBuf"/>
	<x path="Int"/>
</f></len>
				<len public="1" set="method"><f a="f">
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></len>
				<len public="1" set="method"><f a="f">
	<c path="python.Dict">
		<d/>
		<d/>
	</c>
	<x path="Int"/>
</f></len>
				<len public="1" set="method"><f a="f">
	<c path="python.Bytes"/>
	<x path="Int"/>
</f></len>
				<len public="1" set="method"><f a="f">
	<c path="python.DictView"><d/></c>
	<x path="Int"/>
</f></len>
				<len public="1" set="method"><f a="f">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></len>
				<len public="1" set="method"><f a="f">
	<c path="python.Tuple"><d/></c>
	<x path="Int"/>
</f></len>
			</overloads>
		</len>
		<open public="1" set="method" static="1">
			<f a="file:mode:?buffering:?encoding:?errors:?newline:?closefd:?opener" v="::-1:null::::">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<f a=":">
					<c path="String"/>
					<x path="Int"/>
					<c path="python.lib.FileDescriptor"/>
				</f>
				<c path="python.lib.io.IOBase"/>
			</f>
			<meta><m n=":value"><e>{encoding:null,buffering:-1}</e></m></meta>
		</open>
		<int public="1" set="method" static="1">
			<f a="x">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><int public="1" set="method"><f a="x:base">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></int></overloads>
		</int>
		<ord public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></ord>
		<str public="1" set="method" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></str>
		<print public="1" set="method" static="1"><f a="o">
	<d/>
	<x path="Void"/>
</f></print>
		<iter public="1" params="X" set="method" static="1"><f a="d">
	<c path="python.DictView"><c path="iter.X"/></c>
	<x path="python.NativeIterator"><c path="iter.X"/></x>
</f></iter>
		<type public="1" set="method" static="1"><f a=""><x path="Void"/></f></type>
		<float public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Float"/>
</f></float>
		<list public="1" params="T" set="method" static="1">
			<f a="i">
				<x path="python.NativeIterable"><c path="list.T"/></x>
				<c path="Array"><c path="list.T"/></c>
			</f>
			<overloads>
				<list public="1" params="T" set="method"><f a="f">
	<c path="Array"><c path="list.T"/></c>
	<c path="Array"><c path="list.T"/></c>
</f></list>
				<list public="1" params="T" set="method"><f a="f">
	<c path="python.Tuple"><c path="list.T"/></c>
	<c path="Array"><c path="list.T"/></c>
</f></list>
				<list public="1" params="T" set="method"><f a="f">
	<c path="python.DictView"><c path="list.T"/></c>
	<c path="Array"><c path="list.T"/></c>
</f></list>
				<list public="1" set="method"><f a="f">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></list>
			</overloads>
		</list>
		<filter public="1" params="A" set="method" static="1">
			<f a="f:i">
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
				<x path="python.NativeIterator"><c path="filter.A"/></x>
			</f>
			<overloads><filter public="1" params="A" set="method"><f a="f:i">
	<f a="">
		<c path="filter.A"/>
		<x path="Bool"/>
	</f>
	<x path="python.NativeIterable"><c path="filter.A"/></x>
	<x path="python.NativeIterator"><c path="filter.A"/></x>
</f></filter></overloads>
		</filter>
		<chr public="1" set="method" static="1"><f a="c">
	<x path="Int"/>
	<c path="String"/>
</f></chr>
		<map public="1" params="A:B" set="method" static="1"><f a="fn:it">
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<x path="python.NativeIterable"><c path="map.A"/></x>
	<x path="python.NativeIterator"><c path="map.B"/></x>
</f></map>
		<max public="1" set="method" static="1">
			<f a="a1:a2:rest">
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<overloads><max public="1" set="method"><f a="a1:a2:rest">
	<x path="Float"/>
	<x path="Float"/>
	<x path="haxe.extern.Rest"><x path="Float"/></x>
	<x path="Float"/>
</f></max></overloads>
		</max>
		<round public="1" set="method" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<min public="1" set="method" static="1">
			<f a="a1:a2:rest">
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<overloads><min public="1" set="method"><f a="a1:a2:rest">
	<x path="Float"/>
	<x path="Float"/>
	<x path="haxe.extern.Rest"><x path="Float"/></x>
	<x path="Float"/>
</f></min></overloads>
		</min>
		<delattr public="1" set="method" static="1"><f a="o:attr">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></delattr>
		<setattr public="1" set="method" static="1"><f a="o:attr:val">
	<d/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setattr>
		<id public="1" set="method" static="1"><f a="x">
	<a/>
	<x path="Int"/>
</f></id>
		<meta><m n=":pythonImport"><e>"builtins"</e></m></meta>
	</class>
	<class path="python.lib.Codecs" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Codecs.hx" extern="1">
		<open public="1" set="method" static="1"><f a="filename:mode:?encoding:?errors:?buffering">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="python.lib.codecs.StreamReaderWriter"/>
</f></open>
		<encode public="1" set="method" static="1">
			<f a="obj:?encoding:?errors" v=":&quot;utf-8&quot;:&quot;strict&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="python.Bytes"/>
			</f>
			<meta><m n=":value"><e>{errors:"strict",encoding:"utf-8"}</e></m></meta>
		</encode>
		<decode public="1" set="method" static="1">
			<f a="obj:?encoding:?errors" v=":&quot;utf-8&quot;:&quot;strict&quot;">
				<c path="python.Bytes"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{errors:"strict",encoding:"utf-8"}</e></m></meta>
		</decode>
		<meta><m n=":pythonImport"><e>"codecs"</e></m></meta>
	</class>
	<class path="python.lib.FileDescriptor" params="" file="C:\HaxeToolkit\haxe\std/python/lib/FileDescriptor.hx" extern="1"/>
	<typedef path="python.lib.FileObject" params="" file="C:\HaxeToolkit\haxe\std/python/lib/FileObject.hx"><c path="python.lib.io.IOBase"/></typedef>
	<class path="python.lib.Functools" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Functools.hx" extern="1">
		<cmp_to_key public="1" params="A" set="method" static="1"><f a="f">
	<f a=":">
		<c path="cmp_to_key.A"/>
		<c path="cmp_to_key.A"/>
		<x path="Int"/>
	</f>
	<d/>
</f></cmp_to_key>
		<meta><m n=":pythonImport"><e>"functools"</e></m></meta>
	</class>
	<class path="python.lib.Glob" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Glob.hx" extern="1">
		<glob public="1" set="method" static="1"><f a="pathname">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></glob>
		<iglob public="1" set="method" static="1"><f a="pathname">
	<c path="String"/>
	<x path="python.NativeIterator"><c path="String"/></x>
</f></iglob>
		<meta><m n=":pythonImport"><e>"glob"</e></m></meta>
	</class>
	<class path="python.lib.Inspect" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Inspect.hx" extern="1">
		<getmembers public="1" set="method" static="1"><f a="object:?predicate">
	<d/>
	<f a="">
		<d/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="python.Tuple2">
	<c path="String"/>
	<d/>
</c></c>
</f></getmembers>
		<ismethod public="1" set="method" static="1"><f a="object">
	<d/>
	<x path="Bool"/>
</f></ismethod>
		<isclass public="1" set="method" static="1"><f a="object">
	<d/>
	<x path="Bool"/>
</f></isclass>
		<isfunction public="1" set="method" static="1"><f a="object">
	<d/>
	<x path="Bool"/>
</f></isfunction>
		<meta><m n=":pythonImport"><e>"inspect"</e></m></meta>
	</class>
	<class path="python.lib.Io" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Io.hx" extern="1">
		<DEFAULT_BUFFER_SIZE public="1" static="1"><x path="Int"/></DEFAULT_BUFFER_SIZE>
		<open public="1" set="method" static="1">
			<f a="file:mode:?buffering:?encoding:?errors:?newline:?closefd:?opener" v="::-1:null::::">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<f a=":">
					<c path="String"/>
					<x path="Int"/>
					<c path="python.lib.FileDescriptor"/>
				</f>
				<c path="python.lib.io.IOBase"/>
			</f>
			<meta><m n=":value"><e>{encoding:null,buffering:-1}</e></m></meta>
		</open>
		<meta><m n=":pythonImport"><e>"io"</e></m></meta>
	</class>
	<typedef path="python.lib.JsonDumpsOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Json.hx" module="python.lib.Json"><a>
	<sort_keys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</sort_keys>
	<skipkeys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</skipkeys>
	<separators>
		<t path="Null"><c path="python.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></t>
		<meta><m n=":optional"/></meta>
	</separators>
	<indent>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</indent>
	<ensure_ascii>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ensure_ascii>
	<def>
		<t path="Null"><f a="">
	<d/>
	<c path="String"/>
</f></t>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"default"</e></m>
		</meta>
	</def>
	<cls>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</cls>
	<check_circular>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</check_circular>
	<allow_nan>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</allow_nan>
</a></typedef>
	<typedef path="python.lib.JsonLoadsOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Json.hx" module="python.lib.Json"><a>
	<object_hook>
		<t path="Null"><f a="">
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
	<d/>
</f></t>
		<meta><m n=":optional"/></meta>
	</object_hook>
	<encoding>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</encoding>
	<cls>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</cls>
</a></typedef>
	<class path="python.lib.Json" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Json.hx" extern="1">
		<loads public="1" set="method" static="1"><f a="s:?options">
	<c path="String"/>
	<x path="python.KwArgs"><t path="python.lib.JsonLoadsOptions"/></x>
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
</f></loads>
		<dumps public="1" set="method" static="1"><f a="x:?options">
	<d/>
	<x path="python.KwArgs"><t path="python.lib.JsonDumpsOptions"/></x>
	<c path="String"/>
</f></dumps>
		<meta><m n=":pythonImport"><e>"json"</e></m></meta>
	</class>
	<class path="python.lib.Msvcrt" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Msvcrt.hx" extern="1">
		<getch public="1" set="method" static="1"><f a=""><c path="python.Bytes"/></f></getch>
		<meta><m n=":pythonImport">
	<e>"msvcrt"</e>
	<e>ignoreError=true</e>
</m></meta>
	</class>
	<class path="python.lib.Stat" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Os.hx" module="python.lib.Os" extern="1">
		<st_mode public="1"><x path="Int"/></st_mode>
		<st_ino public="1"><x path="Int"/></st_ino>
		<st_dev public="1"><x path="Int"/></st_dev>
		<st_nlink public="1"><x path="Int"/></st_nlink>
		<st_uid public="1"><x path="Int"/></st_uid>
		<st_gid public="1"><x path="Int"/></st_gid>
		<st_size public="1"><x path="Int"/></st_size>
		<st_atime public="1"><x path="Int"/></st_atime>
		<st_mtime public="1"><x path="Int"/></st_mtime>
		<st_ctime public="1"><x path="Int"/></st_ctime>
		<st_blocks public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_blocks>
		<st_blksize public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_blksize>
		<st_rdev public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_rdev>
		<st_flags public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_flags>
		<st_gen public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_gen>
		<st_birthtime public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_birthtime>
		<st_rsize public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_rsize>
		<st_creator public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_creator>
		<st_type public="1">
			<x path="Int"/>
			<meta><m n=":optional"/></meta>
		</st_type>
	</class>
	<class path="python.lib.Pprint" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Pprint.hx" extern="1">
		<pprint public="1" set="method" static="1"><f a="x">
	<d/>
	<x path="Void"/>
</f></pprint>
		<pformat public="1" set="method" static="1">
			<f a="object:?indent:?width:?depth" v=":1:80:null">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{depth:null,width:80,indent:1}</e></m></meta>
		</pformat>
		<meta><m n=":pythonImport"><e>"pprint"</e></m></meta>
	</class>
	<class path="python.lib.Random" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Random.hx" extern="1">
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<meta><m n=":pythonImport"><e>"random"</e></m></meta>
	</class>
	<abstract path="python.lib._Re.Choice" params="A:B" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" private="1" module="python.lib.Re">
		<from>
			<icast field="fromA"><c path="fromA.A"/></icast>
			<icast field="fromB"><c path="fromB.B"/></icast>
		</from>
		<this><d/></this>
		<impl><class path="python.lib._Re.Choice_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" private="1" module="python.lib.Re">
	<fromA public="1" params="A:B" get="inline" set="null" line="28" static="1">
		<f a="x">
			<c path="fromA.A"/>
			<x path="python.lib._Re.Choice">
				<c path="fromA.A"/>
				<c path="fromA.B"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromA>
	<fromB public="1" params="A:B" get="inline" set="null" line="29" static="1">
		<f a="x">
			<c path="fromB.B"/>
			<x path="python.lib._Re.Choice">
				<c path="fromB.A"/>
				<c path="fromB.B"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromB>
</class></impl>
	</abstract>
	<class path="python.lib._Re.Choice_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" private="1" module="python.lib.Re">
		<fromA public="1" params="A:B" get="inline" set="null" line="28" static="1">
			<f a="x">
				<c path="fromA.A"/>
				<x path="python.lib._Re.Choice">
					<c path="fromA.A"/>
					<c path="fromA.B"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromA>
		<fromB public="1" params="A:B" get="inline" set="null" line="29" static="1">
			<f a="x">
				<c path="fromB.B"/>
				<x path="python.lib._Re.Choice">
					<c path="fromB.A"/>
					<c path="fromB.B"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromB>
	</class>
	<typedef path="python.lib.TODO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re"><d/></typedef>
	<typedef path="python.lib.Pattern" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re"><x path="python.lib._Re.Choice">
	<c path="String"/>
	<c path="python.lib.Regex"/>
</x></typedef>
	<typedef path="python.lib.Repl" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re"><x path="python.lib._Re.Choice">
	<c path="String"/>
	<f a="">
		<c path="python.lib.MatchObject"/>
		<c path="String"/>
	</f>
</x></typedef>
	<class path="python.lib.MatchObject" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re" extern="1">
		<pos public="1" set="null"><x path="Int"/></pos>
		<endpos public="1" set="null"><x path="Int"/></endpos>
		<lastindex public="1" set="null"><x path="Int"/></lastindex>
		<lastgroup public="1" set="null"><x path="Int"/></lastgroup>
		<re public="1" set="null"><c path="python.lib.Regex"/></re>
		<string public="1" set="null"><c path="String"/></string>
		<expand public="1" set="method"><f a="template">
	<c path="String"/>
	<c path="String"/>
</f></expand>
		<group public="1" set="method">
			<f a="?i" v="0">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{i:0}</e></m></meta>
			<overloads><group public="1" set="method"><f a="x">
	<c path="String"/>
	<c path="String"/>
</f></group></overloads>
		</group>
		<groups public="1" set="method">
			<f a="?defaultVal" v="null">
				<c path="String"/>
				<c path="python.Tuple"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{defaultVal:null}</e></m></meta>
		</groups>
		<groupdict public="1" set="method">
			<f a="?defaultVal" v="null">
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
			</f>
			<meta><m n=":value"><e>{defaultVal:null}</e></m></meta>
		</groupdict>
		<start public="1" set="method">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{i:0}</e></m></meta>
			<overloads><start public="1" set="method"><f a="x">
	<c path="String"/>
	<x path="Int"/>
</f></start></overloads>
		</start>
		<end public="1" set="method">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{i:0}</e></m></meta>
			<overloads><end public="1" set="method"><f a="x">
	<c path="String"/>
	<x path="Int"/>
</f></end></overloads>
		</end>
		<span public="1" set="method"><f a="?i">
	<x path="Int"/>
	<c path="python.Tuple2">
		<x path="Int"/>
		<x path="Int"/>
	</c>
</f></span>
		<groupById public="1" get="inline" set="null" line="68"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></groupById>
		<startById public="1" get="inline" set="null" line="72"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></startById>
		<endById public="1" get="inline" set="null" line="76"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></endById>
	</class>
	<class path="python.lib._Re.RegexHelper" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" private="1" module="python.lib.Re"><findallDynamic public="1" set="method" line="83" static="1"><f a="r:string:?pos:?endpos">
	<c path="python.lib.Regex"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></findallDynamic></class>
	<class path="python.lib.Regex" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Re.hx" module="python.lib.Re" extern="1">
		<search public="1" set="method">
			<f a="string:?pos:?endpos" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</search>
		<match public="1" set="method">
			<f a="string:?pos:?endpos" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="Null"><c path="python.lib.MatchObject"/></t>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</match>
		<split public="1" set="method">
			<f a="string:?maxsplit" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{maxsplit:0}</e></m></meta>
		</split>
		<findallString public="1" get="inline" set="null" line="105"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="String"/></c>
</f></findallString>
		<findallDynamic public="1" get="inline" set="null" line="111"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></findallDynamic>
		<findallTuple public="1" get="inline" set="null" line="116"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="python.Tuple"><c path="String"/></c></c>
</f></findallTuple>
		<findallArray public="1" get="inline" set="null" line="121"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
</f></findallArray>
		<finditer public="1" set="method"><f a="string:?pos:?endpos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="python.NativeIterator"><c path="python.lib.MatchObject"/></x>
</f></finditer>
		<sub public="1" set="method">
			<f a="repl:string:?count" v="::0">
				<t path="python.lib.Repl"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{count:0}</e></m></meta>
		</sub>
		<subn public="1" set="method">
			<f a="repl:string:?count" v="::0">
				<t path="python.lib.Repl"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{count:0}</e></m></meta>
		</subn>
		<flags public="1" set="null"><x path="Int"/></flags>
		<groups public="1" set="null"><x path="Int"/></groups>
		<groupindex public="1" set="null"><c path="python.Dict">
	<c path="String"/>
	<x path="Int"/>
</c></groupindex>
		<pattern public="1" set="null"><c path="String"/></pattern>
	</class>
	<typedef path="python.lib._Select.Selectable" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Select.hx" private="1" module="python.lib.Select"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<a><fileno set="method"><f a=""><x path="Int"/></f></fileno></a>
</x></typedef>
	<class path="python.lib.Select" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Select.hx" extern="1">
		<select public="1" params="T" set="method" static="1"><f a="rlist:wlist:xlist:?timeout">
	<c path="Array"><c path="select.T"/></c>
	<c path="Array"><c path="select.T"/></c>
	<c path="Array"><c path="select.T"/></c>
	<x path="Float"/>
	<c path="python.Tuple3">
		<c path="Array"><c path="select.T"/></c>
		<c path="Array"><c path="select.T"/></c>
		<c path="Array"><c path="select.T"/></c>
	</c>
</f></select>
		<meta><m n=":pythonImport"><e>"select"</e></m></meta>
	</class>
	<class path="python.lib.Shutil" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Shutil.hx" extern="1">
		<rmtree public="1" set="method" static="1">
			<f a="path:?ignore_errors:?onerror" v=":false:">
				<c path="String"/>
				<x path="Bool"/>
				<f a="">
					<c path="python.BaseException"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ignore_errors:false}</e></m></meta>
		</rmtree>
		<copyfile public="1" set="method" static="1"><f a="src:dst">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></copyfile>
		<copy public="1" set="method" static="1"><f a="src:dst">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></copy>
		<copy2 public="1" set="method" static="1"><f a="src:dst">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></copy2>
		<meta><m n=":pythonImport"><e>"shutil"</e></m></meta>
	</class>
	<class path="python.lib.StartupInfo" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Subprocess.hx" module="python.lib.Subprocess" extern="1">
		<dwFlags public="1"><x path="Int"/></dwFlags>
		<wShowWindow public="1"><x path="Int"/></wShowWindow>
	</class>
	<class path="python.lib.Subprocess" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Subprocess.hx" extern="1">
		<STARTUPINFO public="1" set="method" static="1"><f a=""><c path="python.lib.StartupInfo"/></f></STARTUPINFO>
		<STD_INPUT_HANDLE public="1" static="1"><x path="Int"/></STD_INPUT_HANDLE>
		<STD_OUTPUT_HANDLE public="1" static="1"><x path="Int"/></STD_OUTPUT_HANDLE>
		<STD_ERROR_HANDLE public="1" static="1"><x path="Int"/></STD_ERROR_HANDLE>
		<SW_HIDE public="1" static="1"><x path="Int"/></SW_HIDE>
		<STARTF_USESTDHANDLES public="1" static="1"><x path="Int"/></STARTF_USESTDHANDLES>
		<STARTF_USESHOWWINDOW public="1" static="1"><x path="Int"/></STARTF_USESHOWWINDOW>
		<CREATE_NEW_CONSOLE public="1" static="1"><x path="Int"/></CREATE_NEW_CONSOLE>
		<CREATE_NEW_PROCESS_GROUP public="1" static="1"><x path="Int"/></CREATE_NEW_PROCESS_GROUP>
		<PIPE public="1" static="1"><x path="Int"/></PIPE>
		<STDOUT public="1" static="1"><x path="Int"/></STDOUT>
		<call public="1" set="method" static="1"><f a="args">
	<c path="Array"><c path="String"/></c>
	<x path="Int"/>
</f></call>
		<meta><m n=":pythonImport"><e>"subprocess"</e></m></meta>
	</class>
	<class path="python.lib.TB" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Sys.hx" module="python.lib.Sys" extern="1"/>
	<class path="python.lib.Frame" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Sys.hx" module="python.lib.Sys" extern="1"/>
	<class path="python.lib.Sys" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Sys.hx" extern="1">
		<argv public="1" set="null" static="1"><c path="Array"><c path="String"/></c></argv>
		<exit public="1" set="method" static="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></exit>
		<getfilesystemencoding public="1" set="method" static="1"><f a=""><c path="String"/></f></getfilesystemencoding>
		<version public="1" static="1"><c path="String"/></version>
		<platform public="1" static="1"><c path="String"/></platform>
		<stdout public="1" set="null" static="1"><c path="python.lib.io.TextIOBase"/></stdout>
		<stdin public="1" set="null" static="1"><c path="python.lib.io.TextIOBase"/></stdin>
		<stderr public="1" set="null" static="1"><c path="python.lib.io.TextIOBase"/></stderr>
		<getsizeof public="1" set="method" static="1"><f a="t">
	<d/>
	<x path="Int"/>
</f></getsizeof>
		<maxsize public="1" static="1"><x path="Int"/></maxsize>
		<exc_info public="1" params="T" set="method" static="1"><f a=""><c path="python.Tuple3">
	<x path="Class"><c path="exc_info.T"/></x>
	<c path="exc_info.T"/>
	<c path="python.lib.TB"/>
</c></f></exc_info>
		<meta><m n=":pythonImport"><e>"sys"</e></m></meta>
	</class>
	<class path="python.lib.Tempfile" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Tempfile.hx" extern="1">
		<gettempdir public="1" set="method" static="1"><f a=""><c path="String"/></f></gettempdir>
		<meta><m n=":pythonImport"><e>"tempfile"</e></m></meta>
	</class>
	<abstract path="python.lib.TermiosSettings" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Termios.hx" module="python.lib.Termios">
		<this><d/></this>
		<impl><class path="python.lib._Termios.TermiosSettings_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Termios.hx" private="1" module="python.lib.Termios" extern="1"/></impl>
	</abstract>
	<class path="python.lib._Termios.TermiosSettings_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Termios.hx" private="1" module="python.lib.Termios" extern="1"/>
	<class path="python.lib.Termios" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Termios.hx" extern="1">
		<TCSADRAIN public="1" static="1"><x path="Int"/></TCSADRAIN>
		<ECHO public="1" static="1"><x path="Int"/></ECHO>
		<tcgetattr public="1" set="method" static="1"><f a="fileNo">
	<x path="Int"/>
	<x path="python.lib.TermiosSettings"/>
</f></tcgetattr>
		<tcsetattr public="1" set="method" static="1"><f a="fileNo:when:settings">
	<x path="Int"/>
	<x path="Int"/>
	<x path="python.lib.TermiosSettings"/>
	<x path="Void"/>
</f></tcsetattr>
		<meta><m n=":pythonImport">
	<e>"termios"</e>
	<e>ignoreError=true</e>
</m></meta>
	</class>
	<typedef path="python.lib._ThreadLowLevel.TODO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/ThreadLowLevel.hx" private="1" module="python.lib.ThreadLowLevel"><d/></typedef>
	<class path="python.lib.ThreadLowLevel" params="" file="C:\HaxeToolkit\haxe\std/python/lib/ThreadLowLevel.hx" extern="1">
		<start_new_thread public="1" set="method" static="1"><f a="f:args">
	<f a=""><x path="Void"/></f>
	<c path="python.Tuple"><d/></c>
	<t path="python.lib._ThreadLowLevel.TODO"/>
</f></start_new_thread>
		<meta><m n=":pythonImport"><e>"_thread"</e></m></meta>
	</class>
	<class path="python.lib.Time" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Time.hx" extern="1">
		<time public="1" set="method" static="1"><f a=""><x path="Float"/></f></time>
		<clock public="1" set="method" static="1"><f a=""><x path="Float"/></f></clock>
		<sleep public="1" set="method" static="1"><f a="t">
	<x path="Float"/>
	<x path="Void"/>
</f></sleep>
		<meta><m n=":pythonImport"><e>"time"</e></m></meta>
	</class>
	<class path="python.lib.Traceback" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Traceback.hx" extern="1">
		<extract_stack public="1" set="method" static="1"><f a="?f:?limit">
	<c path="python.lib.Frame"/>
	<x path="Int"/>
	<c path="Array"><t path="python.lib._Traceback.StackItem"/></c>
</f></extract_stack>
		<extract_tb public="1" set="method" static="1"><f a="tb:?limit">
	<c path="python.lib.TB"/>
	<x path="Int"/>
	<c path="Array"><t path="python.lib._Traceback.StackItem"/></c>
</f></extract_tb>
		<meta><m n=":pythonImport"><e>"traceback"</e></m></meta>
	</class>
	<typedef path="python.lib._Traceback.StackItem" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Traceback.hx" private="1" module="python.lib.Traceback"><c path="python.Tuple4">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</c></typedef>
	<class path="python.lib.Tty" params="" file="C:\HaxeToolkit\haxe\std/python/lib/Tty.hx" extern="1">
		<setraw public="1" set="method" static="1"><f a="fileNo">
	<x path="Int"/>
	<x path="Void"/>
</f></setraw>
		<meta><m n=":pythonImport">
	<e>"tty"</e>
	<e>ignoreError=true</e>
</m></meta>
	</class>
	<class path="python.lib.codecs.ICodec" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/Codec.hx" module="python.lib.codecs.Codec" extern="1" interface="1">
		<encode public="1" set="method">
			<f a="input:?errors" v=":&quot;strict&quot;">
				<d/>
				<c path="String"/>
				<c path="python.Tuple2">
					<c path="String"/>
					<x path="Int"/>
				</c>
			</f>
			<meta><m n=":value"><e>{errors:"strict"}</e></m></meta>
		</encode>
		<decode public="1" set="method">
			<f a="input:?errors" v=":&quot;strict&quot;">
				<d/>
				<c path="String"/>
				<c path="python.Tuple2">
					<c path="python.Bytes"/>
					<x path="Int"/>
				</c>
			</f>
			<meta><m n=":value"><e>{errors:"strict"}</e></m></meta>
		</decode>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.codecs.Codec" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/Codec.hx" extern="1">
		<encode public="1" set="method">
			<f a="input:?errors" v=":&quot;strict&quot;">
				<d/>
				<c path="String"/>
				<c path="python.Tuple2">
					<c path="String"/>
					<x path="Int"/>
				</c>
			</f>
			<meta><m n=":value"><e>{errors:"strict"}</e></m></meta>
		</encode>
		<decode public="1" set="method">
			<f a="input:?errors" v=":&quot;strict&quot;">
				<d/>
				<c path="String"/>
				<c path="python.Tuple2">
					<c path="python.Bytes"/>
					<x path="Int"/>
				</c>
			</f>
			<meta><m n=":value"><e>{errors:"strict"}</e></m></meta>
		</decode>
		<meta><m n=":pythonImport">
	<e>"codecs"</e>
	<e>"Codec"</e>
</m></meta>
	</class>
	<class path="python.lib.codecs.IStreamReader" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/StreamReader.hx" module="python.lib.codecs.StreamReader" extern="1" interface="1">
		<read public="1" set="method"><f a="?size:?chars:?firstline">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></read>
		<readline public="1" set="method">
			<f a="?size:?keepsend" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{keepsend:false}</e></m></meta>
		</readline>
		<readlines public="1" set="method">
			<f a="?sizehint:?keepsend" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{keepsend:false}</e></m></meta>
		</readlines>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.codecs.StreamReader" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/StreamReader.hx" extern="1">
		<extends path="python.lib.codecs.Codec"/>
		<read public="1" set="method"><f a="?size:?chars:?firstline">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></read>
		<readline public="1" set="method">
			<f a="?size:?keepsend" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{keepsend:false}</e></m></meta>
		</readline>
		<readlines public="1" set="method">
			<f a="?sizehint:?keepsend" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{keepsend:false}</e></m></meta>
		</readlines>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<meta><m n=":pythonImport">
	<e>"codecs"</e>
	<e>"StreamReader"</e>
</m></meta>
	</class>
	<class path="python.lib.codecs.IStreamWriter" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/StreamWriter.hx" module="python.lib.codecs.StreamWriter" extern="1" interface="1">
		<write public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></write>
		<writelines public="1" set="method"><f a="list">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></writelines>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.codecs.StreamReaderWriter" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/StreamReaderWriter.hx" extern="1">
		<extends path="python.lib.codecs.StreamReader"/>
		<write public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></write>
		<writelines public="1" set="method"><f a="list">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></writelines>
		<meta><m n=":pythonImport">
	<e>"codecs"</e>
	<e>"StreamReaderWriter"</e>
</m></meta>
	</class>
	<class path="python.lib.codecs.IStreamReaderWriter" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/StreamReaderWriter.hx" module="python.lib.codecs.StreamReaderWriter" extern="1" interface="1"><meta><m n=":remove"/></meta></class>
	<class path="python.lib.codecs.StreamWriter" params="" file="C:\HaxeToolkit\haxe\std/python/lib/codecs/StreamWriter.hx" extern="1">
		<extends path="python.lib.codecs.Codec"/>
		<write public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></write>
		<writelines public="1" set="method"><f a="list">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></writelines>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<meta><m n=":pythonImport">
	<e>"codecs"</e>
	<e>"StreamWriter"</e>
</m></meta>
	</class>
	<class path="python.lib.datetime.Timedelta" params="" file="C:\HaxeToolkit\haxe\std/python/lib/datetime/Timedelta.hx" extern="1">
		<min public="1" static="1"><c path="python.lib.datetime.Timedelta"/></min>
		<max public="1" static="1"><c path="python.lib.datetime.Timedelta"/></max>
		<resolution public="1" static="1"><c path="python.lib.datetime.Timedelta"/></resolution>
		<days public="1"><x path="Int"/></days>
		<seconds public="1"><x path="Int"/></seconds>
		<microseconds public="1"><x path="Int"/></microseconds>
		<total_seconds public="1" set="method"><f a=""><x path="Float"/></f></total_seconds>
		<new public="1" set="method">
			<f a="?days:?seconds:?microseconds:?milliseconds:?minutes:?hours:?weeks" v="0:0:0:0:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{weeks:0,hours:0,minutes:0,milliseconds:0,microseconds:0,seconds:0,days:0}</e></m></meta>
		</new>
		<meta><m n=":pythonImport">
	<e>"datetime"</e>
	<e>"timedelta"</e>
</m></meta>
	</class>
	<class path="python.lib.io.BlockingIOError" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BlockingIOError.hx">
		<extends path="python.IOError"/>
		<characters_written><x path="Int"/></characters_written>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BlockingIOError"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" module="python.lib.io.IOBase" extern="1" interface="1">
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<readline public="1" set="method">
			<f a="?limit" v="-1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{limit:-1}</e></m></meta>
		</readline>
		<readable public="1" set="method"><f a=""><x path="Bool"/></f></readable>
		<closed public="1" set="null"><x path="Bool"/></closed>
		<readlines public="1" set="method">
			<f a="?hint" v="-1">
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{hint:-1}</e></m></meta>
		</readlines>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<writable public="1" set="method"><f a=""><x path="Bool"/></f></writable>
		<seekable public="1" set="method"><f a=""><x path="Bool"/></f></seekable>
		<fileno public="1" set="method"><f a=""><x path="Int"/></f></fileno>
		<seek public="1" set="method"><f a="offset:whence">
	<x path="Int"/>
	<x path="python.lib.io.SeekSet"/>
	<x path="Int"/>
</f></seek>
		<truncate public="1" set="method"><f a="size">
	<x path="Int"/>
	<x path="Int"/>
</f></truncate>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.IOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" extern="1">
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<readline public="1" set="method">
			<f a="?limit" v="-1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{limit:-1}</e></m></meta>
		</readline>
		<readable public="1" set="method"><f a=""><x path="Bool"/></f></readable>
		<closed public="1" set="null"><x path="Bool"/></closed>
		<readlines public="1" set="method">
			<f a="?hint" v="-1">
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":value"><e>{hint:-1}</e></m></meta>
		</readlines>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<writable public="1" set="method"><f a=""><x path="Bool"/></f></writable>
		<seekable public="1" set="method"><f a=""><x path="Bool"/></f></seekable>
		<fileno public="1" set="method"><f a=""><x path="Int"/></f></fileno>
		<seek public="1" set="method"><f a="offset:whence">
	<x path="Int"/>
	<x path="python.lib.io.SeekSet"/>
	<x path="Int"/>
</f></seek>
		<truncate public="1" set="method"><f a="size">
	<x path="Int"/>
	<x path="Int"/>
</f></truncate>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"IOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IBufferedIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedIOBase.hx" module="python.lib.io.BufferedIOBase" extern="1" interface="1">
		<raw public="1"><c path="python.lib.io.RawIOBase"/></raw>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></readinto>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.RawIOBase"/></f></detach>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{n:-1}</e></m></meta>
		</read>
		<read1 public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{n:-1}</e></m></meta>
		</read1>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.BufferedIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedIOBase.hx" extern="1">
		<extends path="python.lib.io.IOBase"/>
		<raw public="1"><c path="python.lib.io.RawIOBase"/></raw>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<x path="Int"/>
</f></readinto>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.RawIOBase"/></f></detach>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{n:-1}</e></m></meta>
		</read>
		<read1 public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{n:-1}</e></m></meta>
		</read1>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BufferedIOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.BufferedRWPair" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedRWPair.hx" extern="1">
		<extends path="python.lib.io.BufferedIOBase"/>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BufferedRWPair"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IBufferedReader" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedReader.hx" module="python.lib.io.BufferedReader" extern="1" interface="1">
		<peek public="1" set="method"><f a="?n">
	<x path="Int"/>
	<t path="Null"><c path="python.Bytes"/></t>
</f></peek>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.BufferedReader" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedReader.hx" extern="1">
		<extends path="python.lib.io.BufferedIOBase"/>
		<peek public="1" set="method"><f a="?n">
	<x path="Int"/>
	<t path="Null"><c path="python.Bytes"/></t>
</f></peek>
		<new public="1" set="method"><f a="raw">
	<c path="python.lib.io.RawIOBase"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BufferedReader"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IBufferedWriter" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedWriter.hx" module="python.lib.io.BufferedWriter" extern="1" interface="1">
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.BufferedRandom" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedRandom.hx" extern="1">
		<extends path="python.lib.io.BufferedReader"/>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BufferedRandom"</e>
</m></meta>
	</class>
	<class path="python.lib.io.BufferedWriter" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BufferedWriter.hx" extern="1">
		<extends path="python.lib.io.BufferedIOBase"/>
		<new public="1" set="method"><f a="raw">
	<c path="python.lib.io.RawIOBase"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BufferedWriter"</e>
</m></meta>
	</class>
	<class path="python.lib.io.BytesIO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/BytesIO.hx" extern="1">
		<extends path="python.lib.io.BufferedIOBase"/>
		<new public="1" set="method"><f a="base">
	<c path="python.lib.io.IOBase"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"BytesIO"</e>
</m></meta>
	</class>
	<class path="python.lib.io.IRawIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/RawIOBase.hx" module="python.lib.io.RawIOBase" extern="1" interface="1">
		<readall public="1" set="method"><f a=""><c path="python.Bytes"/></f></readall>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{n:-1}</e></m></meta>
		</read>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></readinto>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.RawIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/RawIOBase.hx" extern="1">
		<extends path="python.lib.io.IOBase"/>
		<readall public="1" set="method"><f a=""><c path="python.Bytes"/></f></readall>
		<read public="1" set="method">
			<f a="?n" v="-1">
				<x path="Int"/>
				<t path="Null"><c path="python.Bytes"/></t>
			</f>
			<meta><m n=":value"><e>{n:-1}</e></m></meta>
		</read>
		<write public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></write>
		<readinto public="1" set="method"><f a="b">
	<c path="python.Bytearray"/>
	<t path="Null"><x path="Int"/></t>
</f></readinto>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"RawIOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.FileIO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/FileIO.hx" extern="1">
		<extends path="python.lib.io.RawIOBase"/>
		<mode public="1">
			<c path="String"/>
			<haxe_doc>The mode as given in the constructor.</haxe_doc>
		</mode>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The file name. This is the file descriptor of the file when no name is given in the constructor.</haxe_doc>
		</name>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"FileIO"</e>
</m></meta>
	</class>
	<abstract path="python.lib.io.SeekSet" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" module="python.lib.io.IOBase">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="python.lib.io._IOBase.SeekSet_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" private="1" module="python.lib.io.IOBase" extern="1">
	<SeekSet public="1" get="inline" set="null" expr="&apos;???&apos;" line="25" static="1">
		<x path="python.lib.io.SeekSet"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SeekSet>
	<SeekCur public="1" get="inline" set="null" expr="&apos;???&apos;" line="26" static="1">
		<x path="python.lib.io.SeekSet"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SeekCur>
	<SeekEnd public="1" get="inline" set="null" expr="&apos;???&apos;" line="27" static="1">
		<x path="python.lib.io.SeekSet"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SeekEnd>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="python.lib.io._IOBase.SeekSet_Impl_" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/IOBase.hx" private="1" module="python.lib.io.IOBase" extern="1">
		<SeekSet public="1" get="inline" set="null" expr="&apos;???&apos;" line="25" static="1">
			<x path="python.lib.io.SeekSet"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SeekSet>
		<SeekCur public="1" get="inline" set="null" expr="&apos;???&apos;" line="26" static="1">
			<x path="python.lib.io.SeekSet"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SeekCur>
		<SeekEnd public="1" get="inline" set="null" expr="&apos;???&apos;" line="27" static="1">
			<x path="python.lib.io.SeekSet"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SeekEnd>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="python.lib.io.ITextIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/TextIOBase.hx" module="python.lib.io.TextIOBase" extern="1" interface="1">
		<encoding public="1"><c path="String"/></encoding>
		<error public="1"><c path="String"/></error>
		<newlines public="1"><t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="python.Tuple"><c path="String"/></c>
</x></t></newlines>
		<buffer public="1"><c path="python.lib.io.BufferedIOBase"/></buffer>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.BufferedIOBase"/></f></detach>
		<write public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></write>
		<read public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></read>
		<meta><m n=":remove"/></meta>
	</class>
	<class path="python.lib.io.TextIOBase" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/TextIOBase.hx" extern="1">
		<extends path="python.lib.io.IOBase"/>
		<encoding public="1"><c path="String"/></encoding>
		<error public="1"><c path="String"/></error>
		<newlines public="1"><t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="python.Tuple"><c path="String"/></c>
</x></t></newlines>
		<detach public="1" set="method"><f a=""><c path="python.lib.io.BufferedIOBase"/></f></detach>
		<write public="1" set="method"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></write>
		<read public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></read>
		<buffer public="1"><c path="python.lib.io.BufferedIOBase"/></buffer>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"TextIOBase"</e>
</m></meta>
	</class>
	<class path="python.lib.io.StringIO" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/StringIO.hx" extern="1">
		<extends path="python.lib.io.TextIOBase"/>
		<getvalue public="1" set="method"><f a=""><c path="String"/></f></getvalue>
		<new public="1" set="method"><f a="?s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"StringIO"</e>
</m></meta>
	</class>
	<typedef path="python.lib.io.TextIOWrapperOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/TextIOWrapper.hx" module="python.lib.io.TextIOWrapper"><a>
	<write_through>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</write_through>
	<newline>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</newline>
	<line_buffering>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</line_buffering>
	<errors>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</errors>
	<encoding>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</encoding>
</a></typedef>
	<class path="python.lib.io.TextIOWrapper" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/TextIOWrapper.hx" extern="1">
		<extends path="python.lib.io.TextIOBase"/>
		<line_buffering public="1"><x path="Bool"/></line_buffering>
		<new public="1" set="method"><f a="buffer:?options">
	<c path="python.lib.io.BufferedIOBase"/>
	<x path="python.KwArgs"><t path="python.lib.io.TextIOWrapperOptions"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"TextIOWrapper"</e>
</m></meta>
	</class>
	<class path="python.lib.io.UnsupportedOperation" params="" file="C:\HaxeToolkit\haxe\std/python/lib/io/UnsupportedOperation.hx">
		<extends path="python.IOError"/>
		<meta><m n=":pythonImport">
	<e>"io"</e>
	<e>"UnsupportedOperation"</e>
</m></meta>
	</class>
	<typedef path="python.lib.json.JSONDecoderOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/json/JSONDecoder.hx" module="python.lib.json.JSONDecoder"><a>
	<strict>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</strict>
	<parse_int>
		<t path="Null"><f a="">
	<c path="String"/>
	<x path="Int"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</parse_int>
	<parse_float>
		<t path="Null"><f a="">
	<c path="String"/>
	<x path="Float"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</parse_float>
	<parse_constant>
		<t path="Null"><f a="">
	<c path="String"/>
	<d/>
</f></t>
		<meta><m n=":optional"/></meta>
	</parse_constant>
	<object_pairs_hook>
		<t path="Null"><f a="">
	<c path="Array"><c path="python.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></c>
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
</f></t>
		<meta><m n=":optional"/></meta>
	</object_pairs_hook>
	<object_hook>
		<t path="Null"><f a="">
	<c path="python.Dict">
		<c path="String"/>
		<d/>
	</c>
	<d/>
</f></t>
		<meta><m n=":optional"/></meta>
	</object_hook>
</a></typedef>
	<class path="python.lib.json.JSONDecoder" params="" file="C:\HaxeToolkit\haxe\std/python/lib/json/JSONDecoder.hx" extern="1">
		<decode public="1" set="method"><f a="o">
	<c path="String"/>
	<d/>
</f></decode>
		<raw_decode public="1" set="method"><f a="o">
	<c path="String"/>
	<c path="python.Tuple2">
		<d/>
		<x path="Int"/>
	</c>
</f></raw_decode>
		<new public="1" set="method"><f a="?options">
	<x path="python.KwArgs"><t path="python.lib.json.JSONDecoderOptions"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"json"</e>
	<e>"JSONDecoder"</e>
</m></meta>
	</class>
	<typedef path="python.lib.json.JSONEncoderOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/json/JSONEncoder.hx" module="python.lib.json.JSONEncoder"><a>
	<sort_keys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</sort_keys>
	<skipkeys>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</skipkeys>
	<separators>
		<t path="Null"><c path="python.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></t>
		<meta><m n=":optional"/></meta>
	</separators>
	<indent>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</indent>
	<ensure_ascii>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ensure_ascii>
	<def>
		<t path="Null"><f a="">
	<d/>
	<c path="String"/>
</f></t>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"default"</e></m>
		</meta>
	</def>
	<check_circular>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</check_circular>
	<allow_nan>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</allow_nan>
</a></typedef>
	<class path="python.lib.json.JSONEncoder" params="" file="C:\HaxeToolkit\haxe\std/python/lib/json/JSONEncoder.hx" extern="1">
		<def public="1" set="method">
			<f a="o">
				<d/>
				<d/>
			</f>
			<meta><m n=":native"><e>"default"</e></m></meta>
		</def>
		<encode public="1" set="method"><f a="o">
	<d/>
	<c path="String"/>
</f></encode>
		<new public="1" set="method"><f a="?options">
	<x path="python.KwArgs"><t path="python.lib.json.JSONEncoderOptions"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":pythonImport">
	<e>"json"</e>
	<e>"JSONEncoder"</e>
</m></meta>
	</class>
	<typedef path="python.lib.net.Address" params="" file="C:\HaxeToolkit\haxe\std/python/lib/net/Address.hx"><c path="python.Tuple2">
	<c path="String"/>
	<x path="Int"/>
</c></typedef>
	<class path="python.lib.net.Socket" params="" file="C:\HaxeToolkit\haxe\std/python/lib/net/Socket.hx" extern="1">
		<AF_APPLETALK public="1" static="1"><x path="Int"/></AF_APPLETALK>
		<AF_ASH public="1" static="1"><x path="Int"/></AF_ASH>
		<AF_ATMPVC public="1" static="1"><x path="Int"/></AF_ATMPVC>
		<AF_ATMSVC public="1" static="1"><x path="Int"/></AF_ATMSVC>
		<AF_AX25 public="1" static="1"><x path="Int"/></AF_AX25>
		<AF_BLUETOOTH public="1" static="1"><x path="Int"/></AF_BLUETOOTH>
		<AF_BRIDGE public="1" static="1"><x path="Int"/></AF_BRIDGE>
		<AF_CAN public="1" static="1"><x path="Int"/></AF_CAN>
		<AF_ECONET public="1" static="1"><x path="Int"/></AF_ECONET>
		<AF_INET public="1" static="1"><x path="Int"/></AF_INET>
		<AF_INET6 public="1" static="1"><x path="Int"/></AF_INET6>
		<AF_IPX public="1" static="1"><x path="Int"/></AF_IPX>
		<AF_IRDA public="1" static="1"><x path="Int"/></AF_IRDA>
		<AF_KEY public="1" static="1"><x path="Int"/></AF_KEY>
		<AF_LLC public="1" static="1"><x path="Int"/></AF_LLC>
		<AF_NETBEUI public="1" static="1"><x path="Int"/></AF_NETBEUI>
		<AF_NETLINK public="1" static="1"><x path="Int"/></AF_NETLINK>
		<AF_NETROM public="1" static="1"><x path="Int"/></AF_NETROM>
		<AF_PACKET public="1" static="1"><x path="Int"/></AF_PACKET>
		<AF_PPPOX public="1" static="1"><x path="Int"/></AF_PPPOX>
		<AF_RDS public="1" static="1"><x path="Int"/></AF_RDS>
		<AF_ROSE public="1" static="1"><x path="Int"/></AF_ROSE>
		<AF_ROUTE public="1" static="1"><x path="Int"/></AF_ROUTE>
		<AF_SECURITY public="1" static="1"><x path="Int"/></AF_SECURITY>
		<AF_SNA public="1" static="1"><x path="Int"/></AF_SNA>
		<AF_TIPC public="1" static="1"><x path="Int"/></AF_TIPC>
		<AF_UNIX public="1" static="1"><x path="Int"/></AF_UNIX>
		<AF_UNSPEC public="1" static="1"><x path="Int"/></AF_UNSPEC>
		<AF_WANPIPE public="1" static="1"><x path="Int"/></AF_WANPIPE>
		<AF_X25 public="1" static="1"><x path="Int"/></AF_X25>
		<AI_ADDRCONFIG public="1" static="1"><x path="Int"/></AI_ADDRCONFIG>
		<AI_ALL public="1" static="1"><x path="Int"/></AI_ALL>
		<AI_CANONNAME public="1" static="1"><x path="Int"/></AI_CANONNAME>
		<AI_NUMERICHOST public="1" static="1"><x path="Int"/></AI_NUMERICHOST>
		<AI_NUMERICSERV public="1" static="1"><x path="Int"/></AI_NUMERICSERV>
		<AI_PASSIVE public="1" static="1"><x path="Int"/></AI_PASSIVE>
		<AI_V4MAPPED public="1" static="1"><x path="Int"/></AI_V4MAPPED>
		<BDADDR_ANY public="1" static="1"><x path="Int"/></BDADDR_ANY>
		<BDADDR_LOCAL public="1" static="1"><x path="Int"/></BDADDR_LOCAL>
		<BTPROTO_HCI public="1" static="1"><x path="Int"/></BTPROTO_HCI>
		<BTPROTO_L2CAP public="1" static="1"><x path="Int"/></BTPROTO_L2CAP>
		<BTPROTO_RFCOMM public="1" static="1"><x path="Int"/></BTPROTO_RFCOMM>
		<BTPROTO_SCO public="1" static="1"><x path="Int"/></BTPROTO_SCO>
		<CAN_EFF_FLAG public="1" static="1"><x path="Int"/></CAN_EFF_FLAG>
		<CAN_EFF_MASK public="1" static="1"><x path="Int"/></CAN_EFF_MASK>
		<CAN_ERR_FLAG public="1" static="1"><x path="Int"/></CAN_ERR_FLAG>
		<CAN_ERR_MASK public="1" static="1"><x path="Int"/></CAN_ERR_MASK>
		<CAN_RAW public="1" static="1"><x path="Int"/></CAN_RAW>
		<CAN_RAW_ERR_FILTER public="1" static="1"><x path="Int"/></CAN_RAW_ERR_FILTER>
		<CAN_RAW_FILTER public="1" static="1"><x path="Int"/></CAN_RAW_FILTER>
		<CAN_RAW_LOOPBACK public="1" static="1"><x path="Int"/></CAN_RAW_LOOPBACK>
		<CAN_RAW_RECV_OWN_MSGS public="1" static="1"><x path="Int"/></CAN_RAW_RECV_OWN_MSGS>
		<CAN_RTR_FLAG public="1" static="1"><x path="Int"/></CAN_RTR_FLAG>
		<CAN_SFF_MASK public="1" static="1"><x path="Int"/></CAN_SFF_MASK>
		<CAPI public="1" static="1"><x path="Int"/></CAPI>
		<CMSG_LEN public="1" static="1"><x path="Int"/></CMSG_LEN>
		<CMSG_SPACE public="1" static="1"><x path="Int"/></CMSG_SPACE>
		<EAGAIN public="1" static="1"><x path="Int"/></EAGAIN>
		<EAI_ADDRFAMILY public="1" static="1"><x path="Int"/></EAI_ADDRFAMILY>
		<EAI_AGAIN public="1" static="1"><x path="Int"/></EAI_AGAIN>
		<EAI_BADFLAGS public="1" static="1"><x path="Int"/></EAI_BADFLAGS>
		<EAI_FAIL public="1" static="1"><x path="Int"/></EAI_FAIL>
		<EAI_FAMILY public="1" static="1"><x path="Int"/></EAI_FAMILY>
		<EAI_MEMORY public="1" static="1"><x path="Int"/></EAI_MEMORY>
		<EAI_NODATA public="1" static="1"><x path="Int"/></EAI_NODATA>
		<EAI_NONAME public="1" static="1"><x path="Int"/></EAI_NONAME>
		<EAI_OVERFLOW public="1" static="1"><x path="Int"/></EAI_OVERFLOW>
		<EAI_SERVICE public="1" static="1"><x path="Int"/></EAI_SERVICE>
		<EAI_SOCKTYPE public="1" static="1"><x path="Int"/></EAI_SOCKTYPE>
		<EAI_SYSTEM public="1" static="1"><x path="Int"/></EAI_SYSTEM>
		<EBADF public="1" static="1"><x path="Int"/></EBADF>
		<EWOULDBLOCK public="1" static="1"><x path="Int"/></EWOULDBLOCK>
		<HCI_DATA_DIR public="1" static="1"><x path="Int"/></HCI_DATA_DIR>
		<HCI_FILTER public="1" static="1"><x path="Int"/></HCI_FILTER>
		<HCI_TIME_STAMP public="1" static="1"><x path="Int"/></HCI_TIME_STAMP>
		<INADDR_ALLHOSTS_GROUP public="1" static="1"><x path="Int"/></INADDR_ALLHOSTS_GROUP>
		<INADDR_ANY public="1" static="1"><x path="Int"/></INADDR_ANY>
		<INADDR_BROADCAST public="1" static="1"><x path="Int"/></INADDR_BROADCAST>
		<INADDR_LOOPBACK public="1" static="1"><x path="Int"/></INADDR_LOOPBACK>
		<INADDR_MAX_LOCAL_GROUP public="1" static="1"><x path="Int"/></INADDR_MAX_LOCAL_GROUP>
		<INADDR_NONE public="1" static="1"><x path="Int"/></INADDR_NONE>
		<INADDR_UNSPEC_GROUP public="1" static="1"><x path="Int"/></INADDR_UNSPEC_GROUP>
		<IPPORT_RESERVED public="1" static="1"><x path="Int"/></IPPORT_RESERVED>
		<IPPORT_USERRESERVED public="1" static="1"><x path="Int"/></IPPORT_USERRESERVED>
		<IPPROTO_AH public="1" static="1"><x path="Int"/></IPPROTO_AH>
		<IPPROTO_DSTOPTS public="1" static="1"><x path="Int"/></IPPROTO_DSTOPTS>
		<IPPROTO_EGP public="1" static="1"><x path="Int"/></IPPROTO_EGP>
		<IPPROTO_ESP public="1" static="1"><x path="Int"/></IPPROTO_ESP>
		<IPPROTO_FRAGMENT public="1" static="1"><x path="Int"/></IPPROTO_FRAGMENT>
		<IPPROTO_GRE public="1" static="1"><x path="Int"/></IPPROTO_GRE>
		<IPPROTO_HOPOPTS public="1" static="1"><x path="Int"/></IPPROTO_HOPOPTS>
		<IPPROTO_ICMP public="1" static="1"><x path="Int"/></IPPROTO_ICMP>
		<IPPROTO_ICMPV6 public="1" static="1"><x path="Int"/></IPPROTO_ICMPV6>
		<IPPROTO_IDP public="1" static="1"><x path="Int"/></IPPROTO_IDP>
		<IPPROTO_IGMP public="1" static="1"><x path="Int"/></IPPROTO_IGMP>
		<IPPROTO_IP public="1" static="1"><x path="Int"/></IPPROTO_IP>
		<IPPROTO_IPIP public="1" static="1"><x path="Int"/></IPPROTO_IPIP>
		<IPPROTO_IPV6 public="1" static="1"><x path="Int"/></IPPROTO_IPV6>
		<IPPROTO_NONE public="1" static="1"><x path="Int"/></IPPROTO_NONE>
		<IPPROTO_PIM public="1" static="1"><x path="Int"/></IPPROTO_PIM>
		<IPPROTO_PUP public="1" static="1"><x path="Int"/></IPPROTO_PUP>
		<IPPROTO_RAW public="1" static="1"><x path="Int"/></IPPROTO_RAW>
		<IPPROTO_ROUTING public="1" static="1"><x path="Int"/></IPPROTO_ROUTING>
		<IPPROTO_RSVP public="1" static="1"><x path="Int"/></IPPROTO_RSVP>
		<IPPROTO_SCTP public="1" static="1"><x path="Int"/></IPPROTO_SCTP>
		<IPPROTO_TCP public="1" static="1"><x path="Int"/></IPPROTO_TCP>
		<IPPROTO_TP public="1" static="1"><x path="Int"/></IPPROTO_TP>
		<IPPROTO_UDP public="1" static="1"><x path="Int"/></IPPROTO_UDP>
		<IPV6_CHECKSUM public="1" static="1"><x path="Int"/></IPV6_CHECKSUM>
		<IPV6_DSTOPTS public="1" static="1"><x path="Int"/></IPV6_DSTOPTS>
		<IPV6_HOPLIMIT public="1" static="1"><x path="Int"/></IPV6_HOPLIMIT>
		<IPV6_HOPOPTS public="1" static="1"><x path="Int"/></IPV6_HOPOPTS>
		<IPV6_JOIN_GROUP public="1" static="1"><x path="Int"/></IPV6_JOIN_GROUP>
		<IPV6_LEAVE_GROUP public="1" static="1"><x path="Int"/></IPV6_LEAVE_GROUP>
		<IPV6_MULTICAST_HOPS public="1" static="1"><x path="Int"/></IPV6_MULTICAST_HOPS>
		<IPV6_MULTICAST_IF public="1" static="1"><x path="Int"/></IPV6_MULTICAST_IF>
		<IPV6_MULTICAST_LOOP public="1" static="1"><x path="Int"/></IPV6_MULTICAST_LOOP>
		<IPV6_NEXTHOP public="1" static="1"><x path="Int"/></IPV6_NEXTHOP>
		<IPV6_PKTINFO public="1" static="1"><x path="Int"/></IPV6_PKTINFO>
		<IPV6_RECVDSTOPTS public="1" static="1"><x path="Int"/></IPV6_RECVDSTOPTS>
		<IPV6_RECVHOPLIMIT public="1" static="1"><x path="Int"/></IPV6_RECVHOPLIMIT>
		<IPV6_RECVHOPOPTS public="1" static="1"><x path="Int"/></IPV6_RECVHOPOPTS>
		<IPV6_RECVPKTINFO public="1" static="1"><x path="Int"/></IPV6_RECVPKTINFO>
		<IPV6_RECVRTHDR public="1" static="1"><x path="Int"/></IPV6_RECVRTHDR>
		<IPV6_RECVTCLASS public="1" static="1"><x path="Int"/></IPV6_RECVTCLASS>
		<IPV6_RTHDR public="1" static="1"><x path="Int"/></IPV6_RTHDR>
		<IPV6_RTHDRDSTOPTS public="1" static="1"><x path="Int"/></IPV6_RTHDRDSTOPTS>
		<IPV6_RTHDR_TYPE_0 public="1" static="1"><x path="Int"/></IPV6_RTHDR_TYPE_0>
		<IPV6_TCLASS public="1" static="1"><x path="Int"/></IPV6_TCLASS>
		<IPV6_UNICAST_HOPS public="1" static="1"><x path="Int"/></IPV6_UNICAST_HOPS>
		<IPV6_V6ONLY public="1" static="1"><x path="Int"/></IPV6_V6ONLY>
		<IP_ADD_MEMBERSHIP public="1" static="1"><x path="Int"/></IP_ADD_MEMBERSHIP>
		<IP_DEFAULT_MULTICAST_LOOP public="1" static="1"><x path="Int"/></IP_DEFAULT_MULTICAST_LOOP>
		<IP_DEFAULT_MULTICAST_TTL public="1" static="1"><x path="Int"/></IP_DEFAULT_MULTICAST_TTL>
		<IP_DROP_MEMBERSHIP public="1" static="1"><x path="Int"/></IP_DROP_MEMBERSHIP>
		<IP_HDRINCL public="1" static="1"><x path="Int"/></IP_HDRINCL>
		<IP_MAX_MEMBERSHIPS public="1" static="1"><x path="Int"/></IP_MAX_MEMBERSHIPS>
		<IP_MULTICAST_IF public="1" static="1"><x path="Int"/></IP_MULTICAST_IF>
		<IP_MULTICAST_LOOP public="1" static="1"><x path="Int"/></IP_MULTICAST_LOOP>
		<IP_MULTICAST_TTL public="1" static="1"><x path="Int"/></IP_MULTICAST_TTL>
		<IP_OPTIONS public="1" static="1"><x path="Int"/></IP_OPTIONS>
		<IP_RECVOPTS public="1" static="1"><x path="Int"/></IP_RECVOPTS>
		<IP_RECVRETOPTS public="1" static="1"><x path="Int"/></IP_RECVRETOPTS>
		<IP_RETOPTS public="1" static="1"><x path="Int"/></IP_RETOPTS>
		<IP_TOS public="1" static="1"><x path="Int"/></IP_TOS>
		<IP_TRANSPARENT public="1" static="1"><x path="Int"/></IP_TRANSPARENT>
		<IP_TTL public="1" static="1"><x path="Int"/></IP_TTL>
		<MSG_CMSG_CLOEXEC public="1" static="1"><x path="Int"/></MSG_CMSG_CLOEXEC>
		<MSG_CONFIRM public="1" static="1"><x path="Int"/></MSG_CONFIRM>
		<MSG_CTRUNC public="1" static="1"><x path="Int"/></MSG_CTRUNC>
		<MSG_DONTROUTE public="1" static="1"><x path="Int"/></MSG_DONTROUTE>
		<MSG_DONTWAIT public="1" static="1"><x path="Int"/></MSG_DONTWAIT>
		<MSG_EOR public="1" static="1"><x path="Int"/></MSG_EOR>
		<MSG_ERRQUEUE public="1" static="1"><x path="Int"/></MSG_ERRQUEUE>
		<MSG_MORE public="1" static="1"><x path="Int"/></MSG_MORE>
		<MSG_NOSIGNAL public="1" static="1"><x path="Int"/></MSG_NOSIGNAL>
		<MSG_OOB public="1" static="1"><x path="Int"/></MSG_OOB>
		<MSG_PEEK public="1" static="1"><x path="Int"/></MSG_PEEK>
		<MSG_TRUNC public="1" static="1"><x path="Int"/></MSG_TRUNC>
		<MSG_WAITALL public="1" static="1"><x path="Int"/></MSG_WAITALL>
		<NETLINK_DNRTMSG public="1" static="1"><x path="Int"/></NETLINK_DNRTMSG>
		<NETLINK_FIREWALL public="1" static="1"><x path="Int"/></NETLINK_FIREWALL>
		<NETLINK_IP6_FW public="1" static="1"><x path="Int"/></NETLINK_IP6_FW>
		<NETLINK_NFLOG public="1" static="1"><x path="Int"/></NETLINK_NFLOG>
		<NETLINK_ROUTE public="1" static="1"><x path="Int"/></NETLINK_ROUTE>
		<NETLINK_USERSOCK public="1" static="1"><x path="Int"/></NETLINK_USERSOCK>
		<NETLINK_XFRM public="1" static="1"><x path="Int"/></NETLINK_XFRM>
		<NI_DGRAM public="1" static="1"><x path="Int"/></NI_DGRAM>
		<NI_MAXHOST public="1" static="1"><x path="Int"/></NI_MAXHOST>
		<NI_MAXSERV public="1" static="1"><x path="Int"/></NI_MAXSERV>
		<NI_NAMEREQD public="1" static="1"><x path="Int"/></NI_NAMEREQD>
		<NI_NOFQDN public="1" static="1"><x path="Int"/></NI_NOFQDN>
		<NI_NUMERICHOST public="1" static="1"><x path="Int"/></NI_NUMERICHOST>
		<NI_NUMERICSERV public="1" static="1"><x path="Int"/></NI_NUMERICSERV>
		<PACKET_BROADCAST public="1" static="1"><x path="Int"/></PACKET_BROADCAST>
		<PACKET_FASTROUTE public="1" static="1"><x path="Int"/></PACKET_FASTROUTE>
		<PACKET_HOST public="1" static="1"><x path="Int"/></PACKET_HOST>
		<PACKET_LOOPBACK public="1" static="1"><x path="Int"/></PACKET_LOOPBACK>
		<PACKET_MULTICAST public="1" static="1"><x path="Int"/></PACKET_MULTICAST>
		<PACKET_OTHERHOST public="1" static="1"><x path="Int"/></PACKET_OTHERHOST>
		<PACKET_OUTGOING public="1" static="1"><x path="Int"/></PACKET_OUTGOING>
		<PF_CAN public="1" static="1"><x path="Int"/></PF_CAN>
		<PF_PACKET public="1" static="1"><x path="Int"/></PF_PACKET>
		<PF_RDS public="1" static="1"><x path="Int"/></PF_RDS>
		<SCM_CREDENTIALS public="1" static="1"><x path="Int"/></SCM_CREDENTIALS>
		<SCM_RIGHTS public="1" static="1"><x path="Int"/></SCM_RIGHTS>
		<SHUT_RD public="1" static="1"><x path="Int"/></SHUT_RD>
		<SHUT_RDWR public="1" static="1"><x path="Int"/></SHUT_RDWR>
		<SHUT_WR public="1" static="1"><x path="Int"/></SHUT_WR>
		<SOCK_CLOEXEC public="1" static="1"><x path="Int"/></SOCK_CLOEXEC>
		<SOCK_DGRAM public="1" static="1"><x path="Int"/></SOCK_DGRAM>
		<SOCK_NONBLOCK public="1" static="1"><x path="Int"/></SOCK_NONBLOCK>
		<SOCK_RAW public="1" static="1"><x path="Int"/></SOCK_RAW>
		<SOCK_RDM public="1" static="1"><x path="Int"/></SOCK_RDM>
		<SOCK_SEQPACKET public="1" static="1"><x path="Int"/></SOCK_SEQPACKET>
		<SOCK_STREAM public="1" static="1"><x path="Int"/></SOCK_STREAM>
		<SOL_CAN_BASE public="1" static="1"><x path="Int"/></SOL_CAN_BASE>
		<SOL_CAN_RAW public="1" static="1"><x path="Int"/></SOL_CAN_RAW>
		<SOL_HCI public="1" static="1"><x path="Int"/></SOL_HCI>
		<SOL_IP public="1" static="1"><x path="Int"/></SOL_IP>
		<SOL_SOCKET public="1" static="1"><x path="Int"/></SOL_SOCKET>
		<SOL_TCP public="1" static="1"><x path="Int"/></SOL_TCP>
		<SOL_TIPC public="1" static="1"><x path="Int"/></SOL_TIPC>
		<SOL_UDP public="1" static="1"><x path="Int"/></SOL_UDP>
		<SOMAXCONN public="1" static="1"><x path="Int"/></SOMAXCONN>
		<SO_ACCEPTCONN public="1" static="1"><x path="Int"/></SO_ACCEPTCONN>
		<SO_BINDTODEVICE public="1" static="1"><x path="Int"/></SO_BINDTODEVICE>
		<SO_BROADCAST public="1" static="1"><x path="Int"/></SO_BROADCAST>
		<SO_DEBUG public="1" static="1"><x path="Int"/></SO_DEBUG>
		<SO_DONTROUTE public="1" static="1"><x path="Int"/></SO_DONTROUTE>
		<SO_ERROR public="1" static="1"><x path="Int"/></SO_ERROR>
		<SO_KEEPALIVE public="1" static="1"><x path="Int"/></SO_KEEPALIVE>
		<SO_LINGER public="1" static="1"><x path="Int"/></SO_LINGER>
		<SO_OOBINLINE public="1" static="1"><x path="Int"/></SO_OOBINLINE>
		<SO_PASSCRED public="1" static="1"><x path="Int"/></SO_PASSCRED>
		<SO_PEERCRED public="1" static="1"><x path="Int"/></SO_PEERCRED>
		<SO_RCVBUF public="1" static="1"><x path="Int"/></SO_RCVBUF>
		<SO_RCVLOWAT public="1" static="1"><x path="Int"/></SO_RCVLOWAT>
		<SO_RCVTIMEO public="1" static="1"><x path="Int"/></SO_RCVTIMEO>
		<SO_REUSEADDR public="1" static="1"><x path="Int"/></SO_REUSEADDR>
		<SO_REUSEPORT public="1" static="1"><x path="Int"/></SO_REUSEPORT>
		<SO_SNDBUF public="1" static="1"><x path="Int"/></SO_SNDBUF>
		<SO_SNDLOWAT public="1" static="1"><x path="Int"/></SO_SNDLOWAT>
		<SO_SNDTIMEO public="1" static="1"><x path="Int"/></SO_SNDTIMEO>
		<SO_TYPE public="1" static="1"><x path="Int"/></SO_TYPE>
		<TCP_CORK public="1" static="1"><x path="Int"/></TCP_CORK>
		<TCP_DEFER_ACCEPT public="1" static="1"><x path="Int"/></TCP_DEFER_ACCEPT>
		<TCP_INFO public="1" static="1"><x path="Int"/></TCP_INFO>
		<TCP_KEEPCNT public="1" static="1"><x path="Int"/></TCP_KEEPCNT>
		<TCP_KEEPIDLE public="1" static="1"><x path="Int"/></TCP_KEEPIDLE>
		<TCP_KEEPINTVL public="1" static="1"><x path="Int"/></TCP_KEEPINTVL>
		<TCP_LINGER2 public="1" static="1"><x path="Int"/></TCP_LINGER2>
		<TCP_MAXSEG public="1" static="1"><x path="Int"/></TCP_MAXSEG>
		<TCP_NODELAY public="1" static="1"><x path="Int"/></TCP_NODELAY>
		<TCP_QUICKACK public="1" static="1"><x path="Int"/></TCP_QUICKACK>
		<TCP_SYNCNT public="1" static="1"><x path="Int"/></TCP_SYNCNT>
		<TCP_WINDOW_CLAMP public="1" static="1"><x path="Int"/></TCP_WINDOW_CLAMP>
		<TIPC_ADDR_ID public="1" static="1"><x path="Int"/></TIPC_ADDR_ID>
		<TIPC_ADDR_NAME public="1" static="1"><x path="Int"/></TIPC_ADDR_NAME>
		<TIPC_ADDR_NAMESEQ public="1" static="1"><x path="Int"/></TIPC_ADDR_NAMESEQ>
		<TIPC_CFG_SRV public="1" static="1"><x path="Int"/></TIPC_CFG_SRV>
		<TIPC_CLUSTER_SCOPE public="1" static="1"><x path="Int"/></TIPC_CLUSTER_SCOPE>
		<TIPC_CONN_TIMEOUT public="1" static="1"><x path="Int"/></TIPC_CONN_TIMEOUT>
		<TIPC_CRITICAL_IMPORTANCE public="1" static="1"><x path="Int"/></TIPC_CRITICAL_IMPORTANCE>
		<TIPC_DEST_DROPPABLE public="1" static="1"><x path="Int"/></TIPC_DEST_DROPPABLE>
		<TIPC_HIGH_IMPORTANCE public="1" static="1"><x path="Int"/></TIPC_HIGH_IMPORTANCE>
		<TIPC_IMPORTANCE public="1" static="1"><x path="Int"/></TIPC_IMPORTANCE>
		<TIPC_LOW_IMPORTANCE public="1" static="1"><x path="Int"/></TIPC_LOW_IMPORTANCE>
		<TIPC_MEDIUM_IMPORTANCE public="1" static="1"><x path="Int"/></TIPC_MEDIUM_IMPORTANCE>
		<TIPC_NODE_SCOPE public="1" static="1"><x path="Int"/></TIPC_NODE_SCOPE>
		<TIPC_PUBLISHED public="1" static="1"><x path="Int"/></TIPC_PUBLISHED>
		<TIPC_SRC_DROPPABLE public="1" static="1"><x path="Int"/></TIPC_SRC_DROPPABLE>
		<TIPC_SUBSCR_TIMEOUT public="1" static="1"><x path="Int"/></TIPC_SUBSCR_TIMEOUT>
		<TIPC_SUB_CANCEL public="1" static="1"><x path="Int"/></TIPC_SUB_CANCEL>
		<TIPC_SUB_PORTS public="1" static="1"><x path="Int"/></TIPC_SUB_PORTS>
		<TIPC_SUB_SERVICE public="1" static="1"><x path="Int"/></TIPC_SUB_SERVICE>
		<TIPC_TOP_SRV public="1" static="1"><x path="Int"/></TIPC_TOP_SRV>
		<TIPC_WAIT_FOREVER public="1" static="1"><x path="Int"/></TIPC_WAIT_FOREVER>
		<TIPC_WITHDRAWN public="1" static="1"><x path="Int"/></TIPC_WITHDRAWN>
		<TIPC_ZONE_SCOPE public="1" static="1"><x path="Int"/></TIPC_ZONE_SCOPE>
		<_GLOBAL_DEFAULT_TIMEOUT public="1" static="1"><x path="Int"/></_GLOBAL_DEFAULT_TIMEOUT>
		<send public="1" set="method"><f a="d:flags">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
</f></send>
		<recv public="1" set="method"><f a="n:flags">
	<x path="Int"/>
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
</f></recv>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<connect public="1" set="method">
			<f a="addr">
				<t path="python.lib.net.Address"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't sucessfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use [accept()] to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method">
			<f a="how">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method">
			<f a="address">
				<t path="python.lib.net.Address"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method">
			<f a=""><c path="python.Tuple2">
	<c path="python.lib.net.Socket"/>
	<t path="python.lib.net.Address"/>
</c></f>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<getpeername public="1" set="method">
			<f a=""><t path="python.lib.net.Address"/></f>
			<haxe_doc>Return the informations about the other side of a connected socket.</haxe_doc>
		</getpeername>
		<getsockname public="1" set="method">
			<f a=""><t path="python.lib.net.Address"/></f>
			<haxe_doc>Return the informations about our side of a connected socket.</haxe_doc>
		</getsockname>
		<settimeout public="1" set="method">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</settimeout>
		<waitForRead public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setblocking public="1" set="method">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediatly by throwing a haxe.io.Error.Blocking value.</haxe_doc>
		</setblocking>
		<setsockopt public="1" set="method">
			<f a="family:option:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</setsockopt>
		<fileno public="1" set="method"><f a=""><x path="Int"/></f></fileno>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta><m n=":pythonImport">
	<e>"socket"</e>
	<e>"socket"</e>
</m></meta>
	</class>
	<class path="python.lib.os.Path" params="" file="C:\HaxeToolkit\haxe\std/python/lib/os/Path.hx" extern="1">
		<sep public="1" static="1"><c path="String"/></sep>
		<exists public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<abspath public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></abspath>
		<basename public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></basename>
		<commonprefix public="1" set="method" static="1"><f a="paths">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></commonprefix>
		<lexists public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></lexists>
		<expanduser public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></expanduser>
		<expandvars public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></expandvars>
		<getmtime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Float"/>
</f></getmtime>
		<getatime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Float"/>
</f></getatime>
		<getctime public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Float"/>
</f></getctime>
		<getsize public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Int"/>
</f></getsize>
		<isabs public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isabs>
		<isfile public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isfile>
		<isdir public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isdir>
		<dirname public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></dirname>
		<islink public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></islink>
		<ismount public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></ismount>
		<join public="1" set="method" static="1"><f a="path:paths">
	<c path="String"/>
	<x path="haxe.extern.Rest"><c path="String"/></x>
	<c path="String"/>
</f></join>
		<normpath public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></normpath>
		<realpath public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></realpath>
		<relpath public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></relpath>
		<samefile public="1" set="method" static="1"><f a="path1:path2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></samefile>
		<split public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="python.Tuple2">
		<c path="String"/>
		<c path="String"/>
	</c>
</f></split>
		<splitdrive public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="python.Tuple2">
		<c path="String"/>
		<c path="String"/>
	</c>
</f></splitdrive>
		<splitext public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="python.Tuple2">
		<c path="String"/>
		<c path="String"/>
	</c>
</f></splitext>
		<supports_unicode_filenames public="1" set="method" static="1"><f a=""><x path="Bool"/></f></supports_unicode_filenames>
		<meta><m n=":pythonImport">
	<e>"os"</e>
	<e>"path"</e>
</m></meta>
	</class>
	<typedef path="python.lib.subprocess.PopenOptions" params="" file="C:\HaxeToolkit\haxe\std/python/lib/subprocess/Popen.hx" module="python.lib.subprocess.Popen"><a>
	<universal_newlines>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</universal_newlines>
	<stdout>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</stdout>
	<stdin>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</stdin>
	<stderr>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</stderr>
	<startupinfo>
		<t path="Null"><c path="python.lib.StartupInfo"/></t>
		<meta><m n=":optional"/></meta>
	</startupinfo>
	<shell>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shell>
	<preexec_fn>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</preexec_fn>
	<executable>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</executable>
	<env>
		<t path="Null"><c path="python.Dict">
	<c path="String"/>
	<c path="String"/>
</c></t>
		<meta><m n=":optional"/></meta>
	</env>
	<cwd>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</cwd>
	<creationflags>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</creationflags>
	<close_fds>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</close_fds>
	<bufsize>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</bufsize>
</a></typedef>
	<class path="python.lib.subprocess.Popen" params="" file="C:\HaxeToolkit\haxe\std/python/lib/subprocess/Popen.hx" extern="1">
		<create public="1" get="inline" set="null" line="50" static="1"><f a="args:o">
	<c path="Array"><c path="String"/></c>
	<t path="python.lib.subprocess.PopenOptions"/>
	<c path="python.lib.subprocess.Popen"/>
</f></create>
		<kill public="1" set="method"><f a=""><x path="Void"/></f></kill>
		<wait public="1" set="method"><f a="?timeout">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></wait>
		<poll public="1" set="method"><f a=""><t path="Null"><x path="Int"/></t></f></poll>
		<terminate public="1" set="method"><f a=""><x path="Void"/></f></terminate>
		<stdout public="1"><c path="python.lib.io.FileIO"/></stdout>
		<stderr public="1"><c path="python.lib.io.FileIO"/></stderr>
		<stdin public="1"><c path="python.lib.io.FileIO"/></stdin>
		<returncode public="1"><x path="Int"/></returncode>
		<pid public="1"><x path="Int"/></pid>
		<communicate public="1" set="method">
			<f a="?input:?timeout" v="null:null">
				<c path="python.Bytes"/>
				<x path="Int"/>
				<c path="python.Tuple2">
					<c path="python.Bytes"/>
					<c path="python.Bytes"/>
				</c>
			</f>
			<meta><m n=":value"><e>{timeout:null,input:null}</e></m></meta>
		</communicate>
		<new public="1" set="method">
			<f a="args:?bufsize:?executable:?stdin:?stdout:?stderr:?preexec_fn:?close_fds:?shell:?cwd:?env:?universal_newlines:?startupinfo:?creationflags" v=":0:null:null:null:null:null:false:false:null:null:false:null:0">
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
				<x path="Bool"/>
				<c path="python.lib.StartupInfo"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{creationflags:0,startupinfo:null,universal_newlines:false,env:null,cwd:null,shell:false,close_fds:false,preexec_fn:null,stderr:null,stdout:null,stdin:null,executable:null,bufsize:0}</e></m></meta>
		</new>
		<meta><m n=":pythonImport">
	<e>"subprocess"</e>
	<e>"Popen"</e>
</m></meta>
	</class>
	<class path="python.lib.threading.Thread" params="" file="C:\HaxeToolkit\haxe\std/python/lib/threading/Thread.hx" extern="1"><meta><m n=":pythonImport">
	<e>"threading"</e>
	<e>"Thread"</e>
</m></meta></class>
	<class path="python.lib.urllib.Parse" params="" file="C:\HaxeToolkit\haxe\std/python/lib/urllib/Parse.hx" extern="1">
		<quote public="1" set="method" static="1"><f a="s:?safe">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<unquote public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></unquote>
		<meta><m n=":pythonImport"><e>"urllib.parse"</e></m></meta>
	</class>
	<class path="python.lib.xml.etree.XMLParser" params="" file="C:\HaxeToolkit\haxe\std/python/lib/xml/etree/ElementTree.hx" module="python.lib.xml.etree.ElementTree" extern="1"/>
	<class path="python.lib.xml.etree.Element" params="" file="C:\HaxeToolkit\haxe\std/python/lib/xml/etree/ElementTree.hx" module="python.lib.xml.etree.ElementTree" extern="1">
		<getroot public="1" set="method"><f a=""><c path="python.lib.xml.etree.ElementTree"/></f></getroot>
		<tag public="1"><c path="String"/></tag>
		<attrib public="1"><c path="python.Dict">
	<c path="String"/>
	<c path="String"/>
</c></attrib>
		<text public="1"><t path="Null"><c path="String"/></t></text>
		<get public="1" params="T" set="method">
			<f a="key:?def" v=":null">
				<c path="String"/>
				<c path="get.T"/>
				<c path="get.T"/>
			</f>
			<meta><m n=":value"><e>{def:null}</e></m></meta>
		</get>
		<set public="1" set="method"><f a="key:val">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></set>
		<copy public="1" set="method"><f a=""><c path="python.lib.xml.etree.Element"/></f></copy>
		<keys public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></keys>
		<items public="1" set="method"><f a=""><c path="Array"><c path="python.Tuple2">
	<c path="String"/>
	<c path="String"/>
</c></c></f></items>
		<iter public="1" set="method"><f a="tag">
	<c path="String"/>
	<x path="python.NativeIterable"><c path="python.lib.xml.etree.Element"/></x>
</f></iter>
		<iterfind public="1" set="method">
			<f a="tag:?namespaces" v=":null">
				<c path="String"/>
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
				<x path="python.NativeIterator"><c path="python.lib.xml.etree.Element"/></x>
			</f>
			<meta><m n=":value"><e>{namespaces:null}</e></m></meta>
		</iterfind>
		<find public="1" set="method">
			<f a="match:?namespaces" v=":null">
				<c path="String"/>
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
				<t path="Null"><c path="python.lib.xml.etree.Element"/></t>
			</f>
			<meta><m n=":value"><e>{namespaces:null}</e></m></meta>
		</find>
		<findall public="1" set="method">
			<f a="match:?namespaces" v=":null">
				<c path="String"/>
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
				<c path="Array"><c path="python.lib.xml.etree.Element"/></c>
			</f>
			<meta><m n=":value"><e>{namespaces:null}</e></m></meta>
		</findall>
		<meta><m n=":pythonImport">
	<e>"xml.etree.ElementTree"</e>
	<e>"Element"</e>
</m></meta>
	</class>
	<class path="python.lib.xml.etree.ElementTree" params="" file="C:\HaxeToolkit\haxe\std/python/lib/xml/etree/ElementTree.hx" extern="1">
		<XML public="1" set="method" static="1"><f a="text:?parser">
	<c path="String"/>
	<c path="python.lib.xml.etree.XMLParser"/>
	<c path="python.lib.xml.etree.Element"/>
</f></XML>
		<parse public="1" set="method" static="1"><f a="xml">
	<c path="String"/>
	<c path="python.lib.xml.etree.ElementTree"/>
</f></parse>
		<iter public="1" set="method"><f a="tag">
	<c path="String"/>
	<x path="python.NativeIterable"><c path="python.lib.xml.etree.Element"/></x>
</f></iter>
		<find public="1" set="method">
			<f a="match:?namespaces" v=":null">
				<c path="String"/>
				<c path="python.Dict">
					<c path="String"/>
					<c path="String"/>
				</c>
				<t path="Null"><c path="python.lib.xml.etree.Element"/></t>
			</f>
			<meta><m n=":value"><e>{namespaces:null}</e></m></meta>
		</find>
		<getroot public="1" set="method"><f a=""><c path="python.lib.xml.etree.Element"/></f></getroot>
		<meta><m n=":pythonImport"><e>"xml.etree.ElementTree"</e></m></meta>
	</class>
	<typedef path="sys.FileStat" params="" file="C:\HaxeToolkit\haxe\std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>the user id for the file</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>the size of the file</haxe_doc>
			</size>
			<rdev><x path="Int"/></rdev>
			<nlink><x path="Int"/></nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>the last modification time for the file</haxe_doc>
			</mtime>
			<mode><x path="Int"/></mode>
			<ino><x path="Int"/></ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>the user group id for the file</haxe_doc>
			</gid>
			<dev><x path="Int"/></dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>the creation time for the file</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>the last access time for the file (when enabled by the file system)</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File informations, as given by [sys.FileSystem.stat]</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="30" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` exists.

		If `path` is null, the result is unspecified.</haxe_doc>
		</exists>
		<stat public="1" set="method" line="34" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<haxe_doc>Returns `FileStat` information on the file or directory specified by
		`path`.

		If `path` is null, the result is unspecified.</haxe_doc>
		</stat>
		<rename public="1" set="method" line="51" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.

		If `path` or `newPath` are null, the result is unspecified.</haxe_doc>
		</rename>
		<fullPath public="1" set="method" line="55" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="59" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</absolutePath>
		<isDirectory public="1" set="method" line="64" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is no
		accessible, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="69" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="73" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="77" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="81" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`.

		If `path` does not denote a valid directory, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</readDirectory>
		<haxe_doc>This class allows you to get information about the files and directories.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.db.Connection" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Connection.hx" interface="1">
		<request public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<escape public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<x path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method"><f a=""><x path="Int"/></f></lastInsertId>
		<dbName public="1" set="method"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method"><f a=""><x path="Void"/></f></startTransaction>
		<commit public="1" set="method"><f a=""><x path="Void"/></f></commit>
		<rollback public="1" set="method"><f a=""><x path="Void"/></f></rollback>
	</class>
	<class path="sys.db.Manager" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Manager.hx">
		<cnx public="1" set="accessor" static="1"><c path="sys.db.Connection"/></cnx>
		<lockMode public="1" static="1"><c path="String"/></lockMode>
		<cache_field get="inline" set="null" expr="&quot;__cache__&quot;" line="38" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"__cache__"</e></m></meta>
		</cache_field>
		<object_cache expr="&apos;???&apos;" line="40" static="1">
			<c path="haxe.ds.StringMap"><c path="sys.db.Object"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</object_cache>
		<init_list expr="&apos;???&apos;" line="41" static="1">
			<c path="List"><c path="sys.db.Manager"><d/></c></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</init_list>
		<KEYWORDS expr="&apos;???&apos;" line="43" static="1">
			<c path="haxe.ds.StringMap"><x path="Bool"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</KEYWORDS>
		<set_cnx set="method" line="50" static="1"><f a="c">
	<c path="sys.db.Connection"/>
	<c path="sys.db.Connection"/>
</f></set_cnx>
		<getFieldName set="method" line="128" static="1"><f a="field">
	<t path="sys.db.RecordField"/>
	<c path="String"/>
</f></getFieldName>
		<nullCompare public="1" set="method" line="527" static="1"><f a="a:b:eq">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
</f></nullCompare>
		<initialize public="1" set="method" line="588" static="1"><f a=""><x path="Void"/></f></initialize>
		<cleanup public="1" set="method" line="596" static="1"><f a=""><x path="Void"/></f></cleanup>
		<quoteAny public="1" set="method" line="720" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></quoteAny>
		<quoteList public="1" set="method" line="726" static="1"><f a="v:it">
	<c path="String"/>
	<t path="Iterable"><d/></t>
	<c path="String"/>
</f></quoteList>
		<__depends set="method" line="740" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</__depends>
		<table_infos><t path="sys.db.RecordInfos"/></table_infos>
		<table_name><c path="String"/></table_name>
		<table_keys><c path="Array"><c path="String"/></c></table_keys>
		<class_proto><a><prototype><d/></prototype></a></class_proto>
		<all public="1" set="method" line="77"><f a="?lock">
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></all>
		<get public="1" set="method"><f a="id:?lock">
	<d/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></get>
		<select public="1" set="method"><f a="cond:?options:?lock">
	<d/>
	<d/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></select>
		<search public="1" set="method"><f a="cond:?options:?lock">
	<d/>
	<d/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></search>
		<count public="1" set="method"><f a="cond">
	<d/>
	<x path="Int"/>
</f></count>
		<delete public="1" set="method"><f a="cond:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></delete>
		<dynamicSearch public="1" set="method" line="101"><f a="x:?lock">
	<a/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></dynamicSearch>
		<quote set="method" line="110"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<doUpdateCache set="method" line="116"><f a="x:name:v">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
	<d/>
	<c path="haxe.io.Bytes"/>
</f></doUpdateCache>
		<doInsert set="method" line="138">
			<f a="x">
				<c path="sys.db.Manager.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</doInsert>
		<isBinary get="inline" set="null" line="207"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></isBinary>
		<hasBinaryChanged get="inline" set="null" line="215"><f a="a:b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></hasBinaryChanged>
		<doUpdate set="method" line="219">
			<f a="x">
				<c path="sys.db.Manager.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</doUpdate>
		<getUpdateStatement set="method" line="227"><f a="x">
	<c path="sys.db.Manager.T"/>
	<t path="Null"><c path="String"/></t>
</f></getUpdateStatement>
		<doDelete set="method" line="272"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></doDelete>
		<doLock set="method" line="282">
			<f a="i">
				<c path="sys.db.Manager.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</doLock>
		<objectToString set="method" line="295"><f a="it">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
</f></objectToString>
		<doSerialize set="method" line="318"><f a="field:v">
	<c path="String"/>
	<d/>
	<c path="haxe.io.Bytes"/>
</f></doSerialize>
		<doUnserialize set="method" line="330"><f a="field:b">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<d/>
</f></doUnserialize>
		<normalizeCache set="method" line="346"><f a="x">
	<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
	<x path="Void"/>
</f></normalizeCache>
		<cacheObject set="method" line="390">
			<f a="x:lock">
				<c path="sys.db.Manager.T"/>
				<x path="Bool"/>
				<c path="sys.db.Manager.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</cacheObject>
		<make set="method" line="414"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></make>
		<unmake set="method" line="417"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></unmake>
		<quoteField set="method" line="420"><f a="f">
	<c path="String"/>
	<c path="String"/>
</f></quoteField>
		<addKeys set="method" line="424"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<x path="Void"/>
</f></addKeys>
		<unsafeExecute set="method" line="440"><f a="sql">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></unsafeExecute>
		<unsafeObject public="1" set="method" line="444"><f a="sql:lock">
	<c path="String"/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeObject>
		<unsafeObjects public="1" set="method" line="462"><f a="sql:lock">
	<c path="String"/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></unsafeObjects>
		<unsafeCount public="1" set="method" line="483"><f a="sql">
	<c path="String"/>
	<x path="Int"/>
</f></unsafeCount>
		<unsafeDelete public="1" set="method" line="487"><f a="sql">
	<c path="String"/>
	<x path="Void"/>
</f></unsafeDelete>
		<unsafeGet public="1" set="method" line="491"><f a="id:?lock">
	<d/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeGet>
		<unsafeGetWithKeys public="1" set="method" line="510"><f a="keys:?lock">
	<a/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeGetWithKeys>
		<unsafeGetId public="1" set="method" line="523"><f a="o">
	<c path="sys.db.Manager.T"/>
	<d/>
</f></unsafeGetId>
		<addCondition set="method" line="536"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<x path="Void"/>
</f></addCondition>
		<dbClass public="1" set="method" line="559"><f a=""><x path="Class"><d/></x></f></dbClass>
		<dbInfos public="1" set="method" line="563"><f a=""><t path="sys.db.RecordInfos"/></f></dbInfos>
		<getCnx set="method" line="567"><f a=""><c path="sys.db.Connection"/></f></getCnx>
		<getLockMode set="method" line="571"><f a=""><c path="String"/></f></getLockMode>
		<forceUpdate public="1" set="method" line="581">
			<f a="o:field">
				<c path="sys.db.Manager.T"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the cached value for the given Object field : this will ensure
		that the value is updated when calling .update(). This is necessary if
		you are modifying binary data in-place since the cache will be modified
		as well.</haxe_doc>
		</forceUpdate>
		<initRelation set="method" line="600"><f a="r">
	<t path="sys.db.RecordRelation"/>
	<x path="Void"/>
</f></initRelation>
		<__get set="method" line="639"><f a="x:prop:key:lock">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<c path="sys.db.Manager.T"/>
</f></__get>
		<__set set="method" line="648"><f a="x:prop:key:v">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="sys.db.Manager.T"/>
	<c path="sys.db.Manager.T"/>
</f></__set>
		<makeCacheKey set="method" line="661"><f a="x">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
</f></makeCacheKey>
		<addToCache set="method" line="680"><f a="x">
	<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
	<x path="Void"/>
</f></addToCache>
		<removeFromCache set="method" line="684"><f a="x">
	<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
	<x path="Void"/>
</f></removeFromCache>
		<getFromCacheKey set="method" line="688"><f a="key">
	<c path="String"/>
	<c path="sys.db.Manager.T"/>
</f></getFromCacheKey>
		<getFromCache set="method" line="692">
			<f a="x:lock">
				<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
				<x path="Bool"/>
				<c path="sys.db.Manager.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getFromCache>
		<new public="1" set="method" line="63"><f a="classval">
	<x path="Class"><c path="sys.db.Manager.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>Record Manager : the persistent object database manager. See the tutorial on
	Haxe website to learn how to use Record.</haxe_doc>
		<meta><m n=":build"><e>sys.db.RecordMacros.addRtti()</e></m></meta>
	</class>
	<typedef path="sys.db._Manager.CacheType" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Manager.hx" private="1" module="sys.db.Manager"><d/></typedef>
	<class path="sys.db.Mysql" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Mysql.hx"><connect public="1" set="method" line="26" static="1"><f a="params">
	<a>
		<user><c path="String"/></user>
		<socket>
			<t path="Null"><c path="String"/></t>
			<meta><m n=":optional"/></meta>
		</socket>
		<port>
			<t path="Null"><x path="Int"/></t>
			<meta><m n=":optional"/></meta>
		</port>
		<pass><c path="String"/></pass>
		<host><c path="String"/></host>
		<database><c path="String"/></database>
	</a>
	<c path="sys.db.Connection"/>
</f></connect></class>
	<class path="sys.db.Object" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Object.hx">
		<_lock set="null"><x path="Bool"/></_lock>
		<_manager set="null"><c path="sys.db.Manager"><d/></c></_manager>
		<__cache__>
			<d/>
			<meta><m n=":keep"/></meta>
		</__cache__>
		<__getManager set="method" line="45"><f a=""><c path="sys.db.Manager"><d/></c></f></__getManager>
		<insert public="1" set="method" line="52">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</insert>
		<update public="1" set="method" line="56">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</update>
		<lock public="1" set="method" line="60">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</lock>
		<delete public="1" set="method" line="64">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<isLocked public="1" set="method" line="68"><f a=""><x path="Bool"/></f></isLocked>
		<toString public="1" set="method" line="72">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</toString>
		<new public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<haxe_doc>Record Object : the persistent object base type. See the tutorial on Haxe
	website to learn how to use Record.</haxe_doc>
		<meta>
			<m n=":keepSub"/>
			<m n=":autoBuild"><e>sys.db.RecordMacros.macroBuild()</e></m>
			<m n=":skipFields"/>
		</meta>
	</class>
	<enum path="sys.db.RecordType" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos">
		<DId/>
		<DInt/>
		<DUId/>
		<DUInt/>
		<DBigId/>
		<DBigInt/>
		<DSingle/>
		<DFloat/>
		<DBool/>
		<DString a="n"><x path="Int"/></DString>
		<DDate/>
		<DDateTime/>
		<DTimeStamp/>
		<DTinyText/>
		<DSmallText/>
		<DText/>
		<DSmallBinary/>
		<DLongBinary/>
		<DBinary/>
		<DBytes a="n"><x path="Int"/></DBytes>
		<DEncoded/>
		<DSerialized/>
		<DNekoSerialized/>
		<DFlags a="flags:autoSize">
			<c path="Array"><c path="String"/></c>
			<x path="Bool"/>
		</DFlags>
		<DTinyInt/>
		<DTinyUInt/>
		<DSmallInt/>
		<DSmallUInt/>
		<DMediumInt/>
		<DMediumUInt/>
		<DData/>
		<DEnum a="name"><c path="String"/></DEnum>
		<DInterval/>
		<DNull/>
	</enum>
	<typedef path="sys.db.RecordField" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos"><a>
	<t><e path="sys.db.RecordType"/></t>
	<name><c path="String"/></name>
	<isNull><x path="Bool"/></isNull>
</a></typedef>
	<typedef path="sys.db.RecordRelation" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos"><a>
	<type><c path="String"/></type>
	<prop><c path="String"/></prop>
	<module><c path="String"/></module>
	<lock><x path="Bool"/></lock>
	<key><c path="String"/></key>
	<isNull><x path="Bool"/></isNull>
	<cascade><x path="Bool"/></cascade>
</a></typedef>
	<typedef path="sys.db.RecordInfos" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx"><a>
	<relations><c path="Array"><t path="sys.db.RecordRelation"/></c></relations>
	<name><c path="String"/></name>
	<key><c path="Array"><c path="String"/></c></key>
	<indexes><c path="Array"><a>
	<unique><x path="Bool"/></unique>
	<keys><c path="Array"><c path="String"/></c></keys>
</a></c></indexes>
	<hfields><x path="Map">
	<c path="String"/>
	<t path="sys.db.RecordField"/>
</x></hfields>
	<fields><c path="Array"><t path="sys.db.RecordField"/></c></fields>
</a></typedef>
	<typedef path="sys.db._RecordMacros.SqlFunction" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordMacros.hx" private="1" module="sys.db.RecordMacros"><a>
	<sql><c path="String"/></sql>
	<ret><e path="sys.db.RecordType"/></ret>
	<params><c path="Array"><e path="sys.db.RecordType"/></c></params>
	<name><c path="String"/></name>
</a></typedef>
	<class path="sys.db.RecordMacros" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordMacros.hx">
		<GLOBAL expr="null" line="41" static="1">
			<a>
				<types><c path="haxe.ds.StringMap"><e path="sys.db.RecordType"/></c></types>
				<functions><c path="haxe.ds.StringMap"><t path="sys.db._RecordMacros.SqlFunction"/></c></functions>
				<cache><c path="haxe.ds.StringMap"><t path="sys.db.RecordInfos"/></c></cache>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</GLOBAL>
		<simpleString expr="~/^[A-Za-z0-9 ]*$/" line="42" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[A-Za-z0-9 ]*$/</e></m></meta>
		</simpleString>
		<getInfos public="1" set="method" line="1066" static="1"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="sys.db.RecordMacros"/>
</f></getInfos>
		<isNull><x path="Bool"/></isNull>
		<manager><t path="haxe.macro.Expr"/></manager>
		<inf><t path="sys.db.RecordInfos"/></inf>
		<g><a>
	<types><c path="haxe.ds.StringMap"><e path="sys.db.RecordType"/></c></types>
	<functions><c path="haxe.ds.StringMap"><t path="sys.db._RecordMacros.SqlFunction"/></c></functions>
	<cache><c path="haxe.ds.StringMap"><t path="sys.db.RecordInfos"/></c></cache>
</a></g>
		<initGlobals set="method" line="63"><f a=""><a>
	<types><c path="haxe.ds.StringMap"><e path="sys.db.RecordType"/></c></types>
	<functions><c path="haxe.ds.StringMap"><a>
	<sql><c path="String"/></sql>
	<ret><e path="sys.db.RecordType"/></ret>
	<params><c path="Array"><e path="sys.db.RecordType"/></c></params>
	<name><c path="String"/></name>
</a></c></functions>
	<cache><c path="haxe.ds.StringMap"><t path="sys.db.RecordInfos"/></c></cache>
</a></f></initGlobals>
		<error public="1" set="dynamic" line="89"><f a="msg:pos">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<d/>
</f></error>
		<typeof public="1" set="dynamic" line="98"><f a="e">
	<t path="haxe.macro.Expr"/>
	<e path="haxe.macro.Type"/>
</f></typeof>
		<follow public="1" set="dynamic" line="107"><f a="t:?once">
	<e path="haxe.macro.Type"/>
	<x path="Bool"/>
	<e path="haxe.macro.Type"/>
</f></follow>
		<getManager public="1" set="dynamic" line="116"><f a="t:p">
	<e path="haxe.macro.Type"/>
	<t path="haxe.macro.Position"/>
	<c path="sys.db.RecordMacros"/>
</f></getManager>
		<resolveType public="1" set="dynamic" line="125"><f a="name:?module">
	<c path="String"/>
	<c path="String"/>
	<e path="haxe.macro.Type"/>
</f></resolveType>
		<makeInt set="method" line="144"><f a="t">
	<e path="haxe.macro.Type"/>
	<t path="Null"><x path="Int"/></t>
</f></makeInt>
		<makeRecord set="method" line="155"><f a="t">
	<e path="haxe.macro.Type"/>
	<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
</f></makeRecord>
		<getFlags set="method" line="177"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="Array"><c path="String"/></c>
</f></getFlags>
		<makeType set="method" line="196"><f a="t">
	<e path="haxe.macro.Type"/>
	<e path="sys.db.RecordType"/>
</f></makeType>
		<makeIdent set="method" line="273"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></makeIdent>
		<getRecordInfos set="method" line="284"><f a="c">
	<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
	<t path="sys.db.RecordInfos"/>
</f></getRecordInfos>
		<quoteField set="method" line="466"><f a="f">
	<c path="String"/>
	<c path="String"/>
</f></quoteField>
		<initManager set="method" line="471"><f a="pos">
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></initManager>
		<makeString get="inline" set="null" line="475"><f a="s:pos">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></makeString>
		<makeOp get="inline" set="null" line="479"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></makeOp>
		<sqlAdd get="inline" set="null" line="483"><f a="e1:e2:pos">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></sqlAdd>
		<sqlAddString get="inline" set="null" line="487"><f a="sql:s">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></sqlAddString>
		<sqlQuoteValue set="method" line="491"><f a="v:t">
	<t path="haxe.macro.Expr"/>
	<e path="sys.db.RecordType"/>
	<t path="haxe.macro.Expr"/>
</f></sqlQuoteValue>
		<sqlAddValue get="inline" set="null" line="511"><f a="sql:v:t">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<e path="sys.db.RecordType"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></sqlAddValue>
		<unifyClass set="method" line="515"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Int"/>
</f></unifyClass>
		<tryUnify set="method" line="529"><f a="t:rt">
	<e path="sys.db.RecordType"/>
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></tryUnify>
		<typeStr set="method" line="537"><f a="t">
	<e path="sys.db.RecordType"/>
	<c path="String"/>
</f></typeStr>
		<canStringify set="method" line="541"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></canStringify>
		<convertType set="method" line="548"><f a="t">
	<e path="sys.db.RecordType"/>
	<e path="haxe.macro.ComplexType"/>
</f></convertType>
		<unify set="method" line="566"><f a="t:rt:pos">
	<e path="sys.db.RecordType"/>
	<e path="sys.db.RecordType"/>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></unify>
		<buildCmp set="method" line="571"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildCmp>
		<buildNum set="method" line="580"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildNum>
		<buildInt set="method" line="594"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildInt>
		<buildEq set="method" line="602"><f a="eq:e1:e2:pos">
	<x path="Bool"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildEq>
		<buildDefault set="method" line="672"><f a="cond">
	<t path="haxe.macro.Expr"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><t path="haxe.macro.Expr"/></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildDefault>
		<getField set="method" line="679"><f a="f">
	<a>
		<field><c path="String"/></field>
		<expr><t path="haxe.macro.Expr"/></expr>
	</a>
	<t path="Null"><t path="sys.db.RecordField"/></t>
</f></getField>
		<buildCond set="method" line="702"><f a="cond">
	<t path="haxe.macro.Expr"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildCond>
		<ensureType set="method" line="914"><f a="e:rt">
	<t path="haxe.macro.Expr"/>
	<e path="sys.db.RecordType"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></ensureType>
		<checkKeys set="method" line="918"><f a="econd">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
</f></checkKeys>
		<orderField set="method" line="942"><f a="e">
	<a>
		<pos set="null"><t path="haxe.macro.Position"/></pos>
		<expr set="null"><e path="haxe.macro.ExprDef"/></expr>
	</a>
	<c path="String"/>
</f></orderField>
		<concatStrings set="method" line="961"><f a="e">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
</f></concatStrings>
		<browseStrings set="method" line="974"><f a="inf:e">
	<a>
		<str><c path="String"/></str>
		<e><t path="haxe.macro.Expr"/></e>
	</a>
	<t path="haxe.macro.Expr"/>
	<x path="Void"/>
</f></browseStrings>
		<buildOptions set="method" line="1011"><f a="eopt">
	<t path="haxe.macro.Expr"/>
	<a>
		<orderBy><c path="String"/></orderBy>
		<limit><a>
	<pos><t path="haxe.macro.Expr"/></pos>
	<len><t path="Null"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></t></len>
</a></limit>
		<forceIndex><c path="String"/></forceIndex>
	</a>
</f></buildOptions>
		<new set="method" line="53"><f a="c">
	<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.db.ResultSet" params="" file="C:\HaxeToolkit\haxe\std/sys/db/ResultSet.hx" interface="1">
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_length>
		<get_nfields public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_nfields>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<nfields public="1" get="accessor" set="null"><x path="Int"/></nfields>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<results public="1" set="method"><f a=""><c path="List"><d/></c></f></results>
		<getResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method"><f a=""><t path="Null"><c path="Array"><c path="String"/></c></t></f></getFieldsNames>
	</class>
	<class path="sys.db.Sqlite" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Sqlite.hx"><open public="1" set="method" line="26" static="1"><f a="file">
	<c path="String"/>
	<c path="sys.db.Connection"/>
</f></open></class>
	<class path="sys.db.TableCreate" params="" file="C:\HaxeToolkit\haxe\std/sys/db/TableCreate.hx">
		<autoInc set="method" line="27" static="1"><f a="dbName">
	<c path="String"/>
	<c path="String"/>
</f></autoInc>
		<getTypeSQL public="1" set="method" line="32" static="1"><f a="t:dbName">
	<e path="sys.db.RecordType"/>
	<c path="String"/>
	<c path="String"/>
</f></getTypeSQL>
		<create public="1" set="method" line="65" static="1">
			<f a="manager:?engine">
				<c path="sys.db.Manager"><d/></c>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</create>
		<exists public="1" set="method" line="98" static="1">
			<f a="manager">
				<c path="sys.db.Manager"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</exists>
	</class>
	<class path="sys.db.Transaction" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Transaction.hx">
		<isDeadlock public="1" set="method" line="26" static="1"><f a="e">
	<d/>
	<x path="Bool"/>
</f></isDeadlock>
		<runMainLoop set="method" line="30" static="1"><f a="mainFun:logError:count">
	<f a=""><x path="Void"/></f>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Void"/>
</f></runMainLoop>
		<main public="1" set="method" line="53" static="1"><f a="cnx:mainFun:?logError">
	<c path="sys.db.Connection"/>
	<f a=""><x path="Void"/></f>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></main>
	</class>
	<typedef path="sys.db.SId" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>int with auto increment</haxe_doc>
		<meta><m n=":noPackageRestrict"/></meta>
	</typedef>
	<typedef path="sys.db.SUId" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>int unsigned with auto increment</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBigId" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>big int with auto increment</haxe_doc>
	</typedef>
	<typedef path="sys.db.SInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types"><t path="Null"><x path="Int"/></t></typedef>
	<typedef path="sys.db.SUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types"><t path="Null"><x path="Int"/></t></typedef>
	<typedef path="sys.db.SBigInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types"><t path="Null"><x path="Float"/></t></typedef>
	<typedef path="sys.db.SSingle" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>single precision float</haxe_doc>
	</typedef>
	<typedef path="sys.db.SFloat" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>double precision float</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBool" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Bool"/></t>
		<haxe_doc>use tinyint(1) to distinguish with int</haxe_doc>
	</typedef>
	<typedef path="sys.db.SString" params="Const" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>same as varchar(n)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SDate" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>date only, use SDateTime for date+time</haxe_doc>
	</typedef>
	<typedef path="sys.db.SDateTime" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>mysql DateTime</haxe_doc>
	</typedef>
	<typedef path="sys.db.STimeStamp" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>mysql Timestamp</haxe_doc>
	</typedef>
	<typedef path="sys.db.STinyText" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>TinyText (up to 255 bytes)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallText" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>Text (up to 64KB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SText" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>MediumText (up to 24MB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallBinary" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>Blob type (up to 64KB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SLongBinary" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>LongBlob type (up to 4GB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBinary" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>MediumBlob type (up to 24MB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBytes" params="Const" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>same as binary(n)</haxe_doc>
	</typedef>
	<typedef path="sys.db.STinyInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>one byte signed [-128...127]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>two bytes signed [-32768...32767]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SMediumInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>three bytes signed [-8388608...8388607]</haxe_doc>
	</typedef>
	<typedef path="sys.db.STinyUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>one byte [0...255]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>two bytes [0...65535]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SMediumUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>three bytes [0...16777215]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SNull" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><c path="sys.db.SNull.T"/></t>
		<haxe_doc>specify that this field is nullable</haxe_doc>
	</typedef>
	<typedef path="sys.db.SEncoded" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>specify that the integer use custom encoding</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSerialized" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>haxe Serialized string</haxe_doc>
	</typedef>
	<typedef path="sys.db.SNekoSerialized" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>native neko serialized bytes</haxe_doc>
	</typedef>
	<typedef path="sys.db.SFlags" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="haxe.EnumFlags"><c path="sys.db.SFlags.T"/></x></t>
		<haxe_doc>a set of bitflags of different enum values</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallFlags" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="sys.db.SFlags"><c path="sys.db.SSmallFlags.T"/></t>
		<haxe_doc>same as [SFlags] but will adapt the storage size to the number of flags</haxe_doc>
	</typedef>
	<typedef path="sys.db.SData" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><c path="sys.db.SData.T"/></t>
		<haxe_doc>allow to store any value in serialized form</haxe_doc>
	</typedef>
	<typedef path="sys.db.SEnum" params="E" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><c path="sys.db.SEnum.E"/></t>
		<haxe_doc>allow to store an enum value that does not have parameters as a simple int</haxe_doc>
	</typedef>
	<class path="sys.io.File" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/io/File.hx">
		<getContent public="1" set="method" line="35" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<saveContent public="1" set="method" line="43" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<getBytes public="1" set="method" line="49" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveBytes public="1" set="method" line="57" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" line="63" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta><m n=":value"><e>{binary:true}</e></m></meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" line="71" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{binary:true}</e></m></meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" line="78" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{binary:true}</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<copy public="1" set="method" line="85" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<haxe_doc>API for reading and writing to files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileInput" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<impl><c path="python.io.IFileInput"/></impl>
		<set_bigEndian public="1" set="method" line="40" override="1"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<seek public="1" set="method" line="44"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="47"><f a=""><x path="Int"/></f></tell>
		<eof public="1" set="method" line="50"><f a=""><x path="Bool"/></f></eof>
		<readByte public="1" set="method" line="54" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="58" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="62" override="1"><f a=""><x path="Void"/></f></close>
		<readAll public="1" set="method" line="66" override="1"><f a="?bufsize">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="70" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="74" override="1"><f a="nbytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method" line="78" override="1"><f a="end">
	<x path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method" line="82" override="1"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method" line="86" override="1"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="90" override="1"><f a=""><x path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="94" override="1"><f a=""><x path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="98" override="1"><f a=""><x path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="102" override="1"><f a=""><x path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method" line="106" override="1"><f a=""><x path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method" line="110" override="1"><f a=""><x path="Int"/></f></readUInt24>
		<readInt32 public="1" set="method" line="114" override="1"><f a=""><x path="Int"/></f></readInt32>
		<readString public="1" set="method" line="118" override="1"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<new public="1" set="method" line="36"><f a="impl">
	<c path="python.io.IFileInput"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io.FileOutput" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<impl><c path="python.io.IFileOutput"/></impl>
		<seek public="1" set="method" line="37"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="41"><f a=""><x path="Int"/></f></tell>
		<set_bigEndian public="1" set="method" line="45" override="1"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<writeByte public="1" set="method" line="49" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="53" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="57" override="1"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method" line="61" override="1"><f a=""><x path="Void"/></f></close>
		<write public="1" set="method" line="65" override="1"><f a="s">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="69" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method" line="73" override="1"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="77" override="1"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="81" override="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="85" override="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="89" override="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method" line="93" override="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method" line="97" override="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt24>
		<writeInt32 public="1" set="method" line="101" override="1"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="105" override="1"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></prepare>
		<writeInput public="1" set="method" line="109" override="1"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="113" override="1"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<new public="1" set="method" line="33"><f a="impl">
	<c path="python.io.IFileOutput"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="sys.io.FileSeek" params="" file="C:\HaxeToolkit\haxe\std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="sys.io.Process" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/io/Process.hx">
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<p><c path="python.lib.subprocess.Popen"/></p>
		<getPid public="1" set="method" line="48"><f a=""><x path="Int"/></f></getPid>
		<exitCode public="1" set="method" line="51"><f a=""><x path="Int"/></f></exitCode>
		<close public="1" set="method" line="54"><f a=""><x path="Void"/></f></close>
		<kill public="1" set="method" line="57"><f a=""><x path="Void"/></f></kill>
		<new public="1" set="method" line="39"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net.Address" params="" file="C:\HaxeToolkit\haxe\std/sys/net/Address.hx">
		<host public="1"><x path="Int"/></host>
		<port public="1"><x path="Int"/></port>
		<getHost public="1" set="method" line="35">
			<f a=""><c path="sys.net.Host"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getHost>
		<compare public="1" set="method" line="41"><f a="a">
	<c path="sys.net.Address"/>
	<x path="Int"/>
</f></compare>
		<clone public="1" set="method" line="49"><f a=""><c path="sys.net.Address"/></f></clone>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An address is used to represent a port on a given host ip. It is used by UdpSocket.</haxe_doc>
	</class>
	<class path="sys.net.Host" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/net/Host.hx">
		<localhost public="1" set="method" line="60" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the local computer host name</haxe_doc>
		</localhost>
		<ip public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The actual IP corresponding to the host.</haxe_doc>
		</ip>
		<name>
			<c path="String"/>
			<haxe_doc>Creates a new Host : the name can be an IP in the form "127.0.0.1" or an host name such as "google.com", in which case
		the corresponding IP address is resolved using DNS. An exception occur if the host name could not be found.</haxe_doc>
		</name>
		<toString public="1" set="method" line="46">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the IP representation of the host</haxe_doc>
		</toString>
		<reverse public="1" set="method" line="53">
			<f a=""><c path="String"/></f>
			<haxe_doc>Perform a reverse-DNS query to resolve a host name from an IP.</haxe_doc>
		</reverse>
		<new public="1" set="method" line="39"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A given IP host name.</haxe_doc>
	</class>
	<class path="sys.net._Socket.SocketInput" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Input"/>
		<__s><t path="python.lib.net._Socket.PSocket"/></__s>
		<readByte public="1" set="method" line="41" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="53" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="69" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="37"><f a="s">
	<t path="python.lib.net._Socket.PSocket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net._Socket.SocketOutput" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Output"/>
		<__s><t path="python.lib.net._Socket.PSocket"/></__s>
		<writeByte public="1" set="method" line="84" override="1">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</writeByte>
		<writeBytes public="1" set="method" line="92" override="1">
			<f a="buf:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</writeBytes>
		<close public="1" set="method" line="103" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="80"><f a="s">
	<t path="python.lib.net._Socket.PSocket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net.Socket" params="" file="C:\HaxeToolkit\haxe\std/python/_std/sys/net/Socket.hx">
		<select public="1" set="method" line="260" static="1">
			<f a="read:write:others:?timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<x path="Float"/>
				<a>
					<write><c path="Array"><c path="sys.net.Socket"/></c></write>
					<read><c path="Array"><c path="sys.net.Socket"/></c></read>
					<others><c path="Array"><c path="sys.net.Socket"/></c></others>
				</a>
			</f>
			<haxe_doc>Wait until one of the sockets groups is ready for the given operation :
        [read] contains sockets on which we want to wait for available data to be read,
        [write] contains sockets on which we want to wait until we are allowed to write some data to their output buffers,
        [others] contains sockets on which we want to wait for exceptional conditions.
        [select] will block until one of the condition is met, in which case it will return the sockets for which the condition was true.
        In case a [timeout] (in seconds) is specified, select might wait at worse until the timeout expires.</haxe_doc>
		</select>
		<__s><t path="python.lib.net._Socket.PSocket"/></__s>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
        use [setBlocking(false)] or [setTimeout] to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use [setBlocking(false)] or [setTimeout] to prevent that.</haxe_doc>
		</output>
		<custom public="1">
			<d/>
			<haxe_doc>A custom value that can be associated with the socket. Can be used to retreive your custom infos after a [select].
    *</haxe_doc>
		</custom>
		<__init set="method" line="138"><f a=""><x path="Void"/></f></__init>
		<close public="1" set="method" line="147">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<read public="1" set="method" line="154">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read the whole data available on the socket.</haxe_doc>
		</read>
		<write public="1" set="method" line="161">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.</haxe_doc>
		</write>
		<connect public="1" set="method" line="168">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't sucessfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method" line="177">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use [accept()] to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method" line="184">
			<f a="read:write">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method" line="190">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="199">
			<f a=""><c path="sys.net.Socket"/></f>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="211">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the informations about the other side of a connected socket.</haxe_doc>
		</peer>
		<host public="1" set="method" line="219">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the informations about our side of a connected socket.</haxe_doc>
		</host>
		<setTimeout public="1" set="method" line="227">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</setTimeout>
		<waitForRead public="1" set="method" line="234">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setBlocking public="1" set="method" line="241">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediatly by throwing a haxe.io.Error.Blocking value.</haxe_doc>
		</setBlocking>
		<setFastSend public="1" set="method" line="248">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to immediatly send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</haxe_doc>
		</setFastSend>
		<fileno set="method" line="250">
			<f a=""><x path="Int"/></f>
			<meta><m n=":keep"/></meta>
		</fileno>
		<new public="1" set="method" line="135">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.net.UdpSocket" params="" file="C:\HaxeToolkit\haxe\std/sys/net/UdpSocket.hx">
		<extends path="sys.net.Socket"/>
		<sendTo public="1" set="method" line="37">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Sends data to the specified target host/port address.</haxe_doc>
		</sendTo>
		<readFrom public="1" set="method" line="44">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads data from any incoming address and store the receiver address into the address parameter.</haxe_doc>
		</readFrom>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A UDP socket class</haxe_doc>
	</class>
</haxe>